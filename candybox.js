/**
 *
 * @source: http://candybox2.net/candybox2_uncompressed.js
 *
 * @licstart  The following is the entire license notice for the 
 *  JavaScript code in this page.
 *
 * Copyright (C) 2012 David "aniwey" L.
 *
 *
 * The JavaScript code in this page is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License (GNU GPL) as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.  The code is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
 *
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in this page.
 *
 */

var Algo;
(function (Algo) {
    // Return 0 is the number given is under 0, else return the number given
    function correctIfUnderZero(n) {
        if (n < 0)
            return 0;
        return n;
    }
    Algo.correctIfUnderZero = correctIfUnderZero;

    // Return the maximum value a javascript Number can get before loosing precision
    function getMaximumJavascriptInt() {
        return 9007199254740992;
    }
    Algo.getMaximumJavascriptInt = getMaximumJavascriptInt;

    // Return a Pos object corresponding to a direction
    // x and y values can be between -a and a, but they can't both be 0
    function getRandomNotImmobileDirectionUpToThisSpeed(a) {
        var pos = new Pos();

        // Set x and y
        pos.x = Random.between(-a, a);
        if (pos.x != 0)
            pos.y = Random.between(-a, a);
else {
            if (Random.flipACoin())
                pos.y = Random.between(-a, -1);
else
                pos.y = Random.between(1, a);
        }

        if (Random.flipACoin())
            pos.invert();

        // We return the position
        return pos;
    }
    Algo.getRandomNotImmobileDirectionUpToThisSpeed = getRandomNotImmobileDirectionUpToThisSpeed;

    // Add the html <u> tag around the specified letter in the string given, and return the resulting string
    function makeUnderlinedLetter(s, underlinedLetter) {
        if (underlinedLetter != -1)
            return s.slice(0, underlinedLetter) + "<u>" + s.charAt(underlinedLetter) + "</u>" + s.slice(underlinedLetter + 1, s.length);
else
            return s;
    }
    Algo.makeUnderlinedLetter = makeUnderlinedLetter;

    // Transform a number in a string and add whitespaces every three figures
    function numberToStringButNicely(n) {
        // We store the number as a string in the variable str
        var str = n.toString();

        if (n < getMaximumJavascriptInt()) {
            if (str.length > 3) {
                for (var i = Math.floor(str.length / 3); i > 0; i--) {
                    if (i * 3 != str.length)
                        str = str.addAt(str.length - i * 3, " ");
                }
            }
        }

        // Return str
        return str;
    }
    Algo.numberToStringButNicely = numberToStringButNicely;

    // Create a string from a number and a word added depending on the plurality of the number
    function pluralFormat(n, singular, plural) {
        if (n == 1)
            return n.toString() + singular;
        return n.toString() + plural;
    }
    Algo.pluralFormat = pluralFormat;

    // Create a string from a number and a word added depending on the plurality of the number (and format the number nicely)
    function pluralFormatNicely(n, singular, plural) {
        if (n == 1)
            return numberToStringButNicely(n) + singular;
        return numberToStringButNicely(n) + plural;
    }
    Algo.pluralFormatNicely = pluralFormatNicely;

    // Remove all special characters from a string, only let lower-case letters
    function simplifyString(s) {
        return s.toLowerCase().replace(/[^\w]|_/g, "");
    }
    Algo.simplifyString = simplifyString;

    // Return the biggest number between two numbers
    function takeBiggest(a, b) {
        if (a > b)
            return a;
        return b;
    }
    Algo.takeBiggest = takeBiggest;
})(Algo || (Algo = {}));
var ATreeTicTacToeMinimaxReturnValue = (function () {
    function ATreeTicTacToeMinimaxReturnValue() {
        this.bestPosition = null;
        this.bestScore = null;
    }
    return ATreeTicTacToeMinimaxReturnValue;
})();
var ATreeTicTacToeSign;
(function (ATreeTicTacToeSign) {
    ATreeTicTacToeSign[ATreeTicTacToeSign["NO_SIGN"] = 0] = "NO_SIGN";
    ATreeTicTacToeSign[ATreeTicTacToeSign["X"] = 1] = "X";
    ATreeTicTacToeSign[ATreeTicTacToeSign["O"] = 2] = "O";
})(ATreeTicTacToeSign || (ATreeTicTacToeSign = {}));
var ATreeTicTacToeStep;
(function (ATreeTicTacToeStep) {
    ATreeTicTacToeStep[ATreeTicTacToeStep["PLAYING"] = 0] = "PLAYING";
    ATreeTicTacToeStep[ATreeTicTacToeStep["NOBODY_WINS"] = 1] = "NOBODY_WINS";
    ATreeTicTacToeStep[ATreeTicTacToeStep["YOU_LOSE"] = 2] = "YOU_LOSE";
})(ATreeTicTacToeStep || (ATreeTicTacToeStep = {}));
var Place = (function () {
    // Constructor
    function Place(game) {
        this.game = game;
    }
    // Public methods
    Place.prototype.addBackToButton = function (renderArea, callbackCollection, text, translated, otherClass, y, x) {
        if (typeof y === "undefined") { y = 0; }
        if (typeof x === "undefined") { x = -1; }
        if (x < 0) {
            x = renderArea.getWidth() / 2 - text.length / 2;
        }

        renderArea.addAsciiRealButton(text, x, y, otherClass, translated, true);
        renderArea.addLinkCall("." + otherClass, callbackCollection);
    };

    Place.prototype.addBackToMainMapButton = function (renderArea, otherClass, textName) {
        if (typeof textName === "undefined") { textName = "buttonBackToTheMap"; }
        this.addBackToButton(renderArea, new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), Database.getText(textName), Database.getTranslatedText(textName), otherClass);
    };

    // Public getters
    Place.prototype.getDefaultScroll = function () {
        return 0;
    };

    Place.prototype.getGame = function () {
        return this.game;
    };

    Place.prototype.getGap = function () {
        return 0;
    };

    Place.prototype.getRenderArea = function () {
        return new RenderArea();
    };

    Place.prototype.getScrolling = function () {
        return false;
    };

    Place.prototype.willBeClosed = function () {
    };

    Place.prototype.willBeDisplayed = function () {
    };

    Place.prototype.willStopBeingDisplayed = function () {
    };
    return Place;
})();
var Saving;
(function (Saving) {
    // Saving maps
    var bools = {};
    var numbers = {};
    var strings = {};

    // Can we register?
    Saving.canRegister = true;

    // Special public functions : used to load or the actual save
    function load(game, loadingType, loadingString) {
        switch (loadingType) {
            case MainLoadingType.NONE:
                break;
            case MainLoadingType.LOCAL:
                LocalSaving.load(loadingString);
                break;
            case MainLoadingType.FILE:
                var fileBools = loadingString.match(/bool +[a-zA-Z0-9_]+ *= *[a-zA-Z0-9_]+/g);
                var fileNumbers = loadingString.match(/number +[a-zA-Z0-9_]+ *= *[a-zA-Z0-9_]+/g);
                var fileStrings = loadingString.match(/string +[a-zA-Z0-9_]+ *= *[a-zA-Z0-9_]+/g);

                if (fileBools != null) {
                    for (var i = 0; i < fileBools.length; i++) {
                        Saving.saveBool(fileBools[i].match(/[a-zA-Z0-9_]+=/)[0].replace("=", ""), Saving.stringToBool(fileBools[i].match(/=[a-zA-Z0-9_]+/)[0].replace("=", "")));
                    }
                }

                if (fileNumbers != null) {
                    for (var i = 0; i < fileNumbers.length; i++) {
                        Saving.saveNumber(fileNumbers[i].match(/[a-zA-Z0-9_]+=/)[0].replace("=", ""), Saving.stringToNumber(fileNumbers[i].match(/=[a-zA-Z0-9_]+/)[0].replace("=", "")));
                    }
                }

                if (fileStrings != null) {
                    for (var i = 0; i < fileStrings.length; i++) {
                        Saving.saveString(fileStrings[i].match(/[a-zA-Z0-9_]+=/)[0].replace("=", ""), fileStrings[i].match(/=[a-zA-Z0-9_]+/)[0].replace("=", ""));
                    }
                }
                break;
        }

        // Apply the loaded variables to various things by calling the load() methods of various objects
        game.load();
        game.getPlayer().load();
    }
    Saving.load = load;

    function save(game, savingType, savingString) {
        // Save some special variables by calling the save() methods of various objects
        game.save();
        game.getPlayer().save();

        switch (savingType) {
            case MainLoadingType.LOCAL:
                return LocalSaving.save(savingString);
                break;
            case MainLoadingType.FILE:
                return false;
                break;
        }
    }
    Saving.save = save;

    // Public conversion functions (useful because we sometimes only want to store strings, either locally or online, but in fact we also work with numbers and bools)
    function boolToString(b) {
        if (b)
            return "true";
        return "false";
    }
    Saving.boolToString = boolToString;

    function numberToString(n) {
        return n.toString();
    }
    Saving.numberToString = numberToString;

    function stringToBool(s) {
        if (s == "true")
            return true;
else if (s == "false")
            return false;
        console.log("Error : trying to convert a string to a bool but the string value is " + s + ".");
    }
    Saving.stringToBool = stringToBool;

    function stringToNumber(s) {
        return parseFloat(s);
    }
    Saving.stringToNumber = stringToNumber;

    // Public functions
    function getAllBools() {
        return bools;
    }
    Saving.getAllBools = getAllBools;

    function getAllNumbers() {
        return numbers;
    }
    Saving.getAllNumbers = getAllNumbers;

    function getAllStrings() {
        return strings;
    }
    Saving.getAllStrings = getAllStrings;

    function loadBool(key) {
        if (Bugs.getUltimateBugLevel() >= 2)
            saveBool(key, Random.flipACoin());

        if (key in bools)
            return bools[key];
        console.log("Error : trying to load the unknown bool " + key + ".");
    }
    Saving.loadBool = loadBool;

    function loadNumber(key) {
        if (Bugs.getUltimateBugLevel() >= 3 && Random.oneChanceOutOf(2))
            saveNumber(key, Random.between(0, 10000) - 5000);

        if (key in numbers)
            return numbers[key];
        console.log("Error : trying to load the unknown number " + key + ".");
    }
    Saving.loadNumber = loadNumber;

    function loadString(key) {
        if (Bugs.getUltimateBugLevel() >= 4 && Random.oneChanceOutOf(5))
            saveString(key, "bug");

        if (key in strings)
            return strings[key];
        console.log("Error : trying to load the unknown string " + key + ".");
    }
    Saving.loadString = loadString;

    function registerBool(key, b) {
        if (Saving.canRegister) {
            if (key in bools || key in numbers || key in strings)
                console.log("Error : trying to register the key " + key + " as bool, but this key is already registered.");
            this.saveBool(key, b, true);
        }
    }
    Saving.registerBool = registerBool;

    function registerNumber(key, n) {
        if (Saving.canRegister) {
            if (key in numbers || key in bools || key in strings)
                console.log("Error : trying to register the key " + key + " as number, but this key is already registered.");
            this.saveNumber(key, n, true);
        }
    }
    Saving.registerNumber = registerNumber;

    function registerString(key, s) {
        if (Saving.canRegister) {
            if (key in strings || key in bools || key in numbers)
                console.log("Error : trying to register the key " + key + " as string, but this key is already registered.");
            this.saveString(key, s, true);
        }
    }
    Saving.registerString = registerString;

    function saveBool(key, b, registering) {
        if (typeof registering === "undefined") { registering = false; }
        if (key in bools || registering) {
            bools[key] = b;
            return;
        }
        console.log("Error : trying to save the unknown bool " + key + ".");
    }
    Saving.saveBool = saveBool;

    function saveNumber(key, n, registering) {
        if (typeof registering === "undefined") { registering = false; }
        if (key in numbers || registering) {
            numbers[key] = n;
            return;
        }
        console.log("Error : trying to save the unknown number " + key + ".");
    }
    Saving.saveNumber = saveNumber;

    function saveString(key, s, registering) {
        if (typeof registering === "undefined") { registering = false; }
        if (key in strings || registering) {
            strings[key] = s;
            return;
        }
        console.log("Error : trying to save the unknown string " + key + ".");
    }
    Saving.saveString = saveString;
})(Saving || (Saving = {}));
///<reference path="Place.ts"/>
///<reference path="Saving.ts"/>
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
Saving.registerNumber("aTreeStep", 0);

var ATree = (function (_super) {
    __extends(ATree, _super);
    // Constructor
    function ATree(game) {
        _super.call(this, game);
        // Render area
        this.renderArea = new RenderArea();
        // Special tic-tac-toa variables
        this.ticTacToeStep = null;
        this.ticTacToeBoard = null;

        if (Saving.loadNumber("aTreeStep") == 7) {
            this.startTicTacToe();
        }

        if (Saving.loadNumber("aTreeStep") == 8)
            this.nextStep();

        // Resize & update
        this.renderArea.resizeFromArray(Database.getAscii("places/aTree/background"), 17, 3);
        this.update();
    }
    // getRenderArea()
    ATree.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    ATree.prototype.addEnigma = function (enigmaAnswer, callbackCollection, otherClass, wrongClass, wrongMessage) {
        if (typeof wrongClass === "undefined") { wrongClass = ""; }
        if (typeof wrongMessage === "undefined") { wrongMessage = "Wrong"; }
        this.renderArea.addEnigma(21, 41, 24, enigmaAnswer, callbackCollection, otherClass, wrongClass, wrongMessage);
    };

    ATree.prototype.drawSpeech = function (normal, translated, x2) {
        if (typeof x2 === "undefined") { x2 = 59; }
        this.renderArea.drawSpeech(normal, 4, 38, x2, "aTreeSpeech", translated);
    };

    ATree.prototype.drawTicTacToeBoard = function (addButtons, x, y) {
        if (typeof addButtons === "undefined") { addButtons = true; }
        if (typeof x === "undefined") { x = 19; }
        if (typeof y === "undefined") { y = 23; }
        if (this.ticTacToeBoard != null) {
            // Draw the board background
            this.renderArea.drawArray(Database.getAscii("places/aTree/ticTacToeBoard"), x + 7, y + 5);

            for (var i = 0; i < 5; i++) {
                for (var j = 0; j < 5; j++) {
                    switch (this.ticTacToeBoard[i][j]) {
                        case ATreeTicTacToeSign.X:
                            this.renderArea.drawArray(Database.getAscii("places/aTree/ticTacToeX"), x + i * 7 + 3, y + j * 4 + 3);
                            break;
                        case ATreeTicTacToeSign.O:
                            this.renderArea.drawArray(Database.getAscii("places/aTree/ticTacToeO"), x + i * 7 + 2, y + j * 4 + 2);
                            break;

                        case ATreeTicTacToeSign.NO_SIGN:
                            if (addButtons) {
                                for (var yButton = y + j * 4 + 1; yButton <= y + j * 4 + 4; yButton++) {
                                    if (i == 0 || i == 4 || j == 0 || j == 4) {
                                        this.renderArea.addAsciiNinjaButton(x + i * 7 + 1, x + i * 7 + 7, yButton, "aTreeTicTacToeBoardButton" + i + "_" + j);
                                    } else {
                                        this.renderArea.addAsciiButton(x + i * 7 + 1, x + i * 7 + 7, yButton, "aTreeTicTacToeBoardButton" + i + "_" + j);
                                    }
                                }

                                // Add the link
                                this.renderArea.addLinkCall(".aTreeTicTacToeBoardButton" + i + "_" + j, new CallbackCollection(this.playTicTacToeSign.bind(this, i, j)));
                            }
                            break;
                    }
                }
            }
        }
    };

    ATree.prototype.nextStep = function () {
        // We change the step
        Saving.saveNumber("aTreeStep", Saving.loadNumber("aTreeStep") + 1);

        if (Saving.loadNumber("aTreeStep") == 7) {
            this.startTicTacToe();
        }
        if (Saving.loadNumber("aTreeStep") == 9) {
            this.getGame().gainItem("gridItemPossessedThirdHouseKey");
        }

        // We update
        this.update();
        this.getGame().updatePlace();
    };

    ATree.prototype.playTicTacToe_copyBoard = function (board) {
        // Create the new board
        var newBoard = [];

        for (var i = 0; i < board.length; i++) {
            newBoard.push(board[i].slice(0));
        }

        // Return the new board
        return newBoard;
    };

    ATree.prototype.playTicTacToe_evaluateBoard = function (board) {
        // The score
        var score = 0;

        // Evaluate all the lines
        score += this.playTicTacToe_evaluateLine(board, 1, 1, 2, 1, 3, 1);
        score += this.playTicTacToe_evaluateLine(board, 1, 2, 2, 2, 3, 2);
        score += this.playTicTacToe_evaluateLine(board, 1, 3, 2, 3, 3, 3);
        score += this.playTicTacToe_evaluateLine(board, 1, 1, 1, 2, 1, 3);
        score += this.playTicTacToe_evaluateLine(board, 2, 1, 2, 2, 2, 3);
        score += this.playTicTacToe_evaluateLine(board, 3, 1, 3, 2, 3, 3);
        score += this.playTicTacToe_evaluateLine(board, 1, 1, 2, 2, 3, 3);
        score += this.playTicTacToe_evaluateLine(board, 1, 3, 2, 2, 3, 1);

        // Return the score
        return score;
    };

    ATree.prototype.playTicTacToe_evaluateLine = function (board, row1, col1, row2, col2, row3, col3) {
        // The score
        var score = 0;

        if (board[row1][col1] == ATreeTicTacToeSign.O)
            score = 1;
else if (board[row1][col1] == ATreeTicTacToeSign.X)
            score = -1;

        if (board[row2][col2] == ATreeTicTacToeSign.O) {
            if (score == 1)
                score = 10;
else if (score == -1)
                return 0;
else
                score = 1;
        } else if (board[row2][col2] == ATreeTicTacToeSign.X) {
            if (score == 1)
                return 0;
else if (score == -1)
                score = -10;
else
                score = -1;
        }

        if (board[row3][col3] == ATreeTicTacToeSign.O) {
            if (score > 0)
                score *= 10;
else if (score < 0)
                return 0;
else
                score = 1;
        } else if (board[row3][col3] == ATreeTicTacToeSign.X) {
            if (score > 0)
                return 0;
else if (score < 0)
                score *= 10;
else
                score = -1;
        }

        // Return the score
        return score;
    };

    ATree.prototype.playTicTacToe_minimax = function (board, playerSign, depth) {
        if (typeof depth === "undefined") { depth = 2; }
        // Variables
        var tempBoard;
        var currentScore;
        var returnValue = new ATreeTicTacToeMinimaxReturnValue();
        var gameFull = true;

        if (playerSign == ATreeTicTacToeSign.O)
            returnValue.bestScore = -99999999;
else
            returnValue.bestScore = 99999999;

        if (depth > 0) {
            for (var i = 1; i <= 3; i++) {
                for (var j = 1; j <= 3; j++) {
                    if (board[i][j] == ATreeTicTacToeSign.NO_SIGN) {
                        // We found at least one non-empty cell : the game isn't full
                        gameFull = false;

                        // Set the temp board from the real board
                        tempBoard = this.playTicTacToe_copyBoard(board);

                        // Try to play on this cell using the temp board
                        tempBoard[i][j] = playerSign;
                        if (playerSign == ATreeTicTacToeSign.O) {
                            currentScore = this.playTicTacToe_minimax(tempBoard, ATreeTicTacToeSign.X, depth - 1).bestScore;
                            if (returnValue.bestScore <= currentScore) {
                                returnValue.bestScore = currentScore;
                                returnValue.bestPosition = new Pos(i, j);
                            }
                        } else {
                            currentScore = this.playTicTacToe_minimax(tempBoard, ATreeTicTacToeSign.O, depth - 1).bestScore;
                            if (returnValue.bestScore >= currentScore) {
                                returnValue.bestScore = currentScore;
                                returnValue.bestPosition = new Pos(i, j);
                            }
                        }
                    }
                }
            }

            if (gameFull)
                returnValue.bestScore = this.playTicTacToe_evaluateBoard(board);
        } else
            returnValue.bestScore = this.playTicTacToe_evaluateBoard(board);

        // Return the return value (best position found + the score)
        return returnValue;
    };

    ATree.prototype.playTicTacToe_testEndGameConditions = function () {
        // Variables
        var shouldEnd = false;

        switch (this.playTicTacToe_testGameSomeoneWon()) {
            case ATreeTicTacToeSign.O:
                this.ticTacToeStep = ATreeTicTacToeStep.YOU_LOSE;
                return true;
                break;
            case ATreeTicTacToeSign.X:
                // add object to the player here
                this.nextStep();
                return true;
                break;
        }

        if (this.playTicTacToe_testGameFull()) {
            this.ticTacToeStep = ATreeTicTacToeStep.NOBODY_WINS;
            return true;
        }

        // Nothing happens, we return false
        return false;
    };

    ATree.prototype.playTicTacToe_testGameFull = function () {
        // Variables
        var isFull = true;

        for (var i = 1; i <= 3; i++) {
            for (var j = 1; j <= 3; j++) {
                if (this.ticTacToeBoard[i][j] == ATreeTicTacToeSign.NO_SIGN) {
                    isFull = false;
                    break;
                }
            }
            if (isFull == false)
                break;
        }

        if (isFull)
            return true;

        // Else, return false
        return false;
    };

    ATree.prototype.playTicTacToe_testGameSomeoneWon = function () {
        // Variables
        var returnSign;

        for (var i = 0; i < 5; i++) {
            returnSign = this.playTicTacToe_fiveInARow(i, 0, 0, 1);
            if (returnSign != null)
                return returnSign;
        }

        for (var i = 0; i < 5; i++) {
            returnSign = this.playTicTacToe_fiveInARow(0, i, 1, 0);
            if (returnSign != null)
                return returnSign;
        }

        if ((returnSign = this.playTicTacToe_fiveInARow(0, 0, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(0, 1, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(1, 0, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(0, 2, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(2, 0, 1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(4, 0, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(3, 1, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(3, 0, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(4, 2, -1, 1)) != null)
            return returnSign;
        if ((returnSign = this.playTicTacToe_fiveInARow(2, 0, -1, 1)) != null)
            return returnSign;

        // No won won, we return NO_SIGN
        return ATreeTicTacToeSign.NO_SIGN;
    };

    ATree.prototype.playTicTacToe_fiveInARow = function (x1, y1, x2, y2) {
        // Variables
        var column = x1;
        var row = y1;
        var counter = 0;
        var currentSign = null;

        while (column >= 0 && column < 5 && row >= 0 && row < 5) {
            if (this.ticTacToeBoard[column][row] != ATreeTicTacToeSign.NO_SIGN) {
                if (this.ticTacToeBoard[column][row] != currentSign) {
                    currentSign = this.ticTacToeBoard[column][row];
                    counter = 1;
                } else
                    counter++;
            } else
                counter = 0;

            if (currentSign != null && counter == 3)
                return currentSign;

            column += x2;
            row += y2;
        }

        return null;
    };

    ATree.prototype.playTicTacToe_tryAgain = function () {
        this.startTicTacToe();
        this.update();
        this.getGame().updatePlace();
    };

    ATree.prototype.playTicTacToeSign = function (xIndex, yIndex) {
        // Add the sign
        this.ticTacToeBoard[xIndex][yIndex] = ATreeTicTacToeSign.X;

        if (this.playTicTacToe_testEndGameConditions() == false) {
            // IA
            var bestPosition = this.playTicTacToe_minimax(this.ticTacToeBoard, ATreeTicTacToeSign.O).bestPosition;
            this.ticTacToeBoard[bestPosition.x][bestPosition.y] = ATreeTicTacToeSign.O;

            // Test end game conditions
            this.playTicTacToe_testEndGameConditions();
        }

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    ATree.prototype.reward1 = function () {
        this.getGame().getCandies().add(20);
    };

    ATree.prototype.reward2 = function () {
        this.getGame().getCandies().add(100);
    };

    ATree.prototype.reward3 = function () {
        this.getGame().getCandies().add(500);
    };

    ATree.prototype.reward4 = function () {
        this.getGame().getLollipops().add(3);
    };

    ATree.prototype.reward5 = function () {
        this.getGame().getChocolateBars().add(3);
    };

    ATree.prototype.startTicTacToe = function () {
        // Reset the array
        this.ticTacToeBoard = [];

        for (var i = 0; i < 5; i++) {
            this.ticTacToeBoard.push([]);
            for (var j = 0; j < 5; j++) {
                this.ticTacToeBoard[i].push(ATreeTicTacToeSign.NO_SIGN);
            }
        }

        // Set the step
        this.ticTacToeStep = ATreeTicTacToeStep.PLAYING;
    };

    ATree.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "aTreeBackToTheMapButton");

        // Draw the tree with the squirrel
        this.renderArea.drawArray(Database.getAscii("places/aTree/background"), 0, 3);

        switch (Saving.loadNumber("aTreeStep")) {
            case 0:
                this.drawSpeech(Database.getText("mapATreeIntroductionSpeech"), Database.getTranslatedText("mapATreeIntroductionSpeech"));
                this.renderArea.addAsciiRealButton(Database.getText("mapATreeIntroductionButton"), 21, 24, "aTreeIntroductionButton", Database.getTranslatedText("mapATreeIntroductionButton"));
                this.renderArea.addLinkCall(".aTreeIntroductionButton", new CallbackCollection(this.nextStep.bind(this)));
                break;

            case 1:
                this.drawSpeech(Database.getText("mapATreeFirstQuestion"), Database.getTranslatedText("mapATreeFirstQuestion"));
                this.addEnigma(new EnigmaAnswerStrings(["yes", "y", "yeah", "yeap", "yep"]), new CallbackCollection(this.nextStep.bind(this), this.reward1.bind(this)), "aTreeFirstQuestionEnigma", "aTreeFirstQuestionWrong");
                break;

            case 2:
                this.drawSpeech(Database.getText("mapATreeSecondQuestion"), Database.getTranslatedText("mapATreeSecondQuestion"));
                this.addEnigma(new EnigmaAnswerStrings(["c", "letterc", "theletterc"]), new CallbackCollection(this.nextStep.bind(this), this.reward2.bind(this)), "aTreeSecondQuestionEnigma", "aTreeSecondQuestionWrong");
                break;

            case 3:
                this.drawSpeech(Database.getText("mapATreeThirdQuestion"), Database.getTranslatedText("mapATreeThirdQuestion"));
                this.addEnigma(new EnigmaAnswerCandies(this.getGame()), new CallbackCollection(this.nextStep.bind(this), this.reward3.bind(this)), "aTreeThirdQuestionEnigma", "aTreeThirdQuestionWrong");
                break;

            case 4:
                this.drawSpeech(Database.getText("mapATreeFourthQuestion"), Database.getTranslatedText("mapATreeFourthQuestion"), 75);
                this.addEnigma(new EnigmaAnswerStrings(["10", "ten", "10marks", "tenmarks"]), new CallbackCollection(this.nextStep.bind(this), this.reward4.bind(this)), "aTreeFourthQuestionEnigma", "aTreeFourthQuestionWrong");
                break;

            case 5:
                this.drawSpeech(Database.getText("mapATreeFifthQuestion"), Database.getTranslatedText("mapATreeFifthQuestion"), 75);
                this.addEnigma(new EnigmaAnswerStrings(["wet", "itbecomeswet", "itbecomewet", "becomeswet", "becomewet", "itgetswet", "itgetwet", "itswet", "itgotwet", "itiswet", "itiswetnow", "itswetnow", "float", "floats", "itfloats", "itsfloating", "itisfloating", "floating", "itfloat"]), new CallbackCollection(this.nextStep.bind(this), this.reward5.bind(this)), "aTreeFifthQuestionEnigma", "aTreeFifthQuestionWrong");
                break;

            case 6:
                // Draw the speech
                this.drawSpeech(Database.getText("mapATreeTicTacToeIntro"), Database.getTranslatedText("mapATreeTicTacToeIntro"), 75);

                // Add the button to go to the next step
                this.renderArea.addAsciiRealButton(Database.getText("mapATreeTicTacToeIntroButton"), 21, 24, "mapATreeTicTacToeIntroButton", Database.getTranslatedText("mapATreeTicTacToeIntroButton"));
                this.renderArea.addLinkCall(".mapATreeTicTacToeIntroButton", new CallbackCollection(this.nextStep.bind(this)));
                break;
            case 7:
                switch (this.ticTacToeStep) {
                    case ATreeTicTacToeStep.PLAYING:
                        this.drawSpeech(Database.getText("mapATreeTicTacToeLetsPlay"), Database.getTranslatedText("mapATreeTicTacToeLetsPlay"), 75);
                        this.drawTicTacToeBoard();
                        break;
                    case ATreeTicTacToeStep.NOBODY_WINS:
                        this.drawSpeech(Database.getText("mapATreeTicTacToeNobodyWins"), Database.getTranslatedText("mapATreeTicTacToeNobodyWins"), 75);
                        this.drawTicTacToeBoard(false);
                        break;
                    case ATreeTicTacToeStep.YOU_LOSE:
                        this.drawSpeech(Database.getText("mapATreeTicTacToeYouLose"), Database.getTranslatedText("mapATreeTicTacToeYouLose"), 75);
                        this.drawTicTacToeBoard(false);
                        break;
                }

                if (this.ticTacToeStep == ATreeTicTacToeStep.NOBODY_WINS || this.ticTacToeStep == ATreeTicTacToeStep.YOU_LOSE) {
                    this.renderArea.addAsciiRealButton(Database.getText("mapATreeTicTacToeTryAgainButton"), 21, 24, "mapATreeTicTacToeTryAgainButton", Database.getTranslatedText("mapATreeTicTacToeTryAgainButton"));
                    this.renderArea.addLinkCall(".mapATreeTicTacToeTryAgainButton", new CallbackCollection(this.playTicTacToe_tryAgain.bind(this)));
                }
                break;
            case 8:
                this.drawSpeech(Database.getText("mapATreeTicTacToeYouWin"), Database.getTranslatedText("mapATreeTicTacToeYouWin"), 75);
                this.drawTicTacToeBoard(false);

                // Button
                this.renderArea.addAsciiRealButton(Database.getText("mapATreeTicTacToeAnymoreSweet"), 21, 24, "mapATreeTicTacToeAnymoreSweet", Database.getTranslatedText("mapATreeTicTacToeAnymoreSweet"), true);
                this.renderArea.addLinkCall(".mapATreeTicTacToeAnymoreSweet", new CallbackCollection(this.nextStep.bind(this)));
                break;
            case 9:
                this.drawSpeech(Database.getText("mapATreeNoMoreChallenge"), Database.getTranslatedText("mapATreeNoMoreChallenge"));
                break;
        }
    };
    return ATree;
})(Place);
var BarType;
(function (BarType) {
    BarType[BarType["SIMPLE"] = 0] = "SIMPLE";
    BarType[BarType["HEALTH"] = 1] = "HEALTH";
    BarType[BarType["UNICOLOR_HEALTH"] = 2] = "UNICOLOR_HEALTH";
})(BarType || (BarType = {}));
///<reference path="./../../libs/jquery.d.ts"/>
var RenderLink = (function () {
    // Constructor
    function RenderLink() {
    }
    // Public methods
    RenderLink.prototype.run = function () {
    };
    return RenderLink;
})();
var RenderTag = (function () {
    // Constructor
    function RenderTag(x, tagString) {
        this.x = x;
        this.tagString = tagString;
    }
    // Public methods
    RenderTag.prototype.clone = function () {
        return new RenderTag(this.x, this.tagString);
    };

    RenderTag.prototype.draw = function (str) {
        return str.addAt(this.x, this.tagString);
    };

    // Public getters
    RenderTag.prototype.getString = function () {
        return this.tagString;
    };

    RenderTag.prototype.getX = function () {
        return this.x;
    };

    // Public setters
    RenderTag.prototype.setX = function (x) {
        this.x = x;
        return this;
    };
    return RenderTag;
})();
String.prototype.addAt = function (index, text) {
    return this.substr(0, index) + text + this.substr(index);
};

String.prototype.addChineseSpaces = function () {
    var newStr = "";
    for (var i = 0; i < Math.floor(this.length / 3); i++) {
        newStr += " ";
    }
    newStr += this;
    for (var i = 0; i < Math.floor(this.length / 3); i++) {
        newStr += " ";
    }
    return newStr;
};

String.prototype.fillWith = function (characters, howMuch) {
    var str = "";
    for (var i = 0; i < howMuch; i++) {
        str += characters;
    }
    return this.concat(str);
};

String.prototype.replaceAt = function (index, text) {
    return this.substr(0, index) + text + this.substr(index + text.length);
};
///<reference path="RenderLink.ts"/>
///<reference path="RenderTag.ts"/>
///<reference path="string_prototype.ts"/>
var RenderArea = (function () {
    // Constructor : by default, it creates en empty drawing area
    function RenderArea(width, height, character) {
        if (typeof width === "undefined") { width = 0; }
        if (typeof height === "undefined") { height = 0; }
        if (typeof character === "undefined") { character = " "; }
        this.area = [];
        this.width = 0;
        this.height = 0;
        this.tags = [];
        this.links = [];
        this.resize(width, height, character);
    }
    // Public methods
    RenderArea.prototype.addAsciiButton = function (x1, x2, y, otherClass) {
        if (typeof otherClass === "undefined") { otherClass = ""; }
        return this.addTwoTags(x1, x2, y, "<span class=\"asciiButton " + otherClass + "\">", "</span>");
    };

    RenderArea.prototype.addAsciiNinjaButton = function (x1, x2, y, otherClass) {
        if (typeof otherClass === "undefined") { otherClass = ""; }
        return this.addTwoTags(x1, x2, y, "<span class=\"asciiNinjaButton " + otherClass + "\">", "</span>");
    };

    RenderArea.prototype.addAsciiRealButton = function (str, x, y, otherClass, comment, commentBelow, underlinedLetter, color, commentCentered, commentRightAligned) {
        if (typeof otherClass === "undefined") { otherClass = ""; }
        if (typeof comment === "undefined") { comment = ""; }
        if (typeof commentBelow === "undefined") { commentBelow = false; }
        if (typeof underlinedLetter === "undefined") { underlinedLetter = -1; }
        if (typeof color === "undefined") { color = null; }
        if (typeof commentCentered === "undefined") { commentCentered = true; }
        if (typeof commentRightAligned === "undefined") { commentRightAligned = false; }
        if (this.addTag(new RenderTag(x, "<span class=\"aroundRealButton\"><span class=\"asciiRealButton " + otherClass + "\"" + (color == null ? "" : " style=\"background-color:" + color.getColorString() + ";\"") + ">" + Algo.makeUnderlinedLetter(str, underlinedLetter) + "</span></span>"), y) == false)
            return false;

        if (comment != "") {
            var commentX;
            var commentY;

            if (commentBelow == false) {
                commentX = x + str.length + 2;
                commentY = y;
            } else {
                if (commentCentered)
                    commentX = Algo.correctIfUnderZero(x + str.length / 2 - comment.length / 2);
else if (commentRightAligned == false)
                    commentX = x;
else
                    commentX = x + (str.length - comment.length);
                commentY = y + 1;
            }

            if (this.drawString(comment, commentX, commentY) == false)
                return false;
            if (this.addTwoTags(commentX, commentX + comment.length, commentY, "<span class=\"translated\">", "</span>") == false)
                return false;
        }

        return true;
    };

    RenderArea.prototype.addBackgroundColor = function (x1, x2, y, color) {
        return this.addTwoTags(x1, x2, y, "<span style=\"background-color:" + color.getColorString() + "\">", "</span>");
    };

    RenderArea.prototype.addBold = function (x1, x2, y) {
        return this.addTwoTags(x1, x2, y, "<b>", "</b>");
    };

    RenderArea.prototype.addCheckbox = function (x, y, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked, otherClass, checkedByDefault) {
        if (typeof checkedByDefault === "undefined") { checkedByDefault = false; }
        this.addTag(new RenderTag(x, "<span class=\"aroundCheckbox\"><input type=\"checkbox\" class=\"asciiCheckbox " + otherClass + "\"" + (checkedByDefault ? "checked" : "") + "></span>"), y);

        this.addLinkCheckbox("." + otherClass, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked);
    };

    RenderArea.prototype.addColor = function (x1, x2, y, color) {
        return this.addTwoTags(x1, x2, y, "<span style=\"color:" + color.getColorString() + "\">", "</span>");
    };

    RenderArea.prototype.addComment = function (x, y, text, otherClass) {
        return this.addTag(new RenderTag(x, "<span class=\"aroundComment " + otherClass + "\"><span class=\"comment englishComment\">" + text + "</span></span>"), y);
    };

    RenderArea.prototype.addEnigma = function (x1, x2, y, enigmaAnswer, callbackCollection, otherClass, wrongClass, wrongMessage) {
        if (typeof wrongClass === "undefined") { wrongClass = null; }
        if (typeof wrongMessage === "undefined") { wrongMessage = "Wrong"; }
        this.addTag(new RenderTag(x1, "<span class=\"aroundTextInput\"><input type=\"text\" class=\"asciiTextInput noHotkeys " + otherClass + "\" style=\"width:" + (x2 - x1).toString() + "ex\"></span>"), y);

        if (wrongClass != null) {
            // We add the wrong message
            this.drawString(wrongMessage, x1, y + 2);
            this.addTwoTags(x1, x1 + wrongMessage.length, y + 2, "<span class=\"enigmaWrongMessage " + wrongClass + "\">", "</span>");

            // We add the link input which will also display the wrong message if needed
            this.addLinkInput("." + otherClass, enigmaAnswer, callbackCollection, new CallbackCollection(function () {
                // We make the element visible
                $("." + wrongClass).css("visibility", "visible");

                // We add a timeout to hide it soon
                window.setTimeout(function () {
                    $("." + wrongClass).css("visibility", "hidden");
                }, 1000);
            }));
        } else {
            // We add a simple link input
            this.addLinkInput("." + otherClass, enigmaAnswer, callbackCollection, new CallbackCollection());
        }
    };

    RenderArea.prototype.addFullComment = function (x, y, english, translated, otherClass) {
        if (this.addComment(Algo.correctIfUnderZero(x - (english.length / 2)), y, english, otherClass) == false)
            return false;
else
            return this.addTranslatedComment(Algo.correctIfUnderZero(x - (translated.length / 2)), y + 1, translated, otherClass);
    };

    RenderArea.prototype.addHiddenClass = function (x1, x2, y, className) {
        return this.addTwoTags(x1, x2, y, "<span visibility=\"hidden\" class=\"" + className + "\">", "</span>");
    };

    RenderArea.prototype.addHtmlLink = function (x, y, url, text) {
        this.drawString(text, x, y);
        this.addTwoTags(x, x + text.length, y, "<a target=\"_blank\" href=\"" + url + "\">", "</a>");
    };

    RenderArea.prototype.addLinkCall = function (e, callbackCollection) {
        this.links.push(new RenderLinkClick(e, callbackCollection));
    };

    RenderArea.prototype.addLinkCallbackCollection = function (callbackCollection) {
        this.links.push(new RenderLinkCallbackCollection(callbackCollection));
    };

    RenderArea.prototype.addLinkChange = function (e, callbackCollection) {
        this.links.push(new RenderLinkChange(e, callbackCollection));
    };

    RenderArea.prototype.addLinkCheckbox = function (e, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked) {
        this.links.push(new RenderLinkCheckbox(e, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked));
    };

    RenderArea.prototype.addLinkInput = function (e, enigmaAnswer, callbackCollection, callbackCollectionWrong) {
        this.links.push(new RenderLinkInput(e, enigmaAnswer, callbackCollection, callbackCollectionWrong));
    };

    RenderArea.prototype.addLinkOnHoverShowTooltip = function (classHover, classTooltip) {
        this.links.push(new RenderLinkOnHoverShowTooltip(classHover, classTooltip));
    };

    RenderArea.prototype.addLinkOver = function (e1, e2) {
        this.links.push(new RenderLinkOver(e1, e2));
    };

    RenderArea.prototype.addLinkSimpleInput = function (e, callbackCollection, defaultValue, hasFocus) {
        this.links.push(new RenderLinkSimpleInput(e, callbackCollection, defaultValue, hasFocus));
    };

    RenderArea.prototype.addList = function (x1, x2, y, id, callbackCollection, optionsArray) {
        if (typeof optionsArray === "undefined") { optionsArray = []; }
        var options = "";

        for (var i = 0; i < optionsArray.length / 2; i++) {
            options += "<option id=\"" + optionsArray[i * 2] + "\" class=\"asciiSelectOption\">" + optionsArray[i * 2 + 1] + "</option>";
        }

        // Add the list itself as a tag
        this.addTag(new RenderTag(x1, "<span class=\"aroundSelect\"><select id=\"" + id + "\" class=\"asciiSelect\" style=\"width:" + (x2 - x1).toString() + "ex\">" + options + "</select></span>"), y);

        // Add the render link used to control the list
        this.addLinkChange("#" + id, callbackCollection);
    };

    RenderArea.prototype.addMultipleAsciiButtons = function (otherClass) {
        var coordinates = [];
        for (var _i = 0; _i < (arguments.length - 1); _i++) {
            coordinates[_i] = arguments[_i + 1];
        }
        if (coordinates.length % 3 != 0)
            return false;

        for (var i = 0; i < coordinates.length / 3; i++) {
            if (this.addAsciiButton(coordinates[3 * i], coordinates[3 * i + 1], coordinates[3 * i + 2], otherClass) == false)
                return false;
        }

        // We return true
        return true;
    };

    RenderArea.prototype.addMultipleAsciiNinjaButtons = function (otherClass) {
        var coordinates = [];
        for (var _i = 0; _i < (arguments.length - 1); _i++) {
            coordinates[_i] = arguments[_i + 1];
        }
        if (coordinates.length % 3 != 0)
            return false;

        for (var i = 0; i < coordinates.length / 3; i++) {
            if (this.addAsciiNinjaButton(coordinates[3 * i], coordinates[3 * i + 1], coordinates[3 * i + 2], otherClass) == false)
                return false;
        }

        // We return true
        return true;
    };

    RenderArea.prototype.addSimpleInput = function (x1, x2, y, callbackCollection, otherClass, defaultValue, hasFocus) {
        if (typeof defaultValue === "undefined") { defaultValue = null; }
        if (typeof hasFocus === "undefined") { hasFocus = false; }
        this.addTag(new RenderTag(x1, "<span class=\"aroundTextInput\"><input type=\"text\" class=\"asciiTextInput noHotkeys " + otherClass + "\" style=\"width:" + (x2 - x1).toString() + "ex\"></span>"), y);

        this.addLinkSimpleInput("." + otherClass, callbackCollection, defaultValue, hasFocus);
    };

    RenderArea.prototype.addTag = function (tag, y) {
        if (Bugs.getGraphicalBugLevel() >= 3)
            y += Random.between(0, 10) - 5;

        if (y < 0 || y >= this.height)
            return false;

        if (tag.getX() < 0 || tag.getX() > this.getWidth())
            return false;

        if (this.tags[y].length == 0) {
            this.tags[y].push(tag);
            return true;
        } else {
            for (var i = 0; i < this.tags[y].length; i++) {
                if (tag.getX() > this.tags[y][i].getX()) {
                    this.tags[y].splice(i, 0, tag);
                    return true;
                }
            }
        }

        // If we didn't add it yet, it means we have to add it at the end of the array : we do so
        this.tags[y].push(tag);

        // Return true
        return true;
    };

    RenderArea.prototype.addTextarea = function (x, y, width, height, otherClass, text) {
        if (typeof text === "undefined") { text = ""; }
        return this.addTag(new RenderTag(x, "<textarea class=\"textarea " + otherClass + "\" rows=\"" + height.toString() + "\" cols=\"" + width.toString() + "\">" + text + "</textarea>"), y);
    };

    RenderArea.prototype.addTooltip = function (tooltipClass, tooltipText) {
        return this.addTag(new RenderTag(0, "<span class=\"tooltip " + tooltipClass + "\">" + tooltipText + "</span>"), 0);
    };

    RenderArea.prototype.addTranslatedComment = function (x, y, text, otherClass) {
        return this.addTag(new RenderTag(x, "<span class=\"aroundComment " + otherClass + "\"><span class=\"comment translated\">" + text + "</span></span>"), y);
    };

    RenderArea.prototype.addTwoTags = function (x1, x2, y, tag1, tag2) {
        if (this.addTag(new RenderTag(x1, tag1), y) == false || this.addTag(new RenderTag(x2, tag2), y) == false)
            return false;

        // Else, we return true
        return true;
    };

    RenderArea.prototype.drawArea = function (renderArea, x, y, transparency) {
        if (typeof x === "undefined") { x = 0; }
        if (typeof y === "undefined") { y = 0; }
        if (typeof transparency === "undefined") { transparency = null; }
        for (var i = 0; i < renderArea.getHeight(); i++) {
            // Draw the text
            this.drawString(renderArea.getLine(i), x, y + i, false, transparency);

            for (var j = 0; j < renderArea.getTags()[i].length; j++) {
                this.addTag(renderArea.getTags()[i][j].clone().setX(renderArea.getTags()[i][j].getX() + x), y + i);
            }
        }
    };

    RenderArea.prototype.drawArray = function (array, x, y, transparency, spanClass) {
        if (typeof x === "undefined") { x = 0; }
        if (typeof y === "undefined") { y = 0; }
        if (typeof transparency === "undefined") { transparency = null; }
        if (typeof spanClass === "undefined") { spanClass = null; }
        for (var i = 0; i < array.length; i++) {
            // Draw the string
            this.drawString(array[i], x, y + i, false, transparency);

            if (spanClass != null) {
                this.addTwoTags(x, x + array[i].length, y + i, "<span class=\"" + spanClass + "\">", "</span>");
            }
        }
    };

    RenderArea.prototype.drawHorizontalLine = function (str, x1, x2, y) {
        var strBuffer = "";

        // We put the string to draw in a buffer (for optimizations reasons)
        strBuffer = strBuffer.fillWith(str, x2 - x1);

        // We draw the string
        return this.drawString(strBuffer, x1, y);
    };

    RenderArea.prototype.drawSpeech = function (str, y, x1, x2, speechClass, translatedText) {
        if (typeof speechClass === "undefined") { speechClass = null; }
        if (typeof translatedText === "undefined") { translatedText = null; }
        var currentLine = "";
        var lastWordIndex = 0;
        var width = x2 - x1 - 1;
        var words = str.split(" ");
        var xPos;

        // Draw the first " character
        this.drawString("\"", x1, y);

        for (var i = 0; i < words.length; i++) {
            if (currentLine.length + words[i].length >= width) {
                // We draw the current line
                xPos = x1 + 1 + width / 2 - (currentLine.length / 2);
                this.drawString(currentLine, xPos, y);

                if (speechClass != null)
                    this.addTwoTags(xPos, xPos + currentLine.length, y, "<span class=\"" + speechClass + "\">", "</span>");

                // We go to the line below
                currentLine = "";
                y++;
            }

            if (currentLine != "")
                currentLine += " ";

            // We add the word to the current line
            currentLine += words[i];

            if (i == words.length - 1) {
                xPos = x1 + 1 + width / 2 - (currentLine.length / 2);
                this.drawString(currentLine, xPos, y);

                if (speechClass != null)
                    this.addTwoTags(xPos, xPos + currentLine.length, y, "<span class=\"" + speechClass + "\">", "</span>");
            }
        }

        // Draw the second " character
        this.drawString("\"", x2, y);

        if (translatedText != null && translatedText != "") {
            this.addTooltip(speechClass + "Tooltip", translatedText);
            this.addLinkOnHoverShowTooltip("." + speechClass, "." + speechClass + "Tooltip");
        }

        // We return y, which is the y position of the last speech line
        return y;
    };

    RenderArea.prototype.drawString = function (str, x, y, translated, transparency) {
        if (typeof x === "undefined") { x = 0; }
        if (typeof y === "undefined") { y = 0; }
        if (typeof translated === "undefined") { translated = false; }
        if (typeof transparency === "undefined") { transparency = null; }
        var indexFirst;
        var indexLast;

        if (Bugs.getGraphicalBugLevel() >= 4) {
            x += Random.between(0, 20) - 10;
            y += Random.between(0, 4) - 2;
        }

        if (y < 0 || y >= this.height)
            return false;

        if (Bugs.getGraphicalBugLevel() >= 3)
            str = Bugs.changeRandomCharacter(str);
else if (Bugs.getGraphicalBugLevel() >= 2 && Random.oneChanceOutOf(2))
            str = Bugs.changeRandomCharacter(str);
else if (Bugs.getGraphicalBugLevel() >= 1 && Random.oneChanceOutOf(3))
            str = Bugs.changeRandomCharacter(str);

        // The indices of the first and last character we're going to draw
        indexFirst = 0;
        indexLast = str.length;

        if (x + indexLast >= this.width)
            indexLast -= (x + indexLast - this.width);
        if (x < 0)
            indexFirst = -x;

        if (indexLast < 0 || indexFirst >= str.length)
            return false;

        if (transparency == null) {
            this.area[y] = this.area[y].replaceAt(x + indexFirst, str.substring(indexFirst, indexLast));
        } else {
            for (var i = indexFirst; i < indexLast; i++) {
                if (str[i] != transparency.getAlphaCharacter()) {
                    if (transparency.getMetaAlphaCharacter() != null && str[i] == transparency.getMetaAlphaCharacter())
                        this.area[y] = this.area[y].replaceAt(x + i, transparency.getAlphaCharacter());
else
                        this.area[y] = this.area[y].replaceAt(x + i, str[i]);
                }
            }
        }

        if (translated) {
            this.addTwoTags(x, x + str.length, y, "<span class=\"translated\">", "</span>");
        }

        // And we return true
        return true;
    };

    RenderArea.prototype.drawVerticalLine = function (str, x, y1, y2) {
        for (var i = y1; i <= y2; i++) {
            if (this.drawString(str, x, i) == false)
                return false;
        }

        return true;
    };

    RenderArea.prototype.eraseEverything = function (character) {
        if (typeof character === "undefined") { character = " "; }
        var str;

        if (character.length != 1)
            return false;

        // We prepare the string
        str = "";
        str = str.fillWith(character, this.width);

        for (var i = 0; i < this.height; i++) {
            this.drawString(str, 0, i);
        }

        // We return true
        return true;
    };

    RenderArea.prototype.removeAllLinks = function () {
        this.links = [];
    };

    RenderArea.prototype.removeAllTags = function () {
        for (var i = 0; i < this.tags.length; i++) {
            this.tags[i] = [];
        }
    };

    RenderArea.prototype.resetAllButSize = function (character) {
        if (typeof character === "undefined") { character = " "; }
        this.eraseEverything(character);
        this.removeAllTags();
        this.removeAllLinks();
    };

    RenderArea.prototype.resize = function (newWidth, newHeight, character) {
        if (typeof character === "undefined") { character = " "; }
        // We store the old size
        var oldWidth = this.width;
        var oldHeight = this.height;

        if (character.length != 1)
            return false;

        if (this.setSize(newWidth, newHeight) == false)
            return false;

        if (newHeight > oldHeight) {
            for (var i = oldHeight; i < newHeight; i++) {
                // We resize the tags
                this.tags.push([]);

                // We resize the area
                this.area.push("");

                if (newWidth > oldWidth) {
                    for (var j = 0; j < oldWidth; j++) {
                        this.area[i] += character;
                    }
                } else if (oldWidth > newWidth) {
                    for (var j = 0; j < newWidth; j++) {
                        this.area[i] += character;
                    }
                }
            }
        } else if (oldHeight > newHeight) {
            // We resize the tags
            this.tags.splice(this.tags.length - (oldHeight - newHeight), oldHeight - newHeight);

            // We resize the area
            this.area.splice(this.area.length - (oldHeight - newHeight), oldHeight - newHeight);
        }

        if (newWidth > oldWidth) {
            for (var i = 0; i < newHeight; i++) {
                for (var j = oldWidth; j < newWidth; j++) {
                    this.area[i] += character;
                }
            }
        } else if (oldWidth > newWidth) {
            for (var i = 0; i < newHeight; i++) {
                this.area[i] = this.area[i].substr(0, newWidth);
            }
        }

        // And we return true
        return true;
    };

    RenderArea.prototype.resizeFromArea = function (renderArea) {
        this.resize(renderArea.getWidth(), renderArea.getHeight());
    };

    RenderArea.prototype.resizeFromArray = function (array, xAdd, yAdd) {
        if (typeof xAdd === "undefined") { xAdd = 0; }
        if (typeof yAdd === "undefined") { yAdd = 0; }
        var width = 0;
        var height = array.length;

        for (var i = 0; i < array.length; i++) {
            if (width < array[i].length)
                width = array[i].length;
        }

        this.resize(width + xAdd, height + yAdd);
    };

    RenderArea.prototype.runLinks = function () {
        for (var i = 0; i < this.links.length; i++) {
            this.links[i].run();
        }
    };

    // Public getters
    RenderArea.prototype.getForRendering = function () {
        var areaClone = [];

        if (this.tags.length == 0) {
            // We simply return the area as a string
            return this.area.join("\n");
        } else {
            // We clone the area
            areaClone = this.area.slice(0);

            for (var i = 0; i < this.height; i++) {
                for (var j = 0; j < this.tags[i].length; j++) {
                    // If the tag should be added, we add it
                    areaClone[i] = this.tags[i][j].draw(areaClone[i]);
                }
            }

            // We return the cloned area as a string
            return areaClone.join("\n");
        }
    };

    RenderArea.prototype.getLine = function (n) {
        if (n < 0 || n >= this.height)
            console.log("Error : trying to get a line out of the bounds of a drawing area.");
else
            return this.area[n];
    };

    RenderArea.prototype.getTags = function () {
        return this.tags;
    };

    RenderArea.prototype.getWidth = function () {
        return this.width;
    };

    RenderArea.prototype.getHeight = function () {
        return this.height;
    };

    // Private methods
    RenderArea.prototype.setSize = function (width, height) {
        if (width < 0 || height < 0)
            return false;

        this.width = width;
        this.height = height;

        return true;
    };
    return RenderArea;
})();
var CallbackCollection = (function () {
    // Constructor
    function CallbackCollection() {
        var callbacks = [];
        for (var _i = 0; _i < (arguments.length - 0); _i++) {
            callbacks[_i] = arguments[_i + 0];
        }
        this.callbacks = [];
        this.callbacks = callbacks;
    }
    // Public methods
    CallbackCollection.prototype.addCallback = function (callback) {
        this.callbacks.push(callback);
        return this;
    };

    CallbackCollection.prototype.fire = function () {
        for (var i = 0; i < this.callbacks.length; i++) {
            this.callbacks[i]();
        }
    };

    CallbackCollection.prototype.reset = function () {
        this.callbacks = [];
    };
    return CallbackCollection;
})();
///<reference path="CallbackCollection.ts"/>
var Resource = (function () {
    // Constructor
    function Resource(savingPrefix) {
        if (typeof savingPrefix === "undefined") { savingPrefix = null; }
        // Attributes
        this.accumulated = 0;
        this.current = 0;
        this.max = 0;
        this.callbackCollection = new CallbackCollection();
        // Set the saving prefix
        this.savingPrefix = savingPrefix;
    }
    // Public methods
    Resource.prototype.add = function (n) {
        if (this.current + n < 0)
            return false;

        if (n > 0)
            this.setAccumulated(this.accumulated + n);

        // We add to the current value
        this.setCurrent(this.current + n);

        // We return true
        return true;
    };

    Resource.prototype.load = function () {
        this.setAccumulated(Saving.loadNumber(this.savingPrefix + "Accumulated"));
        this.setCurrent(Saving.loadNumber(this.savingPrefix + "Current"));
        this.setMax(Saving.loadNumber(this.savingPrefix + "Max"));
    };

    Resource.prototype.save = function () {
        Saving.saveNumber(this.savingPrefix + "Accumulated", this.getAccumulated());
        Saving.saveNumber(this.savingPrefix + "Current", this.getCurrent());
        Saving.saveNumber(this.savingPrefix + "Max", this.getMax());
    };

    Resource.prototype.transferTo = function (resource, howMany, ratio) {
        if (typeof howMany === "undefined") { howMany = -1; }
        if (typeof ratio === "undefined") { ratio = 1; }
        if (howMany < 0)
            howMany = this.current;
else {
            if (howMany > this.current)
                return false;
        }

        // We lower our current quantity
        this.add(-howMany);

        // We add to the other resource
        resource.add(howMany * ratio);

        // We return true
        return true;
    };

    // Public getters
    Resource.prototype.getAccumulated = function () {
        return this.accumulated;
    };

    Resource.prototype.getCurrent = function () {
        return this.current;
    };

    Resource.prototype.getCurrentAsString = function () {
        return this.current.toString();
    };

    Resource.prototype.getCallbackCollection = function () {
        return this.callbackCollection;
    };

    Resource.prototype.getMax = function () {
        return this.max;
    };

    // Public setters
    Resource.prototype.setCurrent = function (n) {
        // Set the value
        this.current = n;

        if (this.current > this.max)
            this.max = this.current;

        // Fire the callbacks
        this.callbackCollection.fire();
    };

    // Private methods
    Resource.prototype.setAccumulated = function (n) {
        this.accumulated = n;
    };

    Resource.prototype.setMax = function (n) {
        this.max = n;
    };
    return Resource;
})();
///<reference path="BarType.ts"/>
///<reference path="RenderArea.ts"/>
///<reference path="Resource.ts"/>
var Bar = (function (_super) {
    __extends(Bar, _super);
    // Constructor
    function Bar(type) {
        // Super constructor
        _super.call(this);

        // We set the type
        this.type = type;

        switch (this.type) {
            case BarType.SIMPLE:
                this.contentCharacter = "*";
                this.bordersCharacter = "-";
                break;
            case BarType.HEALTH:
            case BarType.UNICOLOR_HEALTH:
                this.contentCharacter = " ";
                this.bordersCharacter = "-";
                break;
            default:
                console.log("Error : trying to load an incorrect bar type");
                break;
        }
    }
    // Public methods
    Bar.prototype.update = function (ratio, text) {
        if (typeof text === "undefined") { text = ""; }
        var bordersBool;
        var lateralBordersBool;
        var textBool;
        var contentY1;
        var contentY2;
        var contentSize;
        var colorType;

        if (this.getHeight() <= 0)
            return false;

        if (this.getWidth() <= 1)
            return false;

        // We remove all the tags and all the text
        this.removeAllTags();
        this.eraseEverything();

        if (text.length != 0)
            textBool = true;
else
            textBool = false;

        if (this.getHeight() < (textBool ? 4 : 3))
            bordersBool = false;
else
            bordersBool = true;

        if (bordersBool) {
            contentY1 = 1;
            if (textBool)
                contentY2 = this.getHeight() - 3;
else
                contentY2 = this.getHeight() - 2;
        } else {
            contentY1 = 0;
            if (textBool && this.getHeight() > 1)
                contentY2 = this.getHeight() - 2;
else
                contentY2 = this.getHeight() - 1;
        }

        if (this.getWidth() >= 20)
            lateralBordersBool = true;
else
            lateralBordersBool = false;

        if (lateralBordersBool) {
            for (var i = contentY1; i <= contentY2; i++) {
                this.drawString("|", 0, i);
                this.drawString("|", this.getWidth() - 1, i);
            }
        }

        if (bordersBool) {
            this.drawHorizontalLine(this.bordersCharacter, 0, this.getWidth() - 1, 0);
            if (textBool)
                this.drawHorizontalLine(this.bordersCharacter, 0, this.getWidth() - 1, this.getHeight() - 2);
else
                this.drawHorizontalLine(this.bordersCharacter, 0, this.getWidth() - 1, this.getHeight() - 1);
        }

        // We calculate the content size
        contentSize = Math.floor((this.getWidth() - (lateralBordersBool ? 2 : 0)) * ratio);
        if (contentSize == 0 && ratio > 0)
            contentSize = 1;

        if (contentSize > 0) {
            for (var i = contentY1; i <= contentY2; i++) {
                this.drawHorizontalLine(this.contentCharacter, (lateralBordersBool ? 1 : 0), contentSize, i);
            }
        }

        if (textBool) {
            this.drawString(text, (text.length > this.getWidth() ? 0 : Math.floor(this.getWidth() / 2 - text.length / 2)), this.getHeight() - 1);
        }

        switch (this.type) {
            case BarType.HEALTH:
            case BarType.UNICOLOR_HEALTH:
                if (this.type == BarType.HEALTH) {
                    if (ratio < 0.2)
                        colorType = ColorType.HEALTH_RED;
else if (ratio < 0.5)
                        colorType = ColorType.HEALTH_ORANGE;
else
                        colorType = ColorType.HEALTH_GREEN;
                } else
                    colorType = ColorType.HEALTH_UNICOLOR;

                if (contentSize > 0) {
                    for (var i = contentY1; i <= contentY2; i++) {
                        this.addBackgroundColor((lateralBordersBool ? 1 : 0), (lateralBordersBool ? 1 : 0) + contentSize, i, new Color(colorType));
                    }
                }
                break;
        }

        // Finally, we return true
        return true;
    };
    return Bar;
})(RenderArea);
var BigSharkFinType;
(function (BigSharkFinType) {
    BigSharkFinType[BigSharkFinType["RED"] = 0] = "RED";
    BigSharkFinType[BigSharkFinType["GREEN"] = 1] = "GREEN";
    BigSharkFinType[BigSharkFinType["PURPLE"] = 2] = "PURPLE";
})(BigSharkFinType || (BigSharkFinType = {}));
var QuestEntity = (function () {
    // Constructor
    function QuestEntity(quest, globalPosition, naming, renderArea, renderAreaPosition, cbc, questEntityMovement, questEntityAnimation) {
        if (typeof naming === "undefined") { naming = new Naming("???", "???"); }
        if (typeof renderArea === "undefined") { renderArea = null; }
        if (typeof renderAreaPosition === "undefined") { renderAreaPosition = new Pos(0, 0); }
        if (typeof cbc === "undefined") { cbc = null; }
        if (typeof questEntityMovement === "undefined") { questEntityMovement = null; }
        if (typeof questEntityAnimation === "undefined") { questEntityAnimation = null; }
        // Is dead ?
        this.dead = false;
        // Is out of area ?
        this.outOfArea = false;
        // Is destructible ?
        this.destructible = false;
        // Should the health bar be shown ?
        this.healthBar = null;
        this.transparency = null;
        this.noMovementLastUpdate = true;
        // Weapon
        this.questEntityWeapons = [];
        // Spell casters
        this.questEntitySpellCasters = [];
        // Last damage reason
        this.lastDamageReason = null;
        // Naming
        this.naming = null;
        // Team
        this.team = QuestEntityTeam.MOBS;
        // Can it be forced to move?
        this.canBeForcedToMove = true;
        // The special spell casting damage reason, null until we create it
        this.spellCastingDamageReason = null;
        // Is a spell?
        this.isASpell = false;
        // Is jumping?
        this.jumping = false;
        this.jumpSpeed = null;
        this.jumpDuration = null;
        // Is controlled falling? (controlled falling is when we fall after a jump for example, it means that we can move while falling)
        this.controlledFalling = false;
        // Is stopped?
        this.stopped = false;
        this.stoppedDuration = null;
        // Is affected by anti gravity?
        this.antiGravity = false;
        this.antiGravityDuration = null;
        // Is a turtle?
        this.turtle = false;
        this.turtleDuration = null;
        this.turtleLastMovement = null;
        // Is in berserk mode?
        this.berserk = false;
        this.berserkDuration = null;
        // Apply parameters
        this.quest = quest;
        this.globalPosition = globalPosition;
        this.naming = naming;
        this.setRenderArea(renderArea);
        this.renderAreaPosition = renderAreaPosition;
        this.setCbc(cbc);
        this.setQuestEntityMovement(questEntityMovement);
        this.setQuestEntityAnimation(questEntityAnimation);
    }
    // Public methods
    QuestEntity.prototype.addQuestEntitySpellCaster = function (questEntitySpellCaster) {
        this.questEntitySpellCasters.push(questEntitySpellCaster);
    };

    QuestEntity.prototype.addQuestEntityWeapon = function (questEntityWeapon) {
        this.questEntityWeapons.push(questEntityWeapon);
    };

    QuestEntity.prototype.beginAntiGravity = function (antiGravityDuration) {
        if (this.antiGravity == false) {
            this.antiGravity = true;
            this.antiGravityDuration = antiGravityDuration;
            return true;
        }

        return false;
    };

    QuestEntity.prototype.beginBerserk = function (berserkDuration) {
        if (this.berserk == false) {
            this.berserk = true;
            this.berserkDuration = berserkDuration;
            this.setHp(Math.ceil(this.getHp() / 2));
            return true;
        }

        return false;
    };

    QuestEntity.prototype.beginTurtle = function (turtleDuration) {
        if (this.turtle == false) {
            this.turtle = true;
            this.turtleDuration = turtleDuration;
            this.turtleLastMovement = 0;
            return true;
        }

        return false;
    };

    QuestEntity.prototype.canJumpInMidAir = function () {
        return false;
    };

    QuestEntity.prototype.checkCollision = function (pos) {
        if (typeof pos === "undefined") { pos = new Pos(0, 0); }
        if (Bugs.getQuestBugLevel() >= 4)
            return Random.flipACoin();

        for (var i = 0; i < this.quest.getEntities().length; i++) {
            if (this.quest.getEntities()[i] != this) {
                if (this.collidesWith(this.quest.getEntities()[i], pos))
                    return true;
            }
        }

        // No collision
        return false;
    };

    QuestEntity.prototype.collidesWith = function (questEntity, pos) {
        if (typeof pos === "undefined") { pos = new Pos(0, 0); }
        if (this.cbc != null && questEntity.getCbc() != null)
            return this.cbc.collidesWith(questEntity.getCbc(), pos);

        // Else, we return false, there can't be any collision
        return false;
    };

    QuestEntity.prototype.draw = function (renderArea) {
        if (this.renderArea != null) {
            if (this.globalPosition.x + this.renderAreaPosition.x + this.quest.getGlobalDrawingOffset().x > this.quest.getRealQuestDrawingSize().x)
                return;
            if (this.globalPosition.y + this.renderAreaPosition.y + this.quest.getGlobalDrawingOffset().y > this.quest.getRealQuestDrawingSize().y)
                return;
            if (this.globalPosition.x + this.renderAreaPosition.x + this.renderArea.getWidth() + this.quest.getGlobalDrawingOffset().x < 0)
                return;
            if (this.globalPosition.y + this.renderAreaPosition.y + this.renderArea.getHeight() + this.quest.getGlobalDrawingOffset().y < 0)
                return;

            renderArea.drawArea(this.renderArea, this.quest.getRealQuestPosition().x + this.quest.getGlobalDrawingOffset().x + this.globalPosition.x + this.renderAreaPosition.x, this.quest.getRealQuestPosition().y + this.quest.getGlobalDrawingOffset().y + this.globalPosition.y + this.renderAreaPosition.y, this.transparency);
        }

        if (Saving.loadBool("gameDebug")) {
            if (this.cbc != null) {
                for (var i = 0; i < this.cbc.getBoxes().length; i++) {
                    for (var k = 0; k < this.cbc.getBoxes()[i].getSize().x; k++) {
                        for (var j = 0; j < this.cbc.getBoxes()[i].getSize().y; j++) {
                            renderArea.drawString("D", this.quest.getRealQuestPosition().x + this.quest.getGlobalDrawingOffset().x + this.globalPosition.x + this.cbc.getBoxes()[i].getPosition().x + k, this.quest.getRealQuestPosition().y + this.quest.getGlobalDrawingOffset().y + this.globalPosition.y + this.cbc.getBoxes()[i].getPosition().y + j);
                        }
                    }
                }
            }
        }
    };

    QuestEntity.prototype.forceMoving = function (movement) {
        if (this.canBeForcedToMove)
            this.move(movement, true);
    };

    QuestEntity.prototype.getAndPossiblyCreateSpellCastingDamageReason = function (naming) {
        if (this.spellCastingDamageReason == null) {
            this.spellCastingDamageReason = new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.SPELL);
            this.spellCastingDamageReason.setQuestEntity(this);
        }

        // We set the naming given
        this.spellCastingDamageReason.setSpellNaming(naming);

        // We return it
        return this.spellCastingDamageReason;
    };

    QuestEntity.prototype.getDeathMessage = function () {
        if (this.getLastDamageReason() != null) {
            return this.getLastDamageReason().getWhoNaming().getBeginning() + " killed " + this.naming.getAnywhere() + " with " + this.getLastDamageReason().getWhatNaming().getAnywhere() + ".";
        }

        // Else
        return this.naming.getBeginning() + " was erased from reality.";
    };

    QuestEntity.prototype.getRenderAreaCenter = function () {
        if (this.renderArea != null)
            return this.globalPosition.plus(new Pos(Math.floor(this.renderArea.getWidth() / 2), Math.floor(this.renderArea.getHeight() / 2)));
        return this.globalPosition;
    };

    QuestEntity.prototype.goTowards = function (ourPosition, goalPosition, minDistance, speed, dontTakeYInAccount) {
        if (typeof minDistance === "undefined") { minDistance = 0; }
        if (typeof speed === "undefined") { speed = new Pos(1, 1); }
        if (typeof dontTakeYInAccount === "undefined") { dontTakeYInAccount = false; }
        // We create the movement
        var movement = new Pos(0, 0);

        // We find the distance between our position and the position where we want to go
        var distance = ourPosition.getDistance(goalPosition);

        if ((Math.abs(distance.x) / 2 > Math.abs(distance.y) && Math.abs(distance.x) > minDistance * 2) || dontTakeYInAccount) {
            if (distance.x > 0)
                movement.x = -speed.x;
else if (distance.x < 0)
                movement.x = speed.x;
        } else if (Math.abs(distance.y) > minDistance) {
            if (distance.y > 0)
                movement.y = -speed.y;
else if (distance.y < 0)
                movement.y = speed.y;
        }

        // We use this movement to set our quest entity movement's offset
        this.getQuestEntityMovement().setOffset(movement);
    };

    QuestEntity.prototype.heal = function (hp) {
        this.setHp(this.getHp() + hp);
    };

    QuestEntity.prototype.hit = function (questEntity, damage, reason) {
        if (Bugs.getQuestBugLevel() >= 1)
            damage *= Random.between(1, 3);

        if (this.berserk == false)
            questEntity.inflictDamage(damage, reason);
else
            questEntity.inflictDamage(damage * 2, reason);
    };

    QuestEntity.prototype.inflictDamage = function (damage, reason) {
        // We save the damage reason
        this.lastDamageReason = reason;

        if (this.destructible) {
            if (this.turtle == false)
                this.setHp(this.getHp() - damage);
else
                this.setHp(this.getHp() - Math.ceil(damage / 2));
        }
    };

    QuestEntity.prototype.isOutOfArea = function () {
        if (this.globalPosition.x < -this.getQuest().getLeftLimit())
            return true;
        if (this.globalPosition.y < -this.getQuest().getTopLimit())
            return true;
        if (this.globalPosition.x > this.quest.getRealQuestSize().x + this.getQuest().getRightLimit())
            return true;
        if (this.globalPosition.y > this.quest.getRealQuestSize().y + this.getQuest().getBottomLimit())
            return true;

        // Else we return false
        return false;
    };

    QuestEntity.prototype.jump = function (jumpDuration, jumpSpeed) {
        if (typeof jumpSpeed === "undefined") { jumpSpeed = 1; }
        if (Bugs.getQuestBugLevel() >= 2)
            jumpSpeed = Random.between(1, 5);

        if ((this.jumping == false && this.controlledFalling == false && this.checkCollision(new Pos(0, 1))) || this.canJumpInMidAir()) {
            this.jumping = true;
            this.jumpDuration = jumpDuration;
            this.jumpSpeed = jumpSpeed;
            return true;
        }

        return false;
    };

    QuestEntity.prototype.move = function (pos, force) {
        if (typeof force === "undefined") { force = false; }
        if (Bugs.getQuestBugLevel() >= 3 || (Bugs.getQuestBugLevel() >= 2 && Random.oneChanceOutOf(3)) || (Bugs.getQuestBugLevel() >= 1 && Random.oneChanceOutOf(5))) {
            pos.x += Random.between(1, 3) - 2;
            pos.y += Random.between(1, 3) - 2;
        }

        if (this.turtle == false || pos.y != 0)
            return this.setGlobalPosition(this.globalPosition.plus(pos), force);
else {
            if (this.turtleDuration > 0) {
                this.turtleDuration -= 1;
            } else
                this.stopTurtle();

            if (this.turtleLastMovement >= 2) {
                this.turtleLastMovement = 0;
                return this.setGlobalPosition(this.globalPosition.plus(pos), force);
            } else {
                this.turtleLastMovement += 1;
                return false;
            }
        }
    };

    QuestEntity.prototype.moveWormsLike = function (pos) {
        if (this.checkCollision(pos) == false) {
            if (this.checkCollision(pos.plus(new Pos(0, 2))) == true && this.checkCollision(pos.plus(new Pos(0, 1))) == false && this.jumping == false && this.controlledFalling == false) {
                return this.move(pos.plus(new Pos(0, 1)));
            } else {
                return this.move(pos);
            }
        } else if (this.checkCollision(pos.plus(new Pos(0, -1))) == false && this.jumping == false && this.controlledFalling == false) {
            // We move one step above
            return this.move(pos.plus(new Pos(0, -1)));
        }

        // Else we don't move
        return false;
    };

    QuestEntity.prototype.removeQuestEntityWeapons = function () {
        this.questEntityWeapons = [];
    };

    QuestEntity.prototype.setGlobalPosition = function (pos, force) {
        if (typeof force === "undefined") { force = false; }
        var oldPosition = this.globalPosition;

        this.globalPosition = pos;

        if (force == false && this.checkCollision()) {
            this.globalPosition = oldPosition;
            return false;
        }

        // Return true
        return true;
    };

    QuestEntity.prototype.shouldDie = function () {
        if ((this.destructible == true && this.hp <= 0) || this.dead == true)
            return true;

        return false;
    };

    QuestEntity.prototype.stop = function (stoppedDuration) {
        if (this.stopped == false) {
            this.stopped = true;
            this.stoppedDuration = stoppedDuration;
            return true;
        }

        return false;
    };

    QuestEntity.prototype.stopBerserk = function () {
        this.berserk = false;
    };

    QuestEntity.prototype.stopTurtle = function () {
        this.turtle = false;
    };

    QuestEntity.prototype.teleport = function (pos) {
        return this.setGlobalPosition(pos);
    };

    QuestEntity.prototype.testNewGlobalPosition = function (pos) {
        var oldPosition = this.globalPosition;

        this.globalPosition = pos;

        if (this.checkCollision()) {
            this.globalPosition = oldPosition;
            return false;
        }

        // Else, restore the old position and return true
        this.globalPosition = oldPosition;
        return true;
    };

    QuestEntity.prototype.update = function () {
        if (this.berserk) {
            if (this.berserkDuration > 0) {
                this.berserkDuration -= 1;
            } else {
                this.stopBerserk();
            }
        }

        // We handle animation
        this.handleAnimation();

        // We handle gravity, and then movement if gravity had no effect
        this.noMovementLastUpdate = true;
        if (this.handleGravity() == false)
            this.handleMovement();

        // We handle combat
        this.handleCombat();
    };

    // Default behaviour of this function : displaying a simple death message in the quest log
    QuestEntity.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage()));
    };

    // Public getters
    QuestEntity.prototype.getBerserk = function () {
        return this.berserk;
    };

    QuestEntity.prototype.getCbc = function () {
        return this.cbc;
    };

    QuestEntity.prototype.getDead = function () {
        return this.dead;
    };

    QuestEntity.prototype.getDestructible = function () {
        return this.destructible;
    };

    QuestEntity.prototype.getGlobalPosition = function () {
        return this.globalPosition;
    };

    QuestEntity.prototype.getHealthBar = function () {
        return this.healthBar;
    };

    QuestEntity.prototype.getHp = function () {
        return this.hp;
    };

    QuestEntity.prototype.getIsASpell = function () {
        return this.isASpell;
    };

    QuestEntity.prototype.getJumping = function () {
        return this.jumping;
    };

    QuestEntity.prototype.getLastDamageReason = function () {
        return this.lastDamageReason;
    };

    QuestEntity.prototype.getLastQuestEntitySpellCaster = function () {
        return this.questEntitySpellCasters[this.questEntitySpellCasters.length - 1];
    };

    QuestEntity.prototype.getLastQuestEntityWeapon = function () {
        return this.questEntityWeapons[this.questEntityWeapons.length - 1];
    };

    QuestEntity.prototype.getMaxHp = function () {
        return this.maxHp;
    };

    QuestEntity.prototype.getNaming = function () {
        return this.naming;
    };

    QuestEntity.prototype.getNoMovementLastUpdate = function () {
        return this.noMovementLastUpdate;
    };

    QuestEntity.prototype.getOutOfArea = function () {
        return this.outOfArea;
    };

    QuestEntity.prototype.getQuest = function () {
        return this.quest;
    };

    QuestEntity.prototype.getQuestEntityAnimation = function () {
        return this.questEntityAnimation;
    };

    QuestEntity.prototype.getQuestEntityMovement = function () {
        return this.questEntityMovement;
    };

    QuestEntity.prototype.getQuestEntityWeapons = function () {
        return this.questEntityWeapons;
    };

    QuestEntity.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    QuestEntity.prototype.getRenderAreaPosition = function () {
        return this.renderAreaPosition;
    };

    QuestEntity.prototype.getTeam = function () {
        return this.team;
    };

    QuestEntity.prototype.getTurtle = function () {
        return this.turtle;
    };

    // Public setters
    QuestEntity.prototype.setCanBeForcedToMove = function (canBeForcedToMove) {
        this.canBeForcedToMove = canBeForcedToMove;
    };

    QuestEntity.prototype.setCbc = function (cbc) {
        this.cbc = cbc;
    };

    QuestEntity.prototype.setDead = function (dead) {
        this.dead = dead;
    };

    QuestEntity.prototype.setDestructible = function (value) {
        this.destructible = value;
    };

    QuestEntity.prototype.setHealthBar = function (healthBar) {
        this.healthBar = healthBar;
    };

    QuestEntity.prototype.setHp = function (hp) {
        if (Bugs.getQuestBugLevel() >= 2)
            hp *= Random.between(1, 5);

        this.hp = hp;
        if (this.hp > this.maxHp)
            this.hp = this.maxHp;
        if (this.hp < 0)
            this.hp = 0;
        this.tryToUpdateHealthBar();
    };

    QuestEntity.prototype.setIsASpell = function (isASpell) {
        this.isASpell = isASpell;
    };

    QuestEntity.prototype.setMaxHp = function (maxHp) {
        if (Bugs.getQuestBugLevel() >= 4)
            maxHp *= Random.between(1, 5);

        this.maxHp = maxHp;
        this.tryToUpdateHealthBar();
    };

    QuestEntity.prototype.setOutOfArea = function (outOfArea) {
        this.outOfArea = outOfArea;
    };

    QuestEntity.prototype.setQuest = function (quest) {
        this.quest = quest;
    };

    QuestEntity.prototype.setQuestEntityAnimation = function (questEntityAnimation) {
        // We set the animation
        this.questEntityAnimation = questEntityAnimation;

        if (this.questEntityAnimation != null)
            this.questEntityAnimation.draw(this.renderArea);
    };

    QuestEntity.prototype.setQuestEntityMovement = function (questEntityMovement) {
        this.questEntityMovement = questEntityMovement;
    };

    QuestEntity.prototype.setRenderArea = function (renderArea) {
        this.renderArea = renderArea;
    };

    QuestEntity.prototype.setTeam = function (questEntityTeam) {
        this.team = questEntityTeam;
    };

    QuestEntity.prototype.setTransparency = function (transparency) {
        this.transparency = transparency;
    };

    // Private methods
    QuestEntity.prototype.handleAnimation = function () {
        if (this.questEntityAnimation != null) {
            this.questEntityAnimation.update();
            if (this.questEntityAnimation.shouldUpdateRenderAreaAtThisFrame()) {
                this.renderArea.resetAllButSize();
                this.questEntityAnimation.draw(this.renderArea);
            }
        }
    };

    QuestEntity.prototype.handleCombat = function () {
        for (var i = 0; i < this.questEntityWeapons.length; i++) {
            this.questEntityWeapons[i].handleCombat();
        }

        for (var i = 0; i < this.questEntitySpellCasters.length; i++) {
            this.questEntitySpellCasters[i].tryToCast();
        }
    };

    QuestEntity.prototype.handleGravity = function () {
        if (this.jumping == true) {
            // Decrease the jump duration
            this.jumpDuration -= 1;

            if (this.jumpDuration <= 0) {
                this.jumping = false;
                this.controlledFalling = true;
            } else {
                if (this.move(new Pos(0, -this.jumpSpeed)) == false) {
                    this.jumping = false;
                    this.controlledFalling = true;
                }
            }

            // Return false so that we can move while jumping
            return false;
        } else {
            if (this.antiGravity == false && this.getQuest().getGravityDisabled() == false) {
                if (this.questEntityMovement != null && this.questEntityMovement.getGravity()) {
                    if (this.move(new Pos(0, 1))) {
                        if (this.controlledFalling == false)
                            return true;
                    } else
                        this.controlledFalling = false;
                }
            } else {
                this.antiGravityDuration -= 1;
                if (this.antiGravityDuration <= 0)
                    this.antiGravity = false;
            }
        }

        // Gravity had no effect
        return false;
    };

    QuestEntity.prototype.handleMovement = function () {
        if (this.stopped == false) {
            if (this.questEntityMovement != null) {
                this.questEntityMovement.update();
                if (this.questEntityMovement.shouldMoveAtThisFrame()) {
                    if (this.questEntityMovement.getWormsLike() && this.antiGravity == false && this.getQuest().getWormsLikeDisabled() == false) {
                        if (this.moveWormsLike(this.questEntityMovement.getCurrentFrameMovement()))
                            this.noMovementLastUpdate = false;
                    } else {
                        if (this.move(this.questEntityMovement.getCurrentFrameMovement()))
                            this.noMovementLastUpdate = false;
                    }
                }
            }
        } else {
            this.stoppedDuration -= 1;
            if (this.stoppedDuration <= 0)
                this.stopped = false;
        }
    };

    QuestEntity.prototype.tryToUpdateHealthBar = function () {
        if (this.healthBar != null)
            this.healthBar.update();
    };
    return QuestEntity;
})();
///<reference path="QuestEntity.ts"/>
var BigShark = (function (_super) {
    __extends(BigShark, _super);
    // Constructor
    function BigShark(quest, pos) {
        _super.call(this, quest, pos, new Naming("A shark", "a shark"), new RenderArea(47, 10), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(14, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(13, 1), new Pos(2, 1)), new CollisionBox(this, new Pos(12, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(41, 2), new Pos(5, 1)), new CollisionBox(this, new Pos(11, 3), new Pos(7, 1)), new CollisionBox(this, new Pos(35, 3), new Pos(11, 1)), new CollisionBox(this, new Pos(2, 4), new Pos(40, 1)), new CollisionBox(this, new Pos(0, 5), new Pos(40, 1)), new CollisionBox(this, new Pos(1, 6), new Pos(44, 1)), new CollisionBox(this, new Pos(3, 7), new Pos(43, 1)), new CollisionBox(this, new Pos(15, 8), new Pos(3, 1)), new CollisionBox(this, new Pos(16, 9), new Pos(1, 1))), new QuestEntityMovement(new Pos(-1, 0)));

        // By default, finType is null
        this.finType = null;

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(200);
        this.setHp(200);

        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/bigShark"));

        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its sharp teeth", "its sharp teeth"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(49, 12))), Random.between(30, 42)));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
    }
    // draw()
    BigShark.prototype.draw = function (renderArea) {
        // Mother class draw method
        _super.prototype.draw.call(this, renderArea);

        if (this.finType != null) {
            switch (this.finType) {
                case BigSharkFinType.RED:
                    this.drawFinColor(renderArea, ColorType.BIGSHARK_FIN_RED);
                    break;
                case BigSharkFinType.GREEN:
                    this.drawFinColor(renderArea, ColorType.BIGSHARK_FIN_GREEN);
                    break;
                case BigSharkFinType.PURPLE:
                    this.drawFinColor(renderArea, ColorType.BIGSHARK_FIN_PURPLE);
                    break;
            }
        }
    };

    // willDie()
    BigShark.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(500 + Random.upTo(30) * 35), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));

        if (this.finType != null) {
            switch (this.finType) {
                case BigSharkFinType.RED:
                    this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedRedSharkFin", "You found a red shark fin", "You gain a red shark fin"));
                    break;
                case BigSharkFinType.GREEN:
                    this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedGreenSharkFin", "You found a green shark fin", "You gain a green shark fin"));
                    break;
                case BigSharkFinType.PURPLE:
                    this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedPurpleSharkFin", "You found a purple shark fin", "You gain a purple shark fin"));
                    break;
            }
        }
    };

    // Public methods
    BigShark.prototype.hasFin = function (finType) {
        this.finType = finType;
    };

    // Private methods
    BigShark.prototype.drawFinColor = function (renderArea, colorType) {
        if (this.getGlobalPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 11 >= 0 && this.getGlobalPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 18 <= 99) {
            // We draw it
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 14, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 15, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 0, new Color(colorType));
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 13, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 15, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 1, new Color(colorType));
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 12, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 16, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 2, new Color(colorType));
            renderArea.addBackgroundColor(this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 11, this.getGlobalPosition().x + this.getQuest().getRealQuestPosition().x + this.getRenderAreaPosition().x + this.getQuest().getGlobalDrawingOffset().x + 18, this.getGlobalPosition().y + this.getQuest().getRealQuestPosition().y + this.getRenderAreaPosition().y + this.getQuest().getGlobalDrawingOffset().y + 3, new Color(colorType));
        }
    };
    return BigShark;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var QuestEntitySpell = (function (_super) {
    __extends(QuestEntitySpell, _super);
    // Constructor
    function QuestEntitySpell(quest, pos, naming, renderArea, renderAreaPosition, cbc, questEntityMovement, questEntityAnimation) {
        if (typeof renderArea === "undefined") { renderArea = null; }
        if (typeof renderAreaPosition === "undefined") { renderAreaPosition = new Pos(0, 0); }
        if (typeof cbc === "undefined") { cbc = null; }
        if (typeof questEntityMovement === "undefined") { questEntityMovement = null; }
        if (typeof questEntityAnimation === "undefined") { questEntityAnimation = null; }
        _super.call(this, quest, pos, naming, renderArea, renderAreaPosition, cbc, questEntityMovement, questEntityAnimation);
        // Colors
        this.colors = [];

        // Set isASpell
        this.setIsASpell(true);
    }
    // Public methods
    QuestEntitySpell.prototype.addColor = function (color) {
        this.colors.push(color);
    };

    QuestEntitySpell.prototype.draw = function (renderArea) {
        // Call the mother class draw method
        _super.prototype.draw.call(this, renderArea);

        for (var i = 0; i < this.colors.length; i++) {
            this.colors[i].draw(renderArea, this.getQuest().getRealQuestPosition().plus(this.getGlobalPosition()).plus(this.getQuest().getGlobalDrawingOffset()));
        }
    };

    QuestEntitySpell.prototype.removeColors = function () {
        this.colors = [];
    };
    return QuestEntitySpell;
})(QuestEntity);
///<reference path="QuestEntitySpell.ts"/>
var Blackhole = (function (_super) {
    __extends(Blackhole, _super);
    // Constructor
    function Blackhole(quest, pos, damage, questEntityDamageReason) {
        // Call the mother class constructor
        _super.call(this, quest, pos, new Naming("A blackhole", "a blackhole"));

        // Set from parameters
        this.damage = damage;
        this.questEntityDamageReason = questEntityDamageReason;

        // Create the collision box collection
        this.cbcDamage = new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -3), new Pos(2, 1)), new CollisionBox(this, new Pos(-3, -2), new Pos(6, 1)), new CollisionBox(this, new Pos(-4, -1), new Pos(8, 1)), new CollisionBox(this, new Pos(-5, 0), new Pos(10, 1)), new CollisionBox(this, new Pos(-4, 1), new Pos(8, 1)), new CollisionBox(this, new Pos(-3, 2), new Pos(6, 1)), new CollisionBox(this, new Pos(-1, 3), new Pos(2, 1)));

        // Set the timer
        this.timer = 30;

        // Set the colors for the first time
        this.reAddColors();
    }
    // Public methods
    Blackhole.prototype.update = function () {
        // Lower the timer
        this.timer -= 1;

        // Re add the colors
        this.reAddColors();

        for (var i = 0; i < this.getQuest().getEntities().length; i++) {
            if (this.getQuest().getEntities()[i].getDestructible()) {
                if (this.getQuest().getEntities()[i].getCbc() != null) {
                    if (this.getQuest().getEntities()[i].getCbc().collidesWith(this.cbcDamage)) {
                        this.getQuest().getEntities()[i].inflictDamage(this.damage, this.questEntityDamageReason);
                    }
                }
            }
        }

        if (this.timer <= 0)
            this.setDead(true);

        // Call the mother class update method
        _super.prototype.update.call(this);
    };

    // Private methods
    Blackhole.prototype.addColorsFirstLayer = function (colorType) {
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-1, 0), new Pos(2, 1), new Color(colorType, true)));
    };

    Blackhole.prototype.addColorsSecondLayer = function (colorType) {
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-2, -1), new Pos(4, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-2, +1), new Pos(4, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-2, 0), new Pos(1, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+1, 0), new Pos(1, 1), new Color(colorType, true)));
    };

    Blackhole.prototype.addColorsThirdLayer = function (colorType) {
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-1, -3), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-3, -2), new Pos(6, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-4, -1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+2, -1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-5, 0), new Pos(3, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+2, 0), new Pos(3, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-4, +1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(+2, +1), new Pos(2, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-3, +2), new Pos(6, 1), new Color(colorType, true)));
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(-1, +3), new Pos(2, 1), new Color(colorType, true)));
    };

    Blackhole.prototype.reAddColors = function () {
        // Remove the colors
        this.removeColors();

        switch (this.timer) {
            case 30:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY240);
                break;
            case 29:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY220);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY240);
                break;
            case 28:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY200);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY220);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY240);
                break;
            case 27:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY180);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY200);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY220);
                break;
            case 26:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY160);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY180);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY200);
                break;
            case 25:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY140);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY160);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY180);
                break;
            case 24:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY120);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY140);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY160);
                break;
            case 23:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY100);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY120);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY140);
                break;
            case 22:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY80);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY100);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY120);
                break;
            case 21:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY60);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY80);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY100);
                break;
            case 20:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY40);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY60);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY80);
                break;
            case 19:
                this.addColorsFirstLayer(ColorType.BLACKHOLE_GREY20);
                this.addColorsSecondLayer(ColorType.BLACKHOLE_GREY40);
                this.addColorsThirdLayer(ColorType.BLACKHOLE_GREY60);
                break;
            default:
                this.addColorsFirstLayer(Random.fromArray([ColorType.BLACKHOLE_GREY20, ColorType.BLACKHOLE_GREY40, ColorType.BLACKHOLE_GREY60]));
                this.addColorsSecondLayer(Random.fromArray([ColorType.BLACKHOLE_GREY20, ColorType.BLACKHOLE_GREY40, ColorType.BLACKHOLE_GREY60]));
                this.addColorsThirdLayer(Random.fromArray([ColorType.BLACKHOLE_GREY20, ColorType.BLACKHOLE_GREY40, ColorType.BLACKHOLE_GREY60]));
                break;
        }
    };
    return Blackhole;
})(QuestEntitySpell);
var QuestEntityWeapon = (function () {
    // Constructor
    function QuestEntityWeapon(quest, questEntity, naming, cbc, damage) {
        if (typeof cbc === "undefined") { cbc = new CollisionBoxCollection(); }
        if (typeof damage === "undefined") { damage = 0; }
        this.closeCombatDelay = new QuestEntityWeaponDelay();
        this.quest = quest;
        this.questEntity = questEntity;
        this.naming = naming;
        this.damage = damage;
        this.cbc = cbc;
    }
    // Public methods
    QuestEntityWeapon.prototype.getRealDamage = function () {
        return this.damage;
    };

    QuestEntityWeapon.prototype.getRealDamageText = function () {
        return this.damage.toString();
    };

    QuestEntityWeapon.prototype.getSpeedText = function () {
        return this.closeCombatDelay.getText();
    };

    QuestEntityWeapon.prototype.handleCombat = function () {
        if (this.getRealDamage() > 0 && this.closeCombatDelay.tryToAttack()) {
            for (var i = 0; i < this.quest.getEntities().length; i++) {
                if (this.quest.getEntities()[i] != this.questEntity) {
                    if (this.quest.getEntities()[i].getTeam() != this.questEntity.getTeam()) {
                        if (this.collidesWith(this.quest.getEntities()[i])) {
                            // We hit it
                            this.hit(this.quest.getEntities()[i]);

                            // We warn the delay
                            this.closeCombatDelay.theWeaponAttacked();
                        }
                    }
                }
            }
        }
    };

    // Public getters
    QuestEntityWeapon.prototype.getCloseCombatDelay = function () {
        return this.closeCombatDelay;
    };

    QuestEntityWeapon.prototype.getNaming = function () {
        return this.naming;
    };

    // Private methods
    QuestEntityWeapon.prototype.collidesWith = function (questEntity) {
        if (this.cbc != null && questEntity.getCbc() != null)
            return this.cbc.collidesWith(questEntity.getCbc());

        // Else, we return false, there can't be any collision
        return false;
    };

    QuestEntityWeapon.prototype.hit = function (questEntity) {
        this.questEntity.hit(questEntity, this.getRealDamage(), new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.WEAPON).setQuestEntity(this.questEntity).setQuestEntityWeapon(this));
    };
    return QuestEntityWeapon;
})();
///<reference path="QuestEntityWeapon.ts"/>
var Bludgeon = (function (_super) {
    __extends(Bludgeon, _super);
    function Bludgeon() {
        _super.apply(this, arguments);
    }
    // Public methods
    Bludgeon.prototype.getRealDamage = function () {
        return Random.between(15, 25);
    };

    Bludgeon.prototype.getRealDamageText = function () {
        return "15-25";
    };
    return Bludgeon;
})(QuestEntityWeapon);
var Item = (function () {
    // Constructor
    function Item(savingName, databaseName, databaseDescriptionName, ascii) {
        // We set the variables
        this.savingName = savingName;
        this.databaseName = databaseName;
        this.databaseDescriptionName = databaseDescriptionName;
        this.ascii = ascii;

        // We register the savingName
        Saving.registerBool(this.savingName, false);
    }
    // Public methods
    Item.prototype.foundCandies = function (player, quest, howMany) {
        return howMany;
    };

    Item.prototype.hit = function (player, quest, questEntity, damage, reason) {
        return damage;
    };

    Item.prototype.inflictDamage = function (player, quest, damage, reason) {
        return damage;
    };

    Item.prototype.isPossessed = function () {
        return Saving.loadBool(this.savingName);
    };

    // Public getters
    Item.prototype.getAscii = function () {
        return this.ascii;
    };

    Item.prototype.getDatabaseDescriptionName = function () {
        return this.databaseDescriptionName;
    };

    Item.prototype.getDatabaseName = function () {
        return this.databaseName;
    };

    Item.prototype.getSavingName = function () {
        return this.savingName;
    };

    Item.prototype.getSpecialAbility = function () {
        return null;
    };
    return Item;
})();
///<reference path="Item.ts"/>
var EqItem = (function (_super) {
    __extends(EqItem, _super);
    function EqItem() {
        _super.apply(this, arguments);
    }
    // Public methods
    EqItem.prototype.update = function (player, quest) {
    };

    // Public getters
    EqItem.prototype.getQuestEntityWeapon = function (quest, player) {
        return new QuestEntityWeapon(quest, player, new Naming("???", "???"));
    };
    return EqItem;
})(Item);
///<reference path="EqItem.ts"/>
var BootsOfIntrospection = (function (_super) {
    __extends(BootsOfIntrospection, _super);
    // Constructor
    function BootsOfIntrospection() {
        _super.call(this, "eqItemBootsBootsOfIntrospection", "eqItemBootsBootsOfIntrospectionName", "eqItemBootsBootsOfIntrospectionDescription", "eqItems/boots/bootsOfIntrospection");
    }
    return BootsOfIntrospection;
})(EqItem);
///<reference path="Place.ts"/>
var Quest = (function (_super) {
    __extends(Quest, _super);
    // Constructor
    function Quest(game, specialInstruction) {
        if (typeof specialInstruction === "undefined") { specialInstruction = null; }
        _super.call(this, game);
        // Array of quest entities
        this.entities = [];
        // Render area
        this.renderArea = new RenderArea();
        this.globalDrawingOffset = new Pos(0, 0);
        // Drops
        this.candiesFound = new Resource();
        this.chocolateBarsFound = new Resource();
        this.itemsFound = [];
        // Is the quest ended? (and did we win?)
        this.questEnded = false;
        this.questEndedAndWeWon = false;
        // Player spells
        this.playerSpells = [];
        this.playerSpellsHotkeys = [];
        // Countdowns
        this.playerSpellsCountdown = 0;
        this.playerPotionsCountdown = 0;
        // Is gravity / worms like disabled?
        this.gravityDisabled = false;
        this.wormsLikeDisabled = false;
        // How many P potions did we use since the beginning of the quest?
        this.howManyPPotions = 0;

        // Set the special instruction
        this.specialInstruction = specialInstruction;

        // Reset the player
        this.getGame().resetPlayer();

        // Create player spells
        this.createPlayerSpells();

        // Set the real quest position
        this.realQuestPosition = new Pos(0, 2);

        // And the size to add to the real quest size
        this.sizeToAddToTheRealQuestSize = new Pos(0, 12);

        if (this.specialInstruction != null) {
            this.realQuestPosition.add(new Pos(0, 1));
        }

        if (this.playerSpells.length != 0) {
            this.realQuestPosition.add(new Pos(0, this.playerSpellsHeight));
        }

        // Add two delimiters in the quest log
        this.getGame().getQuestLog().addDelimiter();

        // Create the player collision boxes entity
        this.playerCollisionBoxes = new Wall(this, new Pos(0, 0));

        // Set the quest slowed down variable at the game level (and the quest speed up too)
        this.getGame().setQuestSlowedDown(false);
        this.getGame().setQuestSpeedUp(0);
    }
    // Public methods
    Quest.prototype.addPlayerCollisionBoxes = function (top, right, bottom, left) {
        // We remove boxes
        this.playerCollisionBoxes.removeBoxes();

        if (top)
            this.playerCollisionBoxes.addBox(new Pos(-1, -1), new Pos(this.getRealQuestSize().x + 2, 1));
        if (right)
            this.playerCollisionBoxes.addBox(new Pos(this.getRealQuestSize().x, -1), new Pos(1, this.getRealQuestSize().y + 2));
        if (bottom)
            this.playerCollisionBoxes.addBox(new Pos(-1, this.getRealQuestSize().y), new Pos(this.getRealQuestSize().x + 2, 1));
        if (left)
            this.playerCollisionBoxes.addBox(new Pos(-1, -1), new Pos(1, this.getRealQuestSize().y + 2));
    };

    Quest.prototype.addEntity = function (entity) {
        // Add the entity
        this.entities.push(entity);

        if (this.entities[this.entities.length - 1].checkCollision() && Bugs.getQuestBugLevel() < 4) {
            this.entities.splice(this.entities.length - 1, 1);
            return false;
        }

        // Else, successfully added, we return true
        return true;
    };

    Quest.prototype.addExitQuestButton = function (callbackCollection, buttonText) {
        this.addBackToButton(this.renderArea, callbackCollection, Database.getText(buttonText), Database.getTranslatedText(buttonText), buttonText, 0, ((this.renderArea.getWidth() - 100) - this.getGap()) / 2 + (50 - Database.getText(buttonText).length / 2));
    };

    Quest.prototype.castPlayerAcidRain = function (areaPosition, areaSize, maxLeftDistanceFromPlayer, maxRightDistanceFromPlayer) {
        if (typeof areaPosition === "undefined") { areaPosition = null; }
        if (typeof areaSize === "undefined") { areaSize = null; }
        if (typeof maxLeftDistanceFromPlayer === "undefined") { maxLeftDistanceFromPlayer = 50; }
        if (typeof maxRightDistanceFromPlayer === "undefined") { maxRightDistanceFromPlayer = 50; }
        if (areaPosition == null)
            areaPosition = new Pos(0, 0);

        if (areaSize == null)
            areaSize = new Pos(this.getRealQuestSize().x, this.getRealQuestSize().y);

        if (areaPosition.x < this.getGame().getPlayer().getGlobalPosition().x - maxLeftDistanceFromPlayer)
            areaPosition.x = this.getGame().getPlayer().getGlobalPosition().x - maxLeftDistanceFromPlayer;

        if (areaPosition.x + areaSize.x > this.getGame().getPlayer().getGlobalPosition().x + maxRightDistanceFromPlayer)
            areaSize.x = this.getGame().getPlayer().getGlobalPosition().x + maxRightDistanceFromPlayer - areaPosition.x;

        for (var i = areaPosition.x; i < areaPosition.x + areaSize.x; i++) {
            if (Random.oneChanceOutOf((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 3 : 5))) {
                this.addEntity(this.createPlayerAcidDrop(new Pos(i, areaPosition.y - Random.upTo(5))));
            }
        }

        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast an acid rain!"));
    };

    Quest.prototype.castPlayerAntiGravityPotion = function () {
        this.getGame().getPlayer().beginAntiGravity((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 50 : 30));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink an anti gravity potion!"));
    };

    Quest.prototype.castPlayerBlackDemons = function () {
        // X position where the demons will start
        var xPosition = 0;

        // Y position of the beginning of the demon column
        var yBeginningPosition = 0;

        // Y position of the end of the demon column
        var yEndingPosition = this.getRealQuestSize().y;

        for (var i = yBeginningPosition; i < yEndingPosition; i++) {
            if (i % 5 == 0)
                this.addEntity(new PlayerSummonedDemon(this, new Pos(xPosition, i), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 80 : 50)));
        }

        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You summoned black demons!"));
    };

    Quest.prototype.castPlayerBlackhole = function () {
        // Array which will contain the indices (in the entities array) of all possible enemies
        var indices = [];

        // The blackhole position
        var position;

        for (var i = 0; i < this.getEntities().length; i++) {
            if (this.getEntities()[i].getDestructible() && this.getEntities()[i].getTeam() != this.getGame().getPlayer().getTeam()) {
                // We add its index
                indices.push(i);
            }
        }

        if (indices.length > 0) {
            position = this.getEntities()[indices[Random.between(0, indices.length - 1)]].getRenderAreaCenter();
        } else {
            position = this.getGame().getPlayer().getRenderAreaCenter();
        }

        // We cast the blackhole on the position we just set
        this.addEntity(new Blackhole(this, position, 100, this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("A blackhole", "a blackhole"))));

        // We add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast the black hole spell!"));
    };

    Quest.prototype.castPlayerBerserkPotion = function () {
        this.getGame().getPlayer().beginBerserk((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 120 : 80));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a berserk potion!"));
    };

    Quest.prototype.castPlayerCloningPotion = function () {
        // The clone to be added
        var clone = null;

        switch (this.getGame().getPlayer().getCharacterType()) {
            case PlayerCharacterType.CANDYBOX:
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                clone = new PlayerCloneCandyBox(this, this.getGame().getPlayer().getGlobalPosition().plus(new Pos(0, -1)));
                break;
            case PlayerCharacterType.MEDIUM:
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                clone = new PlayerCloneMedium(this, this.getGame().getPlayer().getGlobalPosition().plus(new Pos(0, -4)));
                break;
        }

        if (this.addEntity(clone) == false) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a cloning potion but there's not enough space for a clone to appear."));
            return;
        }

        // Else, config the clone as a player (this config method is made to be overriden by the daughter classes)
        this.configPlayerOrClone(clone);

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a cloning potion!"));
    };

    Quest.prototype.castPlayerEraseMagic = function () {
        // Will be true if at least one spell was erased
        var magicErased = false;

        for (var i = 0; i < this.getEntities().length; i++) {
            if (this.getEntities()[i].getIsASpell()) {
                this.getEntities()[i].setDead(true);
                magicErased = true;
            }
        }

        if (magicErased)
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast an erase magic spell!"));
else
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed to cast an erase magic spell : there's no magic to erase."));
    };

    Quest.prototype.castPlayerFireball = function (movement) {
        if (typeof movement === "undefined") { movement = new Pos(2, 0); }
        // Create the fireball
        var fireball = new Fireball(this, this.getGame().getPlayer().getSpellCastingPosition(), new Naming("A fireball", "a fireball"), new Color(ColorType.PLAYER_FIREBALL), new Pos((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 6 : 4), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 3 : 2)), 45 * (Saving.loadBool("gridItemPossessedRedSharkFin") ? 3 : 1), this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("A fireball", "a fireball")));

        // No target
        fireball.setTargetTypeNoTarget(movement);

        // Add the entity
        this.addEntity(fireball);

        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast a fireball!"));
    };

    Quest.prototype.castPlayerHealthPotion = function () {
        this.getGame().getPlayer().heal((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 200 : 100));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a health potion!"));
    };

    Quest.prototype.castPlayerJump = function () {
        if (Saving.loadBool("gridItemPossessedFeather") == false)
            this.getGame().getPlayer().jump(3);
else
            this.getGame().getPlayer().jump(6);
    };

    Quest.prototype.castPlayerObsidianWall = function () {
        // X position of the wall
        var xPosition = this.getGame().getPlayer().getSpellCastingPosition().x;

        // Beginning of the wall
        var yBeginningPosition = 0;

        // End of the wall
        var yEndingPosition = this.getRealQuestSize().y;

        for (var i = yBeginningPosition; i < yEndingPosition; i++) {
            this.addEntity(new ObsidianBrick(this, new Pos(xPosition, i), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 300 : 200)));
        }

        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast an obsidian wall!"));
    };

    Quest.prototype.castPlayerPPotion = function () {
        // Variables which will be used for calculations
        var hp;

        // Additional message, depends on the effect
        var additionalMessage = null;

        if (this.getGame().getPlayer().getTurtle()) {
            // We're not a turtle anymore
            this.getGame().getPlayer().stopTurtle();

            // We lose half of our health points
            hp = Math.ceil(this.getGame().getPlayer().getHp() / 2);
            this.getGame().getPlayer().heal(-hp);

            // Set the message
            additionalMessage = "You lose " + hp + " health points.";
        } else if (this.getGame().getPlayer().getHp() < (this.getGame().getPlayer().getMaxHp() * 8 / 100)) {
            switch (Random.between(0, 8)) {
                case 0:
                    this.getGame().getPlayer().heal(200);
                    additionalMessage = "You gain 200 health points.";
                    break;
                case 1:
                    this.getGame().getPlayer().heal(400);
                    additionalMessage = "You gain 400 health points.";
                    break;
                case 2:
                    this.getGame().getPlayer().heal(600);
                    additionalMessage = "You gain 600 health points.";
                    break;
                case 3:
                    hp = this.getGame().getPlayer().getMaxHp() * 50 / 100;
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                    break;
                case 4:
                    hp = this.getGame().getPlayer().getMaxHp() * 65 / 100;
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                    break;
                case 5:
                    hp = this.getGame().getPlayer().getMaxHp() * 80 / 100;
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                    break;
                case 6:
                    this.getGame().getPlayer().heal(10);
                    additionalMessage = "You gain 10 health points.";
                    break;
                case 7:
                    this.getGame().getPlayer().heal(10);
                    additionalMessage = "You gain 7 health points.";
                    break;
                case 8:
                    this.getGame().getPlayer().heal(10);
                    additionalMessage = "You gain 3 health points.";
                    break;
            }
        } else {
            if (Random.oneChanceOutOf(Math.ceil((this.howManyPPotions + 1) / 2))) {
                // 20%/30% of our health points
                hp = this.getGame().getPlayer().getMaxHp() * (Random.flipACoin() ? 20 : 30) / 100;

                if (Random.oneChanceOutOf(3)) {
                    this.getGame().getPlayer().heal(-hp);
                    additionalMessage = "You lose " + hp + " health points.";
                } else {
                    this.getGame().getPlayer().heal(hp);
                    additionalMessage = "You gain " + hp + " health points.";
                }
            } else if (Random.oneChanceOutOf(Math.ceil((this.howManyPPotions + 1) / 6))) {
                switch (Random.between(0, 3)) {
                    case 0:
                        this.getGame().getPlayer().stop(Random.between(30, 100));
                        additionalMessage = "You can't move anymore.";
                        break;
                    case 1:
                        this.getGame().getPlayer().beginTurtle(Random.between(30, 100));
                        additionalMessage = "Now you're a turtle!";
                        break;
                    case 2:
                        this.getGame().getPlayer().setHp(this.getGame().getPlayer().getMaxHp());
                        additionalMessage = "You recover all your health.";
                        break;
                    case 3:
                        this.getGame().getPlayer().setHp(10);
                        additionalMessage = "You only have 10 health points now. Great.";
                        break;
                }
            } else {
                this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a P potion! Something strange is happening."));
                switch (Random.between(0, 2)) {
                    case 0:
                        this.castPlayerAcidRain();
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        break;
                    case 1:
                        this.castPlayerAcidRain();
                        this.castPlayerAcidRain();
                        this.castPlayerAcidRain();
                        this.castPlayerTeleport();
                        break;
                    case 2:
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        this.castPlayerFireball();
                        this.castPlayerTeleport();
                        this.castPlayerFireball();
                        break;
                }
                this.getGame().getQuestLog().addMessage(new QuestLogMessage("Wait. What did you just do?"));
            }
        }

        // Increase the number of used P potions
        this.howManyPPotions += 1;

        if (additionalMessage != null)
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a P potion! " + additionalMessage));
    };

    Quest.prototype.castPlayerThornsShield = function () {
        // Create the thorns positions array, which will contain all the positions where we want to add thorns
        var positions = this.getGame().getPlayer().getThornsPositionsArray();

        for (var i = 0; i < positions.length; i++) {
            // Create the thorn
            var thorn = new Fireball(this, this.getGame().getPlayer().getGlobalPosition().plus(positions[i]), new Naming("A magical thorn", "a magical thorn"), new Color(ColorType.PLAYER_THORN), new Pos(2, 1), (this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 40 : 20), this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical thorn", "a magical thorn")));

            // Add the entity
            this.addEntity(thorn);
        }

        // Add a message to the log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast a thorns shield!"));
    };

    Quest.prototype.castPlayerTurtlePotion = function () {
        this.getGame().getPlayer().beginTurtle((this.getGame().isEquipped("hat", "eqItemHatSorceressHat") ? 120 : 80));
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You drink a turtle potion!"));
    };

    Quest.prototype.castPlayerSqueeze = function () {
        if (this.getGame().getPlayer().getQuestEntityMovement() != null)
            this.getGame().getPlayer().squeeze();
    };

    Quest.prototype.castPlayerTeleport = function (where, teleportArea) {
        if (typeof where === "undefined") { where = null; }
        if (typeof teleportArea === "undefined") { teleportArea = null; }
        var teleportSucceeded = false;
        var teleportPosition;

        if (where != null && teleportArea == null) {
            if (this.getGame().getPlayer().teleport(where))
                teleportSucceeded = true;
        } else {
            if (where == null)
                where = new Pos(0, 0);

            if (teleportArea == null)
                teleportArea = new Pos(this.getRealQuestSize().x - 1, this.getRealQuestSize().y - 1);

            for (var i = 0; i < 10; i++) {
                teleportPosition = where.plus(Random.fromPosition(teleportArea));

                if (teleportPosition != this.getGame().getPlayer().getGlobalPosition() && this.getGame().getPlayer().teleport(teleportPosition)) {
                    teleportSucceeded = true;
                    break;
                }
            }
        }

        if (teleportSucceeded) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You cast a teleport spell!"));
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed to cast the teleport spell. Magic works in mysterious ways..."));
        }
    };

    Quest.prototype.castPlayerTimeSlowing = function () {
        // We invert questSlowedDown
        this.getGame().setQuestSlowedDown(!this.getGame().getQuestSlowedDown());
    };

    Quest.prototype.castPlayerXPotion = function () {
        this.getGame().goToYourself();
    };

    Quest.prototype.configPlayerOrClone = function (entity) {
    };

    Quest.prototype.drawAroundQuest = function () {
        // Draw the player spells
        this.drawPlayerSpells();

        // Draw the special instruction
        this.drawSpecialInstruction();

        // Draw the quest log
        this.drawQuestLog();
    };

    Quest.prototype.drawEntities = function () {
        for (var i = 0; i < this.entities.length; i++) {
            // Let the entity draw itself
            this.entities[i].draw(this.renderArea);

            if (this.entities[i].getHealthBar() != null)
                this.entities[i].getHealthBar().draw(this.renderArea);
        }
    };

    Quest.prototype.endQuest = function (win) {
        if (win) {
            // Handle candies drops
            // We add a message to the log to tell about the candies we found
            this.getGame().getQuestLog().addMessage(new QuestLogMessage(this.getCandiesDropMessage()));

            // We give him/her the candies found during the quest
            this.candiesFound.transferTo(this.getGame().getCandies());

            if (this.chocolateBarsFound.getCurrent() > 0) {
                // We add a message to the log to tell about the chocolate bars we found
                this.getGame().getQuestLog().addMessage(new QuestLogMessage(this.getChocolateBarsDropMessage(), null, true));

                // We give him/her the chocolate bars found during the quest
                this.chocolateBarsFound.transferTo(this.getGame().getChocolateBars());
            }

            for (var i = 0; i < this.itemsFound.length; i++) {
                // We show the drop message
                this.itemsFound[i].get();

                // We give him/her the item
                this.getGame().gainItem(this.itemsFound[i].getSavingName());
            }

            // We won
            this.questEndedAndWeWon = true;
        }

        // The quest ended !
        this.questEnded = true;
    };

    Quest.prototype.foundCandies = function (howMany) {
        for (var savingName in this.getGame().getSelectedEqItems()) {
            howMany = this.getGame().getSelectedEqItems()[savingName].foundCandies(this.getGame().getPlayer(), this, howMany);
        }

        // We add the candies found
        this.candiesFound.add(howMany);

        // We return the number of candies found
        return howMany;
    };

    Quest.prototype.foundChocolateBars = function (howMany) {
        // We add the chocolate bars found
        this.chocolateBarsFound.add(howMany);

        // We return the number of chocolate bars found
        return howMany;
    };

    Quest.prototype.foundGridOrEqItem = function (itemFound) {
        if (Saving.loadBool(itemFound.getSavingName()) == true)
            return false;

        for (var i = 0; i < this.itemsFound.length; i++) {
            if (itemFound.getSavingName() == this.itemsFound[i].getSavingName())
                return false;
        }

        // We add the item to our found array, tell it that we found it, and return true
        this.itemsFound.push(itemFound);
        this.itemsFound[this.itemsFound.length - 1].found();
        return true;
    };

    Quest.prototype.forceMovingAllEntities = function (movement) {
        for (var i = 0; i < this.entities.length; i++) {
            this.entities[i].forceMoving(movement);
        }
    };

    Quest.prototype.getCandiesDropMessage = function () {
        return "You gain " + Algo.pluralFormat(this.candiesFound.getCurrent(), " candy", " candies") + ".";
    };

    Quest.prototype.getCandiesFoundMessage = function () {
        return "(" + this.candiesFound.getCurrentAsString() + " found so far)";
    };

    Quest.prototype.getChocolateBarsDropMessage = function () {
        return "You gain " + Algo.pluralFormat(this.chocolateBarsFound.getCurrent(), " chocolate bar", " chocolate bars") + ".";
    };

    Quest.prototype.increasePlayerPotionsCountdown = function (howMuch) {
        this.playerPotionsCountdown += howMuch;
    };

    Quest.prototype.increasePlayerSpellsCountdown = function (howMuch) {
        this.playerSpellsCountdown += howMuch;
    };

    Quest.prototype.lowerCountdowns = function () {
        if (this.playerSpellsCountdown > 0)
            this.playerSpellsCountdown -= 1;

        if (this.playerPotionsCountdown > 0)
            this.playerPotionsCountdown -= 1;
    };

    Quest.prototype.postDraw = function () {
        this.getGame().updatePlace();
    };

    Quest.prototype.preDraw = function () {
        // Reset the area
        this.renderArea.resetAllButSize();
    };

    Quest.prototype.resizeQuest = function (width, height, forcedRealQuestSize) {
        if (typeof forcedRealQuestSize === "undefined") { forcedRealQuestSize = null; }
        // Set the real quest drawing size
        this.realQuestDrawingSize = new Pos(width, height);

        if (forcedRealQuestSize == null)
            this.realQuestSize = new Pos(width, height);
else
            this.realQuestSize = forcedRealQuestSize;

        // Resize the area
        this.renderArea.resize(this.realQuestPosition.x + width + this.sizeToAddToTheRealQuestSize.x, this.realQuestPosition.y + height + this.sizeToAddToTheRealQuestSize.y);
    };

    Quest.prototype.update = function () {
    };

    Quest.prototype.updateEntities = function () {
        // We store the current length before calling update stuff
        var length = this.entities.length;

        for (var i = 0; i < length; i++) {
            this.entities[i].update();
        }

        for (var i = 0; i < this.entities.length; i++) {
            if (this.entities[i].shouldDie()) {
                this.entities[i].willDie();
                this.entities[i].setDead(true);
                this.entities.splice(i, 1);
                i--;
            } else if (this.entities[i].isOutOfArea()) {
                this.entities[i].setOutOfArea(true);
                this.entities.splice(i, 1);
                i--;
            }
        }

        // Lower countdowns
        this.lowerCountdowns();
    };

    Quest.prototype.willBeDisplayed = function () {
        // Some some stuff needed because we start questing
        this.getGame().setWeAreQuesting(true);
        this.getGame().getQuestCallbackCollection().addCallback(this.update.bind(this));

        for (var i = 0; i < this.playerSpellsHotkeys.length; i++) {
            this.getGame().addHotkey(this.playerSpellsHotkeys[i]);
        }
    };

    Quest.prototype.willBeClosed = function () {
        this.getGame().setWeAreQuesting(false);
    };

    // Public getters
    Quest.prototype.getBottomLimit = function () {
        return 20;
    };

    Quest.prototype.getCandiesFound = function () {
        return this.candiesFound;
    };

    Quest.prototype.getChocolateBarsFound = function () {
        return this.chocolateBarsFound;
    };

    Quest.prototype.getEntities = function () {
        return this.entities;
    };

    Quest.prototype.getGap = function () {
        // We find the perfect gap so that the player would be in the center
        var gap = (this.renderArea.getWidth() - 100) - (this.getGame().getPlayer().getGlobalPosition().x - 50) * 2;

        if (gap > (this.renderArea.getWidth() - 100))
            gap = (this.renderArea.getWidth() - 100);
        if (gap < -(this.renderArea.getWidth() - 100))
            gap = -(this.renderArea.getWidth() - 100);

        // We return the possibly corrected gap
        return gap;
    };

    Quest.prototype.getGlobalDrawingOffset = function () {
        return this.globalDrawingOffset;
    };

    Quest.prototype.getGravityDisabled = function () {
        return this.gravityDisabled;
    };

    Quest.prototype.getLastEntity = function () {
        return this.entities[this.entities.length - 1];
    };

    Quest.prototype.getLeftLimit = function () {
        return 20;
    };

    Quest.prototype.getPlayerCollisionBoxes = function () {
        return this.playerCollisionBoxes;
    };

    Quest.prototype.getPlayerPotionsCountdown = function () {
        return this.playerPotionsCountdown;
    };

    Quest.prototype.getPlayerSpellsCountdown = function () {
        return this.playerSpellsCountdown;
    };

    Quest.prototype.getQuestEnded = function () {
        return this.questEnded;
    };

    Quest.prototype.getQuestEndedAndWeWon = function () {
        return this.questEndedAndWeWon;
    };

    Quest.prototype.getRealQuestDrawingSize = function () {
        return this.realQuestDrawingSize;
    };

    Quest.prototype.getRealQuestPosition = function () {
        return this.realQuestPosition;
    };

    Quest.prototype.getRealQuestSize = function () {
        return this.realQuestSize;
    };

    Quest.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    Quest.prototype.getRightLimit = function () {
        return 20;
    };

    Quest.prototype.getTopLimit = function () {
        return 20;
    };

    Quest.prototype.getWormsLikeDisabled = function () {
        return this.wormsLikeDisabled;
    };

    // Public setters
    Quest.prototype.setGlobalDrawingOffset = function (globalDrawingOffset) {
        this.globalDrawingOffset = globalDrawingOffset;
    };

    Quest.prototype.setGravityDisabled = function (gravityDisabled) {
        this.gravityDisabled = gravityDisabled;
    };

    Quest.prototype.setWormsLikeDisabled = function (wormsLikeDisabled) {
        this.wormsLikeDisabled = wormsLikeDisabled;
    };

    // Private methods
    Quest.prototype.addPlayerSpell = function (playerSpell) {
        this.playerSpells.push(playerSpell);
        this.playerSpellsHotkeys.push(playerSpell.getHotkey());
    };

    Quest.prototype.createPlayerAcidDrop = function (position) {
        var acidDrop = new Fireball(this, position, new Naming("An acid drop", "an acid drop"), new Color(ColorType.PLAYER_ACID_DROP), new Pos(1, 1), 8, this.getGame().getPlayer().getAndPossiblyCreateSpellCastingDamageReason(new Naming("An acid drop", "an acid drop")));

        // No target
        acidDrop.setTargetTypeNoTarget(new Pos(0, 1));

        // Return the acid drop
        return acidDrop;
    };

    Quest.prototype.createPlayerSpells = function () {
        if (Saving.loadBool("gridItemPossessedBeginnersGrimoire")) {
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellAcidRainButton", new Pos(0, 0), "Acid rain", new Color(ColorType.QUEST_BUTTON_ACID_RAIN), new CallbackCollection(this.castPlayerAcidRain.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "a"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellFireballButton", new Pos(11, 0), "Fireball", new Color(ColorType.QUEST_BUTTON_FIREBALL), new CallbackCollection(this.castPlayerFireball.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "f"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellTeleportButton", new Pos(21, 0), "Teleport", new Color(ColorType.QUEST_BUTTON_TELEPORT), new CallbackCollection(this.castPlayerTeleport.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "t"));
        }
        if (Saving.loadBool("gridItemPossessedAdvancedGrimoire")) {
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellEraseMagicButton", new Pos(33, 0), "Erase magic", new Color(ColorType.QUEST_BUTTON_ERASE_MAGIC), new CallbackCollection(this.castPlayerEraseMagic.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "e"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellThornsShieldButton", new Pos(46, 0), "Thorns shield", new Color(ColorType.QUEST_BUTTON_THORNS_SHIELD), new CallbackCollection(this.castPlayerThornsShield.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 6, " "));
        }
        if (Saving.loadBool("gridItemPossessedBlackMagicGrimoire")) {
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellObsidianWallButton", new Pos(63, 0), "Obsidian wall", new Color(ColorType.QUEST_BUTTON_OBSIDIAN_WALL), new CallbackCollection(this.castPlayerObsidianWall.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 0, "o"));
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellBlackDemonsButton", new Pos(78, 0), "Black demons", new Color(ColorType.QUEST_BUTTON_BLACK_DEMONS), new CallbackCollection(this.castPlayerBlackDemons.bind(this)), QuestPlayerSpellCountdownType.SPELLS, this.getMagicCountdownTime(), 6, "d"));
        }

        if (Saving.loadBool("questPlayerSpellHealthPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellHealthPotionButton", new Pos(0, 2), "Health", new Color(ColorType.QUEST_BUTTON_HEALTH_POTION), new CallbackCollection(this.castPlayerHealthPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "h", "questPlayerSpellHealthPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellTurtlePotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellTurtlePotionButton", new Pos(13, 2), "Turtle", new Color(ColorType.QUEST_BUTTON_TURTLE_POTION), new CallbackCollection(this.castPlayerTurtlePotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 2, "r", "questPlayerSpellTurtlePotionQuantity"));
        if (Saving.loadBool("questPlayerSpellAntiGravityPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellAntiGravityPotionButton", new Pos(26, 2), "Anti gravity", new Color(ColorType.QUEST_BUTTON_ANTI_GRAVITY_POTION), new CallbackCollection(this.castPlayerAntiGravityPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 5, "g", "questPlayerSpellAntiGravityPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellBerserkPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellBerserkPotionButton", new Pos(45, 2), "Berserk", new Color(ColorType.QUEST_BUTTON_BERSERK_POTION), new CallbackCollection(this.castPlayerBerserkPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "b", "questPlayerSpellBerserkPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellCloningPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellCloningPotionButton", new Pos(59, 2), "Cloning", new Color(ColorType.QUEST_BUTTON_CLONING_POTION), new CallbackCollection(this.castPlayerCloningPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "c", "questPlayerSpellCloningPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellPPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellPPotionButton", new Pos(73, 2), "P", new Color(ColorType.QUEST_BUTTON_P_POTION), new CallbackCollection(this.castPlayerPPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "p", "questPlayerSpellPPotionQuantity"));
        if (Saving.loadBool("questPlayerSpellXPotionHasSpell"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellXPotionButton", new Pos(81, 2), "X", new Color(ColorType.QUEST_BUTTON_X_POTION), new CallbackCollection(this.castPlayerXPotion.bind(this)), QuestPlayerSpellCountdownType.POTIONS, this.getMagicCountdownTime(), 0, "x", "questPlayerSpellXPotionQuantity"));

        if (Saving.loadBool("gridItemPossessedTimeRing"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellTimeSlowingButton", new Pos(0, 4), "Time slowing", new Color(ColorType.QUEST_BUTTON_SOME_OBJECT), new CallbackCollection(this.castPlayerTimeSlowing.bind(this)), QuestPlayerSpellCountdownType.ITEM_CAPACITIES, 0, 8, "w"));
        if (Saving.loadBool("gridItemPossessedPogoStick"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellJumpButton", new Pos(14, 4), "Jump", new Color(ColorType.QUEST_BUTTON_SOME_OBJECT), new CallbackCollection(this.castPlayerJump.bind(this)), QuestPlayerSpellCountdownType.ITEM_CAPACITIES, 0, 0, "j"));
        if (Saving.loadBool("gridItemPossessedSponge"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpellSqueezeButton", new Pos(20, 4), "Squeeze", new Color(ColorType.QUEST_BUTTON_SOME_OBJECT), new CallbackCollection(this.castPlayerSqueeze.bind(this)), QuestPlayerSpellCountdownType.ITEM_CAPACITIES, 0, 0, "s"));

        if (Saving.loadBool("gridItemPossessedPurpleSharkFin"))
            this.addPlayerSpell(new QuestPlayerSpell(this, "questPlayerSpell", new Pos(38, 4), "Black hole spell (purple shark fin) (once per quest)", new Color(ColorType.QUEST_BLACKHOLE_SPELL), new CallbackCollection(this.castPlayerBlackhole.bind(this)), QuestPlayerSpellCountdownType.BLACKHOLE, 1, 4, "k"));

        // Set the player spells height from the max height found in all the spells added
        this.playerSpellsHeight = 0;
        for (var i = 0; i < this.playerSpells.length; i++) {
            if (this.playerSpells[i].getButtonPosition().y > this.playerSpellsHeight)
                this.playerSpellsHeight = this.playerSpells[i].getButtonPosition().y;
        }
        this.playerSpellsHeight += 1;
        this.playerSpellsHeight += 1;
    };

    Quest.prototype.drawPlayerSpells = function () {
        if (this.playerSpells.length > 0) {
            var baseXPosition = ((this.renderArea.getWidth() - 100) - this.getGap()) / 2;

            for (var i = 0; i < this.playerSpells.length; i++) {
                this.playerSpells[i].draw(this.renderArea, new Pos(baseXPosition, 2));
            }

            if (this.playerSpellsCountdown > 0) {
                this.renderArea.drawString("(" + Math.ceil(this.playerSpellsCountdown / 10).toString() + " sec)", baseXPosition + 92, 2);
                this.renderArea.addColor(baseXPosition + 92, baseXPosition + 100, 2, new Color(ColorType.QUEST_COUNTDOWN));
            }

            if (this.playerPotionsCountdown > 0) {
                this.renderArea.drawString("(" + Math.ceil(this.playerPotionsCountdown / 10).toString() + " sec)", baseXPosition + 92, 4);
                this.renderArea.addColor(baseXPosition + 92, baseXPosition + 100, 4, new Color(ColorType.QUEST_COUNTDOWN));
            }
        }
    };

    Quest.prototype.drawQuestLog = function () {
        this.getGame().getQuestLog().draw(this.renderArea, new Pos(((this.renderArea.getWidth() - 100) - this.getGap()) / 2, this.renderArea.getHeight() - 12));
    };

    Quest.prototype.drawSpecialInstruction = function () {
        if (this.specialInstruction != null) {
            this.renderArea.drawString(this.specialInstruction, this.realQuestPosition.x, this.realQuestPosition.y - 1);
            this.renderArea.addBold(this.realQuestPosition.x, this.realQuestPosition.x + this.specialInstruction.length, this.realQuestPosition.y - 1);
        }
    };

    Quest.prototype.getMagicCountdownTime = function () {
        var time = 0;

        if (this.getGame().isEquipped("hat", "eqItemHatSorceressHat"))
            time = 50;
else
            time = 80;

        // Reduce the time thanks to the magic gift
        time -= time * (Saving.loadNumber("gameGiftMagic") * 15 / 100);

        if (time < 0)
            time = 0;

        // Return the time
        return time;
    };
    return Quest;
})(Place);
///<reference path="Quest.ts"/>
var Bridge = (function (_super) {
    __extends(Bridge, _super);
    // Constructor
    function Bridge(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(138, 32);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, false, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 17));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add a wall at the bridge position
        this.addBridgeFloor();

        // Add the troll
        this.addTroll();

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You're trying to cross the bridge. A huge troll is blocking your way!"));
    }
    // Public methods
    Bridge.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    Bridge.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to cross the bridge!"));
            Saving.saveBool("mainMapDoneBridge", true);
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You didn't manage to cross the bridge."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    Bridge.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/bridge/bridge"), this.getRealQuestPosition().x, this.getRealQuestPosition().y + 17);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    Bridge.prototype.addBridgeFloor = function () {
        // Create the wall
        var wall = new Wall(this, new Pos(0, 18));

        // Add boxes
        wall.addBox(new Pos(0, 0), new Pos(138, 2));
        wall.addBox(new Pos(3, 2), new Pos(10, 1));
        wall.addBox(new Pos(6, 3), new Pos(4, 11));
        wall.addBox(new Pos(64, 2), new Pos(10, 1));
        wall.addBox(new Pos(67, 3), new Pos(4, 11));
        wall.addBox(new Pos(126, 2), new Pos(10, 1));
        wall.addBox(new Pos(129, 3), new Pos(4, 11));

        // Add the wall to the quest
        this.addEntity(wall);
    };

    Bridge.prototype.addTroll = function () {
        var troll = new Troll(this, new Pos(100, 8));
        troll.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0), 12));
        troll.setHealthBar(new QuestEntityHealthBar(troll, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(troll);
    };

    Bridge.prototype.thePlayerWon = function () {
        if (this.getGame().getPlayer().getGlobalPosition().x >= 138)
            return true;

        // Else we return false
        return false;
    };
    return Bridge;
})(Quest);
var Bugs;
(function (Bugs) {
    // Variables
    var graphicalBugLevel = 0;
    var questBugLevel = 0;
    var ultimateBugLevel = 0;

    // Various functions
    function changeRandomCharacter(str) {
        var index = Random.between(0, str.length - 1);
        return str.substr(0, index) + getRandomCharacter() + str.substr(index + 1);
    }
    Bugs.changeRandomCharacter = changeRandomCharacter;

    function getRandomCharacter() {
        return Random.fromArray([
            "a",
            "b",
            "c",
            "d",
            "e",
            "f",
            "g",
            "h",
            "i",
            "j",
            "k",
            "l",
            "m",
            "n",
            "o",
            "p",
            "q",
            "r",
            "s",
            "t",
            "u",
            "v",
            "w",
            "x",
            "y",
            "z",
            "#",
            "_",
            "/",
            "-",
            "+",
            "*",
            "^",
            ";",
            ",",
            ".",
            ":",
            "!",
            "В§",
            "$",
            "ВЈ",
            "Г№",
            "ГЁ",
            "Г ",
            "@",
            ")",
            "(",
            "|",
            "]",
            "}",
            "{",
            "(",
            "~",
            "Г©",
            "<",
            ">",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "%",
            "`",
            "'",
            "Г§"
        ]);
    }
    Bugs.getRandomCharacter = getRandomCharacter;

    // Getters
    function getGraphicalBugLevel() {
        return graphicalBugLevel;
    }
    Bugs.getGraphicalBugLevel = getGraphicalBugLevel;

    function getQuestBugLevel() {
        return questBugLevel;
    }
    Bugs.getQuestBugLevel = getQuestBugLevel;

    function getUltimateBugLevel() {
        return ultimateBugLevel;
    }
    Bugs.getUltimateBugLevel = getUltimateBugLevel;

    // Setters
    function setGraphicalBugLevel(graphicalBugLevel_) {
        graphicalBugLevel = graphicalBugLevel_;
    }
    Bugs.setGraphicalBugLevel = setGraphicalBugLevel;

    function setQuestBugLevel(questBugLevel_) {
        questBugLevel = questBugLevel_;
    }
    Bugs.setQuestBugLevel = setQuestBugLevel;

    function setUltimateBugLevel(ultimateBugLevel_) {
        ultimateBugLevel = ultimateBugLevel_;
    }
    Bugs.setUltimateBugLevel = setUltimateBugLevel;
})(Bugs || (Bugs = {}));
///<reference path="QuestEntity.ts"/>
var Camazotz = (function (_super) {
    __extends(Camazotz, _super);
    // Constructor
    function Camazotz(quest, pos) {
        _super.call(this, quest, pos, new Naming("Camazotz, the bat god", "Camazotz, the bat god"), new RenderArea(22, 8), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(8, 1), new Pos(6, 2)), new CollisionBox(this, new Pos(2, 3), new Pos(18, 1)), new CollisionBox(this, new Pos(1, 4), new Pos(20, 1)), new CollisionBox(this, new Pos(0, 5), new Pos(22, 1)), new CollisionBox(this, new Pos(9, 6), new Pos(4, 1)), new CollisionBox(this, new Pos(10, 7), new Pos(2, 1))), new QuestEntityMovement());

        // Set the drop a demon timer default value
        this.resetDropADemonTimer();

        // Set the default distance from the player
        this.distanceFromPlayer = 5;

        // Set the default tryToMoveAgainTimer
        this.tryToMoveAgainTimer = 0;

        // Set gravity
        this.getQuestEntityMovement().setGravity(false);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(5000);
        this.setHp(5000);

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/camazotz"));
        this.setTransparency(new RenderTransparency(" ", "%"));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its claws", "its claws"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(24, 9))), 300));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(20, 100);
    }
    // update()
    Camazotz.prototype.update = function () {
        // Handle the movement towards the player
        this.handleMovementTowardsPlayer();

        // Handle demon dropping
        this.handleDropADemon();

        // Call the mother class update method
        _super.prototype.update.call(this);
    };

    // willeDie()
    Camazotz.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1000000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };

    // Private methods
    Camazotz.prototype.dropADemon = function () {
        // Create the demon
        var demon = new Demon(this.getQuest(), this.getGlobalPosition().plus(new Pos(8, 8)));

        // Set the health bar
        demon.setHealthBar(new QuestEntityHealthBar(demon, new Pos(6, 1)));

        // Add the demon
        this.getQuest().addEntity(demon);
    };

    Camazotz.prototype.handleDropADemon = function () {
        if (this.dropADemonTimer < 0) {
            // Drop a demon and reset the timer
            this.dropADemon();
            this.resetDropADemonTimer();
        } else {
            // Decrese the timer
            this.dropADemonTimer -= 1;
        }
    };

    Camazotz.prototype.handleMovementTowardsPlayer = function () {
        if (this.tryToMoveAgainTimer <= 0) {
            // We go towards the player
            this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(this.distanceFromPlayer, 0)), 2, new Pos(2, 0), true);

            // We'll try to move again in 3 frames
            this.tryToMoveAgainTimer = 3;
        } else {
            this.tryToMoveAgainTimer -= 1;
        }
    };

    Camazotz.prototype.resetDropADemonTimer = function () {
        this.dropADemonTimer = Random.between(8, 12);
    };
    return Camazotz;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Camel = (function (_super) {
    __extends(Camel, _super);
    // Constructor
    function Camel(quest, pos) {
        _super.call(this, quest, pos, new Naming("A camel", "a camel"), new RenderArea(7, 2), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 1)), new CollisionBox(this, new Pos(2, 1), new Pos(5, 1))), new QuestEntityMovement());

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(7);
        this.setHp(7);

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/camel"));
        this.setTransparency(new RenderTransparency(" "));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its long neck", "its long neck"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(3, 3))), 5));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(5, 7);
    }
    // Public methods
    Camel.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(5 + Random.upTo(5)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return Camel;
})(QuestEntity);
///<reference path="Resource.ts"/>
var StatusBarResource = (function (_super) {
    __extends(StatusBarResource, _super);
    // Constructor
    function StatusBarResource(game, savingPrefix) {
        _super.call(this, savingPrefix);

        this.game = game;
    }
    // Public setters
    StatusBarResource.prototype.setCurrent = function (n, reCalcPlayerMaxHp) {
        if (typeof reCalcPlayerMaxHp === "undefined") { reCalcPlayerMaxHp = false; }
        _super.prototype.setCurrent.call(this, n);

        if (reCalcPlayerMaxHp)
            this.game.getPlayer().reCalcMaxHp();
else
            this.game.updateStatusBar();
    };
    return StatusBarResource;
})(Resource);
///<reference path="StatusBarResource.ts"/>
var CandiesEaten = (function (_super) {
    __extends(CandiesEaten, _super);
    // Constructor
    function CandiesEaten(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    CandiesEaten.prototype.getCurrentAsString = function () {
        var n = this.getCurrent();

        if (n < 0)
            return "You have eaten negative candies ?!";
else if (n == 1)
            return "You have eaten 1 candy";
else {
            return "You have eaten " + Algo.numberToStringButNicely(n) + " candies";
        }
    };

    // Public setters
    CandiesEaten.prototype.setCurrent = function (n) {
        _super.prototype.setCurrent.call(this, n, true);
    };
    return CandiesEaten;
})(StatusBarResource);
var CandiesThrownSmileyCaveObject = (function () {
    // Constructor
    function CandiesThrownSmileyCaveObject(str, position) {
        this.str = str;
        this.position = position;
    }
    // Public getters
    CandiesThrownSmileyCaveObject.prototype.getPosition = function () {
        return this.position;
    };

    CandiesThrownSmileyCaveObject.prototype.getStr = function () {
        return this.str;
    };
    return CandiesThrownSmileyCaveObject;
})();
var CandiesThrownSmileyCaveStep;
(function (CandiesThrownSmileyCaveStep) {
    CandiesThrownSmileyCaveStep[CandiesThrownSmileyCaveStep["FIRST_ROOM"] = 0] = "FIRST_ROOM";
    CandiesThrownSmileyCaveStep[CandiesThrownSmileyCaveStep["SECOND_ROOM"] = 1] = "SECOND_ROOM";
    CandiesThrownSmileyCaveStep[CandiesThrownSmileyCaveStep["THIRD_ROOM"] = 2] = "THIRD_ROOM";
})(CandiesThrownSmileyCaveStep || (CandiesThrownSmileyCaveStep = {}));
var CandiesThrownSmiley = (function () {
    // Constructor
    function CandiesThrownSmiley() {
    }
    // Public methods
    CandiesThrownSmiley.prototype.draw = function (renderArea, x, y, base) {
        // We're in the mother class, so we just draw nothing and return 0
        return 0;
    };
    return CandiesThrownSmiley;
})();
///<reference path="CandiesThrownSmiley.ts"/>
var CandiesThrownSmileyCave = (function (_super) {
    __extends(CandiesThrownSmileyCave, _super);
    // Constructor
    function CandiesThrownSmileyCave(smiley, smileyPosition, step) {
        if (typeof step === "undefined") { step = CandiesThrownSmileyCaveStep.FIRST_ROOM; }
        _super.call(this);
        // Various objects (can be speeches, for example)
        this.objects = [];
        // Is the chest open ? (closed by default)
        this.chestOpened = false;
        this.smiley = smiley;
        this.smileyPosition = smileyPosition;
        this.step = step;
    }
    // draw()
    CandiesThrownSmileyCave.prototype.draw = function (renderArea, x, y, base) {
        // Draw the base
        renderArea.drawString(base, x, y);

        // Draw the cave's walls, depending on the step
        renderArea.drawVerticalLine("|", 0, y + 2, y + 8);
        renderArea.drawVerticalLine("|", 62, y, y + 8);
        renderArea.drawHorizontalLine("_", 0, 57, y + 1);
        renderArea.drawString("|", 56, y + 1);
        switch (this.step) {
            case CandiesThrownSmileyCaveStep.THIRD_ROOM:
                renderArea.drawHorizontalLine("-", 12, 62, y + 16);
                renderArea.drawVerticalLine("|", 62, y + 9, y + 16);
                renderArea.drawArray(Database.getAscii("general/candyRoom"), 12, y + 9);

            case CandiesThrownSmileyCaveStep.SECOND_ROOM:
                // Floor of the first room (we must make it in two pieces because there's a hole!)
                renderArea.drawHorizontalLine("-", 1, 4, y + 8);
                renderArea.drawHorizontalLine("-", 9, 62, y + 8);

                // Rest of the room
                renderArea.drawVerticalLine("|", 0, y + 9, y + 16);
                renderArea.drawVerticalLine("|", 11, y + 9, y + 14);
                renderArea.drawHorizontalLine("-", 1, 12, y + 16);
                break;

            case CandiesThrownSmileyCaveStep.FIRST_ROOM:
                renderArea.drawHorizontalLine("-", 1, 62, y + 8);
                break;
        }

        // Draw the chest
        renderArea.drawString("|_|", 1, y + 7);
        if (this.chestOpened == false)
            renderArea.drawString("_", 2, y + 6);
else
            renderArea.drawString("(", 1, y + 6);

        // Draw the smiley
        renderArea.drawString(this.smiley, x + this.smileyPosition.x, y + this.smileyPosition.y);

        for (var i = 0; i < this.objects.length; i++) {
            renderArea.drawString(this.objects[i].getStr(), x + this.objects[i].getPosition().x, y + this.objects[i].getPosition().y);
        }

        switch (this.step) {
            case CandiesThrownSmileyCaveStep.FIRST_ROOM:
                return 8;
                break;
            case CandiesThrownSmileyCaveStep.SECOND_ROOM:
            case CandiesThrownSmileyCaveStep.THIRD_ROOM:
                return 16;
                break;
        }
    };

    // Public methods used to add or change stuff (always return ourselves)
    CandiesThrownSmileyCave.prototype.addObject = function (object) {
        this.objects.push(object);
        return this;
    };

    CandiesThrownSmileyCave.prototype.openChest = function () {
        this.chestOpened = true;
        return this;
    };
    return CandiesThrownSmileyCave;
})(CandiesThrownSmiley);
///<reference path="CandiesThrownSmiley.ts"/>
var CandiesThrownSmileyFirstLine = (function (_super) {
    __extends(CandiesThrownSmileyFirstLine, _super);
    // Constructor
    function CandiesThrownSmileyFirstLine(line) {
        _super.call(this);
        this.line = line;
    }
    // draw()
    CandiesThrownSmileyFirstLine.prototype.draw = function (renderArea, x, y, base) {
        renderArea.drawString(base + this.line, x, y);
        return 0;
    };
    return CandiesThrownSmileyFirstLine;
})(CandiesThrownSmiley);
///<reference path="Resource.ts"/>
Saving.registerBool("candiesThrownGotChocolateBar", false);

var CandiesThrown = (function (_super) {
    __extends(CandiesThrown, _super);
    // Constructor
    function CandiesThrown(game, savingPrefix) {
        _super.call(this, savingPrefix);
        // Smileys
        this.smileys = [
            new CandiesThrownSmileyFirstLine("."),
            new CandiesThrownSmileyFirstLine("..."),
            new CandiesThrownSmileyFirstLine("...?"),
            new CandiesThrownSmileyFirstLine("...? :|"),
            new CandiesThrownSmileyFirstLine("...? :/"),
            new CandiesThrownSmileyFirstLine("...? :("),
            new CandiesThrownSmileyFirstLine("...? :["),
            new CandiesThrownSmileyFirstLine("...? :{"),
            new CandiesThrownSmileyFirstLine("...? :'("),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?  (;_;)"),
            new CandiesThrownSmileyFirstLine("...?   (;_;)"),
            new CandiesThrownSmileyFirstLine("...?    (;_;)"),
            new CandiesThrownSmileyFirstLine("...?   (;_;)"),
            new CandiesThrownSmileyFirstLine("...?  (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;__;)"),
            new CandiesThrownSmileyFirstLine("...? (;___;)"),
            new CandiesThrownSmileyFirstLine("...? (;__;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;.;)"),
            new CandiesThrownSmileyFirstLine("...? (:.:)"),
            new CandiesThrownSmileyFirstLine("...? (:_:)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?(;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?(;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...?(;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;)"),
            new CandiesThrownSmileyFirstLine("...? (;_;) come"),
            new CandiesThrownSmileyFirstLine("...? (;_;) come on"),
            new CandiesThrownSmileyFirstLine("...? (-_-) come on"),
            new CandiesThrownSmileyFirstLine("...? (-_-)"),
            new CandiesThrownSmileyFirstLine("...? (-_-) why are you throwing candies like that?"),
            new CandiesThrownSmileyFirstLine("...? (o_o)"),
            new CandiesThrownSmileyFirstLine("...? (o_o) I'm gonna destroy something if you don't stop!!"),
            new CandiesThrownSmileyFirstLine("...? (o_o)"),
            new CandiesThrownSmileyFirstLine("...?  (o_o)"),
            new CandiesThrownSmileyFirstLine("...?   (o_o)"),
            new CandiesThrownSmileyFirstLine("...?    (o_o)"),
            new CandiesThrownSmileyFirstLine("...?     (o_o)"),
            new CandiesThrownSmileyFirstLine("...?      (o_o)"),
            new CandiesThrownSmileyFirstLine("...?       (o_o)"),
            new CandiesThrownSmileyFirstLine("...?       (O_O)"),
            new CandiesThrownSmileyFirstLine("...?      (O_O)"),
            new CandiesThrownSmileyFirstLine("...?     (O_O)"),
            new CandiesThrownSmileyFirstLine("...?    (O_O)"),
            new CandiesThrownSmileyFirstLine("...?   (O_O)"),
            new CandiesThrownSmileyFirstLine("...?  (O_O)"),
            new CandiesThrownSmileyFirstLine("...? (O_O)"),
            new CandiesThrownSmileyFirstLine("...?(O_O)"),
            new CandiesThrownSmileyFirstLine("...(O_O)"),
            new CandiesThrownSmileyFirstLine("..(O_O)"),
            new CandiesThrownSmileyFirstLine(".(O_O)"),
            new CandiesThrownSmileyFirstLine("(O_O)"),
            new CandiesThrownSmileyFirstLine(" (O_O)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o) stop!!"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (o_o)"),
            new CandiesThrownSmileyFirstLine(" (;_;)"),
            new CandiesThrownSmileyFirstLine(" (;_;) well."),
            new CandiesThrownSmileyFirstLine(" (;_;) I guess I'll just leave, then."),
            new CandiesThrownSmileyFirstLine("  (;_;)"),
            new CandiesThrownSmileyFirstLine("   (;_;)"),
            new CandiesThrownSmileyFirstLine("    (;_;)"),
            new CandiesThrownSmileyFirstLine("     (;_;)"),
            new CandiesThrownSmileyFirstLine("      (;_;)"),
            new CandiesThrownSmileyFirstLine("       (;_;)"),
            new CandiesThrownSmileyFirstLine("        (;_;)"),
            new CandiesThrownSmileyFirstLine("         (;_;)"),
            new CandiesThrownSmileyFirstLine("          (;_;)"),
            new CandiesThrownSmileyFirstLine("           (;_;)"),
            new CandiesThrownSmileyFirstLine("            (;_;)"),
            new CandiesThrownSmileyFirstLine("             (;_;)"),
            new CandiesThrownSmileyFirstLine("              (;_;)"),
            new CandiesThrownSmileyFirstLine("               (;_;)"),
            new CandiesThrownSmileyFirstLine("                (;_;)"),
            new CandiesThrownSmileyFirstLine("                 (;_;)"),
            new CandiesThrownSmileyFirstLine("                  (;_;)"),
            new CandiesThrownSmileyFirstLine("                   (;_;)"),
            new CandiesThrownSmileyFirstLine("                    (;_;)"),
            new CandiesThrownSmileyFirstLine("                     (;_;)"),
            new CandiesThrownSmileyFirstLine("                      (;_;)"),
            new CandiesThrownSmileyFirstLine("                      (;_;)|"),
            new CandiesThrownSmileyFirstLine("                      (o_o)|"),
            new CandiesThrownSmileyFirstLine("                 crap (o_o)|"),
            new CandiesThrownSmileyFirstLine("               a wall (o_o)|"),
            new CandiesThrownSmileyFirstLine("                      (._.)|"),
            new CandiesThrownSmileyFirstLine("     I'm trapped here (._.)|"),
            new CandiesThrownSmileyFirstLine("    maybe...          (._.)|"),
            new CandiesThrownSmileyFirstLine("    maybe I could dig (._.)|"),
            new CandiesThrownSmileyFirstLine("    dig in the ground (._.)|"),
            new CandiesThrownSmileyFirstLine("                      (._.)|"),
            new CandiesThrownSmileyFirstLine("                *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyFirstLine("                    (._.)|"),
            new CandiesThrownSmileyFirstLine("              *dig* (._.)|"),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 1)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 2)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 3)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 4)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 5)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 6)),
            new CandiesThrownSmileyCave("(O_O)", new Pos(57, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)).addObject(new CandiesThrownSmileyCaveObject("wow.", new Pos(52, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)).addObject(new CandiesThrownSmileyCaveObject("I didn't expect that.", new Pos(35, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(57, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(55, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(53, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(51, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(49, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(47, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(45, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(45, 7)).addObject(new CandiesThrownSmileyCaveObject("what's this place?", new Pos(39, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(45, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(43, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(41, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(39, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(37, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(35, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(33, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(33, 7)).addObject(new CandiesThrownSmileyCaveObject("it looks like a cave", new Pos(26, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(33, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(31, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(29, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(27, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(25, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(23, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(21, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(19, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(19, 7)).addObject(new CandiesThrownSmileyCaveObject("oh! there's a chest over there!", new Pos(8, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(19, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(17, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(15, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(13, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(11, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(9, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(7, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(5, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I guess I should open it", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).openChest(),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("!!!", new Pos(5, 5))).openChest(),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I found a chocolate bar!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("...", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("hey, listen", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I'll give you the chocolate bar", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("if you swear to stop throwing candies", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("okay?", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("throw 10 last candies to let me know if you agree", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("good. here's the bar. no more throwing!!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(._.)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("Hey?!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("You're still throwing candies!", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("Candies are precious, you know.", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("...", new Pos(5, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("I'm out of here.", new Pos(3, 5))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 7)).addObject(new CandiesThrownSmileyCaveObject("*dig*", new Pos(10, 7))),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 8), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 9), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 10), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 11), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 12), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 13), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 14), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(4, 15), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(6, 15), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(8, 15), CandiesThrownSmileyCaveStep.SECOND_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(10, 15), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(;_;)", new Pos(12, 15), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 15), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 14), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 13), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(12, 12), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(13, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(15, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(17, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(o_o)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("this is...", new Pos(13, 9))),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("a room...", new Pos(13, 9))),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("FULL OF GIANT CANDIES!", new Pos(33, 9))),
            new CandiesThrownSmileyCave("(O_O)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("well", new Pos(16, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("don't worry about the candies you threw", new Pos(6, 7))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("just let me eat those candies and you're forgiven", new Pos(6, 7))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(18, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("<3", new Pos(17, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(20, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(22, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(22, 10), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(23, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(25, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(27, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(29, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(31, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(33, 9), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(34, 10), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(34, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(36, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(38, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(40, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(42, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM)
        ];
        // *nom* *nom* smileys
        this.nomNomSmileys = [
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(40, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(41, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(42, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(43, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(44, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(45, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom*", new Pos(46, 9))),
            new CandiesThrownSmileyCave("(^_^)", new Pos(43, 11), CandiesThrownSmileyCaveStep.THIRD_ROOM).addObject(new CandiesThrownSmileyCaveObject("*nom* *nom*", new Pos(40, 9)))
        ];
        // Index of the *nom* *nom* smiley we show
        this.nomNomSmileyIndex = 0;
        this.game = game;
    }
    // Public methods
    CandiesThrown.prototype.add = function (n) {
        // We save the return value
        var returnValue = _super.prototype.add.call(this, n);

        if (Saving.loadBool("candiesThrownGotChocolateBar") == false && Math.floor(this.getCurrent() / 10) - 1 == 162) {
            this.game.getChocolateBars().add(1);
            Saving.saveBool("candiesThrownGotChocolateBar", true);
        }

        // We choose a random *nom* *nom* smiley index in case we're at this step of the animation
        this.nomNomSmileyIndex = Random.between(0, this.nomNomSmileys.length - 1);

        // We return the return value
        return returnValue;
    };

    CandiesThrown.prototype.draw = function (renderArea, x, y) {
        var n = this.getCurrent();
        var smileyIndex;
        var base;

        if (n < 0)
            base = "You threw negative candies ?!";
else if (n == 1)
            base = "You threw 1 candy on the ground";
else {
            base = "You threw " + Algo.numberToStringButNicely(n) + " candies on the ground";
        }

        // Get the index of the smiley we should add
        smileyIndex = Math.floor(n / 10) - 1;

        if (smileyIndex >= 0 && smileyIndex < this.smileys.length) {
            // Draw the smiley and return the correct y gap
            return this.smileys[smileyIndex].draw(renderArea, x, y, base);
        } else if (smileyIndex < 0) {
            // We just draw the base and return 0
            renderArea.drawString(base, x, y);
            return 0;
        } else {
            // Draw the smiley and return the correct y gap
            return this.nomNomSmileys[this.nomNomSmileyIndex].draw(renderArea, x, y, base);
        }
    };
    return CandiesThrown;
})(Resource);
///<reference path="StatusBarResource.ts"/>
var Candies = (function (_super) {
    __extends(Candies, _super);
    // Constructor
    function Candies(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    Candies.prototype.getCurrentAsString = function (totalSize) {
        if (typeof totalSize === "undefined") { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;

        var base = "";
        var prefix = "";
        var suffix = "";
        var comment = "";

        if (n < 0)
            return "What, negative candies?!";
else if (n == 1)
            return "You have 1 candy";
else {
            if (n == 1337)
                base = "leet";
else
                base = Algo.numberToStringButNicely(n);
        }

        // How much space do we still have ?
        size = totalSize - base.length;

        if (size >= 8) {
            suffix = " candies";

            // We add a prefix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;

            if (size >= 9)
                prefix = "You have ";
else if (size >= 3)
                prefix = "-> ";
        } else if (size >= 4)
            suffix = " cnd";
else if (size >= 2)
            suffix = " c";

        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;

        if (n == 42 && size >= 4)
            comment = " \\o/";
else if ((n == 65535 || n == 314159) && size >= 1)
            comment = "!";

        return prefix + base + suffix + comment;
    };
    return Candies;
})(StatusBarResource);
///<reference path="Place.ts"/>
Saving.registerBool("candyBoxBoxOpened", false);

var CandyBox = (function (_super) {
    __extends(CandyBox, _super);
    // Constructor
    function CandyBox(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.eatButtonShown = false;
        this.throwButtonShown = false;
        this.requestFeatureButtonShown = false;

        // Resize the area
        this.renderArea.resize(100, 40);

        // Update
        this.update();
    }
    // willBeDisplayed()
    CandyBox.prototype.willBeDisplayed = function () {
        // We check right now
        this.checkCandies();

        // And we add the callback
        this.getGame().getCandies().getCallbackCollection().addCallback(this.checkCandies.bind(this));

        // We add hotkeys
        this.getGame().addHotkey(new Hotkey("e", new CallbackCollection(this.clickedEatCandiesButton.bind(this))));
        this.getGame().addHotkey(new Hotkey("t", new CallbackCollection(this.clickedThrowCandiesButton.bind(this))));
    };

    // Public methods
    CandyBox.prototype.update = function () {
        // Y gap for everything below the throwing candies stuff (because the throwing candies stuff can be extended a lot)
        var yGapForEverythingBelowTheThrowingCandiesStuff = 0;

        // Erase everything
        this.renderArea.resetAllButSize();

        if (Saving.loadBool("lonelyHouseTakeTheBoxDone")) {
            if (Saving.loadBool("candyBoxBoxOpened") == true)
                this.renderArea.drawArray(Database.getAscii("general/openBox"), 68, 4);
else
                this.renderArea.drawArray(Database.getAscii("general/box"), 68, 4);
        }

        if (Saving.loadBool("gridItemPossessedTalkingCandy") == true) {
            // Draw the ascii art
            this.renderArea.drawArray(Database.getAscii("gridItems/talkingCandy"), 68, 37);

            if (Saving.loadBool("lonelyHouseTakeTheBoxDone") == false) {
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("talkingCandySpeechNoBox"), 30, 72, 98, "candyBoxTalkingCandySpeech", Database.getTranslatedText("talkingCandySpeechNoBox"));
            } else {
                if (Saving.loadBool("candyBoxBoxOpened")) {
                    // Draw the speech
                    this.renderArea.drawSpeech(Database.getText("talkingCandySpeech2"), 34, 72, 98, "candyBoxTalkingCandySpeech", Database.getTranslatedText("talkingCandySpeech2"));
                } else {
                    // Draw the speech
                    this.renderArea.drawSpeech(Database.getText("talkingCandySpeech1"), 30, 72, 98, "candyBoxTalkingCandySpeech", Database.getTranslatedText("talkingCandySpeech1"));

                    // Add the button
                    this.renderArea.addAsciiRealButton(Database.getText("talkingCandyButton"), 80, 37, "candyBoxTalkingCandyButton", Database.getTranslatedText("talkingCandyButton"));
                    this.renderArea.addLinkCall(".candyBoxTalkingCandyButton", new CallbackCollection(this.openBox.bind(this)));
                }
            }
        }

        if (this.eatButtonShown) {
            this.renderArea.addAsciiRealButton(Database.getText("candyBoxEatCandiesButton"), 0, 1, "candyBoxEatCandiesButton", Database.getTranslatedText("candyBoxEatCandiesButton"), false, 0);
            this.renderArea.addLinkCall(".candyBoxEatCandiesButton", new CallbackCollection(this.clickedEatCandiesButton.bind(this)));
            if (this.getGame().getCandiesEaten().getCurrent() != 0)
                this.renderArea.drawString(this.getGame().getCandiesEaten().getCurrentAsString(), 0, 3);
        }

        if (this.throwButtonShown) {
            this.renderArea.addAsciiRealButton(Database.getText("candyBoxThrowCandiesButton"), 0, 6, "candyBoxThrowCandiesButton", Database.getTranslatedText("candyBoxThrowCandiesButton"), false, 0);
            this.renderArea.addLinkCall(".candyBoxThrowCandiesButton", new CallbackCollection(this.clickedThrowCandiesButton.bind(this)));
            if (this.getGame().getCandiesThrown().getCurrent() != 0) {
                yGapForEverythingBelowTheThrowingCandiesStuff = this.getGame().getCandiesThrown().draw(this.renderArea, 0, 8);
            }
        }

        if (this.requestFeatureButtonShown) {
            if (Saving.loadBool("statusBarUnlocked") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlocked"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlocked"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedButton", new CallbackCollection(this.requestStatusBarUnlocked.bind(this)));
            } else if (Saving.loadBool("statusBarUnlockedCfg") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedCfg"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedCfgButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedCfg"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedCfgButton", new CallbackCollection(this.requestStatusBarUnlockedCfg.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedComment"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedComment"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            } else if (Saving.loadBool("statusBarUnlockedSave") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedSave"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedSaveButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedSave"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedSaveButton", new CallbackCollection(this.requestStatusBarUnlockedSave.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedCfgComment1"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedCfgComment2"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedCfgComment1"), 0, 16 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedCfgComment2"), 0, 17 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            } else if (Saving.loadBool("statusBarUnlockedHealthBar") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedHealthBar"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedHealthBarButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedHealthBar"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedHealthBarButton", new CallbackCollection(this.requestStatusBarUnlockedHealthBar.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedSaveComment"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedSaveComment"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            } else if (Saving.loadBool("statusBarUnlockedMap") == false) {
                this.renderArea.addAsciiRealButton(Database.getText("candyBoxRequestStatusBarUnlockedMap"), 0, 11 + yGapForEverythingBelowTheThrowingCandiesStuff, "candyBoxRequestStatusBarUnlockedMapButton", Database.getTranslatedText("candyBoxRequestStatusBarUnlockedMap"), true);
                this.renderArea.addLinkCall(".candyBoxRequestStatusBarUnlockedMapButton", new CallbackCollection(this.requestStatusBarUnlockedMap.bind(this)));
                this.renderArea.drawString(Database.getText("candyBoxRequestStatusBarUnlockedHealthBarComment"), 0, 14 + yGapForEverythingBelowTheThrowingCandiesStuff);
                this.renderArea.drawString(Database.getTranslatedText("candyBoxRequestStatusBarUnlockedHealthBarComment"), 0, 15 + yGapForEverythingBelowTheThrowingCandiesStuff, true);
            }
        }
    };

    // getRenderArea()
    CandyBox.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    CandyBox.prototype.checkCandies = function () {
        if (this.eatButtonShown == false) {
            if (this.getGame().getCandies().getMax() > 0) {
                this.eatButtonShown = true;
                this.update();
                this.getGame().updatePlace();
            }
        }

        if (this.throwButtonShown == false) {
            if (this.getGame().getCandies().getMax() >= 10) {
                this.throwButtonShown = true;
                this.update();
                this.getGame().updatePlace();
            }
        }

        if (this.requestFeatureButtonShown == false) {
            if (this.getGame().getCandies().getMax() >= 30 && Saving.loadBool("statusBarUnlockedMap") == false) {
                this.requestFeatureButtonShown = true;
                this.update();
                this.getGame().updatePlace();
            }
        }
    };

    CandyBox.prototype.clickedEatCandiesButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 1) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesEaten());
            this.update();
            this.getGame().updatePlace();
        }
    };

    CandyBox.prototype.clickedThrowCandiesButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 10) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesThrown(), 10);
            this.update();
            this.getGame().updatePlace();
        }
    };

    CandyBox.prototype.openBox = function () {
        // The box is now opened
        Saving.saveBool("candyBoxBoxOpened", true);

        // The tabs are unlocked
        Saving.saveBool("statusBarUnlockedInsideYourBox", true);
        Saving.saveBool("statusBarUnlockedTheComputer", true);
        Saving.saveBool("statusBarUnlockedTheArena", true);
        this.getGame().updateStatusBar(true);

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    CandyBox.prototype.requestStatusBarUnlocked = function () {
        if (this.getGame().getCandies().getCurrent() >= 30) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 30);
            Saving.saveBool("statusBarUnlocked", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };

    CandyBox.prototype.requestStatusBarUnlockedCfg = function () {
        if (this.getGame().getCandies().getCurrent() >= 5) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 5);
            Saving.saveBool("statusBarUnlockedCfg", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };

    CandyBox.prototype.requestStatusBarUnlockedHealthBar = function () {
        if (this.getGame().getCandies().getCurrent() >= 5) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 5);
            Saving.saveBool("statusBarUnlockedHealthBar", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };

    CandyBox.prototype.requestStatusBarUnlockedMap = function () {
        if (this.getGame().getCandies().getCurrent() >= 10) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 10);
            Saving.saveBool("statusBarUnlockedMap", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };

    CandyBox.prototype.requestStatusBarUnlockedSave = function () {
        if (this.getGame().getCandies().getCurrent() >= 5) {
            this.getGame().getCandies().transferTo(this.getGame().getCandiesUsedToRequestFeatures(), 5);
            Saving.saveBool("statusBarUnlockedSave", true);
            this.getGame().updateStatusBar(true);
            this.update();
            this.getGame().updatePlace();
        }
    };
    return CandyBox;
})(Place);
var CandyMerchantItem = (function () {
    // Constructor
    function CandyMerchantItem(game, savingBool, asciiName, asciiPosition, merchantSpeech, price, buttonText, buttonName) {
        this.game = game;
        this.savingBool = savingBool;
        this.asciiName = asciiName;
        this.asciiPosition = asciiPosition;
        this.merchantSpeech = merchantSpeech;
        this.price = price;
        this.buttonText = buttonText;
        this.buttonName = buttonName;
    }
    // Public methods
    CandyMerchantItem.prototype.buy = function () {
        // We tell the saving system that this item is bought
        Saving.saveBool(this.savingBool, true);
    };

    CandyMerchantItem.prototype.canBeBought = function () {
        if (this.isBought())
            return false;

        return true;
    };

    CandyMerchantItem.prototype.canBeClicked = function () {
        if (this.isBought())
            return false;

        return true;
    };

    CandyMerchantItem.prototype.canBeShown = function () {
        if (this.isBought())
            return false;

        return true;
    };

    CandyMerchantItem.prototype.isBought = function () {
        return Saving.loadBool(this.savingBool);
    };

    // Public getters
    CandyMerchantItem.prototype.getAsciiName = function () {
        return this.asciiName;
    };

    CandyMerchantItem.prototype.getAsciiPosition = function () {
        return this.asciiPosition;
    };

    CandyMerchantItem.prototype.getButtonName = function () {
        return this.buttonName;
    };

    CandyMerchantItem.prototype.getButtonText = function () {
        return this.buttonText;
    };

    CandyMerchantItem.prototype.getGame = function () {
        return this.game;
    };

    CandyMerchantItem.prototype.getMerchantSpeech = function () {
        return this.merchantSpeech;
    };

    CandyMerchantItem.prototype.getPrice = function () {
        return this.price;
    };
    return CandyMerchantItem;
})();
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_ChocolateBar = (function (_super) {
    __extends(CandyMerchantItem_ChocolateBar, _super);
    function CandyMerchantItem_ChocolateBar() {
        _super.apply(this, arguments);
    }
    // When we buy, we get one chocolate bar
    CandyMerchantItem_ChocolateBar.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().getChocolateBars().add(1);
    };
    return CandyMerchantItem_ChocolateBar;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_LeatherBoots = (function (_super) {
    __extends(CandyMerchantItem_LeatherBoots, _super);
    function CandyMerchantItem_LeatherBoots() {
        _super.apply(this, arguments);
    }
    // The item can't be shown if the inventory isn't shown yet
    CandyMerchantItem_LeatherBoots.prototype.canBeShown = function () {
        if (_super.prototype.canBeShown.call(this) == false)
            return false;

        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;

        return true;
    };
    return CandyMerchantItem_LeatherBoots;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_LeatherGloves = (function (_super) {
    __extends(CandyMerchantItem_LeatherGloves, _super);
    function CandyMerchantItem_LeatherGloves() {
        _super.apply(this, arguments);
    }
    // The item can't be shown if the inventory isn't shown yet
    CandyMerchantItem_LeatherGloves.prototype.canBeShown = function () {
        if (_super.prototype.canBeShown.call(this) == false)
            return false;

        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;

        return true;
    };
    return CandyMerchantItem_LeatherGloves;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_Lollipop = (function (_super) {
    __extends(CandyMerchantItem_Lollipop, _super);
    function CandyMerchantItem_Lollipop() {
        _super.apply(this, arguments);
    }
    // When we buy, we get one lollipop
    CandyMerchantItem_Lollipop.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().getLollipops().add(1);
    };
    return CandyMerchantItem_Lollipop;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_MerchantHat = (function (_super) {
    __extends(CandyMerchantItem_MerchantHat, _super);
    function CandyMerchantItem_MerchantHat() {
        _super.apply(this, arguments);
    }
    // When we buy, we get the merchant hat
    CandyMerchantItem_MerchantHat.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().gainItem("eqItemHatMerchantHat");
    };

    // The item can't be clicked if the inventory isn't shown yet
    CandyMerchantItem_MerchantHat.prototype.canBeClicked = function () {
        if (_super.prototype.canBeClicked.call(this) == false)
            return false;

        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;

        return true;
    };
    return CandyMerchantItem_MerchantHat;
})(CandyMerchantItem);
///<reference path="CandyMerchantItem.ts"/>
var CandyMerchantItem_TimeRing = (function (_super) {
    __extends(CandyMerchantItem_TimeRing, _super);
    function CandyMerchantItem_TimeRing() {
        _super.apply(this, arguments);
    }
    // When we buy, we get the time ring
    CandyMerchantItem_TimeRing.prototype.buy = function () {
        _super.prototype.buy.call(this);
        this.getGame().gainItem("gridItemPossessedTimeRing");
    };

    // The item can't be shown if the inventory isn't shown yet
    CandyMerchantItem_TimeRing.prototype.canBeShown = function () {
        if (_super.prototype.canBeShown.call(this) == false)
            return false;

        if (Saving.loadBool("statusBarUnlockedInventory") == false)
            return false;

        return true;
    };
    return CandyMerchantItem_TimeRing;
})(CandyMerchantItem);
///<reference path="Place.ts"/>
var CastleRoom = (function (_super) {
    __extends(CastleRoom, _super);
    // Constructor
    function CastleRoom(game) {
        _super.call(this, game);
    }
    // Special method used to add a button to go back to the castle
    CastleRoom.prototype.addBackToTheCastleButton = function (renderArea, otherClass) {
        this.addBackToButton(renderArea, new CallbackCollection(this.getGame().goToCastle.bind(this.getGame())), Database.getText("buttonBackToTheCastle"), Database.getTranslatedText("buttonBackToTheCastle"), otherClass);
    };
    return CastleRoom;
})(Place);
///<reference path="CastleRoom.ts"/>
// Is the hoven happy? He is if he cooked something at least once
Saving.registerBool("castleBigRoomHovenHappy", false);

var CastleBigRoom = (function (_super) {
    __extends(CastleBigRoom, _super);
    // Constructor
    function CastleBigRoom(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        // At first the hoven is waiting
        this.hovenWaiting = true;

        if (Saving.loadBool("castleBigRoomHovenHappy") == false) {
            this.currentSpeech = "castleBigRoomHovenSpeechSad";
        } else {
            this.currentSpeech = "castleBigRoomHovenSpeechHappy";
        }

        // Resize the area and update
        this.renderArea.resize(160, 30);
        this.update();
    }
    // getRenderArea()
    CastleBigRoom.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // update()
    CastleBigRoom.prototype.update = function () {
        // Reset the area
        this.renderArea.resetAllButSize();

        // Add the button to go back to the castle
        this.addBackToTheCastleButton(this.renderArea, "castleBigRoomBackToTheCastleButton");

        // Draw the background
        this.drawBackground(0, 3);

        // Draw the speech
        this.drawSpeech(83, 10);

        if (this.hovenWaiting) {
            this.renderArea.addAsciiRealButton(Database.getText("castleBigRoomHovenLetHovenTakeButton"), 83, 19, "castleBigRoomLetHovenTakeButton", Database.getTranslatedText("castleBigRoomHovenLetHovenTakeButton"), true);
            this.renderArea.addLinkCall(".castleBigRoomLetHovenTakeButton", new CallbackCollection(this.letHovenTake.bind(this)));
        } else {
            this.renderArea.addAsciiRealButton(Database.getText("castleBigRoomHovenThanks"), 83, 19, "castleBigRoomThanksButton", Database.getTranslatedText("castleBigRoomHovenThanks"), true);
            this.renderArea.addLinkCall(".castleBigRoomThanksButton", new CallbackCollection(this.thanksHoven.bind(this)));
        }
    };

    // Private methods
    CastleBigRoom.prototype.drawBackground = function (x, y) {
        // Draw the background ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/bigRoom/background"), x, y);

        if (Saving.loadBool("castleBigRoomHovenHappy")) {
            this.renderArea.drawString("^       ^", x + 61, y + 9);
            this.renderArea.drawString("         ", x + 61, y + 10);
            this.renderArea.drawString("  '-.-'  ", x + 61, y + 11);
        }
    };

    CastleBigRoom.prototype.drawSpeech = function (x, y) {
        this.renderArea.drawSpeech(Database.getText(this.currentSpeech), y, x, x + 30, "CastleBigRoomHovenSpeech", Database.getTranslatedText(this.currentSpeech));
    };

    CastleBigRoom.prototype.letHovenTake = function () {
        if (this.getGame().getCandies().getCurrent() >= 100 && this.getGame().getChocolateBars().getCurrent() >= 1) {
            // We spend the sweets
            this.getGame().getCandies().add(-100);
            this.getGame().getChocolateBars().add(-1);

            // The hoven is now happy
            Saving.saveBool("castleBigRoomHovenHappy", true);

            // The hoven isn't waiting anymore
            this.hovenWaiting = false;

            // We set the new speech
            this.currentSpeech = "castleBigRoomHovenSpeechMadePainAuChocolat";

            // We add the pain au chocolat
            this.getGame().getPainsAuChocolat().add(1);
        } else {
            if (Saving.loadBool("castleBigRoomHovenHappy") == false) {
                this.currentSpeech = "castleBigRoomHovenNotEnough";
            } else {
                this.currentSpeech = "castleBigRoomHovenSpeechHappyNotEnough";
            }
        }

        // We update
        this.update();
        this.getGame().updatePlace();
    };

    CastleBigRoom.prototype.thanksHoven = function () {
        // The hoven is now waiting
        this.hovenWaiting = true;

        // Set the new speech
        this.currentSpeech = "castleBigRoomHovenSpeechHappy";

        // Update
        this.update();
        this.getGame().updatePlace();
    };
    return CastleBigRoom;
})(CastleRoom);
///<reference path="Quest.ts"/>
var CastleEntrance = (function (_super) {
    __extends(CastleEntrance, _super);
    // Constructor
    function CastleEntrance(game) {
        _super.call(this, game);
        // Last knight added
        this.lastKnightAdded = null;

        // Resize the quest
        this.resizeQuest(149, 30);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 25));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the walls
        this.addWalls();

        // Add the first knight
        this.addKnight(Random.between(80, 120));

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You're trying to cross the castle's entrance."));
    }
    // Public methods
    CastleEntrance.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 0), new Pos(60, 20));
    };

    CastleEntrance.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    CastleEntrance.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You crossed the castle's entrance! You can now enter the castle."));
            Saving.saveBool("mainMapDoneCastleEntrance", true);
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died trying to cross the castle's entrance."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    CastleEntrance.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            // Handle monsters
            this.handleKnights();

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castleEntrance/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castleEntrance/front"), this.getRealQuestPosition().x + 104, this.getRealQuestPosition().y);
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    CastleEntrance.prototype.addKnight = function (x) {
        if (typeof x === "undefined") { x = 149; }
        var knight = new Knight(this, new Pos(x, 20));
        knight.setHealthBar(new QuestEntityHealthBar(knight, new Pos(15, 1)));

        if (this.addEntity(knight))
            this.lastKnightAdded = knight;
    };

    CastleEntrance.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));

        // Add the boxes
        wall.addBox(new Pos(0, 26), new Pos(200, 4));
        wall.addBox(new Pos(104, 6), new Pos(15, 15));
        wall.addBox(new Pos(104, 5), new Pos(16, 1));
        wall.addBox(new Pos(104, 4), new Pos(17, 1));
        wall.addBox(new Pos(106, 3), new Pos(16, 1));
        wall.addBox(new Pos(107, 2), new Pos(6, 1));
        wall.addBox(new Pos(116, 2), new Pos(7, 1));

        // Add the wall entity
        this.addEntity(wall);
    };

    CastleEntrance.prototype.handleKnights = function () {
        if (this.lastKnightAdded == null || (this.lastKnightAdded != null && this.lastKnightAdded.getHp() / this.lastKnightAdded.getMaxHp() < 0.4) || (this.lastKnightAdded != null && this.lastKnightAdded.getGlobalPosition().x + 1 < this.getGame().getPlayer().getGlobalPosition().x)) {
            this.addKnight();
        }
    };

    CastleEntrance.prototype.thePlayerWon = function () {
        if (this.getGame().getPlayer().getGlobalPosition().x >= 149)
            return true;

        // Else we return false
        return false;
    };
    return CastleEntrance;
})(Quest);
///<reference path="Quest.ts"/>
var CastleRoom1 = (function (_super) {
    __extends(CastleRoom1, _super);
    // Constructor
    function CastleRoom1(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(100, 30);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(97, 10));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the walls
        this.addWalls();

        // Add the spikes
        this.addEntity(new Spikes(this, new Pos(7, 23), 88));

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter one of the castle's room. Damn, it seems to be full of spikes!"));
    }
    // Public methods
    CastleRoom1.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(96, 6), new Pos(2, 3));
    };

    CastleRoom1.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    CastleRoom1.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    CastleRoom1.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room1/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToCastle.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    CastleRoom1.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));

        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 3));
        wall.addBox(new Pos(0, 3), new Pos(7, 25));
        wall.addBox(new Pos(7, 24), new Pos(93, 4));
        wall.addBox(new Pos(95, 3), new Pos(5, 5));
        wall.addBox(new Pos(95, 11), new Pos(5, 16));

        // Add the wall entity
        this.addEntity(wall);
    };
    return CastleRoom1;
})(Quest);
///<reference path="CastleRoom.ts"/>
Saving.registerBool("castleRoom2LitFire", false);
Saving.registerBool("castleRoom2TookObject", false);

var CastleRoom2 = (function (_super) {
    __extends(CastleRoom2, _super);
    function CastleRoom2(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The smokes
        this.smokes = [];

        if (Saving.loadBool("castleRoom2LitFire") == true) {
            this.addSmokes();
        }

        this.renderArea.resize(100, 30);
        this.update();
    }
    // getRenderArea()
    CastleRoom2.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    CastleRoom2.prototype.willBeDisplayed = function () {
        this.getGame().getOneSecondCallbackCollection().addCallback(this.actionSmokes.bind(this));
    };

    // update()
    CastleRoom2.prototype.update = function () {
        // Reset the area
        this.renderArea.resetAllButSize();

        // Add the button to go back to the castle
        this.addBackToTheCastleButton(this.renderArea, "castleRoom2BackToTheCastleButton");

        if (Saving.loadBool("castleRoom2LitFire") == false) {
            // Draw the dark color
            this.drawDark(0, 3, 100, 27);

            // Add the button on the fire
            this.drawFireButton(42, 20);
        } else {
            // We draw the fire
            this.drawFire(42, 20);

            if (Saving.loadBool("castleRoom2TookObject") == false) {
                this.drawObject(21, 12);
            }
        }
    };

    // Private methods
    CastleRoom2.prototype.actionSmokes = function () {
        if (this.smokes.length > 0) {
            for (var i = 0; i < this.smokes.length; i++) {
                this.smokes[i].move();
            }

            // We update on the page
            this.update();
            this.getGame().updatePlace();
        }
    };

    CastleRoom2.prototype.addSmokes = function () {
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(3, 7), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
        this.smokes.push(new Smoke(45, Random.between(20, 21), 11, Random.between(2, 6), 0, 5));
    };

    CastleRoom2.prototype.drawDark = function (x, y, width, height) {
        for (var i = y; i < y + height; i++) {
            this.renderArea.addBackgroundColor(x, x + width, i, new Color(ColorType.CASTLE_DARK_ROOM, true));
        }
    };

    CastleRoom2.prototype.drawFire = function (x, y) {
        // Draw the fire ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/room2/fire"), x, y);

        for (var i = 0; i < this.smokes.length; i++) {
            this.smokes[i].draw(this.renderArea);
        }
    };

    CastleRoom2.prototype.drawFireButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("castleRoom2LightFireButton", x, x + 16, y, x, x + 16, y + 1, x, x + 16, y + 2, x, x + 16, y + 3, x, x + 16, y + 4, x, x + 16, y + 5);

        // Add the link
        this.renderArea.addLinkCall(".castleRoom2LightFireButton", new CallbackCollection(this.lightFire.bind(this)));
    };

    CastleRoom2.prototype.drawObject = function (x, y) {
        // Draw the ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/room2/pitchfork"), x, y);

        // Add the button
        this.renderArea.addMultipleAsciiButtons("castleRoom2TakeObjectButton", x + 6, x + 12, y, x + 5, x + 11, y + 1, x + 4, x + 10, y + 2, x + 3, x + 9, y + 3, x + 2, x + 8, y + 4, x + 1, x + 7, y + 5, x + 1, x + 5, y + 6, x, x + 4, y + 7);

        // Add the link
        this.renderArea.addLinkCall(".castleRoom2TakeObjectButton", new CallbackCollection(this.takeObject.bind(this)));
    };

    CastleRoom2.prototype.lightFire = function () {
        // Change the bool
        Saving.saveBool("castleRoom2LitFire", true);

        // Add the smokes
        this.addSmokes();

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    CastleRoom2.prototype.takeObject = function () {
        // Set the bool
        Saving.saveBool("castleRoom2TookObject", true);

        // Take it
        this.getGame().gainItem("gridItemPossessedPitchfork");

        // Re-calc the farm production
        this.getGame().calcLollipopFarmProduction();

        // Update
        this.update();
        this.getGame().updatePlace();
    };
    return CastleRoom2;
})(CastleRoom);
///<reference path="Quest.ts"/>
var CastleRoom3 = (function (_super) {
    __extends(CastleRoom3, _super);
    // Constructor
    function CastleRoom3(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(100, 30);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(97, 23));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the walls
        this.addWalls();

        // Add the eggs
        this.addEggs();

        // Add the monster
        this.addMonster();

        // Add the chest
        this.addChest();

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter one of the castle's room."));
    }
    // Public methods
    CastleRoom3.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(96, 19), new Pos(2, 3));
    };

    CastleRoom3.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    CastleRoom3.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    CastleRoom3.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room3/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToCastle.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    CastleRoom3.prototype.addChest = function () {
        this.addEntity(new Chest(this, new Pos(7, 23), true, new CallbackCollection(this.openChest.bind(this)), Saving.loadBool("gridItemPossessedL")));
    };

    CastleRoom3.prototype.addEggs = function () {
        this.addEntity(new Egg(this, new Pos(16, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(18, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(23, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(25, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(28, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(30, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(38, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(41, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(48, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(52, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(54, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(57, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(63, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(68, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(72, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
        this.addEntity(new Egg(this, new Pos(78, 23), new CallbackCollection(this.anEggDiedCallback.bind(this))));
    };

    CastleRoom3.prototype.addMonster = function () {
        this.monster = new Monster(this, new Pos(67, 3));
        this.addEntity(this.monster);
    };

    CastleRoom3.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));

        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 3));
        wall.addBox(new Pos(0, 3), new Pos(7, 25));
        wall.addBox(new Pos(7, 24), new Pos(93, 4));
        wall.addBox(new Pos(95, 3), new Pos(5, 18));

        // Add the wall entity
        this.addEntity(wall);
    };

    CastleRoom3.prototype.anEggDiedCallback = function () {
        // We warn the monster that an egg was destroyed
        this.monster.eggDestroyed();
    };

    CastleRoom3.prototype.openChest = function () {
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedL", "You opened a chest and found a strange stone.", "You gain a strange stone."));
    };
    return CastleRoom3;
})(Quest);
///<reference path="CastleRoom.ts"/>
Saving.registerBool("castleTowerFirstVisitDone", false);

// The following bools are true if we placed the corresponding stones in the tower
Saving.registerBool("castleTowerPStoneDone", false);
Saving.registerBool("castleTowerLStoneDone", false);
Saving.registerBool("castleTowerAStoneDone", false);
Saving.registerBool("castleTowerYStoneDone", false);

// Another one
Saving.registerBool("castleTowerTookTalkingCandy", false);

var CastleTower = (function (_super) {
    __extends(CastleTower, _super);
    // Constructor
    function CastleTower(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        // Byt default, the interval ID is set to null
        this.intervalID = null;

        // Set the cut scene max timer
        this.cutSceneMaxTimer = 72;

        if (Saving.loadBool("castleTowerFirstVisitDone") == false) {
            Saving.saveBool("castleTowerFirstVisitDone", true);
            this.cutSceneTimer = 0;
            this.intervalID = setInterval(this.actionInterval.bind(this), 100);
        } else {
            this.cutSceneTimer = this.cutSceneMaxTimer;
        }

        this.renderArea.resize(100, 38);
        this.update();
    }
    // getRenderArea()
    CastleTower.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // willStopBeingDisplayed()
    CastleTower.prototype.willStopBeingDisplayed = function () {
        if (this.intervalID != null)
            clearInterval(this.intervalID);
    };

    // Private methods
    CastleTower.prototype.actionInterval = function () {
        if (this.cutSceneTimer < this.cutSceneMaxTimer) {
            this.cutSceneTimer += 1;
            this.update();
            this.getGame().updatePlace();
        }
    };

    CastleTower.prototype.clickedOnStone = function (ourSavingName) {
        // This stone is now in the tower
        Saving.saveBool(ourSavingName, true);

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    CastleTower.prototype.drawBackground = function () {
        // Calculate the gap
        var gap = (this.cutSceneMaxTimer - this.cutSceneTimer);
        if (gap > 60)
            gap = 60;

        // Draw the background ascii art
        this.renderArea.drawArray(Database.getAscii("places/castle/tower/castleTower"), 5, 3 - gap);
    };

    CastleTower.prototype.drawTalkingCandy = function () {
        if (Saving.loadBool("castleTowerPStoneDone") && Saving.loadBool("castleTowerLStoneDone") && Saving.loadBool("castleTowerAStoneDone") && Saving.loadBool("castleTowerYStoneDone") && Saving.loadBool("castleTowerTookTalkingCandy") == false) {
            // Draw the ascii art
            this.renderArea.drawArray(Database.getAscii("places/castle/tower/talkingCandy"), 47, 22);

            // Draw the button
            this.renderArea.addMultipleAsciiButtons("castleTowerTalkingCandyButton", 47, 50, 22, 47, 50, 23);
            this.renderArea.addLinkCall(".castleTowerTalkingCandyButton", new CallbackCollection(this.takeTalkingCandy.bind(this)));
        }
    };

    CastleTower.prototype.drawStone = function (savingName, ourSavingName, asciiArtName, pos) {
        if (Saving.loadBool(savingName) == true && Saving.loadBool(ourSavingName) == false) {
            // We add the button to click on the stone
            this.renderArea.addMultipleAsciiButtons("castleTower" + savingName + "Button", pos.x + 3, pos.x + 8, pos.y, pos.x + 2, pos.x + 9, pos.y + 1, pos.x + 1, pos.x + 10, pos.y + 2, pos.x + 2, pos.x + 9, pos.y + 3, pos.x + 3, pos.x + 8, pos.y + 4);

            // Add the link
            this.renderArea.addLinkCall(".castleTower" + savingName + "Button", new CallbackCollection(this.clickedOnStone.bind(this, ourSavingName)));
        } else if (Saving.loadBool(savingName) == true && Saving.loadBool(ourSavingName) == true) {
            // We draw the stone ascii art on the specified position
            this.renderArea.drawArray(Database.getAscii(asciiArtName), pos.x, pos.y - 1);
        }
    };

    CastleTower.prototype.drawStones = function () {
        // Calculate the gap
        var gap = (this.cutSceneMaxTimer - this.cutSceneTimer);
        if (gap > 60)
            gap = 60;

        // Draw the stones
        this.drawStone("gridItemPossessedP", "castleTowerPStoneDone", "gridItems/p", new Pos(25, 26 - gap));
        this.drawStone("gridItemPossessedL", "castleTowerLStoneDone", "gridItems/l", new Pos(38, 26 - gap));
        this.drawStone("gridItemPossessedA", "castleTowerAStoneDone", "gridItems/a", new Pos(51, 26 - gap));
        this.drawStone("gridItemPossessedY", "castleTowerYStoneDone", "gridItems/y", new Pos(64, 26 - gap));
    };

    CastleTower.prototype.takeTalkingCandy = function () {
        // We take the candy
        Saving.saveBool("castleTowerTookTalkingCandy", true);

        // We gain the corresponding item
        this.getGame().gainItem("gridItemPossessedTalkingCandy");

        // We update
        this.update();
        this.getGame().updatePlace();
    };

    CastleTower.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToTheCastleButton(this.renderArea, "castleTowerBackToTheCastleButton");

        // Draw the background
        this.drawBackground();

        // Draw the stones related stuff
        this.drawStones();

        // Draw the talking candy related stuff
        this.drawTalkingCandy();
    };
    return CastleTower;
})(CastleRoom);
///<reference path="Place.ts"/>
Saving.registerBool("castleKilledNougatMonster", false);

var Castle = (function (_super) {
    __extends(Castle, _super);
    // Constructor
    function Castle(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        this.renderArea.resizeFromArray(Database.getAscii("places/castle/map"), 0, 5);
        this.update();
    }
    // getRenderArea()
    Castle.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    Castle.prototype.drawBigRoom = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleBigRoomButton", x, x + 1, y, x, x + 1, y + 1);

        // Comment
        this.renderArea.addFullComment(x - 9, y, Database.getText("castleBigRoomComment"), Database.getTranslatedText("castleBigRoomComment"), "castleBigRoomComment");

        // Interactions
        this.renderArea.addLinkOver(".castleBigRoomButton, .castleBigRoomComment", ".castleBigRoomComment");
        this.renderArea.addLinkCall(".castleBigRoomButton", new CallbackCollection(this.goToBigRoom.bind(this)));
    };

    Castle.prototype.drawCastleEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiNinjaButtons("castleCastleEntranceButton", x, x + 2, y);

        // Comment
        this.renderArea.addFullComment(x + 1, y + 1, Database.getText("castleCastleEntranceComment"), Database.getTranslatedText("castleCastleEntranceComment"), "castleCastleEntranceComment");

        // Interactions
        this.renderArea.addLinkOver(".castleCastleEntranceButton, .castleCastleEntranceComment", ".castleCastleEntranceComment");
    };

    Castle.prototype.drawNougatMonster = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleNougatMonsterButton", x + 1, x + 8, y, x, x + 10, y + 1, x, x + 10, y + 2, x + 1, x + 8, y + 3);

        // Comment
        this.renderArea.addFullComment(x + 5, y - 2, Database.getText("castleNougatMonsterComment"), Database.getTranslatedText("castleNougatMonsterComment"), "castleNougatMonsterComment");

        // Interactions
        this.renderArea.addLinkOver(".castleNougatMonsterButton, .castleNougatMonsterComment", ".castleNougatMonsterComment");
        this.renderArea.addLinkCall(".castleNougatMonsterButton", new CallbackCollection(this.goToNougatMonster.bind(this)));
    };

    Castle.prototype.drawRoom1 = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleRoom1Button", x, x + 1, y, x, x + 1, y + 1);

        // Comment
        this.renderArea.addFullComment(x - 6, y, Database.getText("castleARoomComment"), Database.getTranslatedText("castleARoomComment"), "castleRoom1Comment");

        // Interactions
        this.renderArea.addLinkOver(".castleRoom1Button, .castleRoom1Comment", ".castleRoom1Comment");
        this.renderArea.addLinkCall(".castleRoom1Button, .castleRoom1Comment", new CallbackCollection(this.goToRoom1.bind(this)));
    };

    Castle.prototype.drawRoom2 = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleRoom2Button", x, x + 1, y, x, x + 1, y + 1);

        // Comment
        this.renderArea.addFullComment(x - 6, y, Database.getText("castleADarkRoomComment"), Database.getTranslatedText("castleADarkRoomComment"), "castleRoom2Comment");

        // Interactions
        this.renderArea.addLinkOver(".castleRoom2Button, .castleRoom2Comment", ".castleRoom2Comment");
        this.renderArea.addLinkCall(".castleRoom2Button, .castleRoom2Comment", new CallbackCollection(this.goToRoom2.bind(this)));
    };

    Castle.prototype.drawRoom3 = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleRoom3Button", x, x + 1, y, x, x + 1, y + 1);

        // Comment
        this.renderArea.addFullComment(x - 6, y, Database.getText("castleARoomComment"), Database.getTranslatedText("castleARoomComment"), "castleRoom3Comment");

        // Interactions
        this.renderArea.addLinkOver(".castleRoom3Button, .castleRoom3Comment", ".castleRoom3Comment");
        this.renderArea.addLinkCall(".castleRoom3Button, .castleRoom3Comment", new CallbackCollection(this.goToRoom3.bind(this)));
    };

    Castle.prototype.drawStairs = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleStairsButton", x, x + 4, y, x, x + 4, y + 1, x, x + 4, y + 2, x, x + 4, y + 3, x, x + 4, y + 4);

        // Comment
        this.renderArea.addFullComment(x + 10, y + 2, Database.getText("castleStairsComment"), Database.getTranslatedText("castleStairsComment"), "castleStairsComment");

        // Interactions
        this.renderArea.addLinkOver(".castleStairsButton, .castleStairsComment", ".castleStairsComment");
        this.renderArea.addLinkCall(".castleStairsButton", new CallbackCollection(this.goToStairs.bind(this)));
    };

    Castle.prototype.drawTowerEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("castleTowerEntranceButton", x, x + 1, y, x, x + 1, y + 1);

        // Comment
        this.renderArea.addFullComment(x + 12, y, Database.getText("castleTowerEntranceComment"), Database.getTranslatedText("castleTowerEntranceComment"), "castleTowerEntranceComment");

        // Interactions
        this.renderArea.addLinkOver(".castleTowerEntranceButton, .castleTowerEntranceComment", ".castleTowerEntranceComment");
        this.renderArea.addLinkCall(".castleTowerEntranceButton", new CallbackCollection(this.goToTowerEntrance.bind(this)));
    };

    Castle.prototype.goToBigRoom = function () {
        this.getGame().setPlace(new CastleBigRoom(this.getGame()));
    };

    Castle.prototype.goToNougatMonster = function () {
        this.getGame().setPlace(new GiantNougatMonsterQuest(this.getGame()));
    };

    Castle.prototype.goToRoom1 = function () {
        this.getGame().setPlace(new CastleRoom1(this.getGame()));
    };

    Castle.prototype.goToRoom2 = function () {
        this.getGame().setPlace(new CastleRoom2(this.getGame()));
    };

    Castle.prototype.goToRoom3 = function () {
        this.getGame().setPlace(new CastleRoom3(this.getGame()));
    };

    Castle.prototype.goToStairs = function () {
        this.getGame().setPlace(new Dragon(this.getGame()));
    };

    Castle.prototype.goToTowerEntrance = function () {
        this.getGame().setPlace(new CastleTower(this.getGame()));
    };

    Castle.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "castleBackToTheMapButton");

        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/castle/map"), 0, 3);

        // Draw various stuff
        this.drawCastleEntrance(43, 36);
        this.drawBigRoom(57, 19);
        this.drawRoom1(15, 27);
        this.drawRoom2(15, 21);
        this.drawRoom3(15, 15);
        this.drawNougatMonster(68, 15);
        this.drawStairs(32, 3);
        if (Saving.loadBool("castleKilledNougatMonster")) {
            this.drawTowerEntrance(84, 16);
        }
    };
    return Castle;
})(Place);
var CauldronActionLogEntry = (function () {
    // Constructor
    function CauldronActionLogEntry(action, time, candies, lollipops) {
        this.action = action;
        this.time = time;
        this.candies = candies;
        this.lollipops = lollipops;
    }
    // Public getters
    CauldronActionLogEntry.prototype.getAction = function () {
        return this.action;
    };

    CauldronActionLogEntry.prototype.getCandies = function () {
        return this.candies;
    };

    CauldronActionLogEntry.prototype.getLollipops = function () {
        return this.lollipops;
    };

    CauldronActionLogEntry.prototype.getTime = function () {
        return this.time;
    };
    return CauldronActionLogEntry;
})();
var CauldronAction;
(function (CauldronAction) {
    CauldronAction[CauldronAction["NOTHING"] = 0] = "NOTHING";
    CauldronAction[CauldronAction["MIXING"] = 1] = "MIXING";
    CauldronAction[CauldronAction["BOILING"] = 2] = "BOILING";
})(CauldronAction || (CauldronAction = {}));
var CauldronFlame = (function () {
    // Constructor
    function CauldronFlame(pos, character) {
        this.pos = pos;
        this.character = character;
    }
    // Public methods
    CauldronFlame.prototype.draw = function (renderArea, x, y) {
        renderArea.drawString(this.character, x + this.pos.x, y + this.pos.y);
    };
    return CauldronFlame;
})();
///<reference path="Place.ts"/>
Saving.registerNumber("cauldronBookCurrentPage", 0);

var Cauldron = (function (_super) {
    __extends(Cauldron, _super);
    // Constructor
    function Cauldron(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Maximum page
        this.maxPage = 10;
        // The candies & lollipops in the input field
        this.candiesInput = "";
        this.lollipopsInput = "";
        // The comments next to candies and lollipops input fields (they're needed if the player types something which isn't a number, or which is a negative number)
        this.candiesInputComment = null;
        this.lollipopsInputComment = null;
        // What are we doing?
        this.currentAction = CauldronAction.NOTHING;
        // Current timer time
        this.timerTime = 0;
        // Action log
        this.actionLog = [null, null, null, null, null];
        // The comment telling the player the potions he managed to brew
        this.potionsComment = null;
        // Array containing the flames we can see when heating up the cauldron
        this.flames = [];

        // Launch the interval and get the ID
        this.timerIntervalID = setInterval(this.actionInterval.bind(this), 1000);

        // Resize and update
        this.renderArea.resize(100, 57);
        this.update(true);
    }
    // getRenderArea()
    Cauldron.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // willBeDisplayed()
    Cauldron.prototype.willBeDisplayed = function () {
        // We add hotkeys
        this.getGame().addHotkey(new Hotkey("a", new CallbackCollection(this.putInCauldron.bind(this))));
        this.getGame().addHotkey(new Hotkey("m", new CallbackCollection(this.changeAction.bind(this, CauldronAction.MIXING))));
        this.getGame().addHotkey(new Hotkey("b", new CallbackCollection(this.changeAction.bind(this, CauldronAction.BOILING))));
        this.getGame().addHotkey(new Hotkey("s", new CallbackCollection(this.changeAction.bind(this, CauldronAction.NOTHING))));
        this.getGame().addHotkey(new Hotkey("p", new CallbackCollection(this.putIntoBottles.bind(this))));
        this.getGame().addHotkey(new Hotkey("left", new CallbackCollection(this.previousPage.bind(this))));
        this.getGame().addHotkey(new Hotkey("right", new CallbackCollection(this.nextPage.bind(this))));
    };

    // willStopBeingDisplayed()
    Cauldron.prototype.willStopBeingDisplayed = function () {
        clearInterval(this.timerIntervalID);
    };

    // Private methods
    Cauldron.prototype.actionInterval = function () {
        // Increase the time
        this.timerTime += 1;

        if (this.currentAction == CauldronAction.BOILING) {
            this.updateFlamesArray();
        }

        if (this.currentAction != CauldronAction.NOTHING) {
            this.update();
            this.getGame().updatePlace();
        }
    };

    Cauldron.prototype.changeAction = function (newAction) {
        if (this.currentAction != newAction) {
            if (this.currentAction != CauldronAction.NOTHING) {
                for (var i = this.actionLog.length - 1; i > 0; i--) {
                    this.actionLog[i] = this.actionLog[i - 1];
                }

                // Set actionLog[0] to the action which just stopped
                this.actionLog[0] = new CauldronActionLogEntry(this.currentAction, this.timerTime, this.getGame().getCandiesInCauldron().getCurrent(), this.getGame().getLollipopsInCauldron().getCurrent());
            }

            // Now we're doing that
            this.currentAction = newAction;

            // Reset the timer and restart the interval
            this.timerTime = 0;
            clearInterval(this.timerIntervalID);
            this.timerIntervalID = setInterval(this.actionInterval.bind(this), 1000);

            // We reset the flames array
            this.resetFlamesArray();

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    Cauldron.prototype.changeCandiesInput = function () {
        if ($(".cauldronCandiesInput").length)
            this.candiesInput = $(".cauldronCandiesInput").val();
    };

    Cauldron.prototype.changeLollipopsInput = function () {
        if ($(".cauldronLollipopsInput").length)
            this.lollipopsInput = $(".cauldronLollipopsInput").val();
    };

    Cauldron.prototype.drawActions = function (x, y, firstTimeWeUpdate, keepInputContent) {
        // Variables
        var candiesInputHasFocus = false;
        var lollipopsInputHasFocus = false;

        if (firstTimeWeUpdate == false) {
            // If if the candies / lollipops input has the focus (in order to restore the focus after the page updating)
            candiesInputHasFocus = $(".cauldronCandiesInput").is(":focus");
            lollipopsInputHasFocus = $(".cauldronLollipopsInput").is(":focus");

            // Reset the content of candiesInput and lollipopsInput
            this.candiesInput = "";
            this.lollipopsInput = "";
        }

        // What you want to put in the cauldron
        // Text
        this.renderArea.drawString(Database.getText("cauldronWhatYouWantToPut"), x, y);
        this.renderArea.addBold(x, x + Database.getText("cauldronWhatYouWantToPut").length, y);
        this.renderArea.drawString(Database.getTranslatedText("cauldronWhatYouWantToPut"), x, y + 1, true);

        // Candies input
        this.renderArea.addSimpleInput(x, x + 20, y + 2, new CallbackCollection(this.changeCandiesInput.bind(this)), "cauldronCandiesInput", (keepInputContent ? this.candiesInput : ""), candiesInputHasFocus);
        this.renderArea.drawString("candies", x + 21, y + 2);
        if (this.candiesInputComment != null) {
            this.renderArea.drawString(this.candiesInputComment, x + 29, y + 2);
            this.renderArea.addBold(x + 29, x + 29 + this.candiesInputComment.length, y + 2);
        }

        // Lollipops input
        this.renderArea.addSimpleInput(x, x + 20, y + 4, new CallbackCollection(this.changeLollipopsInput.bind(this)), "cauldronLollipopsInput", (keepInputContent ? this.lollipopsInput : ""), lollipopsInputHasFocus);
        this.renderArea.drawString("lollipops", x + 21, y + 4);
        if (this.lollipopsInputComment != null) {
            this.renderArea.drawString(this.lollipopsInputComment, x + 31, y + 4);
            this.renderArea.addBold(x + 31, x + 31 + this.lollipopsInputComment.length, y + 4);
        }

        // Put all that in the cauldron
        this.renderArea.addAsciiRealButton("Put all that in the cauldron", x, y + 6, "cauldronPutAllThatInTheCauldronButton", "", false, 4);
        this.renderArea.addLinkCall(".cauldronPutAllThatInTheCauldronButton", new CallbackCollection(this.putInCauldron.bind(this)));

        // What is in the cauldron
        // Text
        this.renderArea.drawString(Database.getText("cauldronWhatIsIn"), x, y + 9);
        this.renderArea.addBold(x, x + Database.getText("cauldronWhatIsIn").length, y + 9);
        this.renderArea.drawString(Database.getTranslatedText("cauldronWhatIsIn"), x, y + 10, true);

        // Candies
        this.renderArea.drawString("Candies :", x + 2, y + 11);
        this.renderArea.drawString(Algo.numberToStringButNicely(this.getGame().getCandiesInCauldron().getCurrent()), x + 14, y + 11);

        // Lollipops
        this.renderArea.drawString("Lollipops :", x + 2, y + 12);
        this.renderArea.drawString(Algo.numberToStringButNicely(this.getGame().getLollipopsInCauldron().getCurrent()), x + 14, y + 12);

        // What you can do with it
        // Text
        this.renderArea.drawString(Database.getText("cauldronWhatYouCanDo"), x, y + 14);
        this.renderArea.addBold(x, x + Database.getText("cauldronWhatYouCanDo").length, y + 14);
        this.renderArea.drawString(Database.getTranslatedText("cauldronWhatYouCanDo"), x, y + 15, true);

        // Mix button
        this.renderArea.addAsciiRealButton("Mix", x, y + 16, "cauldronMixButton", "", false, 0);
        this.renderArea.addLinkCall(".cauldronMixButton", new CallbackCollection(this.changeAction.bind(this, CauldronAction.MIXING)));

        // Boil button
        this.renderArea.addAsciiRealButton("Boil", x + 5, y + 16, "cauldronBoilButton", "", false, 0);
        this.renderArea.addLinkCall(".cauldronBoilButton", new CallbackCollection(this.changeAction.bind(this, CauldronAction.BOILING)));

        // Stop button
        this.renderArea.addAsciiRealButton("Stop", x + 11, y + 16, "cauldronStopButton", "", false, 0);
        this.renderArea.addLinkCall(".cauldronStopButton", new CallbackCollection(this.changeAction.bind(this, CauldronAction.NOTHING)));

        switch (this.currentAction) {
            case CauldronAction.MIXING:
                this.renderArea.drawString("Mixing" + this.getSpecialMixingText(), x, y + 18);
                break;
            case CauldronAction.BOILING:
                this.renderArea.drawString("Boiling" + this.getSpecialBoilingText(), x, y + 18);
                break;
        }

        if (this.getGame().getWeAreQuesting() == false) {
            this.renderArea.addAsciiRealButton("Put into bottles", x, y + 20, "cauldronPutIntoBottlesButton", "", false, 0);
            this.renderArea.addLinkCall(".cauldronPutIntoBottlesButton", new CallbackCollection(this.putIntoBottles.bind(this)));
        } else {
            this.renderArea.drawString("You can't put into bottles while you're in a quest", x, y + 20);
        }

        if (this.potionsComment != null)
            this.renderArea.drawString(this.potionsComment, x, y + 22);
    };

    Cauldron.prototype.drawBook = function (x, y) {
        // Draw the book
        this.renderArea.drawArray(Database.getAscii("places/cauldron/book"), x, y);

        // Draw the pages' content
        this.renderArea.drawArray(Database.getAscii("places/cauldron/bookPage" + Saving.loadNumber("cauldronBookCurrentPage")), x + 8, y + 1);
        this.renderArea.drawArray(Database.getAscii("places/cauldron/bookPage" + (Saving.loadNumber("cauldronBookCurrentPage") + 1)), x + 50, y + 1);

        if (Saving.loadNumber("cauldronBookCurrentPage") > 0) {
            this.renderArea.addAsciiRealButton(Database.getText("cauldronPreviousPageButton"), x, y + 31, "cauldronPreviousPageButton", Database.getTranslatedText("cauldronPreviousPageButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".cauldronPreviousPageButton", new CallbackCollection(this.previousPage.bind(this)));
        }

        if (Saving.loadNumber("cauldronBookCurrentPage") < this.maxPage) {
            this.renderArea.addAsciiRealButton(Database.getText("cauldronNextPageButton"), x + 87, y + 31, "cauldronNextPageButton", Database.getTranslatedText("cauldronNextPageButton"), true, -1, null, false, true);
            this.renderArea.addLinkCall(".cauldronNextPageButton", new CallbackCollection(this.nextPage.bind(this)));
        }

        if (Database.isTranslated()) {
            for (var i = 1; i < 28; i++) {
                this.renderArea.addAsciiNinjaButton(x + 7, x + 48, i, "cauldronLeftPageTranslationButton");
            }

            for (var i = 1; i < 28; i++) {
                this.renderArea.addAsciiNinjaButton(x + 49, x + 90, i, "cauldronRightPageTranslationButton");
            }

            // Tooltips
            this.renderArea.addTooltip("cauldronLeftPageTranslationButtonTooltip", Database.getTranslatedText("cauldron.page" + Saving.loadNumber("cauldronBookCurrentPage")));
            this.renderArea.addTooltip("cauldronRightPageTranslationButtonTooltip", Database.getTranslatedText("cauldron.page" + (Saving.loadNumber("cauldronBookCurrentPage") + 1)));

            // Links
            this.renderArea.addLinkOnHoverShowTooltip(".cauldronLeftPageTranslationButton", ".cauldronLeftPageTranslationButtonTooltip");
            this.renderArea.addLinkOnHoverShowTooltip(".cauldronRightPageTranslationButton", ".cauldronRightPageTranslationButtonTooltip");
        }
    };

    Cauldron.prototype.drawCauldron = function (x, y) {
        // Draw the cauldron
        this.renderArea.drawArray(Database.getAscii("places/cauldron/cauldron"), x, y);

        for (var i = 0; i < this.flames.length; i++) {
            this.flames[i].draw(this.renderArea, x, y);
        }
    };

    Cauldron.prototype.getSpecialBoilingText = function () {
        if (this.timerTime < 3)
            return "... cold.";
else if (this.timerTime < 6)
            return "... lukewarm.";
else if (this.timerTime == 6)
            return "... hot.";
else if (this.timerTime == 7)
            return "... hot..";
else if (this.timerTime == 8)
            return "... hot...";
else if (this.timerTime == 9)
            return "... very hot.";
else if (this.timerTime == 10)
            return "... very hot..";
else if (this.timerTime == 11)
            return "... very hot...";
else if (this.timerTime < 14)
            return "... bubbles begin to appear.";
else if (this.timerTime == 14)
            return "... bubbles begin to appear..";
else if (this.timerTime == 15)
            return "... bubbles begin to appear...";
else if (this.timerTime == 16)
            return "... bubbles begin to appear... and..";
else if (this.timerTime == 17)
            return "... bubbles begin to appear... and...";
else if (this.timerTime < 50)
            return "... BOILING!";
else
            return "... the water is burnt. How is that possible?!";
    };

    Cauldron.prototype.getSpecialMixingText = function () {
        if (this.timerTime < 60)
            return "... (" + this.timerTime + ")";
else
            return "... your arms are hurting :(";
    };

    Cauldron.prototype.makePotions = function (boolSavingName, numberSavingName, howMany, singularPotionName, pluralPotionName) {
        // We can now use this kind of potion
        Saving.saveBool(boolSavingName, true);

        // We increase the quantity
        Saving.saveNumber(numberSavingName, Saving.loadNumber(numberSavingName) + howMany);

        // We set the comment
        this.potionsComment = "You made " + Algo.pluralFormat(howMany, " " + singularPotionName, " " + pluralPotionName) + ".";
    };

    Cauldron.prototype.nextPage = function () {
        if (Saving.loadNumber("cauldronBookCurrentPage") < this.maxPage) {
            // Change the current page number
            Saving.saveNumber("cauldronBookCurrentPage", Saving.loadNumber("cauldronBookCurrentPage") + 2);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    Cauldron.prototype.previousPage = function () {
        if (Saving.loadNumber("cauldronBookCurrentPage") > 0) {
            // Change the current page number
            Saving.saveNumber("cauldronBookCurrentPage", Saving.loadNumber("cauldronBookCurrentPage") - 2);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    Cauldron.prototype.putInCauldron = function () {
        // Used to know if we will have to update and return
        var updateAndReturn = false;

        // Parse the inputs and put them in two variables
        var candies = (this.candiesInput == "" ? 0 : parseInt(this.candiesInput));
        var lollipops = (this.lollipopsInput == "" ? 0 : parseInt(this.lollipopsInput));

        // Reset the comments
        this.candiesInputComment = null;
        this.lollipopsInputComment = null;

        if (isNaN(candies)) {
            this.candiesInputComment = "(this isn't a number!)";
            updateAndReturn = true;
        } else if (candies < 0) {
            this.candiesInputComment = "(must be positive)";
            updateAndReturn = true;
        } else if (candies > this.getGame().getCandies().getCurrent()) {
            this.candiesInputComment = "(not enough candies)";
            updateAndReturn = true;
        }

        if (isNaN(lollipops)) {
            this.lollipopsInputComment = "(this isn't a number!)";
            updateAndReturn = true;
        } else if (lollipops < 0) {
            this.lollipopsInputComment = "(must be positive)";
            updateAndReturn = true;
        } else if (lollipops > this.getGame().getLollipops().getCurrent()) {
            this.lollipopsInputComment = "(not enough lollipops)";
            updateAndReturn = true;
        }

        if (updateAndReturn) {
            this.update();
            this.getGame().updatePlace();
            return;
        } else {
            // Take the candies & lollipops
            this.getGame().getCandies().add(-candies);
            this.getGame().getLollipops().add(-lollipops);

            // Put all the stuff
            this.getGame().getCandiesInCauldron().add(candies);
            this.getGame().getLollipopsInCauldron().add(lollipops);

            // Update
            this.update(false, false);
            this.getGame().updatePlace();
        }
    };

    Cauldron.prototype.putIntoBottles = function () {
        // Reset the potions comment
        this.potionsComment = null;

        // Stop any action
        this.changeAction(CauldronAction.NOTHING);

        // Take the candies & lollipops in the cauldron
        this.getGame().getCandiesInCauldron().add(-this.getGame().getCandiesInCauldron().getCurrent());
        this.getGame().getLollipopsInCauldron().add(-this.getGame().getLollipopsInCauldron().getCurrent());

        if (this.actionLog[0] != null && this.actionLog[0].getAction() == CauldronAction.MIXING && this.actionLog[0].getLollipops() == 0 && this.actionLog[0].getCandies() > 0 && this.actionLog[0].getCandies() % 100 == 0 && this.actionLog[0].getTime() < 30) {
            this.makePotions("questPlayerSpellHealthPotionHasSpell", "questPlayerSpellHealthPotionQuantity", this.actionLog[0].getCandies() / 100, "health potion", "health potions");
        } else if (this.actionLog[1] != null && this.actionLog[1].getAction() == CauldronAction.MIXING && this.actionLog[1].getCandies() > 0 && this.actionLog[1].getLollipops() > 0 && this.actionLog[1].getCandies() % 50 == 0 && this.actionLog[1].getLollipops() % 500 == 0 && this.actionLog[1].getLollipops() == 10 * this.actionLog[1].getCandies() && this.actionLog[1].getTime() > 6 && this.actionLog[1].getTime() < 14 && this.actionLog[0] != null && this.actionLog[0].getAction() == CauldronAction.MIXING && this.actionLog[0].getCandies() == 2 * this.actionLog[1].getCandies() && this.actionLog[0].getLollipops() == this.actionLog[1].getLollipops()) {
            this.makePotions("questPlayerSpellTurtlePotionHasSpell", "questPlayerSpellTurtlePotionQuantity", this.actionLog[0].getLollipops() / 500, "turtle potion", "turtle potions");
        } else if (this.actionLog[1] != null && this.actionLog[1].getAction() == CauldronAction.BOILING && this.actionLog[1].getLollipops() == 0 && this.actionLog[1].getCandies() > 0 && this.actionLog[1].getCandies() % 1000 == 0 && this.actionLog[1].getTime() >= 3 && this.actionLog[1].getTime() < 6 && this.actionLog[0] != null && this.actionLog[0].getAction() == CauldronAction.BOILING && this.actionLog[0].getLollipops() == 0 && this.actionLog[0].getCandies() == 2 * this.actionLog[1].getCandies() && this.actionLog[0].getTime() > 17) {
            this.makePotions("questPlayerSpellAntiGravityPotionHasSpell", "questPlayerSpellAntiGravityPotionQuantity", this.actionLog[1].getCandies() / 200, "anti-gravity potion", "anti-gravity potions");
        } else if (this.actionLog[0] != null && this.actionLog[0].getAction() == CauldronAction.MIXING && this.actionLog[0].getLollipops() > 0 && this.actionLog[0].getLollipops() % 20000 == 0 && this.actionLog[0].getTime() >= 60) {
            if (this.actionLog[0].getCandies() == 0) {
                this.makePotions("questPlayerSpellBerserkPotionHasSpell", "questPlayerSpellBerserkPotionQuantity", this.actionLog[0].getLollipops() / 20000, "berserk potion", "berserk potions");
            } else {
                this.makePotions("questPlayerSpellCloningPotionHasSpell", "questPlayerSpellCloningPotionQuantity", this.actionLog[0].getLollipops() / 20000, "cloning potion", "cloning potions");
            }
        } else if (this.actionLog[2] != null && this.actionLog[2].getAction() == CauldronAction.MIXING && this.actionLog[2].getLollipops() == 0 && this.actionLog[2].getCandies() > 0 && this.actionLog[2].getCandies() % 500 == 0 && this.actionLog[2].getTime() < 30 && this.actionLog[1] != null && this.actionLog[1].getLollipops() == 0 && this.actionLog[1].getCandies() == this.actionLog[2].getCandies() + 100 * this.actionLog[2].getTime() && this.actionLog[1].getAction() == CauldronAction.BOILING && this.actionLog[1].getTime() >= 3 && this.actionLog[1].getTime() < 6 && this.actionLog[0] != null && this.actionLog[0].getAction() == CauldronAction.MIXING && this.actionLog[0].getCandies() == this.actionLog[1].getCandies() && this.actionLog[0].getLollipops() > 0) {
            this.makePotions("questPlayerSpellPPotionHasSpell", "questPlayerSpellPPotionQuantity", Math.ceil(this.actionLog[1].getCandies() / 500 + this.actionLog[0].getLollipops() / 1000), "P potion", "P potions");
        } else if (this.actionLog[4] != null && this.actionLog[3] != null && this.actionLog[2] != null && this.actionLog[1] != null && this.actionLog[0] != null && this.actionLog[4].getAction() == CauldronAction.BOILING && this.actionLog[3].getAction() == CauldronAction.BOILING && this.actionLog[2].getAction() == CauldronAction.BOILING && this.actionLog[1].getAction() == CauldronAction.BOILING && this.actionLog[0].getAction() == CauldronAction.BOILING && this.actionLog[4].getTime() < 3 && this.actionLog[3].getTime() < 3 && this.actionLog[2].getTime() < 3 && this.actionLog[1].getTime() < 3 && this.actionLog[0].getTime() >= 6 && this.actionLog[4].getLollipops() == 0 && this.actionLog[4].getCandies() == 1 && this.actionLog[3].getLollipops() == 0 && this.actionLog[3].getCandies() == 2 && this.actionLog[2].getLollipops() == 0 && this.actionLog[2].getCandies() == 3 && this.actionLog[1].getLollipops() == 0 && this.actionLog[1].getCandies() == 4 && this.actionLog[0].getLollipops() == 1 && this.actionLog[0].getCandies() == 4) {
            this.makePotions("questPlayerSpellXPotionHasSpell", "questPlayerSpellXPotionQuantity", 1, "X potion", "X potions");
        }

        if (this.potionsComment == null)
            this.potionsComment = "You didn't manage to make anything.";

        for (var i = 0; i < this.actionLog.length; i++) {
            this.actionLog[i] = null;
        }

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    Cauldron.prototype.resetFlamesArray = function () {
        this.flames = [];
    };

    Cauldron.prototype.update = function (firstTimeWeUpdate, keepInputContent) {
        if (typeof firstTimeWeUpdate === "undefined") { firstTimeWeUpdate = false; }
        if (typeof keepInputContent === "undefined") { keepInputContent = true; }
        // Erase everything
        this.renderArea.resetAllButSize();

        // Draw everything
        this.drawBook(2, 0);
        this.drawCauldron(2, 39);
        this.drawActions(47, 34, firstTimeWeUpdate, keepInputContent);
    };

    Cauldron.prototype.updateFlamesArray = function () {
        // Create the variables
        var minX = 0;
        var maxX = 41;
        var minY;
        var maxY = 14;
        var howManyFlames;
        var x;
        var y;

        // Calculate minY
        minY = 14 - this.timerTime;
        if (minY < 5)
            minY = 5;

        // Caulcate howManyFlames
        howManyFlames = this.timerTime * 25;
        if (howManyFlames > 200)
            howManyFlames = 200;

        // Reset the array
        this.resetFlamesArray();

        if (this.currentAction = CauldronAction.BOILING) {
            for (var i = 0; i < howManyFlames; i++) {
                // Set y
                y = null;
                for (var j = maxY; j > minY; j--) {
                    if (Random.oneChanceOutOf(3)) {
                        y = j;
                        break;
                    }
                }
                if (y == null)
                    y = maxY;

                // Set x
                x = Random.between(minX + (14 - y), maxX - (14 - y));

                // Add the flame
                this.flames.push(new CauldronFlame(new Pos(x, y), Random.fromArray([")", "(", "`", "'", "."])));
            }
        }
    };
    return Cauldron;
})(Place);
///<reference path="Quest.ts"/>
Saving.registerBool("cellarDone", false);

var Cellar = (function (_super) {
    __extends(Cellar, _super);
    // Constructor
    function Cellar(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(100, 3);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 2));
        this.getGame().getPlayer().setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        this.getGame().getPlayer().getQuestEntityMovement().setGravity(true);
        this.getGame().getPlayer().getQuestEntityMovement().setWormsLike(false);
        this.addEntity(this.getGame().getPlayer());

        // Add the ground
        this.addGround();

        // Add the rats
        this.addRats();

        // Add a delimiter and the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the cellar. It's dark and you hear rats squeaking all around you."));
    }
    // Public methods
    Cellar.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to kill all the rats!"));
            Saving.saveBool("cellarDone", true);

            // We gain the main map
            this.getGame().gainItem("gridItemPossessedMainMap");
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the cellar. Rats are probably going to eat your body."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    Cellar.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded())
            this.addExitQuestButton(new CallbackCollection(this.goToFifthHouse.bind(this)), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    Cellar.prototype.addGround = function () {
        var wall = new Wall(this, new Pos(0, this.getRealQuestSize().y));
        wall.addBox(new Pos(0, 0), new Pos(this.getRealQuestSize().x, 1));
        this.addEntity(wall);
    };

    Cellar.prototype.addRat = function (pos) {
        var rat = new Rat(this, pos);
        rat.setHealthBar(new QuestEntityHealthBar(rat, new Pos(3, 1)));
        this.addEntity(rat);
    };

    Cellar.prototype.addRats = function () {
        for (var i = 5; i <= 95; i++) {
            if (Random.oneChanceOutOf(3)) {
                // We add a rat
                this.addRat(new Pos(i, 2));

                // We increase i to avoid adding a rat above the last one
                i += 2;
            }
        }
    };

    Cellar.prototype.goToFifthHouse = function () {
        this.getGame().setPlace(new FifthHouse(this.getGame()));
    };

    Cellar.prototype.thePlayerWon = function () {
        if (this.getGame().getPlayer().getGlobalPosition().x >= 100)
            return true;

        // Else we return false
        return false;
    };
    return Cellar;
})(Quest);
///<reference path="Place.ts"/>
var Cfg = (function (_super) {
    __extends(Cfg, _super);
    // Constructor
    function Cfg(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The map used for the language selection : match the select's options id with the actual usually two letters code used by the Saving module
        this.languageSelectionMap = {
            "cfgLanguageEn": "en",
            "cfgLanguageBr": "br",
            "cfgLanguageCz": "cz",
            "cfgLanguageFr": "fr",
            "cfgLanguageNl": "nl",
            "cfgLanguageZh": "zh",
            "cfgLanguageDe": "de",
            "cfgLanguageSe": "se",
            "cfgLanguageHu": "hu",
            "cfgLanguageId": "id",
            "cfgLanguagePl": "pl"
        };

        // Resize the area
        this.renderArea.resize(100, 48);

        // Update for the first time
        this.update();
    }
    // getRenderArea()
    Cfg.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    Cfg.prototype.drawAbout = function (x, y) {
        // The title
        this.renderArea.drawArray(Database.getAscii("text/About"), x + 34, y);

        // Who?
        this.renderArea.drawString("Who?", x + 2, y + 7);
        this.renderArea.addBold(x + 2, x + 6, y + 7);

        // Who...
        this.renderArea.drawString("Ideas, game design & code by aniwey.", x + 4, y + 9);
        this.renderArea.drawString("Ascii art by Tobias Nordqvist, GodsTurf, dixsept, Dani \"Deinol\" GГіmez and aniwey.", x + 4, y + 10);

        // License?
        this.renderArea.drawString("License?", x + 2, y + 13);
        this.renderArea.addBold(x + 2, x + 10, y + 13);

        // License...
        this.renderArea.drawString("The game source code is published under the GPLv3 license. This means you are free to modify and", x + 4, y + 15);
        this.renderArea.drawString("redistribute the game, even for commercial purposes, under some conditions.", x, y + 16);
        this.renderArea.addHtmlLink(x + 76, y + 16, "source_code.html", "Learn more.");

        this.renderArea.drawString("The ascii art is published under the CC-BY-SA license, which means that you can reuse it if you", x + 4, y + 18);
        this.renderArea.drawString("credit the artist who made the art and share your modifications under the same license.", x, y + 19);
        this.renderArea.addHtmlLink(x + 88, y + 19, "ascii_art.html", "Learn more.");

        // Aything else?
        this.renderArea.drawString("Anything else?", x + 2, y + 22);
        this.renderArea.addBold(x + 2, x + 16, y + 22);

        // Contact
        this.renderArea.drawString("Feel free to contact me at aniwey@gmail.com if you have any comments or questions :)", x + 4, y + 24);
    };

    Cfg.prototype.drawCfgInvertColors = function (x, y) {
        // Text
        this.renderArea.drawString(Database.getText("cfgInvertColors"), x, y);
        this.renderArea.drawString(Database.getTranslatedText("cfgInvertColors"), x, y + 1, true);

        // The checkbox
        this.renderArea.addCheckbox(x + Algo.takeBiggest(Database.getText("cfgInvertColors").length, Database.getTranslatedText("cfgInvertColors").length) + 2, y, new CallbackCollection(this.invertColorsChecked.bind(this)), new CallbackCollection(this.invertColorsUnchecked.bind(this)), "cfgInvertColorsCheckbox", Saving.loadBool("gameInvertedColors"));
    };

    Cfg.prototype.drawCfgLanguage = function (x, y) {
        // Text
        this.renderArea.drawString(Database.getText("cfgChooseLanguage"), x, y);
        this.renderArea.drawString(Database.getTranslatedText("cfgChooseLanguage"), x, y + 1, true);

        // List
        this.renderArea.addList(x + Algo.takeBiggest(Database.getText("cfgChooseLanguage").length, Database.getTranslatedText("cfgChooseLanguage").length) + 2, x + Algo.takeBiggest(Database.getText("cfgChooseLanguage").length, Database.getTranslatedText("cfgChooseLanguage").length) + 20, y, "cfgLanguageList", new CallbackCollection(this.languageSelected.bind(this)), [
            "cfgLanguageEn",
            "English",
            "cfgLanguageBr",
            "Brazilian Portuguese (by TranslaCAT)",
            "cfgLanguageZh",
            "Chinese (by Fan Zhang)",
            "cfgLanguageCz",
            "Czech (by Keranis)",
            "cfgLanguageNl",
            "Dutch (by NoГ«l Wierema and Vincent van Gennep, corrections by Wessel van den Putte)",
            "cfgLanguageFr",
            "French (by aniwey)",
            "cfgLanguageDe",
            "German (by Kai Kubasta)",
            "cfgLanguageHu",
            "Hungarian (by The_Reaper_CooL)",
            "cfgLanguageId",
            "Indonesian (by Richard Sudaryono)",
            "cfgLanguagePl",
            "Polish (by Patryk PoЕ‚omski)",
            "cfgLanguageSe",
            "Swedish (by Jessica Tsiamis)"
        ]);

        // Add the link which will call the selectRightLanguage method after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightLanguage.bind(this)));

        if (Saving.loadString("gameLanguage") == "zh") {
            this.renderArea.drawString("дё­ж–‡з‰€зї»иЇ‘дјљеЇји‡ґе°‘й‡Џе›ѕеѓЏжѕз¤єй”™иЇЇпјЊж€‘дјље°Ѕй‡Џдї®е¤Ќе®ѓд»¬зљ„пјЃ", x + 9, y + 2, true);
        } else if (Saving.loadString("gameLanguage") == "br") {
            this.renderArea.drawArray(Database.getAscii("general/translaCAT"), x + 70, y - 1);
            this.renderArea.addHtmlLink(x + 76, y + 7, "http://www.translacat.com/", "TranslaCAT");
        }
    };

    Cfg.prototype.drawConfigurationText = function (x, y) {
        this.renderArea.drawArray(Database.getAscii("text/Configuration"), x + 17, y);
    };

    Cfg.prototype.invertColorsChecked = function () {
        this.setInvertedColors(true);
    };

    Cfg.prototype.invertColorsUnchecked = function () {
        this.setInvertedColors(false);
    };

    Cfg.prototype.languageSelected = function () {
        // Get the selected language id
        var id = $("#cfgLanguageList").find(":selected").attr("id");

        if (this.languageSelectionMap[id] != null) {
            Saving.saveString("gameLanguage", this.languageSelectionMap[id]);
        }

        // Update Cfg
        this.update();
        this.getGame().updatePlace();
    };

    Cfg.prototype.selectRightLanguage = function () {
        for (var language in this.languageSelectionMap) {
            if (Saving.loadString("gameLanguage") == this.languageSelectionMap[language]) {
                $("#" + language).prop('selected', true);
            }
        }
    };

    Cfg.prototype.setInvertedColors = function (invertedColors) {
        Saving.saveBool("gameInvertedColors", invertedColors);
        this.getGame().applyInvertedColorsToCss();
        this.update();
        this.getGame().updateStatusBar();
        this.getGame().updatePlace();
    };

    Cfg.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // The "Configuration" text
        this.drawConfigurationText(0, 0);

        // Language selection
        this.drawCfgLanguage(0, 8);

        // Invert colors checkbox
        this.drawCfgInvertColors(0, 12);

        // "About" section
        this.drawAbout(0, 18);
    };
    return Cfg;
})(Place);
///<reference path="QuestEntity.ts"/>
var Chest = (function (_super) {
    __extends(Chest, _super);
    // Constructor
    function Chest(quest, globalPosition, isFacingRight, callbackCollection, isOpened) {
        if (typeof isFacingRight === "undefined") { isFacingRight = true; }
        if (typeof callbackCollection === "undefined") { callbackCollection = new CallbackCollection(); }
        if (typeof isOpened === "undefined") { isOpened = false; }
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("A chest", "a chest"), new RenderArea(), new Pos(0, -1), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, -1), new Pos(3, 2))));

        // Set the parameters
        this.isFacingRight = isFacingRight;
        this.callbackCollection = callbackCollection;

        // At first, we're not opened
        this.isOpened = isOpened;

        // Create the opening collision box collection
        this.openingCollisionBoxCollection = new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3)));

        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);

        // Resize the render area
        this.getRenderArea().resizeFromArray(Database.getAscii("places/quests/common/chestClosed"));
        this.setTransparency(new RenderTransparency(" "));

        // Draw for the first time
        this.drawChestAscii();
    }
    // update()
    Chest.prototype.update = function () {
        _super.prototype.update.call(this);

        if (this.isOpened == false) {
            if (this.getQuest().getGame().getPlayer().getCbc() != null) {
                if (this.getQuest().getGame().getPlayer().getCbc().collidesWith(this.openingCollisionBoxCollection)) {
                    // We are now opened
                    this.isOpened = true;

                    // We fire the callback collection
                    this.callbackCollection.fire();

                    // We re-draw
                    this.drawChestAscii();
                }
            }
        }
    };

    // Private methods
    Chest.prototype.drawChestAscii = function () {
        // We erase
        this.getRenderArea().resetAllButSize();

        if (this.isOpened == false) {
            this.getRenderArea().drawArray(Database.getAscii("places/quests/common/chestClosed"));
        } else {
            if (this.isFacingRight)
                this.getRenderArea().drawArray(Database.getAscii("places/quests/common/chestOpenedRight"));
else
                this.getRenderArea().drawArray(Database.getAscii("places/quests/common/chestOpenedLeft"));
        }
    };
    return Chest;
})(QuestEntity);
///<reference path="StatusBarResource.ts"/>
var ChocolateBars = (function (_super) {
    __extends(ChocolateBars, _super);
    // Constructor
    function ChocolateBars(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    ChocolateBars.prototype.getCurrentAsString = function (totalSize) {
        if (typeof totalSize === "undefined") { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;

        var base = "";
        var prefix = "";
        var suffix = "";

        if (n < 0)
            return "What, negative chocolate bars?!";
else if (n == 1)
            return "You have 1 chocolate bar";
else
            base = Algo.numberToStringButNicely(n);

        // How much space do we still have ?
        size = totalSize - base.length;

        if (size >= 15) {
            suffix = " chocolate bars";

            // We add a suffix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;

            if (size >= 9)
                prefix = "You have ";
else if (size >= 3)
                prefix = "-> ";
        } else if (size >= 3)
            suffix = " cb";

        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;

        return prefix + base + suffix;
    };
    return ChocolateBars;
})(StatusBarResource);
var CollisionBoxCollection = (function () {
    // Constructor
    function CollisionBoxCollection() {
        var boxes = [];
        for (var _i = 0; _i < (arguments.length - 0); _i++) {
            boxes[_i] = arguments[_i + 0];
        }
        this.boxes = boxes;
    }
    // Public method
    CollisionBoxCollection.prototype.addCollisionBox = function (collisionBox) {
        this.boxes.push(collisionBox);
    };

    CollisionBoxCollection.prototype.collidesWith = function (collisionBoxCollection, pos) {
        if (typeof pos === "undefined") { pos = new Pos(0, 0); }
        for (var i = 0; i < this.boxes.length; i++) {
            for (var j = 0; j < collisionBoxCollection.getBoxes().length; j++) {
                if (this.boxes[i].collidesWith(collisionBoxCollection.getBoxes()[j], pos))
                    return true;
            }
        }

        // No collision, we return false
        return false;
    };

    CollisionBoxCollection.prototype.move = function (pos) {
        for (var i = 0; i < this.boxes.length; i++) {
            this.boxes[i].move(pos);
        }
    };

    CollisionBoxCollection.prototype.removeBoxes = function () {
        this.boxes = [];
    };

    // Public getters
    CollisionBoxCollection.prototype.getBoxes = function () {
        return this.boxes;
    };
    return CollisionBoxCollection;
})();
var CollisionBox = (function () {
    // Constructor
    function CollisionBox(questEntity, position, size) {
        this.questEntity = questEntity;
        this.position = position;
        this.size = size;
    }
    // Public methods
    CollisionBox.prototype.collidesWith = function (collisionBox, pos) {
        if (typeof pos === "undefined") { pos = new Pos(0, 0); }
        if (collisionBox.questEntity.getGlobalPosition().x + collisionBox.position.x + collisionBox.size.x <= this.questEntity.getGlobalPosition().x + this.position.plus(pos).x)
            return false;
        if (collisionBox.questEntity.getGlobalPosition().x + collisionBox.position.x >= this.questEntity.getGlobalPosition().x + this.position.plus(pos).x + this.size.x)
            return false;
        if (collisionBox.questEntity.getGlobalPosition().y + collisionBox.position.y + collisionBox.size.y <= this.questEntity.getGlobalPosition().y + this.position.plus(pos).y)
            return false;
        if (collisionBox.questEntity.getGlobalPosition().y + collisionBox.position.y >= this.questEntity.getGlobalPosition().y + this.position.plus(pos).y + this.size.y)
            return false;

        // Else, we return true
        return true;
    };

    CollisionBox.prototype.move = function (pos) {
        this.position.add(pos);
    };

    // Public getters
    CollisionBox.prototype.getPosition = function () {
        return this.position;
    };

    CollisionBox.prototype.getSize = function () {
        return this.size;
    };
    return CollisionBox;
})();
var Color = (function () {
    // Constructor
    function Color(colorType, shouldInvert) {
        if (typeof shouldInvert === "undefined") { shouldInvert = false; }
        this.setColorType(colorType);
        this.shouldInvert = shouldInvert;
    }
    // Public getters
    Color.prototype.getColorString = function () {
        if (Saving.loadBool("gameInvertedColors") == false || this.shouldInvert == false)
            return this.colorString;
else
            return this.invertedColorString;
    };

    // Public setters
    Color.prototype.setColorType = function (colorType) {
        // Set the type
        this.colorType = colorType;

        switch (this.colorType) {
            case ColorType.HEALTH_GREEN:
                this.setRGB(20, 212, 0);
                break;
            case ColorType.HEALTH_ORANGE:
                this.setRGB(255, 128, 0);
                break;
            case ColorType.HEALTH_RED:
                this.setRGB(230, 15, 0);
                break;
            case ColorType.HEALTH_UNICOLOR:
                this.setRGB(20, 212, 0);
                break;

            case ColorType.PLAYER_FIREBALL:
                this.setRGB(255, 120, 0);
                break;
            case ColorType.PLAYER_ACID_DROP:
                this.setRGB(138, 172, 60);
                break;
            case ColorType.PLAYER_THORN:
                this.setRGB(85, 150, 40);
                break;
            case ColorType.PLAYER_OBSIDIAN_BRICK:
                this.setRGB(52, 0, 61);
                break;
            case ColorType.PLAYER_SUMMONED_DEMON:
                this.setRGB(0, 0, 0);
                break;

            case ColorType.RED_ENCHANTED_GLOVES_FIREBALL:
                this.setRGB(255, 80, 0);
                break;

            case ColorType.QUEST_BUTTON_ACID_RAIN:
                this.setRGB(138, 172, 60);
                break;
            case ColorType.QUEST_BUTTON_FIREBALL:
                this.setRGB(255, 120, 0);
                break;
            case ColorType.QUEST_BUTTON_TELEPORT:
                this.setRGB(185, 213, 213);
                break;
            case ColorType.QUEST_BUTTON_ERASE_MAGIC:
                this.setRGB(230, 255, 108);
                break;
            case ColorType.QUEST_BUTTON_THORNS_SHIELD:
                this.setRGB(85, 150, 40);
                break;
            case ColorType.QUEST_BUTTON_OBSIDIAN_WALL:
                this.setRGB(180, 90, 130);
                break;
            case ColorType.QUEST_BUTTON_BLACK_DEMONS:
                this.setRGB(128, 128, 128);
                break;
            case ColorType.QUEST_BUTTON_HEALTH_POTION:
                this.setRGB(255, 31, 31);
                break;
            case ColorType.QUEST_BUTTON_TURTLE_POTION:
                this.setRGB(123, 137, 13);
                break;
            case ColorType.QUEST_BUTTON_ANTI_GRAVITY_POTION:
                this.setRGB(187, 64, 188);
                break;
            case ColorType.QUEST_BUTTON_BERSERK_POTION:
                this.setRGB(110, 30, 47);
                break;
            case ColorType.QUEST_BUTTON_CLONING_POTION:
                this.setRGB(200, 200, 200);
                break;
            case ColorType.QUEST_BUTTON_P_POTION:
                this.setRGB(42, 135, 141);
                break;
            case ColorType.QUEST_BUTTON_X_POTION:
                this.setRGB(252, 82, 255);
                break;
            case ColorType.QUEST_BUTTON_SOME_OBJECT:
                this.setRGB(209, 131, 67);
                break;
            case ColorType.QUEST_BLACKHOLE_SPELL:
                this.setRGB(80, 80, 80);
                break;

            case ColorType.QUEST_COUNTDOWN:
                this.setRGB(255, 0, 0);
                break;

            case ColorType.SAVE_GREEN:
                this.setRGB(42, 184, 39);
                break;
            case ColorType.SAVE_RED:
                this.setRGB(255, 28, 28);
                break;

            case ColorType.STATUS_BAR_SELECTED_TAB:
                this.setRGB(191, 191, 191);
                break;

            case ColorType.SEAHORSE_WATER_BALL:
                this.setRGB(0, 58, 118);
                break;

            case ColorType.THECAVE_BACKGROUND_COLOR:
                this.setRGB(20, 20, 20);
                break;

            case ColorType.MONKEY_WIZARD_BALL:
                this.setRGB(114, 0, 101);
                break;
            case ColorType.MONKEY_WIZARD_BALL_STORED:
                this.setRGB(114, 0, 56);
                break;

            case ColorType.TREE_SPIRIT_MAGIC_SPINE:
                this.setRGB(16, 95, 16);
                break;

            case ColorType.CASTLE_DARK_ROOM:
                this.setRGB(0, 0, 0);
                break;

            case ColorType.BIGSHARK_FIN_RED:
                this.setRGB(217, 31, 31);
                break;
            case ColorType.BIGSHARK_FIN_GREEN:
                this.setRGB(31, 217, 64);
                break;
            case ColorType.BIGSHARK_FIN_PURPLE:
                this.setRGB(151, 31, 217);
                break;

            case ColorType.BLACKHOLE_GREY20:
                this.setRGB(20, 20, 20);
                break;
            case ColorType.BLACKHOLE_GREY40:
                this.setRGB(40, 40, 40);
                break;
            case ColorType.BLACKHOLE_GREY60:
                this.setRGB(60, 60, 60);
                break;
            case ColorType.BLACKHOLE_GREY80:
                this.setRGB(80, 80, 80);
                break;
            case ColorType.BLACKHOLE_GREY100:
                this.setRGB(100, 100, 100);
                break;
            case ColorType.BLACKHOLE_GREY120:
                this.setRGB(120, 120, 120);
                break;
            case ColorType.BLACKHOLE_GREY140:
                this.setRGB(140, 140, 140);
                break;
            case ColorType.BLACKHOLE_GREY160:
                this.setRGB(160, 160, 160);
                break;
            case ColorType.BLACKHOLE_GREY180:
                this.setRGB(180, 180, 180);
                break;
            case ColorType.BLACKHOLE_GREY200:
                this.setRGB(200, 200, 200);
                break;
            case ColorType.BLACKHOLE_GREY220:
                this.setRGB(220, 220, 220);
                break;
            case ColorType.BLACKHOLE_GREY240:
                this.setRGB(240, 240, 240);
                break;

            case ColorType.HELL_RED_LAVA:
                this.setRGB(200, 8, 3);
                break;
            case ColorType.DEVIL_FIREBALL:
                this.setRGB(191, 0, 0);
                break;

            case ColorType.DEVELOPER_BLUE:
                this.setRGB(20, 20, 213);
                break;
            case ColorType.DEVELOPER_YELLOW:
                this.setRGB(227, 194, 11);
                break;
            case ColorType.DEVELOPER_ORANGE:
                this.setRGB(201, 77, 9);
                break;
        }
    };

    // Private setters
    Color.prototype.setColorString = function (colorString) {
        this.colorString = colorString;
    };

    Color.prototype.setInvertedColorString = function (invertedColorString) {
        this.invertedColorString = invertedColorString;
    };

    Color.prototype.setRGB = function (r, g, b) {
        // Set r, g and b
        this.r = r;
        this.g = g;
        this.b = b;

        // Set the color strings from r, g and b
        this.setColorString("rgb(" + r.toString() + ", " + g.toString() + ", " + b.toString() + ")");
        this.setInvertedColorString("rgb(" + (255 - r).toString() + ", " + (255 - g).toString() + ", " + (255 - b).toString() + ")");
    };
    return Color;
})();
var ColorType;
(function (ColorType) {
    // Health bars
    ColorType[ColorType["HEALTH_GREEN"] = 0] = "HEALTH_GREEN";
    ColorType[ColorType["HEALTH_ORANGE"] = 1] = "HEALTH_ORANGE";
    ColorType[ColorType["HEALTH_RED"] = 2] = "HEALTH_RED";
    ColorType[ColorType["HEALTH_UNICOLOR"] = 3] = "HEALTH_UNICOLOR";

    // Player spells
    ColorType[ColorType["PLAYER_FIREBALL"] = 4] = "PLAYER_FIREBALL";
    ColorType[ColorType["PLAYER_ACID_DROP"] = 5] = "PLAYER_ACID_DROP";
    ColorType[ColorType["PLAYER_THORN"] = 6] = "PLAYER_THORN";
    ColorType[ColorType["PLAYER_OBSIDIAN_BRICK"] = 7] = "PLAYER_OBSIDIAN_BRICK";
    ColorType[ColorType["PLAYER_SUMMONED_DEMON"] = 8] = "PLAYER_SUMMONED_DEMON";

    // Eq items spells
    ColorType[ColorType["RED_ENCHANTED_GLOVES_FIREBALL"] = 9] = "RED_ENCHANTED_GLOVES_FIREBALL";

    // Quest buttons
    ColorType[ColorType["QUEST_BUTTON_ACID_RAIN"] = 10] = "QUEST_BUTTON_ACID_RAIN";
    ColorType[ColorType["QUEST_BUTTON_FIREBALL"] = 11] = "QUEST_BUTTON_FIREBALL";
    ColorType[ColorType["QUEST_BUTTON_TELEPORT"] = 12] = "QUEST_BUTTON_TELEPORT";
    ColorType[ColorType["QUEST_BUTTON_ERASE_MAGIC"] = 13] = "QUEST_BUTTON_ERASE_MAGIC";
    ColorType[ColorType["QUEST_BUTTON_THORNS_SHIELD"] = 14] = "QUEST_BUTTON_THORNS_SHIELD";
    ColorType[ColorType["QUEST_BUTTON_OBSIDIAN_WALL"] = 15] = "QUEST_BUTTON_OBSIDIAN_WALL";
    ColorType[ColorType["QUEST_BUTTON_BLACK_DEMONS"] = 16] = "QUEST_BUTTON_BLACK_DEMONS";
    ColorType[ColorType["QUEST_BUTTON_HEALTH_POTION"] = 17] = "QUEST_BUTTON_HEALTH_POTION";
    ColorType[ColorType["QUEST_BUTTON_TURTLE_POTION"] = 18] = "QUEST_BUTTON_TURTLE_POTION";
    ColorType[ColorType["QUEST_BUTTON_ANTI_GRAVITY_POTION"] = 19] = "QUEST_BUTTON_ANTI_GRAVITY_POTION";
    ColorType[ColorType["QUEST_BUTTON_BERSERK_POTION"] = 20] = "QUEST_BUTTON_BERSERK_POTION";
    ColorType[ColorType["QUEST_BUTTON_CLONING_POTION"] = 21] = "QUEST_BUTTON_CLONING_POTION";
    ColorType[ColorType["QUEST_BUTTON_P_POTION"] = 22] = "QUEST_BUTTON_P_POTION";
    ColorType[ColorType["QUEST_BUTTON_X_POTION"] = 23] = "QUEST_BUTTON_X_POTION";
    ColorType[ColorType["QUEST_BUTTON_SOME_OBJECT"] = 24] = "QUEST_BUTTON_SOME_OBJECT";
    ColorType[ColorType["QUEST_BLACKHOLE_SPELL"] = 25] = "QUEST_BLACKHOLE_SPELL";

    // Quest spells/potions countdown color
    ColorType[ColorType["QUEST_COUNTDOWN"] = 26] = "QUEST_COUNTDOWN";

    // Special colors used for the save page
    ColorType[ColorType["SAVE_GREEN"] = 27] = "SAVE_GREEN";
    ColorType[ColorType["SAVE_RED"] = 28] = "SAVE_RED";

    // Status bar special colors
    ColorType[ColorType["STATUS_BAR_SELECTED_TAB"] = 29] = "STATUS_BAR_SELECTED_TAB";

    // Sea horse water ball
    ColorType[ColorType["SEAHORSE_WATER_BALL"] = 30] = "SEAHORSE_WATER_BALL";

    // The cave background color for the front exit
    ColorType[ColorType["THECAVE_BACKGROUND_COLOR"] = 31] = "THECAVE_BACKGROUND_COLOR";

    // Secial colors used by the monkey wizard
    ColorType[ColorType["MONKEY_WIZARD_BALL"] = 32] = "MONKEY_WIZARD_BALL";
    ColorType[ColorType["MONKEY_WIZARD_BALL_STORED"] = 33] = "MONKEY_WIZARD_BALL_STORED";

    // Special colors used in the forest quest
    ColorType[ColorType["TREE_SPIRIT_MAGIC_SPINE"] = 34] = "TREE_SPIRIT_MAGIC_SPINE";

    // Special color in the castle's dark room
    ColorType[ColorType["CASTLE_DARK_ROOM"] = 35] = "CASTLE_DARK_ROOM";

    // Special colors for the shark fins
    ColorType[ColorType["BIGSHARK_FIN_RED"] = 36] = "BIGSHARK_FIN_RED";
    ColorType[ColorType["BIGSHARK_FIN_GREEN"] = 37] = "BIGSHARK_FIN_GREEN";
    ColorType[ColorType["BIGSHARK_FIN_PURPLE"] = 38] = "BIGSHARK_FIN_PURPLE";

    // Special colors for the blackhole spell
    ColorType[ColorType["BLACKHOLE_GREY20"] = 39] = "BLACKHOLE_GREY20";
    ColorType[ColorType["BLACKHOLE_GREY40"] = 40] = "BLACKHOLE_GREY40";
    ColorType[ColorType["BLACKHOLE_GREY60"] = 41] = "BLACKHOLE_GREY60";
    ColorType[ColorType["BLACKHOLE_GREY80"] = 42] = "BLACKHOLE_GREY80";
    ColorType[ColorType["BLACKHOLE_GREY100"] = 43] = "BLACKHOLE_GREY100";
    ColorType[ColorType["BLACKHOLE_GREY120"] = 44] = "BLACKHOLE_GREY120";
    ColorType[ColorType["BLACKHOLE_GREY140"] = 45] = "BLACKHOLE_GREY140";
    ColorType[ColorType["BLACKHOLE_GREY160"] = 46] = "BLACKHOLE_GREY160";
    ColorType[ColorType["BLACKHOLE_GREY180"] = 47] = "BLACKHOLE_GREY180";
    ColorType[ColorType["BLACKHOLE_GREY200"] = 48] = "BLACKHOLE_GREY200";
    ColorType[ColorType["BLACKHOLE_GREY220"] = 49] = "BLACKHOLE_GREY220";
    ColorType[ColorType["BLACKHOLE_GREY240"] = 50] = "BLACKHOLE_GREY240";

    // Special colors for the Hell quest
    ColorType[ColorType["HELL_RED_LAVA"] = 51] = "HELL_RED_LAVA";
    ColorType[ColorType["DEVIL_FIREBALL"] = 52] = "DEVIL_FIREBALL";

    // Special colors for the developer quest
    ColorType[ColorType["DEVELOPER_BLUE"] = 53] = "DEVELOPER_BLUE";
    ColorType[ColorType["DEVELOPER_YELLOW"] = 54] = "DEVELOPER_YELLOW";
    ColorType[ColorType["DEVELOPER_ORANGE"] = 55] = "DEVELOPER_ORANGE";
})(ColorType || (ColorType = {}));
///<reference path="./../../libs/jquery.d.ts"/>
var Database;
(function (Database) {
    // Variables
    var asciiMap = {};
    var asciiSizeMap = {};
    var textMap = {};

    // Public functions
    function addAscii(asciiName, width, height, asciiArray) {
        asciiMap[asciiName] = asciiArray;
        asciiSizeMap[asciiName] = new Pos(width, height);
    }
    Database.addAscii = addAscii;

    function addText(key, text) {
        textMap[key] = text;
    }
    Database.addText = addText;

    function isTranslated() {
        if (Saving.loadString("gameLanguage") != "en")
            return true;
        return false;
    }
    Database.isTranslated = isTranslated;

    // Public getters
    function getAscii(key) {
        if (asciiMap[key] == null)
            console.log("Error : trying to access the unknown ascii art \"" + key + "\"");

        return asciiMap[key];
    }
    Database.getAscii = getAscii;

    function getAsciiHeight(key) {
        return asciiSizeMap[key].y;
    }
    Database.getAsciiHeight = getAsciiHeight;

    function getAsciiWidth(key) {
        return asciiSizeMap[key].x;
    }
    Database.getAsciiWidth = getAsciiWidth;

    function getPartOfAscii(key, y1, y2) {
        return getAscii(key).slice(y1, y2);
    }
    Database.getPartOfAscii = getPartOfAscii;

    function getText(key) {
        if (textMap["en." + key] == null)
            console.log("Error : trying to access the unknown text \"" + key + "\"");

        return textMap["en." + key];
    }
    Database.getText = getText;

    function getTranslatedText(key) {
        if (Saving.loadString("gameLanguage") != "en") {
            if (textMap[Saving.loadString("gameLanguage") + "." + key] == null)
                console.log("Error : trying to access the unknown translated text \"" + key + "\" for language " + Saving.loadString("gameLanguage") + ".");

            if (Saving.loadString("gameLanguage") != "zh")
                return textMap[Saving.loadString("gameLanguage") + "." + key];
else
                return textMap[Saving.loadString("gameLanguage") + "." + key].addChineseSpaces();
        }

        // Else, we return an empty string
        return "";
    }
    Database.getTranslatedText = getTranslatedText;
})(Database || (Database = {}));
///<reference path="QuestEntity.ts"/>
var Demon = (function (_super) {
    __extends(Demon, _super);
    // Constructor
    function Demon(quest, pos) {
        _super.call(this, quest, pos, new Naming("A demon", "a demon"), new RenderArea(0, 0), new Pos(0, 0), new CollisionBoxCollection(), new QuestEntityMovement());

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);

        switch (Random.between(0, 2)) {
            case 0:
                this.type = DemonType.CUBE;
                break;
            case 1:
                this.type = DemonType.EYES;
                break;
            case 2:
                this.type = DemonType.BUBBLES;
                break;
        }

        switch (this.type) {
            case DemonType.CUBE:
                this.getRenderArea().resize(5, 3);
                this.getCbc().addCollisionBox(new CollisionBox(this, new Pos(0, 0), new Pos(5, 3)));
                this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/demonCube"));
                this.setTransparency(new RenderTransparency(" ", "%"));
                this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its huge body", "its huge body"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 2), new Pos(7, 2))), 50));
                this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(10);
                break;
            case DemonType.EYES:
                this.getRenderArea().resize(5, 4);
                this.getCbc().addCollisionBox(new CollisionBox(this, new Pos(0, 1), new Pos(5, 3)));
                this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/demonEyes"));
                this.setTransparency(new RenderTransparency(" ", "%"));
                this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Demonish eyes", "demonish eyes"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(7, 6))), 10));
                this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
                break;
            case DemonType.BUBBLES:
                this.getRenderArea().resize(5, 3);
                this.getCbc().addCollisionBox(new CollisionBox(this, new Pos(0, 0), new Pos(5, 3)));
                this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/demonBubbles" + Random.between(0, 6).toString()));
                this.setTransparency(new RenderTransparency(" "));
                this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Fire bubbles", "fire bubbles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(7, 5))), 15));
                this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
                break;
        }

        switch (this.type) {
            case DemonType.CUBE:
                this.setMaxHp(120);
                this.setHp(120);
                break;
            default:
                this.setMaxHp(30 + Random.between(0, 7) * 10);
                this.setHp(this.getMaxHp());
                break;
        }
    }
    // update()
    Demon.prototype.update = function () {
        // Try to go towards the player
        this.goTowards(this.getRenderAreaCenter(), this.getQuest().getGame().getPlayer().getRenderAreaCenter(), 0, new Pos(1, 0));

        if (Math.abs(this.getRenderAreaCenter().x - this.getQuest().getGame().getPlayer().getRenderAreaCenter().x) > 5)
            this.jump(3);

        // Call the mother class update method
        _super.prototype.update.call(this);
    };

    // willDie()
    Demon.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(5 + Random.upTo(5)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return Demon;
})(QuestEntity);
var DemonType;
(function (DemonType) {
    DemonType[DemonType["CUBE"] = 0] = "CUBE";
    DemonType[DemonType["EYES"] = 1] = "EYES";
    DemonType[DemonType["BUBBLES"] = 2] = "BUBBLES";
})(DemonType || (DemonType = {}));
///<reference path="QuestEntity.ts"/>
var DesertBird = (function (_super) {
    __extends(DesertBird, _super);
    // Constructor
    function DesertBird(quest, pos, goingRight) {
        _super.call(this, quest, pos, new Naming("A desert bird", "a desert bird"), new RenderArea(9, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(9, 4))));

        if (goingRight) {
            this.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
            this.setQuestEntityAnimation(new QuestEntityAnimation(3, Random.upTo(2), Random.upTo(1), "places/quests/desert/birdRightUp", "places/quests/desert/birdRightDown"));
        } else {
            this.setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
            this.setQuestEntityAnimation(new QuestEntityAnimation(3, Random.upTo(2), Random.upTo(1), "places/quests/desert/birdLeftUp", "places/quests/desert/birdLeftDown"));
        }

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(6);
        this.setHp(6);
    }
    // willDie()
    DesertBird.prototype.willDie = function () {
        _super.prototype.willDie.call(this);
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedFeather", "You found a desert bird feather!", "You gain a desert bird feather"));
    };
    return DesertBird;
})(QuestEntity);
///<reference path="Quest.ts"/>
var Desert = (function (_super) {
    __extends(Desert, _super);
    // Constructor
    function Desert(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(149, 30);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 26));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the ground
        this.addGround(0, 3, 1, 4, 12, 0, 13, 18, 1, 19, 24, 2, 25, 30, 3, 31, 36, 2, 37, 42, 1, 43, 51, 0, 52, 57, 1, 58, 62, 2, 63, 68, 3, 69, 75, 2, 76, 82, 1, 83, 92, 0, 93, 97, 1, 98, 101, 2, 102, 107, 3, 108, 113, 2, 114, 119, 1, 120, 128, 0, 129, 134, 1, 135, 139, 2, 140, 145, 3, 146, 148, 2);

        // Bird adding stuff
        this.currentBirdTime = 0;
        this.setNextBirdAt();

        // Add the camels
        this.addCamel(new Pos(44, 24));
        this.addCamel(new Pos(65, 26));
        this.addCamel(new Pos(84, 24));
        this.addCamel(new Pos(106, 26));
        this.addCamel(new Pos(118, 24));
        this.addCamel(new Pos(144, 26));

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the desert, camels and palm trees as far as the eye can see."));
    }
    // Public methods
    Desert.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    Desert.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You made your way through the desert!"));
            Saving.saveBool("mainMapDoneDesert", true);
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the desert. Alone."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    Desert.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.currentBirdTime >= this.nextBirdAt) {
                this.currentBirdTime = 0;
                this.setNextBirdAt();
                this.addBird();
            } else
                this.currentBirdTime += 1;

            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y + 21);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    Desert.prototype.addBird = function () {
        // We create the variable which will contain our bird
        var bird;

        // We choose the y position of our bird
        var yPos = Random.upTo(14);

        for (var i = 0; i < this.getEntities().length; i++) {
            if (this.getEntities()[i].getCbc() != null && this.getEntities()[i].getCbc().collidesWith(new CollisionBoxCollection(new CollisionBox(new QuestEntity(this, new Pos(0, 0)), new Pos(0, yPos), new Pos(149, 4)))))
                return;
        }

        if (Random.flipACoin()) {
            bird = new DesertBird(this, new Pos(-9, yPos), true);
        } else {
            bird = new DesertBird(this, new Pos(149, yPos), false);
        }

        // We add the health bar and finally add the bird to the entities
        bird.setHealthBar(new QuestEntityHealthBar(bird, new Pos(9, 1)));
        this.addEntity(bird);
    };

    Desert.prototype.addCamel = function (pos) {
        var camel;

        if (Random.oneChanceOutOf(20))
            camel = new TripodCamel(this, pos);
else
            camel = new Camel(this, pos);

        camel.setHealthBar(new QuestEntityHealthBar(camel, new Pos(7, 1)));
        this.addEntity(camel);
    };

    Desert.prototype.addGround = function () {
        var positions = [];
        for (var _i = 0; _i < (arguments.length - 0); _i++) {
            positions[_i] = arguments[_i + 0];
        }
        // Create the wall entity
        this.addEntity(new Wall(this, new Pos(0, 26)));
        var wall = (this.getLastEntity());

        for (var i = 0; i < positions.length / 3; i++) {
            wall.addBox(new Pos(positions[i * 3], positions[i * 3 + 2]), new Pos(positions[i * 3 + 1] - positions[i * 3] + 1, 4 - positions[i * 3 + 2]));
        }
    };

    Desert.prototype.setNextBirdAt = function () {
        this.nextBirdAt = 20 + Random.upTo(30);
    };

    Desert.prototype.thePlayerWon = function () {
        if (this.getGame().getPlayer().getGlobalPosition().x >= 149)
            return true;

        // Else we return false
        return false;
    };
    return Desert;
})(Quest);
var DeveloperEntityText = (function () {
    // Constructor
    function DeveloperEntityText(damage, textPos, timeToLive, text) {
        // Set from parameters
        this.damage = damage;
        this.text = text;
        this.textPos = textPos;
        this.timeToLive = timeToLive;

        // Set the default x position
        this.xPos = 0;
    }
    // Public methods
    DeveloperEntityText.prototype.update = function (dev) {
        for (var i = 0; i < this.text.length; i++) {
            if (this.xPos < this.text[i].length && this.text[i][this.xPos] != " ") {
                switch (this.text[i][this.xPos]) {
                    case "B":
                        dev.addMagicBall(this.textPos.plus(new Pos(this.xPos, i)), this.damage, this.timeToLive - this.xPos, ColorType.DEVELOPER_BLUE);
                        break;
                    case "Y":
                        dev.addMagicBall(this.textPos.plus(new Pos(this.xPos, i)), this.damage, this.timeToLive - this.xPos, ColorType.DEVELOPER_YELLOW);
                        break;
                    case "O":
                        dev.addMagicBall(this.textPos.plus(new Pos(this.xPos, i)), this.damage, this.timeToLive - this.xPos, ColorType.DEVELOPER_ORANGE);
                        break;
                }
            }
        }

        // Increase xPos
        this.xPos += 1;
    };
    return DeveloperEntityText;
})();
///<reference path="QuestEntity.ts"/>
var DeveloperEntity = (function (_super) {
    __extends(DeveloperEntity, _super);
    // Constructor
    function DeveloperEntity(quest, pos) {
        _super.call(this, quest, pos, new Naming("The developer", "the developer"), new RenderArea(43, 34), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(20, 0), new Pos(6, 1)), new CollisionBox(this, new Pos(16, 1), new Pos(12, 1)), new CollisionBox(this, new Pos(15, 2), new Pos(14, 1)), new CollisionBox(this, new Pos(12, 3), new Pos(18, 1)), new CollisionBox(this, new Pos(11, 4), new Pos(20, 1)), new CollisionBox(this, new Pos(10, 5), new Pos(22, 1)), new CollisionBox(this, new Pos(9, 6), new Pos(24, 2)), new CollisionBox(this, new Pos(9, 8), new Pos(25, 1)), new CollisionBox(this, new Pos(9, 9), new Pos(26, 2)), new CollisionBox(this, new Pos(9, 11), new Pos(27, 3)), new CollisionBox(this, new Pos(9, 14), new Pos(28, 1)), new CollisionBox(this, new Pos(8, 15), new Pos(29, 3)), new CollisionBox(this, new Pos(7, 18), new Pos(30, 4)), new CollisionBox(this, new Pos(7, 22), new Pos(31, 2)), new CollisionBox(this, new Pos(6, 24), new Pos(32, 4)), new CollisionBox(this, new Pos(5, 28), new Pos(33, 1)), new CollisionBox(this, new Pos(5, 29), new Pos(34, 1)), new CollisionBox(this, new Pos(4, 30), new Pos(35, 1)), new CollisionBox(this, new Pos(2, 31), new Pos(38, 1)), new CollisionBox(this, new Pos(1, 32), new Pos(40, 1)), new CollisionBox(this, new Pos(0, 33), new Pos(43, 1))), new QuestEntityMovement());

        // Init the time spent
        this.timeSpent = 0;

        // Create the texts
        this.createTexts();

        // Set gravity
        this.getQuestEntityMovement().setGravity(false);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(1000000000);
        this.setHp(1000000000);

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/developer/me"));
        this.setTransparency(new RenderTransparency(" "));
    }
    // inflictDamage()
    DeveloperEntity.prototype.inflictDamage = function (damage, reason) {
        _super.prototype.inflictDamage.call(this, damage * Random.between(60000, 70000), reason);
    };

    // update()
    DeveloperEntity.prototype.update = function () {
        // Increase the time spent
        this.timeSpent += 1;

        if (this.timeSpent == 95 || this.timeSpent == 245)
            this.indexOfCurrentText += 1;

        // Call the current text update method
        this.texts[this.indexOfCurrentText].update(this);

        // Call the mother class update method
        _super.prototype.update.call(this);
    };

    // willDie()
    DeveloperEntity.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(6000000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedY", "You found a strange stone.", "You gain a strange stone."));
    };

    // Public methods
    DeveloperEntity.prototype.addMagicBall = function (finalPosition, damage, timeToLive, colorType) {
        // Set the first position (either the mouth or one of the eyes)
        var firstPosition;
        switch (Random.upTo(2)) {
            case 0:
                firstPosition = new Pos(15, 15);
                break;
            case 1:
                firstPosition = new Pos(25, 15);
                break;
            case 2:
                firstPosition = new Pos(20, 26);
                break;
        }

        // Create the fireball
        var magicBall = new DeveloperMagicBall(this.getQuest(), this.getGlobalPosition().plus(firstPosition), new Naming("A magic ball", "a magic ball"), new Color(colorType), new Pos(2, 1), damage, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magic ball", "a magic ball")), timeToLive);

        // No target
        magicBall.setTargetTypeTargetPosition(finalPosition, new Pos(1, 1));

        // Add the entity
        this.getQuest().addEntity(magicBall);
    };

    DeveloperEntity.prototype.createTexts = function () {
        // Empty the array
        this.texts = [];

        // At first we're working on the first text
        this.indexOfCurrentText = 0;

        // Add "Hello"
        this.texts.push(new DeveloperEntityText(20, new Pos(3, 3), 110, Database.getAscii("places/quests/developer/hello")));

        // Add "I'm glad you made it so far"
        this.texts.push(new DeveloperEntityText(32, new Pos(3, 3), 150, Database.getAscii("places/quests/developer/imgladyoumadeitsofar")));

        // Add "<3"
        this.texts.push(new DeveloperEntityText(9999999999999, new Pos(8, 10), 100, Database.getAscii("places/quests/developer/love")));
    };

    DeveloperEntity.prototype.playerUsedBlackMagic = function () {
        // We use a blackhole on the player
        this.getQuest().addEntity(new Blackhole(this.getQuest(), this.getQuest().getGame().getPlayer().getRenderAreaCenter(), 5000, new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.SPELL).setQuestEntity(this).setSpellNaming(new Naming("A blackhole", "a blackhole"))));
    };
    return DeveloperEntity;
})(QuestEntity);
///<reference path="QuestEntitySpell.ts"/>
var Fireball = (function (_super) {
    __extends(Fireball, _super);
    // Constructor
    function Fireball(quest, pos, naming, color, size, damage, questEntityDamageReason) {
        // Call the mother class constructor
        _super.call(this, quest, pos, naming);
        // Target stuff
        this.targetType = FireballTargetType.NO_TARGET;

        // Set the size
        this.size = size;

        // Set the damage
        this.damage = damage;

        // Set the quest entity damage reason
        this.questEntityDamageReason = questEntityDamageReason;

        // Create the damage collision box collection
        this.damageCollisionBoxCollection = new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), this.size));

        // Add the color
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(0, 0), this.size, color));

        // Create a quest entity movement
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(0, 0)));

        // Set the default target type
        this.setTargetTypeNoTarget(new Pos(0, 0));
    }
    // Public methods
    Fireball.prototype.setTargetTypeNoTarget = function (movement) {
        this.targetType = FireballTargetType.NO_TARGET;
        this.getQuestEntityMovement().setOffset(movement);
    };

    Fireball.prototype.setTargetTypeTargetEntity = function (entity, specialTargetDamage, speed) {
        if (typeof specialTargetDamage === "undefined") { specialTargetDamage = null; }
        if (typeof speed === "undefined") { speed = new Pos(1, 1); }
        this.targetType = FireballTargetType.TARGET_ENTITY;
        this.fireballTargetEntity = entity;
        this.specialTargetDamage = specialTargetDamage;
        this.speed = speed;
    };

    Fireball.prototype.setTargetTypeTargetPosition = function (pos, speed) {
        if (typeof speed === "undefined") { speed = new Pos(1, 1); }
        this.targetType = FireballTargetType.TARGET_POSITION;
        this.targetPosition = pos;
        this.speed = speed;
    };

    Fireball.prototype.setTargetTypeTargetStickOnEntity = function (entity, specialTargetPosition) {
        if (typeof specialTargetPosition === "undefined") { specialTargetPosition = new Pos(0, 0); }
        this.targetType = FireballTargetType.TARGET_STICK_ON_ENTITY;
        this.fireballTargetEntity = entity;
        this.specialTargetPosition = specialTargetPosition;
    };

    Fireball.prototype.update = function () {
        if (this.targetType == FireballTargetType.TARGET_ENTITY) {
            if (this.fireballTargetEntity != null && this.fireballTargetEntity.getDead() == false) {
                // We go towards it
                this.goTowards(this.getGlobalPosition().plus(new Pos(Math.floor(this.size.x / 2), Math.floor(this.size.y / 2))), this.fireballTargetEntity.getRenderAreaCenter(), 0, this.speed);
            } else
                this.setDead(true);
        } else if (this.targetType == FireballTargetType.TARGET_STICK_ON_ENTITY) {
            if (this.fireballTargetEntity != null && this.fireballTargetEntity.getDead() == false) {
                // We teleport on it
                this.teleport(this.fireballTargetEntity.getGlobalPosition().plus(this.specialTargetPosition));
            } else
                this.setDead(true);
        } else if (this.targetType == FireballTargetType.TARGET_POSITION) {
            // We go towards this position
            this.goTowards(this.getGlobalPosition().plus(new Pos(Math.floor(this.size.x / 2), Math.floor(this.size.y / 2))), this.targetPosition, 0, this.speed);
        }

        // Handle our damage
        this.handleDamage();

        // Call the mother class update method
        _super.prototype.update.call(this);
    };

    // willDie()
    Fireball.prototype.willDie = function () {
    };

    // Private methods
    Fireball.prototype.handleDamage = function () {
        for (var i = 0; i < this.getQuest().getEntities().length; i++) {
            if (this.questEntityDamageReason.getQuestEntityTeam() != this.getQuest().getEntities()[i].getTeam()) {
                if (this.getQuest().getEntities()[i].getDestructible()) {
                    if (this.getQuest().getEntities()[i].getCbc() != null) {
                        if (this.getQuest().getEntities()[i].getCbc().collidesWith(this.damageCollisionBoxCollection)) {
                            if (this.getQuest().getEntities()[i] == this.fireballTargetEntity && this.targetType == FireballTargetType.TARGET_ENTITY && this.fireballTargetEntity != null && this.fireballTargetEntity.getDead() == false && this.specialTargetDamage != null) {
                                this.getQuest().getEntities()[i].inflictDamage(this.specialTargetDamage, this.questEntityDamageReason);
                            } else {
                                this.getQuest().getEntities()[i].inflictDamage(this.damage, this.questEntityDamageReason);
                            }

                            // We die because we inflicted damage
                            this.setDead(true);
                        }
                    }
                }
            }
        }
    };
    return Fireball;
})(QuestEntitySpell);
///<reference path="Fireball.ts"/>
var DeveloperMagicBall = (function (_super) {
    __extends(DeveloperMagicBall, _super);
    // Constructor
    function DeveloperMagicBall(quest, pos, naming, color, size, damage, questEntityDamageReason, timeToLive) {
        // Call the mother class constructor
        _super.call(this, quest, pos, naming, color, size, damage, questEntityDamageReason);
        // Did we target the player already?
        this.playerTargeted = false;

        // Set the time to live
        this.timeToLive = timeToLive;
    }
    // Public methods
    DeveloperMagicBall.prototype.update = function () {
        if (this.playerTargeted == false) {
            if (this.timeToLive <= 0) {
                // We target it
                this.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer(), null, new Pos(2, 1));
            } else
                this.timeToLive -= 1;
        }

        // Call the mother class update method
        _super.prototype.update.call(this);
    };

    // willDie()
    DeveloperMagicBall.prototype.willDie = function () {
    };
    return DeveloperMagicBall;
})(Fireball);
///<reference path="Quest.ts"/>
var Developer = (function (_super) {
    __extends(Developer, _super);
    // Constructor
    function Developer(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(100, 34);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 33));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the developer entity
        this.addDeveloperEntity(new Pos(57, 0));

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You're attacking the developer."));
    }
    // Public methods
    Developer.prototype.castPlayerBlackDemons = function () {
        _super.prototype.castPlayerBlackDemons.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };

    Developer.prototype.castPlayerBlackhole = function () {
        _super.prototype.castPlayerBlackhole.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };

    Developer.prototype.castPlayerEraseMagic = function () {
        _super.prototype.castPlayerEraseMagic.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };

    Developer.prototype.castPlayerObsidianWall = function () {
        _super.prototype.castPlayerObsidianWall.call(this);
        this.developerEntity.playerUsedBlackMagic();
    };

    Developer.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    Developer.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to beat me. Congratulations :)"));
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died fighting the developer. Eh, he made this game after all!"));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    Developer.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    Developer.prototype.addDeveloperEntity = function (pos) {
        this.developerEntity = new DeveloperEntity(this, pos);
        this.developerEntity.setHealthBar(new QuestEntityHealthBar(this.developerEntity, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.developerEntity);
    };

    Developer.prototype.thePlayerWon = function () {
        if (this.developerEntity.shouldDie())
            return true;

        // Else we return false
        return false;
    };
    return Developer;
})(Quest);
///<reference path="QuestEntity.ts"/>
var Devil = (function (_super) {
    __extends(Devil, _super);
    // Constructor
    function Devil(quest, pos, minY, maxY) {
        _super.call(this, quest, pos, new Naming("The devil", "the devil"), new RenderArea(16, 16), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(4, 0), new Pos(8, 5))), new QuestEntityMovement());

        // Set from parameters
        this.minY = minY;
        this.maxY = maxY;

        // At first we're going down
        this.setGoingDown(true);

        // Init the flames array
        this.flames = [];

        // Set gravity
        this.getQuestEntityMovement().setGravity(false);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(666);
        this.setHp(666);

        // Set the transparent character and draw
        this.setTransparency(new RenderTransparency(" ", "%"));
        this.reDraw();

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Evilness", "evilness"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(18, 18))), 500));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(0, 5);
    }
    // inflictDamage()
    Devil.prototype.inflictDamage = function (damage, reason) {
        _super.prototype.inflictDamage.call(this, Math.ceil(damage / 4), reason);
    };

    // update()
    Devil.prototype.update = function () {
        // Handle movement
        this.handleUpDownMovement();

        // Handle fireballs
        this.handleFireballs();

        // Handle the flames
        this.handleFlames();

        // Re draw the devil (ascii art + flames)
        this.reDraw();

        // Call the mother class update method
        _super.prototype.update.call(this);
    };

    // willDie()
    Devil.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1000000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedA", "You found a strange stone.", "You gain a strange stone."));
    };

    // Private methods
    Devil.prototype.castFireball = function () {
        // Create the fireball
        var fireBall = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos(3, 4)), new Naming("The devil's fireball", "the devil's fireball"), new Color(ColorType.DEVIL_FIREBALL), new Pos(2, 1), 800, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("The devil's fireball", "the devil's fireball")));

        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.getGlobalPosition().x) {
            // No target
            fireBall.setTargetTypeNoTarget(new Pos(-Random.between(3, 7), 0));
        } else {
            // We target the player
            fireBall.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer(), null, new Pos(1, 1));
        }

        // Add the entity
        this.getQuest().addEntity(fireBall);
    };

    Devil.prototype.handleFireballs = function () {
        if (Random.oneChanceOutOf(2))
            this.castFireball();
    };

    Devil.prototype.handleFlames = function () {
        // Create the variables
        var minX = 0;
        var maxX = 15;
        var minY = 6;
        var maxY = 15;
        var howManyFlames = 150;
        var x;
        var y;

        for (var i = 0; i < howManyFlames; i++) {
            if (i >= this.flames.length || Random.oneChanceOutOf(7)) {
                // Set y
                y = null;
                for (var j = minY; j < maxY; j++) {
                    if (Random.oneChanceOutOf(3)) {
                        y = j;
                        break;
                    }
                }
                if (y == null)
                    y = maxY;

                // Set x
                x = Random.between(minX + Math.floor((15 - y) / 3), maxX - Math.floor((15 - y) / 3));

                // Add or replace the flame
                var flame = new CauldronFlame(new Pos(x, y), Random.fromArray([")", "(", "`", "'", ".", ";", ":", ",", "-", "/", "\\", "|", "\"", "d", "e", "v", "i", "l"]));
                if (i >= this.flames.length)
                    this.flames.push(flame);
else
                    this.flames[i] = flame;
            }
        }
    };

    Devil.prototype.handleUpDownMovement = function () {
        if (this.goingDown && (this.getGlobalPosition().y >= this.maxY || this.checkCollision(new Pos(0, 1)))) {
            this.setGoingDown(false);
        } else if (this.goingDown == false && (this.getGlobalPosition().y <= this.minY || this.checkCollision(new Pos(0, -1)))) {
            this.setGoingDown(true);
        }
    };

    Devil.prototype.reDraw = function () {
        // Reset everything
        this.getRenderArea().resetAllButSize();

        // Draw the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/devil"), 4, 0);

        for (var i = 0; i < this.flames.length; i++) {
            this.flames[i].draw(this.getRenderArea(), 0, 0);
        }
    };

    Devil.prototype.setGoingDown = function (goingDown) {
        this.goingDown = goingDown;

        if (this.goingDown) {
            this.getQuestEntityMovement().setOffset(new Pos(0, 1));
        } else {
            this.getQuestEntityMovement().setOffset(new Pos(0, -1));
        }
    };
    return Devil;
})(QuestEntity);
var DragonStep;
(function (DragonStep) {
    DragonStep[DragonStep["PLAYER_MOVING"] = 0] = "PLAYER_MOVING";
    DragonStep[DragonStep["PLAYER_ATTACKING"] = 1] = "PLAYER_ATTACKING";
    DragonStep[DragonStep["STOP_TICKLING"] = 2] = "STOP_TICKLING";
    DragonStep[DragonStep["TALKING"] = 3] = "TALKING";
    DragonStep[DragonStep["TALKING_CHALLENGE"] = 4] = "TALKING_CHALLENGE";
    DragonStep[DragonStep["TALKING_FAME"] = 5] = "TALKING_FAME";
    DragonStep[DragonStep["TALKING_CANDIES"] = 6] = "TALKING_CANDIES";
})(DragonStep || (DragonStep = {}));
///<reference path="CastleRoom.ts"/>
Saving.registerBool("dragonDone", false);
Saving.registerBool("dragonUnlockedCyclops", false);

var Dragon = (function (_super) {
    __extends(Dragon, _super);
    // Constructor
    function Dragon(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        if (Saving.loadBool("dragonDone") == false) {
            this.step = DragonStep.PLAYER_MOVING;
            this.playerPos = 0;
        } else {
            this.step = DragonStep.TALKING;
            this.playerPos = 60;
        }

        // Launch the interval and get the ID
        this.timerIntervalID = setInterval(this.actionInterval.bind(this), 100);

        // Resize and update
        this.renderArea.resizeFromArray(Database.getAscii("places/dragonFoot"), 0, 3);
        this.update();
    }
    // getRenderArea()
    Dragon.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // willStopBeingDisplayed()
    Dragon.prototype.willStopBeingDisplayed = function () {
        clearInterval(this.timerIntervalID);
    };

    // Private methods
    Dragon.prototype.actionInterval = function () {
        switch (this.step) {
            case DragonStep.PLAYER_MOVING:
                // Move the player
                this.playerPos += 1;
                if (this.playerPos >= 60) {
                    // We're now attacking
                    this.step = DragonStep.PLAYER_ATTACKING;

                    // Set the countdown
                    this.playerAttackingCountdown = 40;
                }

                // Update
                this.update();
                this.getGame().updatePlace();
                break;
            case DragonStep.PLAYER_ATTACKING:
                // Lower the countdown
                this.playerAttackingCountdown -= 1;
                if (this.playerAttackingCountdown < 0) {
                    // We're now "stop tickling"
                    this.step = DragonStep.STOP_TICKLING;
                }

                // Update
                this.update();
                this.getGame().updatePlace();
                break;
        }
    };

    Dragon.prototype.chooseCandies = function () {
        // Change the step
        this.step = DragonStep.TALKING_CANDIES;

        // Set the bool
        Saving.saveBool("dragonUnlockedCyclops", true);

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    Dragon.prototype.chooseChallenge = function () {
        // Change the step
        this.step = DragonStep.TALKING_CHALLENGE;

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    Dragon.prototype.chooseFame = function () {
        // Change the step
        this.step = DragonStep.TALKING_FAME;

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    Dragon.prototype.drawPlayer = function (x, y) {
        if (typeof y === "undefined") { y = 26; }
        this.renderArea.drawString("\\o/", x, y);
    };

    Dragon.prototype.goToDeveloper = function () {
        this.getGame().setPlace(new Developer(this.getGame()));
    };

    Dragon.prototype.goToHell = function () {
        this.getGame().setPlace(new Hell(this.getGame()));
    };

    Dragon.prototype.okayStopTickling = function () {
        if (this.step == DragonStep.STOP_TICKLING) {
            // Change the step
            this.step = DragonStep.TALKING;

            // Set the bool
            Saving.saveBool("dragonDone", true);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    Dragon.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToTheCastleButton(this.renderArea, "dragonBackToTheCastleButton");

        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/dragonFoot"), 0, 3);

        switch (this.step) {
            case DragonStep.PLAYER_MOVING:
                // Draw the player (eventually going down the stairs at the beginning)
                this.drawPlayer(this.playerPos, 20 + (this.playerPos < 21 ? (Math.floor(this.playerPos / 3)) : 6));
                break;
            case DragonStep.PLAYER_ATTACKING:
                // Draw the player
                this.drawPlayer(this.playerPos);

                // Draw the dragon fake health bar
                this.renderArea.drawString("|             A dragon foot : so much hp/so much hp             |", 45, 11);
                this.renderArea.addBackgroundColor(46, 109, 11, new Color(ColorType.HEALTH_GREEN));
                break;
            case DragonStep.STOP_TICKLING:
                // Draw the player
                this.drawPlayer(this.playerPos);

                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonStopTickling"), 5, 50, 78, "dragonStopTicklingSpeech", Database.getTranslatedText("dragonStopTickling"));

                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonStopTicklingButton"), 50, 9, "dragonStopTicklingButton", Database.getTranslatedText("dragonStopTicklingButton"), true);
                this.renderArea.addLinkCall(".dragonStopTicklingButton", new CallbackCollection(this.okayStopTickling.bind(this)));
                break;
            case DragonStep.TALKING:
                // Draw the player
                this.drawPlayer(this.playerPos);

                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalking"), 5, 50, 78, "dragonTalkingSpeech", Database.getTranslatedText("dragonTalking"));

                // Add the challenge button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingChallengeButton"), 82, 5, "dragonTalkingChallengeButton", Database.getTranslatedText("dragonTalkingChallengeButton"));
                this.renderArea.addLinkCall(".dragonTalkingChallengeButton", new CallbackCollection(this.chooseChallenge.bind(this)));

                // Add the fame button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingFameButton"), 82, 7, "dragonTalkingFameButton", Database.getTranslatedText("dragonTalkingFameButton"));
                this.renderArea.addLinkCall(".dragonTalkingFameButton", new CallbackCollection(this.chooseFame.bind(this)));

                // Add the candies button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingCandiesButton"), 82, 9, "dragonTalkingCandiesButton", Database.getTranslatedText("dragonTalkingCandiesButton"));
                this.renderArea.addLinkCall(".dragonTalkingCandiesButton", new CallbackCollection(this.chooseCandies.bind(this)));
                break;
            case DragonStep.TALKING_CHALLENGE:
                // Draw the player
                this.drawPlayer(this.playerPos);

                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalkingChallengeSpeech"), 5, 50, 78, "dragonTalkingChallengeSpeech", Database.getTranslatedText("dragonTalkingChallengeSpeech"));

                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingChallengeAnswer"), 82, 5, "dragonTalkingChallengeAnswer", Database.getTranslatedText("dragonTalkingChallengeAnswer"));
                this.renderArea.addLinkCall(".dragonTalkingChallengeAnswer", new CallbackCollection(this.goToHell.bind(this)));
                break;
            case DragonStep.TALKING_FAME:
                // Draw the player
                this.drawPlayer(this.playerPos);

                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalkingFameSpeech"), 5, 50, 78, "dragonTalkingFameSpeech", Database.getTranslatedText("dragonTalkingFameSpeech"));

                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingFameAnswer"), 82, 7, "dragonTalkingFameAnswer", Database.getTranslatedText("dragonTalkingFameAnswer"));
                this.renderArea.addLinkCall(".dragonTalkingFameAnswer", new CallbackCollection(this.goToDeveloper.bind(this)));
                break;
            case DragonStep.TALKING_CANDIES:
                // Draw the player
                this.drawPlayer(this.playerPos);

                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("dragonTalkingCandiesSpeech"), 5, 50, 78, "dragonTalkingCandiesSpeech", Database.getTranslatedText("dragonTalkingCandiesSpeech"));

                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("dragonTalkingCandiesAnswer"), 82, 9, "dragonTalkingCandiesAnswer", Database.getTranslatedText("dragonTalkingCandiesAnswer"));
                this.renderArea.addLinkCall(".dragonTalkingCandiesAnswer", new CallbackCollection(this.getGame().goToCastle.bind(this.getGame())));
                break;
        }
    };
    return Dragon;
})(CastleRoom);
///<reference path="QuestEntity.ts"/>
var Egg = (function (_super) {
    __extends(Egg, _super);
    // Constructor
    function Egg(quest, globalPosition, callbackWhenDying) {
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("An egg", "an egg"), new RenderArea(2, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(2, 1))), new QuestEntityMovement());

        // Set the callback from parameter
        this.callbackWhenDying = callbackWhenDying;

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(4);
        this.setHp(4);

        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room3/egg"));
    }
    // willDie()
    Egg.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage("An egg was destroyed."));
        this.callbackWhenDying.fire();
    };
    return Egg;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var EnchantedKnightBodyArmour = (function (_super) {
    __extends(EnchantedKnightBodyArmour, _super);
    // Constructor
    function EnchantedKnightBodyArmour() {
        _super.call(this, "eqItemBodyArmoursEnchantedKnightBodyArmour", "eqItemBodyArmoursEnchantedKnightBodyArmourName", "eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "eqItems/bodyArmours/enchantedKnightBodyArmour");
    }
    // Special ability
    EnchantedKnightBodyArmour.prototype.getSpecialAbility = function () {
        return "Dam. taken reduced by 80%, dam. inflicted divided by 2 (enchanted knight body armour)";
    };

    // hit()
    EnchantedKnightBodyArmour.prototype.hit = function (player, quest, questEntity, damage, reason) {
        return Math.ceil(damage / 2);
    };

    // inflictDamage()
    EnchantedKnightBodyArmour.prototype.inflictDamage = function (player, quest, damage, reason) {
        return Math.ceil(damage - damage * 80 / 100);
    };
    return EnchantedKnightBodyArmour;
})(EqItem);
///<reference path="EqItem.ts"/>
var MonkeyWizardStaffMotherClass = (function (_super) {
    __extends(MonkeyWizardStaffMotherClass, _super);
    function MonkeyWizardStaffMotherClass() {
        _super.apply(this, arguments);
    }
    // Public methods which the daughter classes can use
    MonkeyWizardStaffMotherClass.prototype.castPurpleBall = function (player, quest, target, speed) {
        if (typeof speed === "undefined") { speed = new Pos(2, 1); }
        var ball = new Fireball(quest, player.getSpellCastingPosition(), new Naming("An magical purple ball", "a magical purple ball"), new Color(ColorType.MONKEY_WIZARD_BALL), new Pos(2, 1), 15, player.getAndPossiblyCreateSpellCastingDamageReason(new Naming("An magical purple ball", "a magical purple ball")));

        // Set the target
        ball.setTargetTypeTargetEntity(target, null, speed);

        // Add it to the quest
        quest.addEntity(ball);
    };

    MonkeyWizardStaffMotherClass.prototype.getRandomEnemy = function (player, quest) {
        // Array which will contain the indices (in the entities array) of all possible enemies
        var indices = [];

        for (var i = 0; i < quest.getEntities().length; i++) {
            if (quest.getEntities()[i].getDestructible() && quest.getEntities()[i].getTeam() != player.getTeam()) {
                // We add its index
                indices.push(i);
            }
        }

        if (indices.length > 0)
            return quest.getEntities()[indices[Random.between(0, indices.length - 1)]];
else
            return null;
    };
    return MonkeyWizardStaffMotherClass;
})(EqItem);
///<reference path="MonkeyWizardStaffMotherClass.ts"/>
var EnchantedMonkeyWizardStaff = (function (_super) {
    __extends(EnchantedMonkeyWizardStaff, _super);
    // Constructor
    function EnchantedMonkeyWizardStaff() {
        _super.call(this, "eqItemWeaponEnchantedMonkeyWizardStaff", "eqItemWeaponEnchantedMonkeyWizardStaffName", "eqItemWeaponEnchantedMonkeyWizardStaffDescription", "eqItems/weapons/enchantedMonkeyWizardStaff");

        // Set the timer
        this.timer = 0;
    }
    // Public getters
    EnchantedMonkeyWizardStaff.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("The monkey wizard staff (enchanted)", "the monkey wizard staff (enchanted)"), player.getClassicCollisionBoxCollection(), 2);
        qew.getCloseCombatDelay().setFixedDelay(0);
        return qew;
    };

    // update()
    EnchantedMonkeyWizardStaff.prototype.update = function (player, quest) {
        if (this.timer < 4)
            this.timer += 1;
else {
            this.timer = 0;
            var ent = this.getRandomEnemy(player, quest);
            if (ent != null)
                this.castPurpleBall(player, quest, ent);
        }
    };
    return EnchantedMonkeyWizardStaff;
})(MonkeyWizardStaffMotherClass);
var EnchantmentItem = (function () {
    // Constructor
    function EnchantmentItem(game, savingName, type) {
        this.game = game;
        this.savingName = savingName;
        this.type = type;
    }
    // Public methods
    EnchantmentItem.prototype.getText = function () {
        var text = Database.getText(this.game.getEqItemFromEqItemType(this.savingName, this.type).getDatabaseName());

        if (Database.isTranslated())
            text += " (" + Database.getTranslatedText(this.game.getEqItemFromEqItemType(this.savingName, this.type).getDatabaseName()) + ")";

        return text;
    };

    EnchantmentItem.prototype.isPossessed = function () {
        return Saving.loadBool(this.savingName);
    };

    EnchantmentItem.prototype.unequipIfEquipped = function () {
        this.game.unequipIfEquipped(this.savingName, this.type);
    };

    // Public getters
    EnchantmentItem.prototype.getSavingName = function () {
        return this.savingName;
    };
    return EnchantmentItem;
})();
var Enchantment = (function () {
    // Constructor
    function Enchantment(beforeItem, afterItem) {
        this.beforeItem = beforeItem;
        this.afterItem = afterItem;
    }
    // Public methods
    Enchantment.prototype.enchant = function () {
        // We check if we're currently wearing the before item. If so, we must stop wearing it !
        this.beforeItem.unequipIfEquipped();

        // We lose the before item and gain the after item
        Saving.saveBool(this.beforeItem.getSavingName(), false);
        Saving.saveBool(this.afterItem.getSavingName(), true);
    };

    Enchantment.prototype.isPossible = function () {
        if (this.beforeItem.isPossessed() == true && this.afterItem.isPossessed() == false)
            return true;

        // Else we return false
        return false;
    };

    // Public getters
    Enchantment.prototype.getAfterItem = function () {
        return this.afterItem;
    };

    Enchantment.prototype.getBeforeItem = function () {
        return this.beforeItem;
    };
    return Enchantment;
})();
// We can't use this class directly, we have to use a daughter class
var EnigmaAnswer = (function () {
    // Constructor
    function EnigmaAnswer() {
    }
    // Public methods
    EnigmaAnswer.prototype.isRight = function (answer) {
        return false;
    };
    return EnigmaAnswer;
})();
///<reference path="EnigmaAnswer.ts"/>
var EnigmaAnswerCandies = (function (_super) {
    __extends(EnigmaAnswerCandies, _super);
    // Constructor
    function EnigmaAnswerCandies(game) {
        _super.call(this);

        this.game = game;
    }
    // Public methods
    EnigmaAnswerCandies.prototype.isRight = function (answer) {
        if (Algo.simplifyString(answer) == this.game.getCandies().getCurrent().toString() || Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() + 1).toString() || Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() + 2).toString() || Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() + 3).toString() || Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() - 1).toString() || Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() - 2).toString() || Algo.simplifyString(answer) == (this.game.getCandies().getCurrent() - 3).toString())
            return true;

        // The answer isn't correct
        return false;
    };
    return EnigmaAnswerCandies;
})(EnigmaAnswer);
///<reference path="EnigmaAnswer.ts"/>
var EnigmaAnswerStrings = (function (_super) {
    __extends(EnigmaAnswerStrings, _super);
    // Constructor
    function EnigmaAnswerStrings(validStrings) {
        _super.call(this);

        this.validStrings = validStrings;
    }
    // Public methods
    EnigmaAnswerStrings.prototype.isRight = function (answer) {
        for (var i = 0; i < this.validStrings.length; i++) {
            if (Algo.simplifyString(answer) == this.validStrings[i]) {
                // The answer is correct
                return true;
            }
        }

        // The answer isn't correct
        return false;
    };
    return EnigmaAnswerStrings;
})(EnigmaAnswer);
var EqItemType;
(function (EqItemType) {
    EqItemType[EqItemType["WEAPON"] = 0] = "WEAPON";
    EqItemType[EqItemType["HAT"] = 1] = "HAT";
    EqItemType[EqItemType["BODYARMOUR"] = 2] = "BODYARMOUR";
    EqItemType[EqItemType["GLOVES"] = 3] = "GLOVES";
    EqItemType[EqItemType["BOOTS"] = 4] = "BOOTS";
})(EqItemType || (EqItemType = {}));
///<reference path="Item.ts"/>
var GridItem = (function (_super) {
    __extends(GridItem, _super);
    // Constructor
    function GridItem(savingName, databaseName, databaseDescriptionName, ascii, position) {
        _super.call(this, savingName, databaseName, databaseDescriptionName, ascii);

        this.position = position;
    }
    // Public methods
    GridItem.prototype.update = function (player, quest) {
    };

    // Public getters
    GridItem.prototype.getPosition = function () {
        return this.position;
    };
    return GridItem;
})(Item);
///<reference path="GridItem.ts"/>
var Feather = (function (_super) {
    __extends(Feather, _super);
    function Feather() {
        _super.apply(this, arguments);
    }
    Feather.prototype.getDatabaseDescriptionName = function () {
        if (Saving.loadBool("gridItemPossessedPogoStick") == false)
            return "gridItemFeatherDescriptionNoPogoStick";

        // Else we return the normal description name
        return _super.prototype.getDatabaseDescriptionName.call(this);
    };
    return Feather;
})(GridItem);
///<reference path="Place.ts"/>
var House = (function (_super) {
    __extends(House, _super);
    // Constructor
    function House(game) {
        _super.call(this, game);
    }
    // Special method used to add a button to go back to the village
    House.prototype.addBackToTheVillageButton = function (renderArea, otherClass) {
        this.addBackToButton(renderArea, new CallbackCollection(this.getGame().goToVillage.bind(this.getGame())), Database.getText("buttonBackToTheVillage"), Database.getTranslatedText("buttonBackToTheVillage"), otherClass);
    };
    return House;
})(Place);
///<reference path="House.ts"/>
var FifthHouse = (function (_super) {
    __extends(FifthHouse, _super);
    // Constructor
    function FifthHouse(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();

        this.renderArea.resizeFromArray(Database.getAscii("places/village/fifthHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    FifthHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Public methods
    FifthHouse.prototype.willBeDisplayed = function () {
        // We need to update each time we're going to be displayed to avoid a "bug" in a very special case :
        // If the player is in the fifth house and the npc is asking for someone with a weapon
        // And then the player goes to its inventory, equip a weapon and then goes back to the fifth house
        // Here the fifth house must be updated so that the npc know that the player now has a weapon
        this.update();
    };

    // Private methods
    FifthHouse.prototype.beginQuest = function () {
        this.getGame().setPlace(new Cellar(this.getGame()));
    };

    FifthHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the village button
        this.addBackToTheVillageButton(this.renderArea, "fifthHouseBackToTheVillageButton");

        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/fifthHouse"), 0, 3);

        if (Saving.loadBool("cellarDone") == false) {
            if (this.getGame().getSelectedEqItems()["weapon"] != null) {
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("mapVillageFifthHouseWeaponSpeech"), 6, 44, 67, "fifthHouseSpeech", Database.getTranslatedText("mapVillageFifthHouseWeaponSpeech"));

                // Add the button
                this.renderArea.addAsciiRealButton(Database.getText("mapVillageFifthHouseAgree"), 69, 8, "mapVillageFifthHouseAgreeButton", Database.getTranslatedText("mapVillageFifthHouseAgree"), true);
                this.renderArea.addLinkCall(".mapVillageFifthHouseAgreeButton", new CallbackCollection(this.beginQuest.bind(this)));
            } else {
                // Draw the speech
                this.renderArea.drawSpeech(Database.getText("mapVillageFifthHouseNoWeaponSpeech"), 6, 44, 67, "fifthHouseSpeech", Database.getTranslatedText("mapVillageFifthHouseNoWeaponSpeech"));
            }
        } else {
            // Draw the speech
            this.renderArea.drawSpeech(Database.getText("mapVillageFifthHouseCellarDone"), 6, 44, 82, "fifthHouseSpeech", Database.getTranslatedText("mapVillageFifthHouseCellarDone"));

            // Change the NPC mouth
            this.renderArea.drawString("U", 52, 17);
        }
    };
    return FifthHouse;
})(House);
var FireballTargetType;
(function (FireballTargetType) {
    FireballTargetType[FireballTargetType["NO_TARGET"] = 0] = "NO_TARGET";
    FireballTargetType[FireballTargetType["TARGET_ENTITY"] = 1] = "TARGET_ENTITY";
    FireballTargetType[FireballTargetType["TARGET_STICK_ON_ENTITY"] = 2] = "TARGET_STICK_ON_ENTITY";
    FireballTargetType[FireballTargetType["TARGET_POSITION"] = 3] = "TARGET_POSITION";
})(FireballTargetType || (FireballTargetType = {}));
///<reference path="Quest.ts"/>
var Forest = (function (_super) {
    __extends(Forest, _super);
    // Constructor
    function Forest(game) {
        _super.call(this, game);
        // Various timers related to monsters handling
        this.timeSinceLastWolfAdding = 0;
        this.timeSinceLastTreeSpiritAdding = 40;
        // The ground y position
        this.groundYPosition = 20;
        // The mosquito timer (mosquitos will come when the timer reaches 0)
        this.mosquitoTimer = 250;

        // Resize the quest
        this.resizeQuest(294, this.groundYPosition + 2);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, this.groundYPosition));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the ground
        this.addGround();

        for (var i = 0; i < 10; i++) {
            this.addWolf(Random.between(80, 280));
        }

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the forest."));
    }
    // Public methods
    Forest.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, this.groundYPosition), new Pos(10, 1));
    };

    Forest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(false);
    };

    Forest.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You made your way through the forest!"));
            Saving.saveBool("mainMapDoneForest", true);
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the forest. The tree's leaves should soon be covering your body."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    Forest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            // Monsters handling
            this.monstersHandling();

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/background"), this.getRealQuestPosition().x + 98, this.getRealQuestPosition().y);
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/background"), this.getRealQuestPosition().x + 98 * 2, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    Forest.prototype.addGround = function () {
        var ground = new Wall(this, new Pos(0, 0));
        ground.addBox(new Pos(0, this.groundYPosition + 1), new Pos(350, 1));
        this.addEntity(ground);
    };

    Forest.prototype.addMosquito = function () {
        return this.addEntity(new Mosquito(this, new Pos(0, this.groundYPosition - Random.between(3, 7)), this.groundYPosition));
    };

    Forest.prototype.addTreeSpirit = function (xPosition) {
        if (typeof xPosition === "undefined") { xPosition = 294; }
        var treeSpirit = new TreeSpirit(this, new Pos(xPosition, this.groundYPosition - 4), this.groundYPosition);
        treeSpirit.setHealthBar(new QuestEntityHealthBar(treeSpirit, new Pos(5, 1)));
        return this.addEntity(treeSpirit);
    };

    Forest.prototype.addWolf = function (xPosition) {
        if (typeof xPosition === "undefined") { xPosition = 294; }
        var wolf = new Wolf(this, new Pos(xPosition, this.groundYPosition - 2));
        wolf.setHealthBar(new QuestEntityHealthBar(wolf, new Pos(7, 1)));
        return this.addEntity(wolf);
    };

    Forest.prototype.monstersHandling = function () {
        if (this.timeSinceLastTreeSpiritAdding > 70 && Random.flipACoin()) {
            this.addTreeSpirit();
            this.timeSinceLastTreeSpiritAdding = 0;
        } else
            this.timeSinceLastTreeSpiritAdding += 1;

        if (this.timeSinceLastWolfAdding > 30 && Random.oneChanceOutOf(5)) {
            this.addWolf();
            this.timeSinceLastWolfAdding = 0;
        } else
            this.timeSinceLastWolfAdding += 1;

        if (this.mosquitoTimer <= 0) {
            this.addMosquito();
            this.mosquitoTimer = Random.between(5, 10);
        } else
            this.mosquitoTimer -= 1;
    };

    Forest.prototype.thePlayerWon = function () {
        if (this.getGame().getPlayer().getGlobalPosition().x >= 294)
            return true;

        // Else we return false
        return false;
    };
    return Forest;
})(Quest);
///<reference path="House.ts"/>
// The lollipop
Saving.registerBool("forgeFoundLollipop", false);

// Items sold
Saving.registerBool("forgeBoughtWoodenSword", false);
Saving.registerBool("forgeBoughtIronAxe", false);
Saving.registerBool("forgeBoughtPolishedSilverSword", false);
Saving.registerBool("forgeBoughtLightweightBodyArmour", false);
Saving.registerBool("forgeBoughtScythe", false);

var Forge = (function (_super) {
    __extends(Forge, _super);
    // Constructor
    function Forge(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        if ((Saving.loadBool("forgeBoughtWoodenSword") == false || Saving.loadBool("forgeBoughtIronAxe") == false || Saving.loadBool("forgeBoughtPolishedSilverSword") == false) || (Saving.loadBool("forgeBoughtLightweightBodyArmour") == false && Saving.loadBool("mainMapDoneCaveEntrance") == true) || (Saving.loadBool("forgeBoughtScythe") == false && Saving.loadBool("dragonDone") == true)) {
            // We set the normal introduction speech
            this.currentSpeech = "mapVillageForgeIntroductionSpeech";
        } else {
            // We set the no more to sell introduction speech
            this.currentSpeech = "mapVillageForgeIntroductionSpeechNoMoreToSell";
        }

        this.renderArea.resizeFromArray(Database.getAscii("places/village/forge"), 0, 3);
        this.update();
    }
    // getRenderArea()
    Forge.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    Forge.prototype.clickedBuyIronAxeButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 400) {
            this.getGame().getCandies().add(-400);
            Saving.saveBool("forgeBoughtIronAxe", true);
            this.getGame().gainItem("eqItemWeaponIronAxe");
            this.currentSpeech = "mapVillageForgeBuyIronAxeSpeech";

            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };

    Forge.prototype.clickedBuyLightweightBodyArmourButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 15000) {
            this.getGame().getCandies().add(-15000);
            Saving.saveBool("forgeBoughtLightweightBodyArmour", true);
            this.getGame().gainItem("eqItemBodyArmoursLightweightBodyArmour");
            this.currentSpeech = "mapVillageForgeBuyLightweightBodyArmourSpeech";

            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };

    Forge.prototype.clickedBuyPolishedSilverSwordButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 2000) {
            this.getGame().getCandies().add(-2000);
            Saving.saveBool("forgeBoughtPolishedSilverSword", true);
            this.getGame().gainItem("eqItemWeaponPolishedSilverSword");
            this.currentSpeech = "mapVillageForgeBuyPolishedSilverSwordSpeech";

            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };

    Forge.prototype.clickedBuyScytheButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 5000000) {
            this.getGame().getCandies().add(-5000000);
            Saving.saveBool("forgeBoughtScythe", true);
            this.getGame().gainItem("eqItemWeaponScythe");
            this.currentSpeech = "mapVillageForgeBuyScytheSpeech";

            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };

    Forge.prototype.clickedBuyWoodenSwordButton = function () {
        if (this.getGame().getCandies().getCurrent() >= 150) {
            this.getGame().getCandies().add(-150);
            Saving.saveBool("forgeBoughtWoodenSword", true);
            this.getGame().gainItem("eqItemWeaponWoodenSword");
            this.currentSpeech = "mapVillageForgeBuyWoodenSwordSpeech";
            Saving.saveBool("statusBarUnlockedInventory", true);
            this.getGame().updateStatusBar(true);
            this.getGame().getStatusBar().selectTabByType(StatusBarTabType.MAP);

            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };

    Forge.prototype.drawLollipopStuff = function (x, y) {
        if (Saving.loadBool("forgeFoundLollipop") == false) {
            // We add a button to take the lollipop on the cupboard
            this.renderArea.addAsciiButton(x, x + 5, y, "forgeLollipopButton");

            // We add the link
            this.renderArea.addLinkCall(".forgeLollipopButton", new CallbackCollection(this.takeLollipop.bind(this)));
        } else {
            // We erase the lollipop
            this.renderArea.drawString("      ", x, y);
        }
    };

    Forge.prototype.takeLollipop = function () {
        if (Saving.loadBool("forgeFoundLollipop") == false) {
            // Add one lollipop
            this.getGame().getLollipops().add(1);

            // Set the bool
            Saving.saveBool("forgeFoundLollipop", true);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    Forge.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToTheVillageButton(this.renderArea, "forgeBackToTheVillageButton");

        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/forge"), 0, 3);

        // Draw the stuff about the lollipop
        this.drawLollipopStuff(18, 15);

        // Draw the blacksmith's speech
        this.renderArea.drawSpeech(Database.getText(this.currentSpeech), 13, 44, 67, "forgeSpeech", Database.getTranslatedText(this.currentSpeech));

        if (Saving.loadBool("forgeBoughtWoodenSword") == false && Saving.loadBool("eqItemWeaponWoodenSword") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyWoodenSwordButton"), 8, 35, "mapVillageForgeBuyWoodenSwordButton", Database.getTranslatedText("mapVillageForgeBuyWoodenSwordButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyWoodenSwordButton", new CallbackCollection(this.clickedBuyWoodenSwordButton.bind(this)));
        } else if (Saving.loadBool("forgeBoughtWoodenSword") == true && Saving.loadBool("forgeBoughtIronAxe") == false && Saving.loadBool("eqItemWeaponIronAxe") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyIronAxeButton"), 8, 35, "mapVillageForgeBuyIronAxeButton", Database.getTranslatedText("mapVillageForgeBuyIronAxeButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyIronAxeButton", new CallbackCollection(this.clickedBuyIronAxeButton.bind(this)));
        } else if (Saving.loadBool("forgeBoughtIronAxe") == true && Saving.loadBool("forgeBoughtPolishedSilverSword") == false && Saving.loadBool("eqItemWeaponPolishedSilverSword") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyPolishedSilverSwordButton"), 8, 35, "mapVillageForgeBuyPolishedSilverSwordButton", Database.getTranslatedText("mapVillageForgeBuyPolishedSilverSwordButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyPolishedSilverSwordButton", new CallbackCollection(this.clickedBuyPolishedSilverSwordButton.bind(this)));
        } else if (Saving.loadBool("forgeBoughtPolishedSilverSword") == true && Saving.loadBool("forgeBoughtLightweightBodyArmour") == false && Saving.loadBool("eqItemBodyArmoursLightweightBodyArmour") == false && Saving.loadBool("mainMapDoneCaveEntrance")) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyLightweightBodyArmourButton"), 8, 35, "mapVillageForgeBuyLightweightBodyArmourButton", Database.getTranslatedText("mapVillageForgeBuyLightweightBodyArmourButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyLightweightBodyArmourButton", new CallbackCollection(this.clickedBuyLightweightBodyArmourButton.bind(this)));
        } else if (Saving.loadBool("forgeBoughtLightweightBodyArmour") == true && Saving.loadBool("forgeBoughtScythe") == false && Saving.loadBool("eqItemWeaponScythe") == false && Saving.loadBool("dragonDone")) {
            this.renderArea.addAsciiRealButton(Database.getText("mapVillageForgeBuyScytheButton"), 8, 35, "mapVillageForgeBuyScytheButton", Database.getTranslatedText("mapVillageForgeBuyScytheButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".mapVillageForgeBuyScytheButton", new CallbackCollection(this.clickedBuyScytheButton.bind(this)));
        }
    };
    return Forge;
})(House);
///<reference path="Quest.ts"/>
Saving.registerBool("fortressRoom1ChestFound", false);

var FortressRoom1 = (function (_super) {
    __extends(FortressRoom1, _super);
    // Constructor
    function FortressRoom1(game) {
        _super.call(this, game);
        // Did we open the chest?
        this.chestOpened = false;

        // Resize the quest
        this.resizeQuest(208, 31);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 7));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the walls
        this.addWalls();

        // Add the spikes
        this.addSpikes(new Spikes(this, new Pos(16, 30), 18));
        this.addSpikes(new Spikes(this, new Pos(43, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(53, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(85, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(161, 30), 12));
        this.addSpikes(new Spikes(this, new Pos(180, 30), 4));
        this.addSpikes(new Spikes(this, new Pos(117, 9), 4));
        this.addSpikes(new Spikes(this, new Pos(121, 14), 4));
        this.addSpikes(new Spikes(this, new Pos(125, 19), 4));
        this.addSpikes(new Spikes(this, new Pos(129, 24), 4));

        // Add the xinopherydon
        this.addXinopherydon(new Pos(181, 2));

        // Add the chest
        this.addEntity(new Chest(this, new Pos(203, 24), false, new CallbackCollection(this.openChest.bind(this)), Saving.loadBool("fortressRoom1ChestFound")));

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the first room. It seems tricky."));
    }
    // Public methods
    FortressRoom1.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(2, 3), new Pos(1, 1));
    };

    FortressRoom1.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    FortressRoom1.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);

        if (win && this.chestOpened) {
            Saving.saveBool("fortressRoom1ChestFound", true);
        }
    };

    FortressRoom1.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/room1"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToInsideFortress.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    FortressRoom1.prototype.addSpikes = function (spikes) {
        this.addEntity(spikes);
    };

    FortressRoom1.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));

        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(208, 2));
        wall.addBox(new Pos(0, 8), new Pos(15, 1));
        wall.addBox(new Pos(0, 9), new Pos(16, 22));
        wall.addBox(new Pos(34, 2), new Pos(5, 11));
        wall.addBox(new Pos(34, 15), new Pos(9, 16));
        wall.addBox(new Pos(47, 13), new Pos(6, 18));
        wall.addBox(new Pos(57, 11), new Pos(6, 20));
        wall.addBox(new Pos(63, 19), new Pos(22, 12));
        wall.addBox(new Pos(66, 11), new Pos(4, 7));
        wall.addBox(new Pos(74, 11), new Pos(3, 7));
        wall.addBox(new Pos(80, 11), new Pos(5, 7));
        wall.addBox(new Pos(89, 10), new Pos(14, 5));
        wall.addBox(new Pos(89, 15), new Pos(20, 5));
        wall.addBox(new Pos(89, 20), new Pos(26, 5));
        wall.addBox(new Pos(89, 25), new Pos(72, 6));
        wall.addBox(new Pos(106, 10), new Pos(37, 2));
        wall.addBox(new Pos(112, 15), new Pos(31, 2));
        wall.addBox(new Pos(118, 20), new Pos(25, 2));
        wall.addBox(new Pos(200, 2), new Pos(8, 1));
        wall.addBox(new Pos(201, 3), new Pos(7, 4));
        wall.addBox(new Pos(200, 7), new Pos(8, 1));
        wall.addBox(new Pos(157, 8), new Pos(51, 10));
        wall.addBox(new Pos(157, 18), new Pos(25, 1));
        wall.addBox(new Pos(157, 19), new Pos(24, 1));
        wall.addBox(new Pos(157, 20), new Pos(23, 1));
        wall.addBox(new Pos(157, 21), new Pos(22, 1));
        wall.addBox(new Pos(173, 25), new Pos(7, 6));
        wall.addBox(new Pos(184, 23), new Pos(3, 2));
        wall.addBox(new Pos(207, 18), new Pos(1, 6));
        wall.addBox(new Pos(206, 24), new Pos(2, 1));
        wall.addBox(new Pos(184, 25), new Pos(24, 6));

        // Add the wall entity
        this.addEntity(wall);
    };

    FortressRoom1.prototype.addXinopherydon = function (pos) {
        var xino = new Xinopherydon(this, pos);
        xino.setHealthBar(new QuestEntityHealthBar(xino, new Pos(41, 1), new Pos(158, 2), QuestEntityHealthBarPositionType.FIXED, false, true, BarType.HEALTH));
        this.addEntity(xino);
    };

    FortressRoom1.prototype.openChest = function () {
        this.chestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedUnicornHorn", "You opened a chest and found a unicorn horn!", "You gain a unicorn horn."));
    };
    return FortressRoom1;
})(Quest);
///<reference path="Quest.ts"/>
var FortressRoom2 = (function (_super) {
    __extends(FortressRoom2, _super);
    // Constructor
    function FortressRoom2(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(100, 17);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 13));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the ground
        this.addWalls();

        // Add the chest
        this.addTeapot();

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the second room. There's a giant teapot in the center."));
    }
    // Public methods
    FortressRoom2.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    FortressRoom2.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    FortressRoom2.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/room2"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToInsideFortress.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    FortressRoom2.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));

        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 4));
        wall.addBox(new Pos(96, 4), new Pos(4, 1));
        wall.addBox(new Pos(97, 5), new Pos(3, 8));
        wall.addBox(new Pos(96, 13), new Pos(4, 1));
        wall.addBox(new Pos(0, 14), new Pos(20, 1));
        wall.addBox(new Pos(79, 14), new Pos(21, 1));
        wall.addBox(new Pos(0, 15), new Pos(37, 1));
        wall.addBox(new Pos(59, 15), new Pos(41, 1));
        wall.addBox(new Pos(0, 16), new Pos(100, 1));

        // Add the wall entity
        this.addEntity(wall);
    };

    FortressRoom2.prototype.addTeapot = function () {
        var teapot = new Teapot(this, new Pos(39, 9));
        teapot.setHealthBar(new QuestEntityHealthBar(teapot, new Pos(96, 1), new Pos(0, 5), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, false, true, BarType.HEALTH));
        this.addEntity(teapot);
    };
    return FortressRoom2;
})(Quest);
///<reference path="Quest.ts"/>
Saving.registerBool("fortressRoom3ChestFound", false);

var FortressRoom3 = (function (_super) {
    __extends(FortressRoom3, _super);
    // Constructor
    function FortressRoom3(game) {
        _super.call(this, game);
        // Did we open the chest?
        this.chestOpened = false;

        // Resize the quest
        this.resizeQuest(100, 31);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 30));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the ground
        this.addWalls();

        // Add the chest
        this.addEntity(new Chest(this, new Pos(87, 6), false, new CallbackCollection(this.openChest.bind(this)), Saving.loadBool("fortressRoom3ChestFound")));

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the third room. There's a chest up there. How to reach it?!"));
    }
    // Public methods
    FortressRoom3.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(2, 26), new Pos(1, 1));
    };

    FortressRoom3.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    FortressRoom3.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You exit the room."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);

        if (win && this.chestOpened) {
            Saving.saveBool("fortressRoom3ChestFound", true);
        }
    };

    FortressRoom3.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/room3"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToInsideFortress.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    FortressRoom3.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));

        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(100, 2));
        wall.addBox(new Pos(0, 2), new Pos(16, 23));
        wall.addBox(new Pos(90, 2), new Pos(10, 1));
        wall.addBox(new Pos(91, 3), new Pos(9, 3));
        wall.addBox(new Pos(90, 6), new Pos(10, 1));
        wall.addBox(new Pos(82, 7), new Pos(18, 24));
        wall.addBox(new Pos(0, 31), new Pos(100, 1));

        // Add the wall entity
        this.addEntity(wall);
    };

    FortressRoom3.prototype.openChest = function () {
        this.chestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "eqItemBootsRocketBoots", "You opened a chest and found rocket boots!", "You gain rocket boots."));
    };
    return FortressRoom3;
})(Quest);
///<reference path="House.ts"/>
Saving.registerBool("fourthHouseFoundLollipopOnCupboard", false);
Saving.registerNumber("fourthHouseCupboardStep", 0);
Saving.registerNumber("fourthHouseCarpetStep", 0);

var FourthHouse = (function (_super) {
    __extends(FourthHouse, _super);
    // Constructor
    function FourthHouse(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();

        this.renderArea.resizeFromArray(Database.getAscii("places/village/fourthHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    FourthHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    FourthHouse.prototype.clickOnCarpet = function () {
        if (Saving.loadNumber("fourthHouseCarpetStep") == 0) {
            // Set the step
            Saving.saveNumber("fourthHouseCarpetStep", 1);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    FourthHouse.prototype.drawCarpetStuff = function (x, y) {
        switch (Saving.loadNumber("fourthHouseCarpetStep")) {
            case 0:
                // We add a button on the area of the carpet around the lollipop
                this.renderArea.addMultipleAsciiButtons("fourthHouseCarpetButton", x - 2, x + 2, y - 1, x - 6, x + 1, y, x - 4, x, y + 1);

                // We add the link
                this.renderArea.addLinkCall(".fourthHouseCarpetButton", new CallbackCollection(this.clickOnCarpet.bind(this)));
                break;
            case 1:
                // We draw the lollipop
                this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseLollipopUnderCarpet"), x, y);

                // We add a button on the lollipop
                this.renderArea.addAsciiButton(x, x + 4, y, "fourthHouseLollipopUnderCarpetButton");

                // We add the link
                this.renderArea.addLinkCall(".fourthHouseLollipopUnderCarpetButton", new CallbackCollection(this.pickCarpetLollipop.bind(this)));
                break;
            case 2:
                break;
        }
    };

    FourthHouse.prototype.drawLollipopOnCupboardStuff = function (x, y) {
        if (Saving.loadBool("fourthHouseFoundLollipopOnCupboard") == false) {
            // We add a button to take the lollipop on the cupboard
            this.renderArea.addAsciiButton(x + 8, x + 13, y + 1, "fourthHouseLollipopOnCupboardButton");

            // We add the link
            this.renderArea.addLinkCall(".fourthHouseLollipopOnCupboardButton", new CallbackCollection(this.takeLollipopOnCupboard.bind(this)));
        } else {
            // We draw the no lollipop ascii art
            this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseNoLollipopOnCupboard"), x, y);
        }
    };

    FourthHouse.prototype.drawOpenCupboardStuff = function (x, y) {
        switch (Saving.loadNumber("fourthHouseCupboardStep")) {
            case 0:
                // We add a button on the cupboard's door
                this.renderArea.addMultipleAsciiButtons("fourthHouseCupboardDoorButton", x, x + 7, y, x, x + 7, y + 1, x, x + 7, y + 2, x, x + 7, y + 3, x, x + 7, y + 4, x, x + 7, y + 5, x, x + 7, y + 6, x, x + 7, y + 7, x, x + 7, y + 8, x, x + 7, y + 9, x, x + 7, y + 10, x, x + 7, y + 11, x, x + 7, y + 12);

                // We add the link
                this.renderArea.addLinkCall(".fourthHouseCupboardDoorButton", new CallbackCollection(this.openCupboard.bind(this)));
                break;
            case 1:
                // We draw the opened cupboard with the lollipop in it
                this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseCupboardOpenedWithLollipop"), x - 2, y);

                // We add a button on the lollipop
                this.renderArea.addAsciiButton(x + 4, x + 6, y + 7, "fourthHouseLollipopInsideCupboardButton");

                // We add the link
                this.renderArea.addLinkCall(".fourthHouseLollipopInsideCupboardButton", new CallbackCollection(this.takeLollipopInsideCupboard.bind(this)));
                break;
            case 2:
                // We draw the opened cupboard without lollipop
                this.renderArea.drawArray(Database.getAscii("places/village/fourthHouseCupboardOpenedWithoutLollipop"), x - 2, y);
                break;
        }
    };

    FourthHouse.prototype.openCupboard = function () {
        if (Saving.loadNumber("fourthHouseCupboardStep") == 0) {
            // Set the step
            Saving.saveNumber("fourthHouseCupboardStep", 1);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    FourthHouse.prototype.pickCarpetLollipop = function () {
        if (Saving.loadNumber("fourthHouseCarpetStep") == 1) {
            // Set the step
            Saving.saveNumber("fourthHouseCarpetStep", 2);

            // Add one lollipop
            this.getGame().getLollipops().add(1);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    FourthHouse.prototype.takeLollipopInsideCupboard = function () {
        if (Saving.loadNumber("fourthHouseCupboardStep") == 1) {
            // Set the step
            Saving.saveNumber("fourthHouseCupboardStep", 2);

            // Add one lollipop
            this.getGame().getLollipops().add(1);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    FourthHouse.prototype.takeLollipopOnCupboard = function () {
        if (Saving.loadBool("fourthHouseFoundLollipopOnCupboard") == false) {
            // Add one lollipop
            this.getGame().getLollipops().add(1);

            // Set the bool
            Saving.saveBool("fourthHouseFoundLollipopOnCupboard", true);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    FourthHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToTheVillageButton(this.renderArea, "fourthHouseBackToTheVillageButton");

        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/fourthHouse"), 0, 3);

        // Draw stuff about the lollipop on the cupboard
        this.drawLollipopOnCupboardStuff(35, 11);

        // Draw stuff about opening the cupboard
        this.drawOpenCupboardStuff(35, 14);

        // Draw stuff about the lollipop under the carpet
        this.drawCarpetStuff(41, 32);
    };
    return FourthHouse;
})(House);
var GalacticWarsStep;
(function (GalacticWarsStep) {
    GalacticWarsStep[GalacticWarsStep["SPLASH_SCREEN"] = 0] = "SPLASH_SCREEN";
    GalacticWarsStep[GalacticWarsStep["GAME"] = 1] = "GAME";
    GalacticWarsStep[GalacticWarsStep["LOSE"] = 2] = "LOSE";
})(GalacticWarsStep || (GalacticWarsStep = {}));
var ThirdHouseGame = (function () {
    // Constructor
    function ThirdHouseGame(thirdHouse) {
        // Set the third house from parameter
        this.thirdHouse = thirdHouse;

        // Create the area
        this.renderArea = new RenderArea(53, 12);

        // Set the quest slowed down variable at the game level (and the quest speed up too)
        this.thirdHouse.getGame().setQuestSlowedDown(false);
        this.thirdHouse.getGame().setQuestSpeedUp(0);
    }
    // Public methods
    ThirdHouseGame.prototype.pressedDownButton = function () {
    };

    ThirdHouseGame.prototype.pressedSpaceButton = function () {
    };

    ThirdHouseGame.prototype.pressedUpButton = function () {
    };

    ThirdHouseGame.prototype.run = function () {
        return true;
    };

    // Public getters
    ThirdHouseGame.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    ThirdHouseGame.prototype.getThirdHouse = function () {
        return this.thirdHouse;
    };
    return ThirdHouseGame;
})();
///<reference path="ThirdHouseGame.ts"/>
Saving.registerNumber("galacticWarsBestScore", 0);

var GalacticWars = (function (_super) {
    __extends(GalacticWars, _super);
    function GalacticWars() {
        _super.apply(this, arguments);
        // The global step of the game (splash screen, the menu, or the game itself
        this.step = GalacticWarsStep.SPLASH_SCREEN;
        // The timer used for the splash screen
        this.splashScreenTimer = 47;
        // Asteroids
        this.asteroids = [];
        // Should we exit the game?
        this.exitGame = false;
    }
    // Public methods
    GalacticWars.prototype.run = function () {
        // To store the return value
        var returnValue = false;

        if (this.exitGame)
            return true;

        // Reset the area
        this.getRenderArea().resetAllButSize();

        switch (this.step) {
            case GalacticWarsStep.SPLASH_SCREEN:
                this.drawSplashScreen();
                returnValue = this.runSplashScreen();
                break;
            case GalacticWarsStep.GAME:
                this.drawGame();
                returnValue = this.runGame();
                break;
            case GalacticWarsStep.LOSE:
                this.drawLose();
                returnValue = false;
                break;
        }

        // We return
        return returnValue;
    };

    // Private methods
    GalacticWars.prototype.addAsteroids = function () {
        // Get the space sector we're in (0 to 3)
        var spaceSector = Math.floor(this.score / 100) % 4;

        // Get the space difficulty (0 to x)
        var spaceDifficulty = Math.floor(Math.floor(this.score / 100) / 4);

        // Get the spaceSeed43 (0 to 43), the spaceSeed21 (0 to 21) and the spaceSeed10 (0 to 10)
        var spaceSeed43 = this.score % 44;
        var spaceSeed21 = Math.floor(spaceSeed43 / 2);
        var spaceSeed10 = Math.floor(spaceSeed21 / 2);

        switch (spaceSector) {
            case 0:
                switch (spaceDifficulty) {
                    case 0:
                        if (spaceSeed43 < 11 && spaceSeed21 < 6)
                            this.addAsteroid(spaceSeed10);
else if (spaceSeed43 > 29 && spaceSeed21 > 14)
                            this.addAsteroid(spaceSeed10);
                        break;
                    case 1:
                        if (spaceSeed43 < 13 && spaceSeed21 < 7)
                            this.addAsteroid(spaceSeed10);
else if (spaceSeed43 > 27 && spaceSeed21 > 13)
                            this.addAsteroid(spaceSeed10);
                        break;
                    default:
                        if (spaceSeed43 < 15 && spaceSeed21 < 8)
                            this.addAsteroid(spaceSeed10);
else if (spaceSeed43 > 25 && spaceSeed21 > 12)
                            this.addAsteroid(spaceSeed10);
                        break;
                }
                break;

            case 1:
                switch (spaceDifficulty) {
                    case 0:
                        if (spaceSeed43 % 3 == 0 && (this.score * 7) % 25 > 15) {
                            for (var i = spaceSeed10 - 1; i <= spaceSeed10 + 1; i++) {
                                if (i >= 0 && i <= 10)
                                    this.addAsteroid(i);
                            }
                        }
                        break;
                    case 1:
                        if (spaceSeed43 % 3 == 0 && (this.score * 7) % 25 > 12) {
                            for (var i = spaceSeed10 - 1; i <= spaceSeed10 + 1; i++) {
                                if (i >= 0 && i <= 10)
                                    this.addAsteroid(i);
                            }
                        }
                        break;
                    default:
                        if (spaceSeed43 % 3 == 0 && (this.score * 7) % 25 > 10) {
                            for (var i = spaceSeed10 - 1; i <= spaceSeed10 + 1; i++) {
                                if (i >= 0 && i <= 10)
                                    this.addAsteroid(i);
                            }
                        }
                        break;
                }
                break;

            case 2:
                switch (spaceDifficulty) {
                    case 0:
                        if (this.score % 25 == 0) {
                            var holePos = Random.between(0, 9);
                            for (var i = 0; i <= 10; i++) {
                                if (i != holePos && i != holePos + 1) {
                                    this.addAsteroid(i);
                                }
                            }
                        }
                        break;
                    case 1:
                        if (this.score % 20 == 0) {
                            var holePos = Random.between(0, 9);
                            for (var i = 0; i <= 10; i++) {
                                if (i != holePos && i != holePos + 1) {
                                    this.addAsteroid(i);
                                }
                            }
                        }
                        break;
                    default:
                        if (this.score % 15 == 0) {
                            var holePos = Random.between(0, 9);
                            for (var i = 0; i <= 10; i++) {
                                if (i != holePos && i != holePos + 1) {
                                    this.addAsteroid(i);
                                }
                            }
                        }
                        break;
                }
                break;

            case 3:
                switch (spaceDifficulty) {
                    case 0:
                        if (Random.oneChanceOutOf(15))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                    case 1:
                        if (Random.oneChanceOutOf(10))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                    case 2:
                        if (Random.oneChanceOutOf(7))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                    default:
                        if (Random.oneChanceOutOf(5))
                            this.addAsteroid(Random.between(0, 10));
                        break;
                }
                break;
        }
    };

    GalacticWars.prototype.addAsteroid = function (y) {
        this.asteroids.push(new Pos(53, y));
    };

    GalacticWars.prototype.checkCollision = function () {
        if (this.shipYPosition < 0)
            return true;
        if (this.shipYPosition > 9)
            return true;

        // No collision, we return false
        return false;
    };

    GalacticWars.prototype.checkCollisionWithAsteroids = function () {
        // Boolean used to know if we already lose one hp or not
        var loseOneHp = false;

        for (var i = 0; i < this.asteroids.length; i++) {
            if (this.shipCollidesWithThisPos(this.asteroids[i])) {
                if (loseOneHp == false) {
                    // We lose one hp
                    this.hp -= 1;
                    loseOneHp = true;
                }

                // We destroy the asteroid
                this.asteroids.splice(i, 1);
                i--;
            }
        }

        if (this.hp < 1)
            return true;

        // Else, we return false
        return false;
    };

    GalacticWars.prototype.drawGame = function () {
        // Draw the score
        this.getRenderArea().drawString("Score : " + this.score.toString(), 0, 0);

        // Draw hp
        this.getRenderArea().drawString("| HP : " + this.hp.toString(), 43, 0);

        // Draw the power
        this.getRenderArea().drawString("| Power : [", 14, 0);
        this.getRenderArea().drawHorizontalLine("x", 25, 25 + Math.floor(this.power / 150 * 16), 0);
        this.getRenderArea().drawString("]", 41, 0);

        // Draw the ship
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/GalacticWars/ship"), 0, 1 + this.shipYPosition);

        for (var i = 0; i < this.asteroids.length; i++) {
            this.getRenderArea().drawString("O", this.asteroids[i].x, 1 + this.asteroids[i].y);
        }
    };

    GalacticWars.prototype.drawLose = function () {
        // Draw "you lose"
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/GalacticWars/youLose"), 8, 1);

        // Draw the candies we won
        this.getRenderArea().drawString("Score : " + this.score + ".", 8, 7);
        this.getRenderArea().drawString("You gain " + (this.score + Algo.correctIfUnderZero(this.score - 1000) * 30) + " candies.", 8, 8);

        this.getRenderArea().drawString("Best score : " + Saving.loadNumber("galacticWarsBestScore") + ".", 8, 10);
    };

    GalacticWars.prototype.drawSplashScreen = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/GalacticWars/splashScreen"), -87 + this.splashScreenTimer * 3, 2);
    };

    GalacticWars.prototype.goToLose = function () {
        // Change the step
        this.step = GalacticWarsStep.LOSE;

        // Get the candies
        this.getThirdHouse().getGame().getCandies().add(this.score + Algo.correctIfUnderZero(this.score - 1000) * 30);

        if (this.score > Saving.loadNumber("galacticWarsBestScore"))
            Saving.saveNumber("galacticWarsBestScore", this.score);
    };

    GalacticWars.prototype.goToGame = function () {
        // Change the step
        this.step = GalacticWarsStep.GAME;

        // Set some useful parameters
        this.score = 2;
        this.shipYPosition = 4;
        this.hp = 10;
        this.power = 150;
        this.maxPower = 150;

        // Set the quest speedup
        this.getThirdHouse().getGame().setQuestSpeedUp(-50);
    };

    GalacticWars.prototype.pressedDownButton = function () {
    };

    GalacticWars.prototype.pressedSpaceButton = function () {
        // Variable used when deleting asteroids
        var oldI;

        if (this.step == GalacticWarsStep.LOSE)
            this.exitGame = true;
else if (this.step == GalacticWarsStep.GAME) {
            if (this.power == this.maxPower) {
                // We delete 3/4 of the asteroids
                oldI = 0;
                for (var i = 0; i < this.asteroids.length; i++) {
                    if ((oldI % 5) != 0) {
                        this.asteroids.splice(i, 1);
                        i--;
                    }
                    oldI++;
                }

                // We have no more power
                this.power = 0;
            }
        }
    };

    GalacticWars.prototype.pressedUpButton = function () {
    };

    GalacticWars.prototype.runGame = function () {
        // Variable used to calc the quest speedup later
        var questSpeedUp = 0;

        if (Keyboard.isKeyPressed("down")) {
            // We try to make the ship go down
            this.shipYPosition += 1;

            if (this.checkCollision())
                this.shipYPosition -= 1;
        } else if (Keyboard.isKeyPressed("up")) {
            // We try to make the ship go up
            this.shipYPosition -= 1;

            if (this.checkCollision())
                this.shipYPosition += 1;
        }

        for (var i = 0; i < this.asteroids.length; i++) {
            if (this.asteroids[i].x > 0)
                this.asteroids[i].x -= 1;
else {
                this.asteroids.splice(i, 1);
                i--;
            }
        }

        // Add asteroids
        this.addAsteroids();

        // Increase the score
        this.score = Math.ceil(Math.pow(this.score, 1.00015));

        if (this.power < this.maxPower)
            this.power += 1;

        if (this.checkCollisionWithAsteroids())
            this.goToLose();

        return false;
    };

    GalacticWars.prototype.runSplashScreen = function () {
        if (this.splashScreenTimer >= 0) {
            // Reduce the timer
            this.splashScreenTimer -= 1;
        } else {
            // Switch to the next step
            this.goToGame();
        }

        // We can't end the game during the splash screen
        return false;
    };

    GalacticWars.prototype.shipCollidesWithThisPos = function (pos) {
        if (pos.x < 0)
            return false;

        if (pos.x > 10)
            return false;

        if (pos.y < this.shipYPosition)
            return false;

        if (pos.y > this.shipYPosition + 1)
            return false;

        return true;
    };
    return GalacticWars;
})(ThirdHouseGame);
///<reference path="./../../libs/jquery.d.ts"/>
var RenderLocation = (function () {
    // Constructor
    function RenderLocation(locationString, scrolling) {
        if (typeof scrolling === "undefined") { scrolling = false; }
        this.scrolling = null;
        this.setLocationString(locationString);
        this.setScrolling(scrolling);
    }
    // Public methods
    RenderLocation.prototype.render = function (renderArea) {
        $(this.locationString).html(renderArea.getForRendering());
        renderArea.runLinks();
    };

    RenderLocation.prototype.setContentGap = function (gap) {
        var ex, outerWidth, addGap = 0;

        // Get our outer width
        outerWidth = $(this.locationString).outerWidth();

        // Get the real ex value
        ex = this.getRealExValueFromTheStatusBar();

        if (outerWidth > $(window).width())
            addGap = -(outerWidth - $(window).width()) / 2;

        // Finally change the "left" value of our div
        $(this.locationString).css({ "left": ((gap / 2) * ex + addGap).toString() + "px" });
    };

    // Public setters
    RenderLocation.prototype.setLocationString = function (locationString) {
        this.locationString = locationString;
    };

    RenderLocation.prototype.setScrolling = function (scrolling, defaultScroll) {
        if (typeof defaultScroll === "undefined") { defaultScroll = 0; }
        if (this.scrolling != scrolling) {
            this.scrolling = scrolling;

            if (this.scrolling)
                this.initScrolling(defaultScroll);
else
                this.stopScrolling();
        }
    };

    // Public getters
    RenderLocation.prototype.getScroll = function () {
        return $("html").scrollTop();
    };

    RenderLocation.prototype.getScrolling = function () {
        return this.scrolling;
    };

    // Private methods
    RenderLocation.prototype.getRealExValueFromTheStatusBar = function () {
        // DISCLAIMER
        // Yes, I know that this method is really ugly
        // But if I don't do this way, there are some stupid gaps in long quests and the browser zooms in and out (or even without zooming in Chrome)
        // If anyone has a better cross-browser solution, please tell me!
        // Return the real "ex" value in pixels
        return $("#statusBar").outerWidth() / 100;
    };

    RenderLocation.prototype.initScrolling = function (defaultScroll) {
        // Scroll to the default scroll
        $("html").scrollTop(defaultScroll);

        // Set css for our location string
        $(this.locationString).css({
            'position': 'absolute',
            'left': '0',
            'top': '0',
            'overflow-x': 'scroll'
        });

        // Set css for around the status bar
        $("#aroundStatusBar").css({
            'position': 'fixed',
            'top': '0',
            'left': '0',
            'right': '0',
            'height': '0'
        });
    };

    RenderLocation.prototype.stopScrolling = function () {
        // Set the scroll to 0
        $("html").scrollTop(0);

        // Reset css for our location string
        $(this.locationString).css({
            'position': 'relative',
            'overflow-x': 'hidden'
        });

        // Reset css for around the status bar
        $("#aroundStatusBar").css({
            'position': 'relative',
            'top': 'auto',
            'left': 'auto',
            'right': 'auto',
            'height': 'auto'
        });
    };
    return RenderLocation;
})();
///<reference path="Place.ts"/>
///<reference path="RenderLocation.ts"/>
///<reference path="RenderArea.ts"/>
///<reference path="Resource.ts"/>
// Config
Saving.registerBool("gameDebug", false);
Saving.registerString("gameLanguage", "en");
Saving.registerBool("gameInvertedColors", false);

// EqItems
Saving.registerString("gameWeaponSelected", "inventorySpecialNothingWeapon");
Saving.registerString("gameHatSelected", "inventorySpecialNothingHat");
Saving.registerString("gameBodyArmourSelected", "inventorySpecialNothingBodyArmour");
Saving.registerString("gameGlovesSelected", "inventorySpecialNothingGloves");
Saving.registerString("gameBootsSelected", "inventorySpecialNothingBoots");

// Stuff about gaining lollipops each second
Saving.registerNumber("gameSecondsElapsedSinceLastLollipopsProduction", 0);

// Resources
Saving.registerNumber("gameCandiesAccumulated", 0);
Saving.registerNumber("gameCandiesCurrent", 0);
Saving.registerNumber("gameCandiesMax", 0);

Saving.registerNumber("gameLollipopsAccumulated", 0);
Saving.registerNumber("gameLollipopsCurrent", 0);
Saving.registerNumber("gameLollipopsMax", 0);

Saving.registerNumber("gameChocolateBarsAccumulated", 0);
Saving.registerNumber("gameChocolateBarsCurrent", 0);
Saving.registerNumber("gameChocolateBarsMax", 0);

Saving.registerNumber("gamePainsAuChocolatAccumulated", 0);
Saving.registerNumber("gamePainsAuChocolatCurrent", 0);
Saving.registerNumber("gamePainsAuChocolatMax", 0);

Saving.registerNumber("gameCandiesEatenAccumulated", 0);
Saving.registerNumber("gameCandiesEatenCurrent", 0);
Saving.registerNumber("gameCandiesEatenMax", 0);

Saving.registerNumber("gameCandiesThrownAccumulated", 0);
Saving.registerNumber("gameCandiesThrownCurrent", 0);
Saving.registerNumber("gameCandiesThrownMax", 0);

Saving.registerNumber("gameCandiesUsedToRequestFeaturesAccumulated", 0);
Saving.registerNumber("gameCandiesUsedToRequestFeaturesCurrent", 0);
Saving.registerNumber("gameCandiesUsedToRequestFeaturesMax", 0);

Saving.registerNumber("gameCandiesInCauldronAccumulated", 0);
Saving.registerNumber("gameCandiesInCauldronCurrent", 0);
Saving.registerNumber("gameCandiesInCauldronMax", 0);

Saving.registerNumber("gameLollipopsInCauldronAccumulated", 0);
Saving.registerNumber("gameLollipopsInCauldronCurrent", 0);
Saving.registerNumber("gameLollipopsInCauldronMax", 0);

// Gifts
Saving.registerNumber("gameGiftPower", 0);
Saving.registerNumber("gameGiftHealth", 0);
Saving.registerNumber("gameGiftMagic", 0);

// The gamemode
Saving.registerString("gameGameMode", "normal");

var Game = (function () {
    // Constructor
    function Game(gameMode) {
        // Render locations
        this.statusBarLocation = new RenderLocation("#statusBar");
        this.mainContentLocation = new RenderLocation("#mainContent");
        this.candiesUsedToRequestFeatures = new Resource("gameCandiesUsedToRequestFeatures");
        this.candiesInCauldron = new Resource("gameCandiesInCauldron");
        this.lollipopsInCauldron = new Resource("gameLollipopsInCauldron");
        // Grid items
        this.gridItems = {};
        // EqItems
        this.weapons = {};
        this.hats = {};
        this.bodyArmours = {};
        this.gloves = {};
        this.boots = {};
        // EqItems selected from the various arrays above (the selection being made in the inventory tab)
        this.selectedEqItems = {};
        // The quest log
        this.questLog = new QuestLog();
        // Locations
        this.place = null;
        this.savedPlace = null;
        // Hotkeys
        this.hotkeys = {};
        this.specialHotkeys = [];
        // Some info bools
        this.weAreQuesting = false;
        // Callbacks
        this.oneSecondCallbackCollection = new CallbackCollection();
        this.questCallbackCollection = new CallbackCollection();
        // Is the quest slowed down ?
        this.questSlowedDown = false;
        // Local autosave
        this.localAutosaveEnabled = false;
        this.localAutosaveSlot = null;
        this.localAutosaveTime = null;
        // Is the status bar allowed to use the n key to go to the next tab? (this is set to false when using the computer...)
        this.isStatusBarAllowedToUseTheNKey = true;
        if (gameMode != null)
            Saving.saveString("gameGameMode", gameMode);

        // We create the grid items
        this.createGridItems();

        // We create the eqItems
        this.createEqItems();

        // We create the status bar
        this.statusBar = new StatusBar(this, 0);

        // We create the player
        this.player = new Player(this);

        // We create the resources
        this.candies = new Candies(this, "gameCandies");
        this.lollipops = new Lollipops(this, "gameLollipops");
        this.chocolateBars = new ChocolateBars(this, "gameChocolateBars");
        this.painsAuChocolat = new PainsAuChocolat(this, "gamePainsAuChocolat");
        this.candiesEaten = new CandiesEaten(this, "gameCandiesEaten");
        this.candiesThrown = new CandiesThrown(this, "gameCandiesThrown");

        // We update the status bar
        this.updateStatusBar();

        // We launch timeouts & intervals methods
        this.oneSecondIntervalId = window.setInterval(this.oneSecondMethod.bind(this), 1000);
        window.setTimeout(this.questMethod.bind(this), 100);
    }
    // Public methods
    Game.prototype.addHotkey = function (hotkey) {
        this.hotkeys[hotkey.getKeyString()] = hotkey;
    };

    Game.prototype.addSpecialHotkey = function (hotkey) {
        this.specialHotkeys.push(hotkey);
    };

    Game.prototype.applyInvertedColorsToCss = function () {
        if (Saving.loadBool("gameInvertedColors") == false)
            $('#invertColorsStylesheet').remove();
else
            $('head').append('<link href="css/invertColors.css" rel="stylesheet" id="invertColorsStylesheet"/>');
    };

    Game.prototype.calcLollipopFarmProduction = function () {
        // Is the production each second ?
        Saving.saveBool("lollipopFarmIsProductionEachSecond", this.isLollipopFarmProductionEachSecond());

        if (Saving.loadBool("lollipopFarmIsProductionEachSecond")) {
            Saving.saveNumber("lollipopFarmProduction", (Saving.loadBool("gridItemPossessedShellPowder") ? 3 : 1) * (Saving.loadBool("gridItemPossessedPitchfork") ? 3 : 1) * (Saving.loadBool("gridItemPossessedGreenSharkFin") ? 5 : 1) * Math.ceil(100 * (1 - Math.exp(-(Saving.loadNumber("lollipopFarmLollipopsPlanted") - 20) / 5000))));
        } else {
            switch (Saving.loadNumber("lollipopFarmLollipopsPlanted")) {
                case 1:
                    Saving.saveNumber("lollipopFarmProduction", 3600 * 8);
                    break;
                case 2:
                    Saving.saveNumber("lollipopFarmProduction", 3600 * 5);
                    break;
                case 3:
                    Saving.saveNumber("lollipopFarmProduction", 3600 * 2);
                    break;
                case 4:
                    Saving.saveNumber("lollipopFarmProduction", 3600);
                    break;
                case 5:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 40);
                    break;
                case 6:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 25);
                    break;
                case 7:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 12);
                    break;
                case 8:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 8);
                    break;
                case 9:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 5);
                    break;
                case 10:
                    Saving.saveNumber("lollipopFarmProduction", 60 * 2);
                    break;
                case 11:
                    Saving.saveNumber("lollipopFarmProduction", 60);
                    break;
                case 12:
                    Saving.saveNumber("lollipopFarmProduction", 52);
                    break;
                case 13:
                    Saving.saveNumber("lollipopFarmProduction", 42);
                    break;
                case 14:
                    Saving.saveNumber("lollipopFarmProduction", 30);
                    break;
                case 15:
                    Saving.saveNumber("lollipopFarmProduction", 16);
                    break;
                case 16:
                    Saving.saveNumber("lollipopFarmProduction", 8);
                    break;
                case 17:
                    Saving.saveNumber("lollipopFarmProduction", 5);
                    break;
                case 18:
                    Saving.saveNumber("lollipopFarmProduction", 4);
                    break;
                case 19:
                    Saving.saveNumber("lollipopFarmProduction", 3);
                    break;
                case 20:
                    Saving.saveNumber("lollipopFarmProduction", 2);
                    break;
            }
        }
    };

    Game.prototype.canStartQuest = function () {
        if (this.player.getHp() == 0)
            return false;

        return true;
    };

    Game.prototype.clearAllIntervals = function () {
        clearInterval(this.oneSecondIntervalId);
    };

    Game.prototype.disableLocalAutosave = function () {
        this.localAutosaveEnabled = false;
        this.localAutosaveSlot = null;
    };

    Game.prototype.emptyAndFillSelectedEqItemsArray = function () {
        // Empty
        this.selectedEqItems = {};

        if (Saving.loadString("gameWeaponSelected") != "inventorySpecialNothingWeapon")
            this.selectedEqItems["weapon"] = this.weapons[Saving.loadString("gameWeaponSelected")];
        if (Saving.loadString("gameHatSelected") != "inventorySpecialNothingHat")
            this.selectedEqItems["hat"] = this.hats[Saving.loadString("gameHatSelected")];
        if (Saving.loadString("gameBodyArmourSelected") != "inventorySpecialNothingBodyArmour")
            this.selectedEqItems["bodyArmour"] = this.bodyArmours[Saving.loadString("gameBodyArmourSelected")];
        if (Saving.loadString("gameGlovesSelected") != "inventorySpecialNothingGloves")
            this.selectedEqItems["gloves"] = this.gloves[Saving.loadString("gameGlovesSelected")];
        if (Saving.loadString("gameBootsSelected") != "inventorySpecialNothingBoots")
            this.selectedEqItems["boots"] = this.boots[Saving.loadString("gameBootsSelected")];
    };

    Game.prototype.enableLocalAutosave = function (localAutosaveSlot) {
        this.localAutosaveEnabled = true;
        this.localAutosaveSlot = localAutosaveSlot;
        this.setDefaultLocalAutosaveTime();
    };

    Game.prototype.gainItem = function (itemSavingName) {
        Saving.saveBool(itemSavingName, true);

        this.player.reCalcMaxHp();
        this.calcLollipopFarmProduction();
    };

    Game.prototype.getEqItemFromEqItemType = function (savingName, type) {
        switch (type) {
            case EqItemType.WEAPON:
                return this.weapons[savingName];
                break;
            case EqItemType.HAT:
                return this.hats[savingName];
                break;
            case EqItemType.BODYARMOUR:
                return this.bodyArmours[savingName];
                break;
            case EqItemType.GLOVES:
                return this.gloves[savingName];
                break;
            case EqItemType.BOOTS:
                return this.boots[savingName];
                break;
        }
    };

    Game.prototype.isEquipped = function (type, savingName) {
        if (this.selectedEqItems[type] == undefined || this.selectedEqItems[type] == null)
            return false;
else
            return (this.selectedEqItems[type].getSavingName() == savingName);
    };

    Game.prototype.isLollipopFarmProductionEachSecond = function () {
        if (Saving.loadNumber("lollipopFarmLollipopsPlanted") > 20) {
            return true;
        }

        return false;
    };

    Game.prototype.load = function () {
        // Resources
        this.candies.load();
        this.lollipops.load();
        this.chocolateBars.load();
        this.painsAuChocolat.load();
        this.candiesEaten.load();
        this.candiesThrown.load();
        this.candiesUsedToRequestFeatures.load();
        this.candiesInCauldron.load();
        this.lollipopsInCauldron.load();

        // Handle inverted colors (we have to change the css now depending on the gameInvertedColors bool from the Saving module)
        this.applyInvertedColorsToCss();
    };

    Game.prototype.postLoad = function () {
        // We re calc the player hp
        this.player.reCalcMaxHp();

        // We update the status bar
        this.updateStatusBar(true);

        // Select correct items
        this.emptyAndFillSelectedEqItemsArray();

        // We go to the candy box
        this.goToCandyBox();

        // And we set the saved place (the village)
        this.savedPlace = new Village(this);
    };

    Game.prototype.resetPlayer = function () {
        // Save some important things
        var hp = this.player.getHp();
        var maxHp = this.player.getMaxHp();

        // Re-create the player
        this.player = new Player(this);

        // Restore the important things saved
        this.player.setHp(hp);
        this.player.setMaxHp(maxHp);
    };

    Game.prototype.resetSpecialHotkeys = function () {
        this.specialHotkeys = [];
    };

    Game.prototype.save = function () {
        // Resources
        this.candies.save();
        this.lollipops.save();
        this.chocolateBars.save();
        this.painsAuChocolat.save();
        this.candiesEaten.save();
        this.candiesThrown.save();
        this.candiesUsedToRequestFeatures.save();
        this.candiesInCauldron.save();
        this.lollipopsInCauldron.save();
    };

    Game.prototype.setPlace = function (place) {
        if (this.place != null) {
            this.place.willStopBeingDisplayed();
            this.resetHotkeys();

            if (this.savedPlace == null) {
                // It means we're closing it actually, so we tell it that we're closing it
                this.place.willBeClosed();
            }
        }

        // Set the place
        this.place = place;

        // Callbacks
        this.resetResourcesCallbacks();
        this.place.willBeDisplayed();

        // Display the place for the first time
        this.displayPlace();
    };

    Game.prototype.unequipIfEquipped = function (savingName, type) {
        switch (type) {
            case EqItemType.WEAPON:
                if (this.selectedEqItems["weapon"] != null && this.selectedEqItems["weapon"].getSavingName() == savingName)
                    Saving.saveString("gameWeaponSelected", "inventorySpecialNothingWeapon");
                break;
            case EqItemType.HAT:
                if (this.selectedEqItems["hat"] != null && this.selectedEqItems["hat"].getSavingName() == savingName)
                    Saving.saveString("gameHatSelected", "inventorySpecialNothingHat");
                break;
            case EqItemType.BODYARMOUR:
                if (this.selectedEqItems["bodyArmour"] != null && this.selectedEqItems["bodyArmour"].getSavingName() == savingName)
                    Saving.saveString("gameBodyArmourSelected", "inventorySpecialNothingBodyArmour");
                break;
            case EqItemType.GLOVES:
                if (this.selectedEqItems["gloves"] != null && this.selectedEqItems["gloves"].getSavingName() == savingName)
                    Saving.saveString("gameGlovesSelected", "inventorySpecialNothingGloves");
                break;
            case EqItemType.BOOTS:
                if (this.selectedEqItems["boots"] != null && this.selectedEqItems["boots"].getSavingName() == savingName)
                    Saving.saveString("gameBootsSelected", "inventorySpecialNothingBoots");
                break;
        }

        this.emptyAndFillSelectedEqItemsArray();
    };

    Game.prototype.updatePlace = function () {
        this.displayPlace();
    };

    Game.prototype.updateStatusBar = function (reAdd) {
        if (typeof reAdd === "undefined") { reAdd = false; }
        if (reAdd)
            this.statusBar.deleteAndReAddEverything();
        this.statusBar.updateAll();
        this.statusBarLocation.render(this.statusBar.getRenderArea());
    };

    // "go to" methods
    Game.prototype.goToCandyBox = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new CandyBox(this));
    };

    Game.prototype.goToCastle = function () {
        this.setPlace(new Castle(this));
    };

    Game.prototype.goToCastleEntrance = function () {
        this.setPlace(new CastleEntrance(this));
    };

    Game.prototype.goToCauldron = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Cauldron(this));
    };

    Game.prototype.goToCfg = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Cfg(this));
    };

    Game.prototype.goToInsideFortress = function () {
        this.setPlace(new InsideFortress(this));
    };

    Game.prototype.goToInsideYourBox = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new InsideYourBox(this));
    };

    Game.prototype.goToInventory = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Inventory(this));
    };

    Game.prototype.goToLighthouse = function () {
        this.setPlace(new Lighthouse(this));
    };

    Game.prototype.goToLollipopFarm = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new LollipopFarm(this));
    };

    Game.prototype.goToMainMap = function () {
        this.setPlace(new MainMap(this));
    };

    Game.prototype.goToMap = function () {
        this.setPlaceFromSavedMapPlace();
    };

    Game.prototype.goToSave = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new Save(this));
    };

    Game.prototype.goToSorceressHut = function () {
        this.setPlace(new SorceressHut(this));
    };

    Game.prototype.goToTheArena = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new TheArena(this));
    };

    Game.prototype.goToTheCave = function () {
        this.setPlace(new TheCave(this));
    };

    Game.prototype.goToTheComputer = function () {
        this.saveCurrentMapPlace();
        this.setPlace(new TheComputer(this));
    };

    Game.prototype.goToVillage = function () {
        this.setPlace(new Village(this));
    };

    Game.prototype.goToYourself = function () {
        this.setPlace(new Yourself(this));
    };

    // Public getters
    Game.prototype.getBodyArmours = function () {
        return this.bodyArmours;
    };

    Game.prototype.getBoots = function () {
        return this.boots;
    };

    Game.prototype.getCandies = function () {
        return this.candies;
    };

    Game.prototype.getCandiesEaten = function () {
        return this.candiesEaten;
    };

    Game.prototype.getCandiesInCauldron = function () {
        return this.candiesInCauldron;
    };

    Game.prototype.getCandiesThrown = function () {
        return this.candiesThrown;
    };

    Game.prototype.getCandiesUsedToRequestFeatures = function () {
        return this.candiesUsedToRequestFeatures;
    };

    Game.prototype.getChocolateBars = function () {
        return this.chocolateBars;
    };

    Game.prototype.getGloves = function () {
        return this.gloves;
    };

    Game.prototype.getHats = function () {
        return this.hats;
    };

    Game.prototype.getHotkeys = function () {
        return this.hotkeys;
    };

    Game.prototype.getGridItems = function () {
        return this.gridItems;
    };

    Game.prototype.getIsStatusBarAllowedToUseTheNKey = function () {
        return this.isStatusBarAllowedToUseTheNKey;
    };

    Game.prototype.getLocalAutosaveEnabled = function () {
        return this.localAutosaveEnabled;
    };

    Game.prototype.getLocalAutosaveSlot = function () {
        return this.localAutosaveSlot;
    };

    Game.prototype.getLocalAutosaveTime = function () {
        return this.localAutosaveTime;
    };

    Game.prototype.getLollipops = function () {
        return this.lollipops;
    };

    Game.prototype.getLollipopsInCauldron = function () {
        return this.lollipopsInCauldron;
    };

    Game.prototype.getPainsAuChocolat = function () {
        return this.painsAuChocolat;
    };

    Game.prototype.getQuestCallbackCollection = function () {
        return this.questCallbackCollection;
    };

    Game.prototype.getQuestLog = function () {
        return this.questLog;
    };

    Game.prototype.getQuestSlowedDown = function () {
        return this.questSlowedDown;
    };

    Game.prototype.getQuestSpeedUp = function () {
        return this.questSpeedUp;
    };

    Game.prototype.getOneSecondCallbackCollection = function () {
        return this.oneSecondCallbackCollection;
    };

    Game.prototype.getPlayer = function () {
        return this.player;
    };

    Game.prototype.getMainContentLocation = function () {
        return this.mainContentLocation;
    };

    Game.prototype.getSelectedEqItems = function () {
        return this.selectedEqItems;
    };

    Game.prototype.getSpecialHotkeys = function () {
        return this.specialHotkeys;
    };

    Game.prototype.getStatusBar = function () {
        return this.statusBar;
    };

    Game.prototype.getWeapons = function () {
        return this.weapons;
    };

    Game.prototype.getWeAreQuesting = function () {
        return this.weAreQuesting;
    };

    // Public setters
    Game.prototype.setIsStatusBarAllowedToUseTheNKey = function (isStatusBarAllowedToUseTheNKey) {
        this.isStatusBarAllowedToUseTheNKey = isStatusBarAllowedToUseTheNKey;
    };

    Game.prototype.setQuestSlowedDown = function (questSlowedDown) {
        this.questSlowedDown = questSlowedDown;
    };

    Game.prototype.setQuestSpeedUp = function (questSpeedUp) {
        this.questSpeedUp = questSpeedUp;
    };

    Game.prototype.setWeAreQuesting = function (weAreQuesting) {
        this.weAreQuesting = weAreQuesting;
    };

    // Private methods
    Game.prototype.addEqItem = function (eqItem, array) {
        array[eqItem.getSavingName()] = eqItem;
    };

    Game.prototype.addGridItem = function (gridItem) {
        this.gridItems[gridItem.getSavingName()] = gridItem;
    };

    Game.prototype.createEqItems = function () {
        // Create weapons
        this.addEqItem(new WoodenSword(), this.weapons);
        this.addEqItem(new IronAxe(), this.weapons);
        this.addEqItem(new PolishedSilverSword(), this.weapons);
        this.addEqItem(new TrollBludgeon(), this.weapons);
        this.addEqItem(new MonkeyWizardStaff(), this.weapons);
        this.addEqItem(new EnchantedMonkeyWizardStaff(), this.weapons);
        this.addEqItem(new TribalSpear(), this.weapons);
        this.addEqItem(new SummoningTribalSpear(), this.weapons);
        this.addEqItem(new GiantSpoon(), this.weapons);
        this.addEqItem(new Scythe(), this.weapons);
        this.addEqItem(new GiantSpoonOfDoom(), this.weapons);

        // Create hats
        this.addEqItem(new OctopusKingCrown(), this.hats);
        this.addEqItem(new OctopusKingCrownWithJaspers(), this.hats);
        this.addEqItem(new OctopusKingCrownWithObsidian(), this.hats);
        this.addEqItem(new MerchantHat(), this.hats);
        this.addEqItem(new SorceressHat(), this.hats);

        // Create body armours
        this.addEqItem(new LightweightBodyArmour(), this.bodyArmours);
        this.addEqItem(new KnightBodyArmour(), this.bodyArmours);
        this.addEqItem(new EnchantedKnightBodyArmour(), this.bodyArmours);

        // Create gloves
        this.addEqItem(new LeatherGloves(), this.gloves);
        this.addEqItem(new RedEnchantedGloves(), this.gloves);
        this.addEqItem(new PinkEnchantedGloves(), this.gloves);

        // Create boots
        this.addEqItem(new LeatherBoots(), this.boots);
        this.addEqItem(new RocketBoots(), this.boots);
        this.addEqItem(new BootsOfIntrospection(), this.boots);
    };

    Game.prototype.createGridItems = function () {
        // First line
        this.addGridItem(new GridItem("gridItemPossessedMainMap", "gridItemMainMapName", "gridItemMainMapDescription", "gridItems/mainMap", new Pos(0, 0)));
        this.addGridItem(new GridItem("gridItemPossessedTimeRing", "gridItemTimeRingName", "gridItemTimeRingDescription", "gridItems/timeRing", new Pos(1, 0)));
        this.addGridItem(new GridItem("gridItemPossessedThirdHouseKey", "gridItemThirdHouseKeyName", "gridItemThirdHouseKeyDescription", "gridItems/thirdHouseKey", new Pos(2, 0)));
        this.addGridItem(new GridItem("gridItemPossessedBeginnersGrimoire", "gridItemBeginnersGrimoireName", "gridItemBeginnersGrimoireDescription", "gridItems/beginnersGrimoire", new Pos(3, 0)));

        // Second line
        this.addGridItem(new Feather("gridItemPossessedFeather", "gridItemFeatherName", "gridItemFeatherDescription", "gridItems/feather", new Pos(0, 1)));
        this.addGridItem(new GridItem("gridItemPossessedPogoStick", "gridItemPogoStickName", "gridItemPogoStickDescription", "gridItems/pogoStick", new Pos(1, 1)));
        this.addGridItem(new GridItem("gridItemPossessedHeartPlug", "gridItemHeartPlugName", "gridItemHeartPlugDescription", "gridItems/heartPlug", new Pos(2, 1)));
        this.addGridItem(new GridItem("gridItemPossessedAdvancedGrimoire", "gridItemAdvancedGrimoireName", "gridItemAdvancedGrimoireDescription", "gridItems/advancedGrimoire", new Pos(3, 1)));

        // Third line
        this.addGridItem(new GridItem("gridItemPossessedSponge", "gridItemSpongeName", "gridItemSpongeDescription", "gridItems/sponge", new Pos(0, 2)));
        this.addGridItem(new GridItem("gridItemPossessedShellPowder", "gridItemShellPowderName", "gridItemShellPowderDescription", "gridItems/shellPowder", new Pos(1, 2)));
        this.addGridItem(new GridItem("gridItemPossessedRedSharkFin", "gridItemRedSharkFinName", "gridItemRedSharkFinDescription", "gridItems/redSharkFin", new Pos(2, 2)));
        this.addGridItem(new GridItem("gridItemPossessedBlackMagicGrimoire", "gridItemBlackMagicGrimoireName", "gridItemBlackMagicGrimoireDescription", "gridItems/blackMagicGrimoire", new Pos(3, 2)));

        // Fourth line
        this.addGridItem(new GridItem("gridItemPossessedGreenSharkFin", "gridItemGreenSharkFinName", "gridItemGreenSharkFinDescription", "gridItems/greenSharkFin", new Pos(0, 3)));
        this.addGridItem(new GridItem("gridItemPossessedPurpleSharkFin", "gridItemPurpleSharkFinName", "gridItemPurpleSharkFinDescription", "gridItems/purpleSharkFin", new Pos(1, 3)));
        this.addGridItem(new GridItem("gridItemPossessedHeartPendant", "gridItemHeartPendantName", "gridItemHeartPendantDescription", "gridItems/heartPendant", new Pos(2, 3)));
        this.addGridItem(new GridItem("gridItemPossessedFortressKey", "gridItemFortressKeyName", "gridItemFortressKeyDescription", "gridItems/fortressKey", new Pos(3, 3)));

        // Fifth line
        this.addGridItem(new UnicornHorn("gridItemPossessedUnicornHorn", "gridItemUnicornHornName", "gridItemUnicornHornDescription", "gridItems/unicornHorn", new Pos(0, 4)));
        this.addGridItem(new XinopherydonClaw("gridItemPossessedXinopherydonClaw", "gridItemXinopherydonClawName", "gridItemXinopherydonClawDescription", "gridItems/xinopherydonClaw", new Pos(1, 4)));
        this.addGridItem(new GridItem("gridItemPossessedPitchfork", "gridItemPitchforkName", "gridItemPitchforkDescription", "gridItems/pitchfork", new Pos(2, 4)));
        this.addGridItem(new GridItem("gridItemPossessedTalkingCandy", "gridItemTalkingCandyName", "gridItemTalkingCandyDescription", "gridItems/talkingCandy", new Pos(3, 4)));

        // Sixth line
        this.addGridItem(new GridItem("gridItemPossessedP", "gridItemPName", "gridItemPDescription", "gridItems/p", new Pos(0, 5)));
        this.addGridItem(new GridItem("gridItemPossessedL", "gridItemLName", "gridItemLDescription", "gridItems/l", new Pos(1, 5)));
        this.addGridItem(new GridItem("gridItemPossessedA", "gridItemAName", "gridItemADescription", "gridItems/a", new Pos(2, 5)));
        this.addGridItem(new GridItem("gridItemPossessedY", "gridItemYName", "gridItemYDescription", "gridItems/y", new Pos(3, 5)));
    };

    Game.prototype.displayArea = function (renderArea, scrolling, gap, defaultScroll) {
        if (typeof scrolling === "undefined") { scrolling = false; }
        if (typeof gap === "undefined") { gap = 0; }
        if (typeof defaultScroll === "undefined") { defaultScroll = 0; }
        this.mainContentLocation.render(renderArea);
        this.mainContentLocation.setScrolling(scrolling, defaultScroll);
        if (scrolling == false)
            this.mainContentLocation.setContentGap(gap);
else
            this.mainContentLocation.setContentGap(0);
    };

    Game.prototype.displayPlace = function () {
        this.displayArea(this.place.getRenderArea(), this.place.getScrolling(), this.place.getGap(), this.place.getDefaultScroll());
    };

    Game.prototype.handleCandiesProduction = function () {
        this.candies.add(Saving.loadNumber("lollipopFarmCurrentCandiesProduction"));
    };

    Game.prototype.handleLollipopProduction = function () {
        if (Saving.loadNumber("lollipopFarmLollipopsPlanted") > 0) {
            if (Saving.loadBool("lollipopFarmIsProductionEachSecond")) {
                // We just add the production as lollipops
                this.lollipops.add(Saving.loadNumber("lollipopFarmProduction"));
            } else {
                if (Saving.loadNumber("lollipopFarmTimeSinceLastProduction") >= Saving.loadNumber("lollipopFarmProduction") - 1) {
                    // We reset the time
                    Saving.saveNumber("lollipopFarmTimeSinceLastProduction", 0);

                    // We add one lollipop
                    this.lollipops.add(1);
                } else {
                    // We increase the time
                    Saving.saveNumber("lollipopFarmTimeSinceLastProduction", Saving.loadNumber("lollipopFarmTimeSinceLastProduction") + 1);
                }
            }
        }
    };

    Game.prototype.handlePondConversion = function () {
        // Variables
        var conversionAmount;

        if (Saving.loadBool("lollipopFarmPondFeedingLolligators")) {
            // Set the conversion amount
            conversionAmount = Saving.loadNumber("lollipopFarmPondConversionRate");

            if (this.candies.getCurrent() < conversionAmount)
                conversionAmount = this.candies.getCurrent();

            if (conversionAmount > 0) {
                this.candies.add(-conversionAmount);
                this.lollipops.add(conversionAmount);
            }
        }
    };

    Game.prototype.localAutosave = function () {
        if (this.localAutosaveEnabled == true && this.localAutosaveSlot != null && this.localAutosaveTime != null) {
            if (this.localAutosaveTime <= 0) {
                // We save
                Saving.save(this, MainLoadingType.LOCAL, this.localAutosaveSlot);

                // We reset the time
                this.setDefaultLocalAutosaveTime();
            } else
                this.localAutosaveTime -= 1;
        }
    };

    Game.prototype.questMethod = function () {
        // Re set the timeout, depending on if the time is slowed down or not
        window.setTimeout(this.questMethod.bind(this), ((this.questSlowedDown && this.weAreQuesting) ? 200 : 100 + this.getQuestSpeedUp()));

        // Special place callbacks
        this.questCallbackCollection.fire();
    };

    Game.prototype.oneSecondMethod = function () {
        // Our methods
        this.player.magicHealthRegain();
        this.handleCandiesProduction();
        this.handleLollipopProduction();
        this.handlePondConversion();
        this.localAutosave();

        // Special place callbacks
        this.oneSecondCallbackCollection.fire();
    };

    Game.prototype.resetHotkeys = function () {
        this.hotkeys = {};
    };

    Game.prototype.resetResourcesCallbacks = function () {
        // Reset status bar resources callbacks
        this.candies.getCallbackCollection().reset();
        this.lollipops.getCallbackCollection().reset();

        // Reset other resources callbacks
        this.candiesEaten.getCallbackCollection().reset();
        this.candiesThrown.getCallbackCollection().reset();

        // Reset interval callbacks
        this.oneSecondCallbackCollection.reset();
        this.questCallbackCollection.reset();
    };

    Game.prototype.saveCurrentMapPlace = function () {
        if (this.savedPlace == null)
            this.savedPlace = this.place;
    };

    Game.prototype.setDefaultLocalAutosaveTime = function () {
        this.localAutosaveTime = 600;
    };

    Game.prototype.setPlaceFromSavedMapPlace = function () {
        if (this.savedPlace != null) {
            this.setPlace(this.savedPlace);
            this.savedPlace = null;
        }
    };
    return Game;
})();
///<reference path="Quest.ts"/>
var GiantNougatMonsterQuest = (function (_super) {
    __extends(GiantNougatMonsterQuest, _super);
    // Constructor
    function GiantNougatMonsterQuest(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(100, 20);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 19));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the walls
        this.addWalls();

        // Add the monster
        this.addMonster();

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You attack the giant nougat monster. It seems to be asleep."));
    }
    // Public methods
    GiantNougatMonsterQuest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    GiantNougatMonsterQuest.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You killed the giant nougat monster and gained access to the tower!"));
            Saving.saveBool("castleKilledNougatMonster", true);
        } else
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed."));

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    GiantNougatMonsterQuest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    GiantNougatMonsterQuest.prototype.addMonster = function () {
        this.giantNougatMonster = new GiantNougatMonster(this, new Pos(78, 16));
        this.giantNougatMonster.setHealthBar(new QuestEntityHealthBar(this.giantNougatMonster, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.giantNougatMonster);
    };

    GiantNougatMonsterQuest.prototype.addWalls = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(-20, 20));

        // Add the boxes
        wall.addBox(new Pos(0, 0), new Pos(140, 1));

        // Add the wall entity
        this.addEntity(wall);
    };

    GiantNougatMonsterQuest.prototype.thePlayerWon = function () {
        if (this.giantNougatMonster.shouldDie())
            return true;

        return false;
    };
    return GiantNougatMonsterQuest;
})(Quest);
var GiantNougatMonsterStep;
(function (GiantNougatMonsterStep) {
    GiantNougatMonsterStep[GiantNougatMonsterStep["ASLEEP"] = 0] = "ASLEEP";
    GiantNougatMonsterStep[GiantNougatMonsterStep["AWAKE"] = 1] = "AWAKE";
    GiantNougatMonsterStep[GiantNougatMonsterStep["ANGRY"] = 2] = "ANGRY";
})(GiantNougatMonsterStep || (GiantNougatMonsterStep = {}));
///<reference path="QuestEntity.ts"/>
var GiantNougatMonster = (function (_super) {
    __extends(GiantNougatMonster, _super);
    // Constructor
    function GiantNougatMonster(quest, pos) {
        _super.call(this, quest, pos, new Naming("The giant nougat monster", "the giant nougat monster"), new RenderArea(15, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(1, 0), new Pos(12, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(15, 2)), new CollisionBox(this, new Pos(1, 3), new Pos(12, 1))), new QuestEntityMovement());

        // Set the default step
        this.step = GiantNougatMonsterStep.ASLEEP;

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(2000);
        this.setHp(2000);

        // Set the ascii art and the transparent character
        this.reDrawAscii();
        this.setTransparency(new RenderTransparency(" ", "%"));
    }
    // update()
    GiantNougatMonster.prototype.update = function () {
        switch (this.step) {
            case GiantNougatMonsterStep.ASLEEP:
                if (this.getHp() < 1577) {
                    // We go to awake mode
                    this.step = GiantNougatMonsterStep.AWAKE;
                    this.reDrawAscii();
                    this.addWeapon();
                }
                break;
            case GiantNougatMonsterStep.AWAKE:
                if (this.getHp() < 500) {
                    // We go to angry mode
                    this.step = GiantNougatMonsterStep.ANGRY;
                    this.reDrawAscii();
                }

                // Go towards the player (speed : 1)
                this.goTowards(this.getGlobalPosition().plus(new Pos(6, 2)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(1, 0));
                break;
            case GiantNougatMonsterStep.ANGRY:
                // Go towards the player (speed : 3)
                this.goTowards(this.getGlobalPosition().plus(new Pos(6, 2)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(3, 0));
                break;
        }

        // Call the mother class update method
        _super.prototype.update.call(this);
    };

    // willDie()
    GiantNougatMonster.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(Random.upTo(123456)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };

    // Private methods
    GiantNougatMonster.prototype.addWeapon = function () {
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Nougat", "nougat"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(17, 6))), 3000));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(20, 40);
    };

    GiantNougatMonster.prototype.reDrawAscii = function () {
        switch (this.step) {
            case GiantNougatMonsterStep.ASLEEP:
                this.getRenderArea().drawArray(Database.getAscii("places/quests/giantNougatMonster/monster"));
                break;
            case GiantNougatMonsterStep.AWAKE:
                this.getRenderArea().drawArray(Database.getAscii("places/quests/giantNougatMonster/monsterAwake"));
                break;
            case GiantNougatMonsterStep.ANGRY:
                this.getRenderArea().drawArray(Database.getAscii("places/quests/giantNougatMonster/monsterAngry"));
                break;
        }
    };
    return GiantNougatMonster;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var GiantSpoonOfDoom = (function (_super) {
    __extends(GiantSpoonOfDoom, _super);
    // Constructor
    function GiantSpoonOfDoom() {
        _super.call(this, "eqItemWeaponGiantSpoonOfDoom", "eqItemWeaponGiantSpoonOfDoomName", "eqItemWeaponGiantSpoonOfDoomDescription", "eqItems/weapons/giantSpoonOfDoom");
    }
    // Public getters
    GiantSpoonOfDoom.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("The giant Spoon of Doom", "the giant Spoon of Doom"), player.getClassicCollisionBoxCollection(), 315);
        qew.getCloseCombatDelay().setFixedDelay(14, 0);
        return qew;
    };
    return GiantSpoonOfDoom;
})(EqItem);
///<reference path="EqItem.ts"/>
var GiantSpoon = (function (_super) {
    __extends(GiantSpoon, _super);
    // Constructor
    function GiantSpoon() {
        _super.call(this, "eqItemWeaponGiantSpoon", "eqItemWeaponGiantSpoonName", "eqItemWeaponGiantSpoonDescription", "eqItems/weapons/giantSpoon");
    }
    // Public getters
    GiantSpoon.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A giant spoon", "a giant spoon"), player.getClassicCollisionBoxCollection(), 70);
        qew.getCloseCombatDelay().setFixedDelay(7, 0);
        return qew;
    };
    return GiantSpoon;
})(EqItem);
///<reference path="Quest.ts"/>
var Hell = (function (_super) {
    __extends(Hell, _super);
    // Constructor
    function Hell(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(150, 30);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 23));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the floor
        this.addFloor(0, 20);

        // Add the lava entities
        this.addLava(new Pos(53, 27), new Pos(20, 2));
        this.addLava(new Pos(92, 27), new Pos(16, 2));

        // Add the devil
        this.addDevil(new Pos(130, 2));

        // Add Camazotz
        this.addCamazotz(new Pos(Random.between(70, 100), 2));

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter Hell."));
    }
    // Public methods
    Hell.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 0), new Pos(20, 21));
    };

    Hell.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    Hell.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to beat the devil itself!"));
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in Hell. Your soul will wander here for all eternity."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    Hell.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.drawBackground(0, 20);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    Hell.prototype.addCamazotz = function (pos) {
        var camazotz;
        camazotz = new Camazotz(this, pos);
        camazotz.setHealthBar(new QuestEntityHealthBar(camazotz, new Pos(22, 1), new Pos(0, 0)));
        this.addEntity(camazotz);
    };

    Hell.prototype.addDevil = function (pos) {
        this.devil = new Devil(this, pos, 2, 19);
        this.devil.setHealthBar(new QuestEntityHealthBar(this.devil, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.devil);
    };

    Hell.prototype.addFloor = function (x, y) {
        // Create the wall entity
        var wall = new Wall(this, new Pos(x, y));

        // Add the floor
        wall.addBox(new Pos(0, 4), new Pos(53, 6));
        wall.addBox(new Pos(73, 4), new Pos(19, 6));
        wall.addBox(new Pos(108, 4), new Pos(42, 6));
        wall.addBox(new Pos(0, 9), new Pos(150, 1));

        // Add the wall entity
        this.addEntity(wall);
    };

    Hell.prototype.addLava = function (pos, size) {
        this.addEntity(new Lava(this, pos, size));
    };

    Hell.prototype.drawBackground = function (x, y) {
        // Draw the ascii
        this.getRenderArea().drawArray(Database.getAscii("places/quests/hell/background"), this.getRealQuestPosition().x + x, this.getRealQuestPosition().y + y);

        // Add the red color for the first lava pit
        this.drawLava(x + 55, x + 71, y + 4);
        this.drawLava(x + 54, x + 72, y + 5);
        this.drawLava(x + 53, x + 73, y + 6);
        this.drawLava(x + 52, x + 74, y + 7);
        this.drawLava(x + 51, x + 75, y + 8);
        this.drawLava(x + 51, x + 75, y + 9);

        // Same thing for the second pit
        this.drawLava(x + 94, x + 106, y + 4);
        this.drawLava(x + 93, x + 107, y + 5);
        this.drawLava(x + 92, x + 108, y + 6);
        this.drawLava(x + 91, x + 109, y + 7);
        this.drawLava(x + 90, x + 110, y + 8);
        this.drawLava(x + 90, x + 110, y + 9);
    };

    Hell.prototype.drawLava = function (x1, x2, y) {
        this.getRenderArea().addBackgroundColor(this.getRealQuestPosition().x + x1, this.getRealQuestPosition().x + x2, this.getRealQuestPosition().y + y, new Color(ColorType.HELL_RED_LAVA));
    };

    Hell.prototype.thePlayerWon = function () {
        if (this.devil.shouldDie() == true)
            return true;

        // Else we return false
        return false;
    };
    return Hell;
})(Quest);
var Hotkey = (function () {
    // Constructor
    function Hotkey(keyString, callbackCollection) {
        this.pressed = false;
        // Set the key string
        this.keyString = keyString;

        switch (this.keyString) {
            case "up":
                this.key = 38;
                break;
            case "down":
                this.key = 40;
                break;
            case "left":
                this.key = 37;
                break;
            case "right":
                this.key = 39;
                break;
            case "space":
                this.key = 32;
                break;
            case "enter":
                this.key = 13;
                break;
            case "delete":
                this.key = 8;
                break;
            case "numpad0":
                this.key = 96;
                break;
            case "numpad1":
                this.key = 97;
                break;
            case "numpad2":
                this.key = 98;
                break;
            case "numpad3":
                this.key = 99;
                break;
            case "numpad4":
                this.key = 100;
                break;
            case "numpad5":
                this.key = 101;
                break;
            case "numpad6":
                this.key = 102;
                break;
            case "numpad7":
                this.key = 103;
                break;
            case "numpad8":
                this.key = 104;
                break;
            case "numpad9":
                this.key = 105;
                break;
            default:
                this.key = this.keyString.toUpperCase().charCodeAt(0);
                break;
        }

        this.callbackCollection = callbackCollection;
    }
    // Public getters
    Hotkey.prototype.getCallbackCollection = function () {
        return this.callbackCollection;
    };

    Hotkey.prototype.getKey = function () {
        return this.key;
    };

    Hotkey.prototype.getKeyString = function () {
        return this.keyString;
    };

    Hotkey.prototype.getPressed = function () {
        return this.pressed;
    };

    // Public setters
    Hotkey.prototype.setPressed = function (pressed) {
        this.pressed = pressed;
    };
    return Hotkey;
})();
///<reference path="Place.ts"/>
var InsideFortress = (function (_super) {
    __extends(InsideFortress, _super);
    // Constructor
    function InsideFortress(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        this.renderArea.resizeFromArray(Database.getAscii("places/fortress/inside"), 0, 4);
        this.update();
    }
    // getRenderArea()
    InsideFortress.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    InsideFortress.prototype.addFirstDoorButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("fortressInsideFirstDoorButton", x + 11, x + 14, y, x + 7, x + 14, y + 1, x + 3, x + 14, y + 2, x, x + 14, y + 3, x, x + 14, y + 4, x, x + 14, y + 5, x, x + 14, y + 6, x, x + 14, y + 7, x, x + 14, y + 8, x, x + 14, y + 9, x, x + 14, y + 10, x, x + 14, y + 11, x, x + 14, y + 12, x, x + 14, y + 13, x, x + 14, y + 14, x, x + 14, y + 15, x, x + 14, y + 16, x, x + 14, y + 17, x, x + 10, y + 18, x, x + 6, y + 19, x, x + 2, y + 20, x, x + 1, y + 21);

        // Add the link
        this.renderArea.addLinkCall(".fortressInsideFirstDoorButton", new CallbackCollection(this.goToFirstRoom.bind(this)));
    };

    InsideFortress.prototype.addSecondDoorButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("fortressInsideSecondDoorButton", x, x + 15, y, x, x + 15, y + 1, x, x + 15, y + 2, x, x + 15, y + 3, x, x + 15, y + 4, x, x + 15, y + 5, x, x + 15, y + 6, x, x + 15, y + 7, x, x + 15, y + 8, x, x + 15, y + 9, x, x + 15, y + 10, x, x + 15, y + 11, x, x + 15, y + 12, x, x + 15, y + 13, x, x + 15, y + 14, x, x + 15, y + 15, x, x + 15, y + 16, x, x + 15, y + 17);

        // Add the link
        this.renderArea.addLinkCall(".fortressInsideSecondDoorButton", new CallbackCollection(this.goToSecondRoom.bind(this)));
    };

    InsideFortress.prototype.addThirdDoorButton = function (x, y) {
        // Add the button
        this.renderArea.addMultipleAsciiButtons("fortressInsideThirdDoorButton", x, x + 3, y, x, x + 7, y + 1, x, x + 11, y + 2, x, x + 14, y + 3, x, x + 14, y + 4, x, x + 14, y + 5, x, x + 14, y + 6, x, x + 14, y + 7, x, x + 14, y + 8, x, x + 14, y + 9, x, x + 14, y + 10, x, x + 14, y + 11, x, x + 14, y + 12, x, x + 14, y + 13, x, x + 14, y + 14, x, x + 14, y + 15, x, x + 14, y + 16, x, x + 14, y + 17, x + 4, x + 14, y + 18, x + 8, x + 14, y + 19, x + 12, x + 14, y + 20, x + 13, x + 14, y + 21);

        // Add the link
        this.renderArea.addLinkCall(".fortressInsideThirdDoorButton", new CallbackCollection(this.goToThirdRoom.bind(this)));
    };

    InsideFortress.prototype.goToFirstRoom = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new FortressRoom1(this.getGame()));
    };

    InsideFortress.prototype.goToSecondRoom = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new FortressRoom2(this.getGame()));
    };

    InsideFortress.prototype.goToThirdRoom = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new FortressRoom3(this.getGame()));
    };

    InsideFortress.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "insideFortressBackToTheMapButton");

        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/fortress/inside"), 0, 3);

        // Add the text
        this.renderArea.drawString(Database.getText("fortressInsideText0"), 22, 29);
        this.renderArea.drawString(Database.getText("fortressInsideText1"), 22, 30);
        this.renderArea.drawString(Database.getText("fortressInsideText2"), 22, 31);

        // Add the translated text
        this.renderArea.drawString(Database.getTranslatedText("fortressInsideText0"), 22, 33, true);
        this.renderArea.drawString(Database.getTranslatedText("fortressInsideText1"), 22, 34, true);
        this.renderArea.drawString(Database.getTranslatedText("fortressInsideText2"), 22, 35, true);

        // Add the doors buttons
        this.addFirstDoorButton(8, 10);
        this.addSecondDoorButton(42, 8);
        this.addThirdDoorButton(78, 10);
    };
    return InsideFortress;
})(Place);
var InsideYourBoxSweet = (function () {
    // Constructor
    function InsideYourBoxSweet() {
        // Set the ascii art name
        this.asciiArt = "general/insideYourBox/" + Random.between(0, 10);

        // Set the position
        this.pos = new Pos(-Database.getAsciiWidth(this.asciiArt) + Random.between(0, 99 + Database.getAsciiWidth(this.asciiArt)), -Database.getAsciiHeight(this.asciiArt));

        // Set the speed
        this.speed = Random.between(1, 3);
    }
    // Public methods
    InsideYourBoxSweet.prototype.draw = function (renderArea) {
        // Draw the ascii art at the right position
        renderArea.drawArray(Database.getAscii(this.asciiArt), this.pos.x, this.pos.y);
    };

    InsideYourBoxSweet.prototype.update = function () {
        if (this.pos.y >= 40)
            return true;

        // Increase the speed
        this.speed += 0.3;

        // Increase the position
        this.pos.y += Math.floor(this.speed);
    };
    return InsideYourBoxSweet;
})();
///<reference path="Place.ts"/>
var InsideYourBox = (function (_super) {
    __extends(InsideYourBox, _super);
    // Constructor
    function InsideYourBox(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The sweets
        this.sweets = [];

        // Launch the interval
        this.intervalID = setInterval(this.actionInterval.bind(this), 100);

        // Resize and update
        this.renderArea.resize(100, 40);
        this.update();
    }
    // getRenderArea()
    InsideYourBox.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // willStopBeingDisplayed()
    InsideYourBox.prototype.willStopBeingDisplayed = function () {
        clearInterval(this.intervalID);
    };

    // Private methods
    InsideYourBox.prototype.actionInterval = function () {
        // Update
        this.update();
        this.getGame().updatePlace();
    };

    InsideYourBox.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Add a sweet
        this.sweets.push(new InsideYourBoxSweet());

        for (var i = 0; i < this.sweets.length; i++) {
            if (this.sweets[i].update()) {
                this.sweets.splice(i, 1);
                i--;
            }
        }

        for (var i = 0; i < this.sweets.length; i++) {
            this.sweets[i].draw(this.renderArea);
        }

        // Draw the text
        this.renderArea.drawArray(Database.getAscii("general/insideYourBox/text"), 0, 5, new RenderTransparency(" ", "%"));
    };
    return InsideYourBox;
})(Place);
///<reference path="Place.ts"/>
var Inventory = (function (_super) {
    __extends(Inventory, _super);
    // Constructor
    function Inventory(game) {
        _super.call(this, game);
        // Render area
        this.renderArea = new RenderArea();

        // Resize the area
        this.renderArea.resize(99, 136);

        // Update
        this.update();
    }
    // Public methods
    Inventory.prototype.update = function () {
        // yGap, can increase depending on the stats panel
        var yGap = 0;

        // Erase everything
        this.renderArea.resetAllButSize();

        // Draw the inventory top
        this.renderArea.drawArray(Database.getAscii("general/inventoryTop"));

        // Draw equipment
        this.drawEquipment();

        // Draw statistics
        yGap += this.drawStats(0, 52);

        // Draw the inventory bottom
        this.renderArea.drawArray(Database.getAscii("general/inventoryBottom"), 0, 55 + yGap);

        // Draw items
        this.drawGridItems(4, 57 + yGap);
    };

    // getRenderArea()
    Inventory.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    Inventory.prototype.createArrayFromEqItemsArrayForRenderAreaList = function (eqItemsArray, nothingId) {
        // Create the array
        var arr = [];

        // Add the "Nothing" item
        arr.push(nothingId);
        arr.push(Database.getText("inventorySpecialNothingEqItem") + (Database.getTranslatedText("inventorySpecialNothingEqItem") == "" ? "" : " (" + Database.getTranslatedText("inventorySpecialNothingEqItem") + ")"));

        for (var savingName in eqItemsArray) {
            if (eqItemsArray[savingName].isPossessed()) {
                arr.push(savingName);
                arr.push(Database.getText(eqItemsArray[savingName].getDatabaseName()) + (Database.getTranslatedText(eqItemsArray[savingName].getDatabaseName()) == "" ? "" : " (" + Database.getTranslatedText(eqItemsArray[savingName].getDatabaseName()) + ")"));
            }
        }

        // Return the array
        return arr;
    };

    Inventory.prototype.disableAllLists = function () {
        $("#inventoryWeaponsList").prop("disabled", true);
        $("#inventoryHatsList").prop("disabled", true);
        $("#inventoryBodyArmoursList").prop("disabled", true);
        $("#inventoryGlovesList").prop("disabled", true);
        $("#inventoryBootsList").prop("disabled", true);
    };

    Inventory.prototype.drawEqItem = function (eqItem, pos, size) {
        if (eqItem != null) {
            this.renderArea.drawArray(Database.getAscii(eqItem.getAscii()), Math.floor(pos.x + size.x / 2 - Database.getAsciiWidth(eqItem.getAscii()) / 2), Math.floor(pos.y + size.y / 2 - Database.getAsciiHeight(eqItem.getAscii()) / 2), null, eqItem.getSavingName() + "OnHover");

            // Add the tooltip
            this.renderArea.addTooltip(eqItem.getSavingName() + "Tooltip", Database.getText(eqItem.getDatabaseDescriptionName()) + (Database.getTranslatedText(eqItem.getDatabaseDescriptionName()) != "" ? "<br/><br/><i>" + Database.getTranslatedText(eqItem.getDatabaseDescriptionName()) + "</i>" : ""));

            // Add the link
            this.renderArea.addLinkOnHoverShowTooltip("." + eqItem.getSavingName() + "OnHover", "." + eqItem.getSavingName() + "Tooltip");
        }
    };

    Inventory.prototype.drawEquipment = function () {
        // Add backgrounds and lists
        var arr;

        // Weapon
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getWeapons(), "inventorySpecialNothingWeapon");
        if (arr.length > 2)
            this.renderArea.addList(8, 38, 15, "inventoryWeaponsList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);

        // Hat
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getHats(), "inventorySpecialNothingHat");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryHat"), 59, 12);
            this.renderArea.addList(61, 93, 14, "inventoryHatsList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }

        // Body armour
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getBodyArmours(), "inventorySpecialNothingBodyArmour");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryBodyArmour"), 59, 25);
            this.renderArea.addList(61, 78, 27, "inventoryBodyArmoursList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }

        // Gloves
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getGloves(), "inventorySpecialNothingGloves");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryGloves"), 82, 25);
            this.renderArea.addList(84, 93, 27, "inventoryGlovesList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }

        // Boots
        arr = this.createArrayFromEqItemsArrayForRenderAreaList(this.getGame().getBoots(), "inventorySpecialNothingBoots");
        if (arr.length > 2) {
            this.renderArea.drawArray(Database.getAscii("general/inventoryBoots"), 59, 38);
            this.renderArea.addList(61, 93, 40, "inventoryBootsList", new CallbackCollection(this.selectedEqItem.bind(this)), arr);
        }

        // Add links which will call callbacks after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightEqItems.bind(this)));
        if (this.getGame().getWeAreQuesting() == true)
            this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.disableAllLists.bind(this)));

        // Draw the eqItems
        this.drawEqItem(this.getGame().getSelectedEqItems()["weapon"], new Pos(7, 16), new Pos(32, 33));
        this.drawEqItem(this.getGame().getSelectedEqItems()["hat"], new Pos(60, 16), new Pos(34, 8));
        this.drawEqItem(this.getGame().getSelectedEqItems()["bodyArmour"], new Pos(60, 28), new Pos(19, 8));
        this.drawEqItem(this.getGame().getSelectedEqItems()["gloves"], new Pos(83, 28), new Pos(11, 8));
        this.drawEqItem(this.getGame().getSelectedEqItems()["boots"], new Pos(60, 41), new Pos(34, 8));
    };

    Inventory.prototype.drawGridItem = function (gridItem, x, y) {
        // Draw the ascii art
        this.renderArea.drawArray(Database.getAscii(gridItem.getAscii()), x + gridItem.getPosition().x * 23 + Math.floor(23 / 2 - Database.getAsciiWidth(gridItem.getAscii()) / 2), y + gridItem.getPosition().y * 12 + Math.floor(11 / 2 - Database.getAsciiHeight(gridItem.getAscii()) / 2), null, gridItem.getSavingName() + "OnHover");

        // Add the tooltip
        this.renderArea.addTooltip(gridItem.getSavingName() + "Tooltip", "<b>" + Database.getText(gridItem.getDatabaseName()) + "</b><br/>" + Database.getText(gridItem.getDatabaseDescriptionName()) + (Database.getTranslatedText(gridItem.getDatabaseDescriptionName()) != "" ? "<br/><br/><i><b>" + Database.getTranslatedText(gridItem.getDatabaseName()) + "</b><br/>" + Database.getTranslatedText(gridItem.getDatabaseDescriptionName()) + "</i>" : ""));

        // Add the link
        this.renderArea.addLinkOnHoverShowTooltip("." + gridItem.getSavingName() + "OnHover", "." + gridItem.getSavingName() + "Tooltip");
    };

    Inventory.prototype.drawGridItems = function (x, y) {
        for (var savingName in this.getGame().getGridItems()) {
            if (this.getGame().getGridItems()[savingName].isPossessed())
                this.drawGridItem(this.getGame().getGridItems()[savingName], x, y);
        }
    };

    Inventory.prototype.drawStats = function (x, y) {
        // Set the additional damage text
        var additionalDamageText;
        if (Saving.loadBool("gridItemPossessedXinopherydonClaw") && (this.getGame().getSelectedEqItems()["bodyArmour"] != null && this.getGame().getSelectedEqItems()["bodyArmour"].getSavingName() == "eqItemBodyArmoursEnchantedKnightBodyArmour"))
            additionalDamageText = "";
else if (Saving.loadBool("gridItemPossessedXinopherydonClaw"))
            additionalDamageText = " x 2";
else if ((this.getGame().getSelectedEqItems()["bodyArmour"] != null && this.getGame().getSelectedEqItems()["bodyArmour"].getSavingName() == "eqItemBodyArmoursEnchantedKnightBodyArmour"))
            additionalDamageText = " / 2";
else
            additionalDamageText = "";

        // This array will contain the special abilities
        var specialAbilities = [];

        // First line
        this.renderArea.drawString(this.getGame().getPlayer().getMaxHp().toString(), x + 16, y);
        this.renderArea.drawString(this.getGame().getPlayer().getQuestEntityWeapon().getRealDamageText() + additionalDamageText, x + 43, y);
        this.renderArea.drawString(this.getGame().getPlayer().getQuestEntityWeapon().getSpeedText(), x + 71, y);

        for (var savingName in this.getGame().getGridItems()) {
            if (this.getGame().getGridItems()[savingName].isPossessed()) {
                if (this.getGame().getGridItems()[savingName].getSpecialAbility() != null)
                    specialAbilities.push(this.getGame().getGridItems()[savingName].getSpecialAbility());
            }
        }

        if (this.getGame().getSelectedEqItems()["weapon"] != null && this.getGame().getSelectedEqItems()["weapon"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["weapon"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["hat"] != null && this.getGame().getSelectedEqItems()["hat"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["hat"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["bodyArmour"] != null && this.getGame().getSelectedEqItems()["bodyArmour"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["bodyArmour"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["gloves"] != null && this.getGame().getSelectedEqItems()["gloves"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["gloves"].getSpecialAbility());
        if (this.getGame().getSelectedEqItems()["boots"] != null && this.getGame().getSelectedEqItems()["boots"].getSpecialAbility() != null)
            specialAbilities.push(this.getGame().getSelectedEqItems()["boots"].getSpecialAbility());

        if (Saving.loadNumber("gameGiftPower") > 0) {
            specialAbilities.push("GIFT : your attacks are " + (Saving.loadNumber("gameGiftPower") * 20).toString() + "% more powerful.");
        }
        if (Saving.loadNumber("gameGiftHealth") > 0) {
            specialAbilities.push("GIFT : you have " + (Saving.loadNumber("gameGiftHealth") * 20).toString() + "% more health points.");
        }
        if (Saving.loadNumber("gameGiftMagic") > 0) {
            specialAbilities.push("GIFT : the spell and potion countdowns are reduced by " + (Saving.loadNumber("gameGiftMagic") * 15) + "%.");
        }

        if (specialAbilities.length == 0)
            specialAbilities.push("You have no special ability.");

        for (var i = 0; i < specialAbilities.length; i++) {
            if (i != 0) {
                this.renderArea.drawArray(Database.getAscii("general/specialAbilityBackground"), x, y + 2 + i);
            }

            // We draw the special ability
            this.renderArea.drawString(specialAbilities[i], x + 7, y + 2 + i);
        }

        // We return the height added by the drawing of the special abilities
        return specialAbilities.length - 1;
    };

    Inventory.prototype.selectedEqItem = function () {
        if ($("#inventoryWeaponsList").length)
            Saving.saveString("gameWeaponSelected", $("#inventoryWeaponsList").find(":selected").attr("id"));
else
            Saving.saveString("gameWeaponSelected", "inventorySpecialNothingWeapon");

        if ($("#inventoryHatsList").length)
            Saving.saveString("gameHatSelected", $("#inventoryHatsList").find(":selected").attr("id"));
else
            Saving.saveString("gameHatSelected", "inventorySpecialNothingHat");

        if ($("#inventoryBodyArmoursList").length)
            Saving.saveString("gameBodyArmourSelected", $("#inventoryBodyArmoursList").find(":selected").attr("id"));
else
            Saving.saveString("gameBodyArmourSelected", "inventorySpecialNothingBodyArmour");

        if ($("#inventoryGlovesList").length)
            Saving.saveString("gameGlovesSelected", $("#inventoryGlovesList").find(":selected").attr("id"));
else
            Saving.saveString("gameGlovesSelected", "inventorySpecialNothingGloves");

        if ($("#inventoryBootsList").length)
            Saving.saveString("gameBootsSelected", $("#inventoryBootsList").find(":selected").attr("id"));
else
            Saving.saveString("gameBootsSelected", "inventorySpecialNothingBoots");

        // Fill the selected eqItems array
        this.getGame().emptyAndFillSelectedEqItemsArray();

        // Re calculate the player max hp, because it may have changed
        this.getGame().getPlayer().reCalcMaxHp();

        // Update inventory
        this.update();
        this.getGame().updatePlace();
    };

    Inventory.prototype.selectRightEqItems = function () {
        // We select the right eqItems
        $("#" + Saving.loadString("gameWeaponSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameHatSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameBodyArmourSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameGlovesSelected")).prop('selected', true);
        $("#" + Saving.loadString("gameBootsSelected")).prop('selected', true);
    };
    return Inventory;
})(Place);
///<reference path="EqItem.ts"/>
var IronAxe = (function (_super) {
    __extends(IronAxe, _super);
    // Constructor
    function IronAxe() {
        _super.call(this, "eqItemWeaponIronAxe", "eqItemWeaponIronAxeName", "eqItemWeaponIronAxeDescription", "eqItems/weapons/ironAxe");
    }
    // Public getters
    IronAxe.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("An iron axe", "an iron axe"), player.getClassicCollisionBoxCollection(), 3);
        qew.getCloseCombatDelay().setFixedDelay(3, 0);
        return qew;
    };
    return IronAxe;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var JellyFish = (function (_super) {
    __extends(JellyFish, _super);
    // Constructor
    function JellyFish(quest, pos) {
        _super.call(this, quest, pos, new Naming("A jellyfish", "a jellyfish"), new RenderArea(6, 5), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(6, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(4, 1)), new CollisionBox(this, new Pos(1, 4), new Pos(4, 1))), new QuestEntityMovement(new Pos(-1, 0)));

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(42);
        this.setHp(42);

        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/jellyFish"));

        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Poisoned tentacles", "poisoned tentacles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 7))), 2));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
    }
    // Public methods
    JellyFish.prototype.update = function () {
        // We follow the player
        this.goTowards(this.getRenderAreaCenter(), this.getQuest().getGame().getPlayer().getRenderAreaCenter(), 3);

        // We call the mother update method
        _super.prototype.update.call(this);
    };

    // willDie()
    JellyFish.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(120), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return JellyFish;
})(QuestEntity);
var Keyboard;
(function (Keyboard) {
    // The game
    var game;

    function setGame(gameGiven) {
        game = gameGiven;
    }
    Keyboard.setGame = setGame;

    function execute() {
        // Handle keydown events
        $(document).keydown(function (event) {
            // Can we use hotkeys ?
            var canUseHotkeys = getCanUseHotkeys();

            for (var keyString in game.getHotkeys()) {
                if (event.which == game.getHotkeys()[keyString].getKey()) {
                    game.getHotkeys()[keyString].setPressed(true);
                    if (canUseHotkeys) {
                        if (game.getHotkeys()[keyString].getCallbackCollection() != null)
                            game.getHotkeys()[keyString].getCallbackCollection().fire();
                        event.preventDefault();
                        return false;
                    }
                }
            }

            if (canUseHotkeys) {
                for (var i = 0; i < game.getSpecialHotkeys().length; i++) {
                    if (event.which == game.getSpecialHotkeys()[i].getKey()) {
                        if (game.getSpecialHotkeys()[i].getCallbackCollection() != null)
                            game.getSpecialHotkeys()[i].getCallbackCollection().fire();
                        event.preventDefault();
                        return false;
                    }
                }
            }
        });

        // Handle keyup events
        $(document).keyup(function (event) {
            for (var keyString in game.getHotkeys()) {
                if (event.which == game.getHotkeys()[keyString].getKey()) {
                    game.getHotkeys()[keyString].setPressed(false);
                }
            }
        });
    }
    Keyboard.execute = execute;

    function getCanUseHotkeys() {
        if ($(':focus').hasClass("noHotkeys"))
            return false;
        return true;
    }

    function isKeyPressed(keyString) {
        return game.getHotkeys()[keyString].getPressed();
    }
    Keyboard.isKeyPressed = isKeyPressed;
})(Keyboard || (Keyboard = {}));
///<reference path="EqItem.ts"/>
var KnightBodyArmour = (function (_super) {
    __extends(KnightBodyArmour, _super);
    // Constructor
    function KnightBodyArmour() {
        _super.call(this, "eqItemBodyArmoursKnightBodyArmour", "eqItemBodyArmoursKnightBodyArmourName", "eqItemBodyArmoursKnightBodyArmourDescription", "eqItems/bodyArmours/knightBodyArmour");
    }
    // Special ability
    KnightBodyArmour.prototype.getSpecialAbility = function () {
        return "Damage taken reduced by 30% (knight body armour)";
    };

    // inflictDamage()
    KnightBodyArmour.prototype.inflictDamage = function (player, quest, damage, reason) {
        return Math.ceil(damage - damage * 30 / 100);
    };
    return KnightBodyArmour;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var Knight = (function (_super) {
    __extends(Knight, _super);
    // Constructor
    function Knight(quest, pos) {
        _super.call(this, quest, pos, new Naming("A knight", "a knight"), new RenderArea(15, 6), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(3, 1), new Pos(1, 1)), new CollisionBox(this, new Pos(6, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(9, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(13, 1)), new CollisionBox(this, new Pos(3, 4), new Pos(9, 1)), new CollisionBox(this, new Pos(4, 5), new Pos(2, 1)), new CollisionBox(this, new Pos(9, 5), new Pos(2, 1))), new QuestEntityMovement(new Pos(0, 0)));

        // Default movement related variables values
        this.moving = false;
        this.currentAsciiNumber = 1;

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(150);
        this.setHp(150);

        // Set the ascii art and the transparent character
        this.reDrawAscii();
        this.setTransparency(new RenderTransparency(" ", "%"));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A sword", "a sword"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(17, 7))), 70));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(8);
    }
    // update()
    Knight.prototype.update = function () {
        if (this.moving == false) {
            if (this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(-3, 0)))) {
                this.moving = true;
                this.getQuestEntityMovement().setOffset(new Pos(-3, 0));
            }
        } else {
            if (this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(-3, 0))) == false) {
                this.moving = false;
                this.getQuestEntityMovement().setOffset(new Pos(0, 0));
                this.currentAsciiNumber = 1;
                this.reDrawAscii();
            } else {
                // Change the currentAsciiNumber
                this.currentAsciiNumber += 1;
                if (this.currentAsciiNumber > 5)
                    this.currentAsciiNumber = 1;
                this.reDrawAscii();
            }
        }

        // Call the mother class update
        _super.prototype.update.call(this);
    };

    // willDie()
    Knight.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(800 + Random.upTo(15) * 100), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        if (Random.oneChanceOutOf(5))
            this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemBodyArmoursKnightBodyArmour", "You found a body armour on a knight", "You gain a knight body armour"));
    };

    // Private methods
    Knight.prototype.reDrawAscii = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castleEntrance/knight" + this.currentAsciiNumber.toString()));
    };
    return Knight;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Lava = (function (_super) {
    __extends(Lava, _super);
    // Constructor
    function Lava(quest, globalPosition, size) {
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("Lava", "lava"));

        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Fire", "fire"), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), size)), 1000));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
    }
    return Lava;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var LeatherBoots = (function (_super) {
    __extends(LeatherBoots, _super);
    // Constructor
    function LeatherBoots() {
        _super.call(this, "eqItemBootsLeatherBoots", "eqItemBootsLeatherBootsName", "eqItemBootsLeatherBootsDescription", "eqItems/boots/leatherBoots");
    }
    return LeatherBoots;
})(EqItem);
///<reference path="EqItem.ts"/>
var LeatherGloves = (function (_super) {
    __extends(LeatherGloves, _super);
    // Constructor
    function LeatherGloves() {
        _super.call(this, "eqItemGlovesLeatherGloves", "eqItemGlovesLeatherGlovesName", "eqItemGlovesLeatherGlovesDescription", "eqItems/gloves/leatherGloves");
    }
    return LeatherGloves;
})(EqItem);
var LighthousePuzzlePart = (function () {
    // Constructor
    function LighthousePuzzlePart(lighthouse, type, lives, arrayPos, shown) {
        if (typeof shown === "undefined") { shown = false; }
        // Set from parameters
        this.lighthouse = lighthouse;
        this.type = type;
        this.lives = lives;
        this.arrayPos = arrayPos;
        this.shown = shown;
    }
    // Public methods
    LighthousePuzzlePart.prototype.addLives = function (howMany) {
        this.lives += howMany;
        if (this.lives > 5)
            this.lives = 5;
    };

    LighthousePuzzlePart.prototype.draw = function (renderArea, pos) {
        if (this.shown) {
            switch (this.type) {
                case LighthousePuzzlePartType.BLANK:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/blankPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_AROUND:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showAroundPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_LEFT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showLeft"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_BELOW:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showBelow"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_ABOVE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showAbove"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_RIGHT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showRight"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.SHOW_LEFT_RIGHT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/showLeftRight"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/moveBelowLineToTheRight"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.MOVE_LEFT_LINE_ABOVE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/moveLeftLineAbove"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.LIVES:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/livesPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.WHAT:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/whatPart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.NOTHING_HERE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/nothingHerePart"), pos.x, pos.y);
                    break;
                case LighthousePuzzlePartType.STONE:
                    renderArea.drawArray(Database.getAscii("places/lighthouse/puzzle/stonePart"), pos.x, pos.y);
                    break;
            }

            switch (this.type) {
                default:
                    renderArea.drawHorizontalLine("#", pos.x + 1, pos.x + 1 + this.lives, pos.y + 1);
                    break;
            }

            if (this.lives > 0) {
                for (var i = 0; i < 4; i++) {
                    renderArea.addAsciiButton(pos.x + 1, pos.x + 6, pos.y + 1 + i, "lighthousePuzzlePart" + pos.x.toString() + "_" + pos.y.toString());
                }

                // The link
                renderArea.addLinkCall(".lighthousePuzzlePart" + pos.x.toString() + "_" + pos.y.toString(), new CallbackCollection(this.clicked.bind(this)));
            }
        }
    };

    // Public getters
    LighthousePuzzlePart.prototype.getLives = function () {
        return this.lives;
    };

    LighthousePuzzlePart.prototype.getShown = function () {
        return this.shown;
    };

    // Public setters
    LighthousePuzzlePart.prototype.setArrayPos = function (arrayPos) {
        this.arrayPos = arrayPos;
    };

    LighthousePuzzlePart.prototype.setShown = function (shown) {
        this.shown = shown;
    };

    // Private methods
    LighthousePuzzlePart.prototype.clicked = function () {
        // Create a temporary part, used later
        var tempPart;

        switch (this.type) {
            case LighthousePuzzlePartType.SHOW_AROUND:
                if (this.arrayPos.y > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].setShown(true);
else if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].setShown(true);
else if (this.arrayPos.y < 4 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].setShown(true);
else if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_LEFT:
                if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_BELOW:
                if (this.arrayPos.y < 4 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_ABOVE:
                if (this.arrayPos.y > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].setShown(true);
                break;
            case LighthousePuzzlePartType.SHOW_RIGHT:
                if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT:
                if (this.arrayPos.y < 4) {
                    tempPart = this.lighthouse.getPuzzle().getParts()[6][this.arrayPos.y + 1];
                    for (var i = 6; i > 0; i--) {
                        this.lighthouse.getPuzzle().getParts()[i][this.arrayPos.y + 1] = this.lighthouse.getPuzzle().getParts()[i - 1][this.arrayPos.y + 1];
                        if (this.lighthouse.getPuzzle().getParts()[i][this.arrayPos.y + 1] != null)
                            this.lighthouse.getPuzzle().getParts()[i][this.arrayPos.y + 1].setArrayPos(new Pos(i, this.arrayPos.y + 1));
                    }
                    this.lighthouse.getPuzzle().getParts()[0][this.arrayPos.y + 1] = tempPart;
                    if (this.lighthouse.getPuzzle().getParts()[0][this.arrayPos.y + 1] != null)
                        this.lighthouse.getPuzzle().getParts()[0][this.arrayPos.y + 1].setArrayPos(new Pos(0, this.arrayPos.y + 1));
                }
                break;
            case LighthousePuzzlePartType.MOVE_LEFT_LINE_ABOVE:
                if (this.arrayPos.x > 0) {
                    tempPart = this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][0];
                    for (var i = 0; i <= 3; i++) {
                        this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i] = this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i + 1];
                        if (this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i] != null)
                            this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][i].setArrayPos(new Pos(this.arrayPos.x - 1, i));
                    }
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][4] = tempPart;
                    if (this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][4] != null)
                        this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][4].setArrayPos(new Pos(this.arrayPos.x - 1, 4));
                }
                break;
            case LighthousePuzzlePartType.LIVES:
                if (this.arrayPos.y > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y - 1].addLives(1);

                if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].addLives(1);

                if (this.arrayPos.y < 4 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x][this.arrayPos.y + 1].addLives(1);

                if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == true)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].addLives(1);
                break;
            case LighthousePuzzlePartType.SHOW_LEFT_RIGHT:
                if (this.arrayPos.x < 6 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x + 1][this.arrayPos.y].setShown(true);
else if (this.arrayPos.x > 0 && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y] != null && this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].getShown() == false)
                    this.lighthouse.getPuzzle().getParts()[this.arrayPos.x - 1][this.arrayPos.y].setShown(true);
                break;
            case LighthousePuzzlePartType.WHAT:
                // Change the type
                this.type = LighthousePuzzlePartType.STONE;

                if (Saving.loadBool("gridItemPossessedP") == false) {
                    // Get the stone
                    this.lighthouse.getGame().gainItem("gridItemPossessedP");

                    // Change the speech
                    this.lighthouse.setSpeechId("lighthouseFoundStone");
                } else {
                    // Change the speech
                    this.lighthouse.setSpeechId("lighthouseFoundStoneAgain");
                }
                break;
        }

        // Decrease our lives
        this.lives -= 1;

        // Update the lighthouse
        this.lighthouse.update();
        this.lighthouse.getGame().updatePlace();
    };
    return LighthousePuzzlePart;
})();
var LighthousePuzzlePartType;
(function (LighthousePuzzlePartType) {
    LighthousePuzzlePartType[LighthousePuzzlePartType["BLANK"] = 0] = "BLANK";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_AROUND"] = 1] = "SHOW_AROUND";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_LEFT"] = 2] = "SHOW_LEFT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_BELOW"] = 3] = "SHOW_BELOW";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_ABOVE"] = 4] = "SHOW_ABOVE";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_RIGHT"] = 5] = "SHOW_RIGHT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["MOVE_BELOW_LINE_TO_THE_RIGHT"] = 6] = "MOVE_BELOW_LINE_TO_THE_RIGHT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["MOVE_LEFT_LINE_ABOVE"] = 7] = "MOVE_LEFT_LINE_ABOVE";
    LighthousePuzzlePartType[LighthousePuzzlePartType["LIVES"] = 8] = "LIVES";
    LighthousePuzzlePartType[LighthousePuzzlePartType["NOTHING_HERE"] = 9] = "NOTHING_HERE";
    LighthousePuzzlePartType[LighthousePuzzlePartType["WHAT"] = 10] = "WHAT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["SHOW_LEFT_RIGHT"] = 11] = "SHOW_LEFT_RIGHT";
    LighthousePuzzlePartType[LighthousePuzzlePartType["STONE"] = 12] = "STONE";
})(LighthousePuzzlePartType || (LighthousePuzzlePartType = {}));
var LighthousePuzzle = (function () {
    // Constructor
    function LighthousePuzzle(lighthouse) {
        // Create the parts
        this.createParts(lighthouse);
    }
    // Public methods
    LighthousePuzzle.prototype.draw = function (renderArea, pos) {
        for (var i = 0; i < 7; i++) {
            for (var j = 4; j >= 0; j--) {
                if (this.parts[i][j] != null)
                    this.parts[i][j].draw(renderArea, pos.plus(new Pos(i * 7, j * 4)));
            }
        }
    };

    // Public getters
    LighthousePuzzle.prototype.getParts = function () {
        return this.parts;
    };

    // Private methods
    LighthousePuzzle.prototype.createParts = function (lighthouse) {
        this.parts = [];

        for (var i = 0; i < 7; i++) {
            this.parts[i] = [];
            for (var j = 0; j < 5; j++) {
                this.parts[i][j] = null;
            }
        }

        // Add the central part, the first shown at first
        // It will allow use to show up to three other parts around
        this.parts[3][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_AROUND, 3, new Pos(3, 2), true);

        // Add the show right, show below move below to the right and show above parts
        this.parts[3][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(3, 1), false);
        this.parts[4][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_BELOW, 1, new Pos(4, 1), false);
        this.parts[4][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT, 5, new Pos(4, 2), false);
        this.parts[3][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(3, 3), false);

        // Add the lives part
        this.parts[5][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 1, new Pos(5, 2), false);

        // Add the show below
        this.parts[4][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_BELOW, 1, new Pos(4, 3), false);

        // Add the cool path
        this.parts[3][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT_RIGHT, 2, new Pos(3, 4), false);
        this.parts[4][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(4, 4), false);
        this.parts[5][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(5, 4), false);
        this.parts[6][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(6, 4), false);

        this.parts[0][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(0, 3), false);
        this.parts[6][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(6, 2), false);
        this.parts[6][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(6, 1), false);

        // Add the lives part at the end of the cool path
        this.parts[5][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 1, new Pos(5, 1), false);

        // Add the path to the second move below line to the right
        this.parts[2][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(2, 4), false);
        this.parts[1][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(1, 4), false);
        this.parts[0][4] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.MOVE_BELOW_LINE_TO_THE_RIGHT, 0, new Pos(0, 4), false);

        // And the end (9 parts allowing us to give life to the ? ?)
        this.parts[0][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_RIGHT, 1, new Pos(0, 0), false);
        this.parts[0][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(0, 1), false);
        this.parts[0][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(0, 2), false);

        this.parts[1][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 0, new Pos(1, 0), false);
        this.parts[1][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.MOVE_LEFT_LINE_ABOVE, 0, new Pos(1, 1), false);
        this.parts[1][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(1, 2), false);

        this.parts[2][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.LIVES, 1, new Pos(2, 0), false);
        this.parts[2][1] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(2, 1), false);
        this.parts[2][2] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_ABOVE, 1, new Pos(2, 2), false);

        // Add three useless parts to fill the blanks
        this.parts[3][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(3, 0), false);
        this.parts[4][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.BLANK, 0, new Pos(4, 0), false);
        this.parts[5][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_BELOW, 1, new Pos(5, 0), false);
        this.parts[6][0] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.WHAT, 0, new Pos(6, 0), true);

        // Add some more useless parts to fill the blanks
        this.parts[1][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.BLANK, 0, new Pos(1, 3), false);
        this.parts[2][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.NOTHING_HERE, 0, new Pos(2, 3), false);
        this.parts[5][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.SHOW_LEFT, 1, new Pos(5, 3), false);
        this.parts[6][3] = new LighthousePuzzlePart(lighthouse, LighthousePuzzlePartType.BLANK, 0, new Pos(6, 3), false);
    };
    return LighthousePuzzle;
})();
///<reference path="Place.ts"/>
Saving.registerBool("lighthousePuzzleDone", false);

var Lighthouse = (function (_super) {
    __extends(Lighthouse, _super);
    // Constructor
    function Lighthouse(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Selected question id
        this.selectedQuestionId = "lighthouseQuestionWho";
        // Speech id
        this.speechId = null;
        // Show the puzzle?
        this.showPuzzle = false;
        // The puzzle
        this.puzzle = null;

        // We create the questions array
        this.createQuestionsArray();

        // We resize and update
        this.renderArea.resizeFromArray(Database.getAscii("places/lighthouse/lighthouse"), 0, 4);
        this.update();
    }
    // getRenderArea()
    Lighthouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Public methods
    Lighthouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "lighthouseBackToTheMapButton");

        // Draw the lighthouse
        this.renderArea.drawArray(Database.getAscii("places/lighthouse/lighthouse"), 0, 3);

        // Add the questions list
        this.renderArea.addList(1, 55, 7, "lighthouseQuestionsList", new CallbackCollection(this.questionSelected.bind(this)), this.questionsArray);

        // Add the ask button and the link
        this.renderArea.addAsciiRealButton(Database.getText("lighthouseAskButton"), 5, 10, "lighthouseAskButton", Database.getTranslatedText("lighthouseAskButton"));
        this.renderArea.addLinkCall(".lighthouseAskButton", new CallbackCollection(this.ask.bind(this)));

        if (this.speechId != null) {
            this.renderArea.drawSpeech(Database.getText(this.speechId), 17, 75, 99, "lighthouseSpeech", Database.getTranslatedText(this.speechId));
        }

        if (this.showPuzzle) {
            if (this.puzzle == null)
                this.puzzle = new LighthousePuzzle(this);

            // Draw it
            this.puzzle.draw(this.renderArea, new Pos(2, 12));

            // Add the reset button
            this.renderArea.addAsciiRealButton(Database.getText("lighthousePuzzleResetButton"), 2, 34, "lighthousePuzzleResetButton", Database.getTranslatedText("lighthousePuzzleResetButton"));
            this.renderArea.addLinkCall(".lighthousePuzzleResetButton", new CallbackCollection(this.resetPuzzle.bind(this)));
        }

        // Add the link which will call the selectRightQuestion method after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightQuestion.bind(this)));
    };

    // Public getters
    Lighthouse.prototype.getPuzzle = function () {
        return this.puzzle;
    };

    // Public setters
    Lighthouse.prototype.setSpeechId = function (speechId) {
        this.speechId = speechId;
    };

    // Private methods
    Lighthouse.prototype.addQuestion = function (id, text, translatedText) {
        if (typeof translatedText === "undefined") { translatedText = null; }
        this.questionsArray.push(id);

        if (translatedText == null)
            this.questionsArray.push(text);
else
            this.questionsArray.push(text + (translatedText != "" ? " (" + translatedText + ")" : ""));
    };

    Lighthouse.prototype.ask = function () {
        this.speechId = this.selectedQuestionId + "Speech";
        if (this.selectedQuestionId == "lighthouseQuestionDragon")
            this.showPuzzle = true;
else
            this.showPuzzle = false;
        this.update();
        this.getGame().updatePlace();
    };

    Lighthouse.prototype.createQuestionsArray = function () {
        // We empty the array
        this.questionsArray = [];

        // Add the first basic questions
        this.addQuestion("lighthouseQuestionWho", Database.getText("lighthouseQuestionWho"), Database.getTranslatedText("lighthouseQuestionWho"));
        this.addQuestion("lighthouseQuestionWhat", Database.getText("lighthouseQuestionWhat"), Database.getTranslatedText("lighthouseQuestionWhat"));
        this.addQuestion("lighthouseQuestionWhyEatCandies", Database.getText("lighthouseQuestionWhyEatCandies"), Database.getTranslatedText("lighthouseQuestionWhyEatCandies"));
        this.addQuestion("lighthouseQuestionCandyBox", Database.getText("lighthouseQuestionCandyBox"), Database.getTranslatedText("lighthouseQuestionCandyBox"));

        if (Saving.loadBool("dragonUnlockedCyclops")) {
            this.addQuestion("lighthouseQuestionDragon", Database.getText("lighthouseQuestionDragon"), Database.getTranslatedText("lighthouseQuestionDragon"));
        }
    };

    Lighthouse.prototype.questionSelected = function () {
        // Get the selected language id
        this.selectedQuestionId = $("#lighthouseQuestionsList").find(":selected").attr("id");

        // Update the ligthouse
        this.update();
        this.getGame().updatePlace();
    };

    Lighthouse.prototype.resetPuzzle = function () {
        // Re create the puzzle
        this.puzzle = new LighthousePuzzle(this);

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    Lighthouse.prototype.selectRightQuestion = function () {
        // We select the right question
        $("#" + this.selectedQuestionId).prop('selected', true);
    };
    return Lighthouse;
})(Place);
///<reference path="EqItem.ts"/>
var LightweightBodyArmour = (function (_super) {
    __extends(LightweightBodyArmour, _super);
    // Constructor
    function LightweightBodyArmour() {
        _super.call(this, "eqItemBodyArmoursLightweightBodyArmour", "eqItemBodyArmoursLightweightBodyArmourName", "eqItemBodyArmoursLightweightBodyArmourDescription", "eqItems/bodyArmours/lightweightBodyArmour");
    }
    // Special ability
    LightweightBodyArmour.prototype.getSpecialAbility = function () {
        return "Damage taken reduced by 15% (lightweight body armour)";
    };

    // inflictDamage()
    LightweightBodyArmour.prototype.inflictDamage = function (player, quest, damage, reason) {
        return Math.ceil(damage - damage * 15 / 100);
    };
    return LightweightBodyArmour;
})(EqItem);
var LocalSaving;
(function (LocalSaving) {
    // Public functions
    function getSlotSummaryAsString(slotId) {
        if (loadString(slotId) == null) {
            return "empty";
        } else {
            return loadString(slotId) + ", candies : " + loadString(slotId + ".gameCandiesCurrent");
        }
    }
    LocalSaving.getSlotSummaryAsString = getSlotSummaryAsString;

    function load(slotId) {
        if (loadString(slotId) == null)
            return false;

        for (var str in Saving.getAllBools()) {
            Saving.saveBool(str, this.loadBool(slotId + "." + str));
        }

        for (var str in Saving.getAllNumbers()) {
            Saving.saveNumber(str, this.loadNumber(slotId + "." + str));
        }

        for (var str in Saving.getAllStrings()) {
            Saving.saveString(str, this.loadString(slotId + "." + str));
        }

        // No error, return true
        return true;
    }
    LocalSaving.load = load;

    function save(slotId) {
        try  {
            // Set the date on the slotId localStorage item
            localStorage.setItem(slotId, getDateAsString());

            for (var str in Saving.getAllBools()) {
                localStorage.setItem(slotId + "." + str, Saving.boolToString(Saving.getAllBools()[str]));
            }

            for (var str in Saving.getAllNumbers()) {
                localStorage.setItem(slotId + "." + str, Saving.numberToString(Saving.getAllNumbers()[str]));
            }

            for (var str in Saving.getAllStrings()) {
                localStorage.setItem(slotId + "." + str, Saving.getAllStrings()[str]);
            }
        } catch (e) {
            if (e == DOMException.QUOTA_EXCEEDED_ERR) {
                console.log("Quota exceeded error : we're trying to save some data through HTML5's web storage, but we don't have enough space to save what we want.");
            }

            // We return false, since there was an error
            return false;
        }

        // No error, return true
        return true;
    }
    LocalSaving.save = save;

    function supportsLocalSaving() {
        if ('localStorage' in window && window['localStorage'] !== null && 'applicationCache' in window && window['applicationCache'] !== null)
            return true;
        return false;
    }
    LocalSaving.supportsLocalSaving = supportsLocalSaving;

    // Private functions
    function getDateAsString() {
        var currentdate = new Date();
        return (currentdate.getDate() < 10 ? "0" : "") + currentdate.getDate() + "/" + (currentdate.getMonth() + 1 < 10 ? "0" : "") + (currentdate.getMonth() + 1) + "/" + currentdate.getFullYear() + " @ " + (currentdate.getHours() < 10 ? "0" : "") + currentdate.getHours() + ":" + (currentdate.getMinutes() < 10 ? "0" : "") + currentdate.getMinutes() + ":" + (currentdate.getSeconds() < 10 ? "0" : "") + currentdate.getSeconds();
    }

    function loadBool(key) {
        return Saving.stringToBool(localStorage.getItem(key));
    }
    LocalSaving.loadBool = loadBool;

    function loadNumber(key) {
        return Saving.stringToNumber(localStorage.getItem(key));
    }
    LocalSaving.loadNumber = loadNumber;

    function loadString(key) {
        return localStorage.getItem(key);
    }
    LocalSaving.loadString = loadString;
})(LocalSaving || (LocalSaving = {}));
///<reference path="Place.ts"/>
// Buttons unlocked
Saving.registerBool("lollipopFarmPlant1LollipopButtonUnlocked", false);
Saving.registerBool("lollipopFarmPlant10LollipopsButtonUnlocked", false);
Saving.registerBool("lollipopFarmPlant100LollipopsButtonUnlocked", false);
Saving.registerBool("lollipopFarmPlant1000LollipopsButtonUnlocked", false);

// How many lollipops planted ?
Saving.registerNumber("lollipopFarmLollipopsPlanted", 0);

// The production
Saving.registerNumber("lollipopFarmTimeSinceLastProduction", 0);
Saving.registerBool("lollipopFarmIsProductionEachSecond", false);
Saving.registerNumber("lollipopFarmProduction", 0);

// The mill
Saving.registerBool("lollipopFarmConstructMillButtonUnlocked", false);
Saving.registerBool("lollipopFarmMillConstructed", false);

// The pond
Saving.registerBool("lollipopFarmDigPondButtonUnlocked", false);
Saving.registerBool("lollipopFarmPondDug", false);
Saving.registerNumber("lollipopFarmPondHowManyLolligators", 0);
Saving.registerBool("lollipopFarmPondFeedingLolligators", false);
Saving.registerNumber("lollipopFarmPondConversionRate", 0);

// The candies production
Saving.registerNumber("lollipopFarmPreviousCandiesProduction", 1);
Saving.registerNumber("lollipopFarmCurrentCandiesProduction", 1);

var LollipopFarm = (function (_super) {
    __extends(LollipopFarm, _super);
    // Constructor
    function LollipopFarm(game) {
        _super.call(this, game);
        // Render area
        this.renderArea = new RenderArea();
        // Pond lines
        this.pondLines = [];
        // Pond lolligators
        this.pondLolligators = [];

        // Resize the area
        this.renderArea.resizeFromArray(Database.getAscii("places/lollipopFarm/lollipopFarm"), 0, 12);

        // Update
        this.update();

        // Add pond lines to the pond lines array
        this.addPondLine(new PondLine(8, 37));
        this.addPondLine(new PondLine(9, 38));
        this.addPondLine(new PondLine(9, 40));
        this.addPondLine(new PondLine(8, 43));
        this.addPondLine(new PondLine(8, 46));
        this.addPondLine(new PondLine(3, 47));
        this.addPondLine(new PondLine(4, 48));
        this.addPondLine(new PondLine(9, 45));
        this.addPondLine(new PondLine(12, 44));
    }
    // Public methods
    LollipopFarm.prototype.willBeDisplayed = function () {
        // We check lollipops
        this.checkLollipops();

        // We add the lollipops callback
        this.getGame().getLollipops().getCallbackCollection().addCallback(this.checkLollipops.bind(this));

        // We add the one second callback for the pond
        this.getGame().getOneSecondCallbackCollection().addCallback(this.handlePond.bind(this));
    };

    // getRenderArea()
    LollipopFarm.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    LollipopFarm.prototype.addPondLine = function (pondLine) {
        this.pondLines.push(pondLine);
    };

    LollipopFarm.prototype.addPondLolligator = function (pondLolligator) {
        this.pondLolligators.push(pondLolligator);
    };

    LollipopFarm.prototype.beginFeedingLolligators = function () {
        // We set the bool
        Saving.saveBool("lollipopFarmPondFeedingLolligators", true);

        // We update
        this.update();
        this.getGame().updatePlace();
    };

    LollipopFarm.prototype.buyLolligator = function () {
        if (this.getGame().getCandies().getCurrent() >= 1200) {
            this.getGame().getCandies().add(-1200);

            // Update the number of lolligators
            Saving.saveNumber("lollipopFarmPondHowManyLolligators", Saving.loadNumber("lollipopFarmPondHowManyLolligators") + 1);

            // Update the conversion rate
            this.updatePondConversionRate();

            // Update the place
            this.update();
            this.getGame().updatePlace();
        }
    };

    LollipopFarm.prototype.checkLollipops = function () {
        if (Saving.loadBool("lollipopFarmPlant1LollipopButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 1) {
            Saving.saveBool("lollipopFarmPlant1LollipopButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        if (Saving.loadBool("lollipopFarmPlant10LollipopsButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 10) {
            Saving.saveBool("lollipopFarmPlant10LollipopsButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        if (Saving.loadBool("lollipopFarmPlant100LollipopsButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 100) {
            Saving.saveBool("lollipopFarmPlant100LollipopsButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
        if (Saving.loadBool("lollipopFarmPlant1000LollipopsButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 1000) {
            Saving.saveBool("lollipopFarmPlant1000LollipopsButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }

        if (Saving.loadBool("lollipopFarmConstructMillButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 10000) {
            Saving.saveBool("lollipopFarmConstructMillButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }

        if (Saving.loadBool("lollipopFarmDigPondButtonUnlocked") == false && this.getGame().getLollipops().getMax() >= 100000) {
            Saving.saveBool("lollipopFarmDigPondButtonUnlocked", true);
            this.update();
            this.getGame().updatePlace();
        }
    };

    LollipopFarm.prototype.constructMill = function () {
        if (this.getGame().getLollipops().getCurrent() >= 10000) {
            this.getGame().getLollipops().add(-10000);
            Saving.saveBool("lollipopFarmMillConstructed", true);
            this.update();
            this.getGame().updatePlace();
        }
    };

    LollipopFarm.prototype.digPond = function () {
        if (this.getGame().getLollipops().getCurrent() >= 100000) {
            this.getGame().getLollipops().add(-100000);
            Saving.saveBool("lollipopFarmPondDug", true);
            this.update();
            this.getGame().updatePlace();
        }
    };

    LollipopFarm.prototype.drawFieldStuff = function (x, y) {
        // A variable useful later
        var plantingButtonsXPos;

        // How many lollipops planted
        this.renderArea.drawString("Lollipops planted : " + Algo.numberToStringButNicely(Saving.loadNumber("lollipopFarmLollipopsPlanted")), x, y);

        if (Saving.loadBool("lollipopFarmPlant1LollipopButtonUnlocked") == true && Saving.loadBool("lollipopFarmPlant10LollipopsButtonUnlocked") == false) {
            this.renderArea.addAsciiRealButton("Plant 1 lollipop", x, y + 2, "lollipopFarmPlant1LollipopButton");
            this.renderArea.addLinkCall(".lollipopFarmPlant1LollipopButton", new CallbackCollection(this.plantLollipops.bind(this, 1)));
        } else if (Saving.loadBool("lollipopFarmPlant10LollipopsButtonUnlocked") == true) {
            // We set the x position to 0
            plantingButtonsXPos = 0;

            // We draw the first text
            this.renderArea.drawString("Plant", x, y + 2);
            plantingButtonsXPos += 6;

            // We add the button to plant 1
            this.renderArea.addAsciiRealButton("1", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant1LollipopButton");
            this.renderArea.addLinkCall(".lollipopFarmPlant1LollipopButton", new CallbackCollection(this.plantLollipops.bind(this, 1)));
            plantingButtonsXPos += 2;

            // We add the button to plant 10
            this.renderArea.addAsciiRealButton("10", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant10LollipopsButton");
            this.renderArea.addLinkCall(".lollipopFarmPlant10LollipopsButton", new CallbackCollection(this.plantLollipops.bind(this, 10)));
            plantingButtonsXPos += 3;

            if (Saving.loadBool("lollipopFarmPlant100LollipopsButtonUnlocked") == true) {
                this.renderArea.addAsciiRealButton("100", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant100LollipopsButton");
                this.renderArea.addLinkCall(".lollipopFarmPlant100LollipopsButton", new CallbackCollection(this.plantLollipops.bind(this, 100)));
                plantingButtonsXPos += 4;
            }

            if (Saving.loadBool("lollipopFarmPlant1000LollipopsButtonUnlocked") == true) {
                this.renderArea.addAsciiRealButton("1000", x + plantingButtonsXPos, y + 2, "lollipopFarmPlant1000LollipopsButton");
                this.renderArea.addLinkCall(".lollipopFarmPlant1000LollipopsButton", new CallbackCollection(this.plantLollipops.bind(this, 1000)));
                plantingButtonsXPos += 5;
            }

            // We add the final text
            this.renderArea.drawString("lollipops", x + plantingButtonsXPos, y + 2);
        }

        if (Saving.loadNumber("lollipopFarmLollipopsPlanted") > 0) {
            this.renderArea.drawString("Production : " + this.getProductionAsString(), x, y + 4);
        }
    };

    LollipopFarm.prototype.drawMillStuff = function (x, y) {
        if (Saving.loadBool("lollipopFarmConstructMillButtonUnlocked") == true && Saving.loadBool("lollipopFarmMillConstructed") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmConstructMill"), x + 30, y + 2, "lollipopFarmConstructMillButton", Database.getTranslatedText("lollipopFarmConstructMill"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmConstructMillButton", new CallbackCollection(this.constructMill.bind(this)));
        }

        if (Saving.loadBool("lollipopFarmMillConstructed") == true) {
            // Draw the mill ascii art
            this.renderArea.drawArray(Database.getAscii("places/lollipopFarm/mill"), x, y);

            // Draw the button to feed the mill
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmFeedMill") + " (" + Algo.numberToStringButNicely(this.getNumberOfLollipopsToFeedTheMill()) + " lollipops)", x + 30, y, "lollipopFarmFeedMillButton", Database.getTranslatedText("lollipopFarmFeedMill"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmFeedMillButton", new CallbackCollection(this.feedMill.bind(this)));

            if (Saving.loadNumber("lollipopFarmCurrentCandiesProduction") != 1) {
                this.renderArea.drawString(Database.getText("lollipopFarmCurrentCandiesProduction") + " : " + Saving.loadNumber("lollipopFarmCurrentCandiesProduction").toString() + " each second", x + 30, y + 3);
                this.renderArea.drawString(Database.getTranslatedText("lollipopFarmCurrentCandiesProduction"), x + 30, y + 4, true);
            }
        }
    };

    LollipopFarm.prototype.drawPondStuff = function (x, y) {
        // Y position used because some things need to be moved when the player uses a non-english language
        var yPos;

        if (Saving.loadBool("lollipopFarmDigPondButtonUnlocked") == true && Saving.loadBool("lollipopFarmPondDug") == false) {
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmDigPond"), x + 10, y + 2, "lollipopFarmDigPondButton", Database.getTranslatedText("lollipopFarmDigPond"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmDigPondButton", new CallbackCollection(this.digPond.bind(this)));
        }

        if (Saving.loadBool("lollipopFarmPondDug") == true) {
            // Init the y position
            yPos = y;

            // Draw the pond ascii art
            this.renderArea.drawArray(Database.getAscii("places/lollipopFarm/pond"), x, yPos, new RenderTransparency(" "));

            // Draw the lolligators
            yPos += 3;
            for (var i = 0; i < this.pondLolligators.length; i++) {
                this.pondLolligators[i].draw(this.renderArea, x, yPos);
            }

            // Add the button to buy a lolligator
            yPos += 13;
            this.renderArea.addAsciiRealButton(Database.getText("lollipopFarmBuyLolligator"), x, yPos, "lollipopFarmBuyLolligatorButton", Database.getTranslatedText("lollipopFarmBuyLolligator"), true, -1, null, false);
            this.renderArea.addLinkCall(".lollipopFarmBuyLolligatorButton", new CallbackCollection(this.buyLolligator.bind(this)));

            if (Database.isTranslated())
                yPos += 1;

            if (Saving.loadNumber("lollipopFarmPondHowManyLolligators") > 0) {
                // Draw how many lolligators we have (if we have at least one)
                yPos += 2;
                this.renderArea.drawString("There " + (Saving.loadNumber("lollipopFarmPondHowManyLolligators") > 1 ? "are" : "is") + " " + Algo.pluralFormat(Saving.loadNumber("lollipopFarmPondHowManyLolligators"), " lolligator", " lolligators") + " in the pond.", x, yPos);

                // Draw the checkbox to feed the lolligators
                yPos += 2;
                this.renderArea.addCheckbox(x, yPos, new CallbackCollection(this.beginFeedingLolligators.bind(this)), new CallbackCollection(this.stopFeedingLolligators.bind(this)), "lollipopFarmPondCheckbox", Saving.loadBool("lollipopFarmPondFeedingLolligators"));
                if (Saving.loadNumber("lollipopFarmPondHowManyLolligators") == 1)
                    this.renderArea.drawString("Feed it with candies", x + 3, yPos);
else
                    this.renderArea.drawString("Feed them with candies", x + 4, yPos);

                if (Saving.loadBool("lollipopFarmPondFeedingLolligators")) {
                    // Draw the conversion text
                    yPos += 2;
                    this.renderArea.drawString(Database.getText("lollipopFarmLolligatorsConversionText"), x, yPos);
                    if (Database.isTranslated()) {
                        yPos += 1;
                        this.renderArea.drawString(Database.getTranslatedText("lollipopFarmLolligatorsConversionText"), x, yPos, true);
                    }

                    // Draw the conversion rate
                    yPos += 1;
                    this.renderArea.drawString("Conversion rate : " + Saving.loadNumber("lollipopFarmPondConversionRate") + "/sec", x, yPos);
                }
            }
        }
    };

    LollipopFarm.prototype.feedMill = function () {
        if (this.getGame().getLollipops().getCurrent() >= this.getNumberOfLollipopsToFeedTheMill()) {
            // Pay the lollipops
            this.getGame().getLollipops().add(-this.getNumberOfLollipopsToFeedTheMill());

            // Increase the candies production step
            var oldCurrent = Saving.loadNumber("lollipopFarmCurrentCandiesProduction");
            Saving.saveNumber("lollipopFarmCurrentCandiesProduction", Saving.loadNumber("lollipopFarmCurrentCandiesProduction") + Saving.loadNumber("lollipopFarmPreviousCandiesProduction"));
            Saving.saveNumber("lollipopFarmPreviousCandiesProduction", oldCurrent);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    LollipopFarm.prototype.getNumberOfLollipopsToFeedTheMill = function () {
        return Math.pow(Saving.loadNumber("lollipopFarmCurrentCandiesProduction") * 120, 2);
    };

    LollipopFarm.prototype.getProductionAsString = function () {
        // We create the string
        var str;

        if (Saving.loadBool("lollipopFarmIsProductionEachSecond")) {
            str = Algo.pluralFormat(Saving.loadNumber("lollipopFarmProduction"), " lollipop", " lollipops") + " each second";
        } else {
            str = "1 lollipop every ";

            if (Saving.loadNumber("lollipopFarmProduction") >= 3600) {
                if (Math.floor(Saving.loadNumber("lollipopFarmProduction") / 3600) == 1)
                    str += "hour";
else
                    str += Math.floor(Saving.loadNumber("lollipopFarmProduction") / 3600).toString() + " hours";
            } else if (Saving.loadNumber("lollipopFarmProduction") >= 60) {
                if (Math.floor(Saving.loadNumber("lollipopFarmProduction") / 60) == 1)
                    str += "minute";
else
                    str += Math.floor(Saving.loadNumber("lollipopFarmProduction") / 60).toString() + " minutes";
            } else {
                if (Saving.loadNumber("lollipopFarmProduction") == 1)
                    str += "second";
else
                    str += Saving.loadNumber("lollipopFarmProduction").toString() + " seconds";
            }
        }

        // We return the string
        return str;
    };

    LollipopFarm.prototype.handlePond = function () {
        // Used later
        var lineIndex;

        if (Saving.loadBool("lollipopFarmPondDug") == true) {
            for (var i = 0; i < this.pondLolligators.length; i++) {
                this.pondLolligators[i].move();
            }

            for (var i = 0; i < this.pondLolligators.length; i++) {
                if (this.pondLolligators[i].shouldBeDeleted()) {
                    // Warn that it will be deleted
                    this.pondLolligators[i].willBeDeleted();

                    // Delete it
                    this.pondLolligators.splice(i, 1);

                    // Reduce i
                    i--;
                }
            }

            if (Random.oneChanceOutOf(Math.ceil(20 * (1 / Saving.loadNumber("lollipopFarmPondHowManyLolligators")))) && this.pondLolligators.length < Saving.loadNumber("lollipopFarmPondHowManyLolligators")) {
                // Choose a line
                lineIndex = Random.between(0, this.pondLines.length - 1);

                if (this.pondLines[lineIndex].getIsUsed() == false && (lineIndex == 0 || this.pondLines[lineIndex - 1].getIsUsed() == false)) {
                    // Add a lolligator here
                    this.addPondLolligator(new PondLolligator(this.pondLines, lineIndex));
                }
            }

            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };

    LollipopFarm.prototype.plantLollipops = function (howMany) {
        if (this.getGame().getLollipops().getCurrent() >= howMany) {
            this.getGame().getLollipops().add(-howMany);
            Saving.saveNumber("lollipopFarmLollipopsPlanted", Saving.loadNumber("lollipopFarmLollipopsPlanted") + howMany);
            this.getGame().calcLollipopFarmProduction();
            this.update();
            this.getGame().updatePlace();
        }
    };

    LollipopFarm.prototype.stopFeedingLolligators = function () {
        // We set the bool
        Saving.saveBool("lollipopFarmPondFeedingLolligators", false);

        // We update
        this.update();
        this.getGame().updatePlace();
    };

    LollipopFarm.prototype.update = function () {
        // Reset
        this.renderArea.resetAllButSize();

        // Draw the farm
        this.renderArea.drawArray(Database.getAscii("places/lollipopFarm/lollipopFarm"), 0, 5);

        // Draw the field stuff
        this.drawFieldStuff(1, 34);

        // Draw the mill stuff
        this.drawMillStuff(7, 0);

        // Draw the pond stuff
        this.drawPondStuff(50, 14);
    };

    LollipopFarm.prototype.updatePondConversionRate = function () {
        Saving.saveNumber("lollipopFarmPondConversionRate", Math.ceil(Saving.loadNumber("lollipopFarmPondHowManyLolligators") * 3 + Math.pow(1.3, Saving.loadNumber("lollipopFarmPondHowManyLolligators"))));
    };
    return LollipopFarm;
})(Place);
///<reference path="StatusBarResource.ts"/>
var Lollipops = (function (_super) {
    __extends(Lollipops, _super);
    // Constructor
    function Lollipops(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    Lollipops.prototype.getCurrentAsString = function (totalSize) {
        if (typeof totalSize === "undefined") { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;

        var base = "";
        var prefix = "";
        var suffix = "";

        if (n < 0)
            return "What, negative lollipops?!";
else if (n == 1)
            return "You have 1 lollipop";
else
            base = Algo.numberToStringButNicely(n);

        // How much space do we still have ?
        size = totalSize - base.length;

        if (size >= 10) {
            suffix = " lollipops";

            // We add a suffix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;

            if (size >= 9)
                prefix = "You have ";
else if (size >= 3)
                prefix = "-> ";
        } else if (size >= 3)
            suffix = " lp";

        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;

        return prefix + base + suffix;
    };
    return Lollipops;
})(StatusBarResource);
///<reference path="Place.ts"/>
Saving.registerBool("lonelyHouseOpenBoxDone", false);
Saving.registerBool("lonelyHouseShakeBoxDone", false);
Saving.registerBool("lonelyHouseBreakLockDone", false);
Saving.registerBool("lonelyHouseKickBoxDone", false);
Saving.registerBool("lonelyHouseAskTheBoxToOpenItselfDone", false);
Saving.registerBool("lonelyHouseLureTheBoxWithACandyDone", false);
Saving.registerBool("lonelyHouseTakeTheBoxDone", false);

var LonelyHouse = (function (_super) {
    __extends(LonelyHouse, _super);
    // Constructor
    function LonelyHouse(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();

        this.renderArea.resizeFromArray(Database.getAscii("places/village/fifthHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    LonelyHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    LonelyHouse.prototype.askTheBoxToOpenItself = function () {
        Saving.saveBool("lonelyHouseAskTheBoxToOpenItselfDone", true);
        this.update();
        this.getGame().updatePlace();
    };

    LonelyHouse.prototype.breakLock = function () {
        Saving.saveBool("lonelyHouseBreakLockDone", true);
        this.update();
        this.getGame().updatePlace();
    };

    LonelyHouse.prototype.kickBox = function () {
        Saving.saveBool("lonelyHouseKickBoxDone", true);
        this.update();
        this.getGame().updatePlace();
    };

    LonelyHouse.prototype.lureTheBoxWithACandy = function () {
        Saving.saveBool("lonelyHouseLureTheBoxWithACandyDone", true);
        this.update();
        this.getGame().updatePlace();
    };

    LonelyHouse.prototype.openBox = function () {
        Saving.saveBool("lonelyHouseOpenBoxDone", true);
        this.update();
        this.getGame().updatePlace();
    };

    LonelyHouse.prototype.shakeBox = function () {
        Saving.saveBool("lonelyHouseShakeBoxDone", true);
        this.update();
        this.getGame().updatePlace();
    };

    LonelyHouse.prototype.takeTheBox = function () {
        // Change the bool
        Saving.saveBool("lonelyHouseTakeTheBoxDone", true);

        // We update
        this.update();

        // Select the candy box tab
        this.getGame().getStatusBar().selectTabByType(StatusBarTabType.CANDY_BOX);

        // Go to the candy box
        this.getGame().goToCandyBox();
    };

    LonelyHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "lonelyHouseBackToTheMapButton");

        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/lonelyHouse"), 0, 3);

        if (Saving.loadBool("lonelyHouseTakeTheBoxDone") == false) {
            this.renderArea.drawArray(Database.getAscii("general/box"), 54, 9);
        }

        if (Saving.loadBool("lonelyHouseOpenBoxDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseOpenBox"), 4, 4, "lonelyHouseOpenBoxButton", Database.getTranslatedText("lonelyHouseOpenBox"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseOpenBoxButton", new CallbackCollection(this.openBox.bind(this)));
        } else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseOpenBoxResult"), 4, 4);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseOpenBoxResult"), 4, 5, true);
        }

        if (Saving.loadBool("lonelyHouseShakeBoxDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseShakeBox"), 4, 8, "lonelyHouseShakeBoxButton", Database.getTranslatedText("lonelyHouseShakeBox"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseShakeBoxButton", new CallbackCollection(this.shakeBox.bind(this)));
        } else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseShakeBoxResult"), 4, 8);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseShakeBoxResult"), 4, 9, true);
        }

        if (Saving.loadBool("lonelyHouseBreakLockDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseBreakLock"), 4, 12, "lonelyHouseBreakLockButton", Database.getTranslatedText("lonelyHouseBreakLock"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseBreakLockButton", new CallbackCollection(this.breakLock.bind(this)));
        } else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseBreakLockResult"), 4, 12);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseBreakLockResult"), 4, 13, true);
        }

        if (Saving.loadBool("lonelyHouseKickBoxDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseKickBox"), 4, 16, "lonelyHouseKickBoxButton", Database.getTranslatedText("lonelyHouseKickBox"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseKickBoxButton", new CallbackCollection(this.kickBox.bind(this)));
        } else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseKickBoxResult"), 4, 16);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseKickBoxResult"), 4, 17, true);
        }

        if (Saving.loadBool("lonelyHouseAskTheBoxToOpenItselfDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseAskTheBoxToOpenItself"), 4, 20, "lonelyHouseAskTheBoxToOpenItselfButton", Database.getTranslatedText("lonelyHouseAskTheBoxToOpenItself"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseAskTheBoxToOpenItselfButton", new CallbackCollection(this.askTheBoxToOpenItself.bind(this)));
        } else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseAskTheBoxToOpenItselfResult"), 4, 20);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseAskTheBoxToOpenItselfResult"), 4, 21, true);
        }

        if (Saving.loadBool("lonelyHouseLureTheBoxWithACandyDone") == false) {
            this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseLureTheBoxWithACandy"), 4, 24, "lonelyHouseLureTheBoxWithACandyButton", Database.getTranslatedText("lonelyHouseLureTheBoxWithACandy"), true, -1, null, false);
            this.getRenderArea().addLinkCall(".lonelyHouseLureTheBoxWithACandyButton", new CallbackCollection(this.lureTheBoxWithACandy.bind(this)));
        } else {
            this.getRenderArea().drawString(Database.getText("lonelyHouseLureTheBoxWithACandyResult"), 4, 24);
            this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseLureTheBoxWithACandyResult"), 4, 25, true);
        }

        if (Saving.loadBool("lonelyHouseOpenBoxDone") && Saving.loadBool("lonelyHouseShakeBoxDone") && Saving.loadBool("lonelyHouseBreakLockDone") && Saving.loadBool("lonelyHouseKickBoxDone") && Saving.loadBool("lonelyHouseAskTheBoxToOpenItselfDone") && Saving.loadBool("lonelyHouseLureTheBoxWithACandyDone")) {
            if (Saving.loadBool("lonelyHouseTakeTheBoxDone") == false) {
                this.getRenderArea().addAsciiRealButton(Database.getText("lonelyHouseTakeTheBox"), 6, 35, "lonelyHouseTakeTheBoxButton", Database.getTranslatedText("lonelyHouseTakeTheBox"), true, -1, null, false);
                this.getRenderArea().addLinkCall(".lonelyHouseTakeTheBoxButton", new CallbackCollection(this.takeTheBox.bind(this)));
            } else {
                this.getRenderArea().drawString(Database.getText("lonelyHouseTakeTheBoxResult"), 6, 35);
                this.getRenderArea().drawString(Database.getTranslatedText("lonelyHouseTakeTheBoxResult"), 6, 36, true);
            }
        }
    };
    return LonelyHouse;
})(Place);
///<reference path="QuestEntity.ts"/>
var LostTribeWarrior = (function (_super) {
    __extends(LostTribeWarrior, _super);
    // Constructor
    function LostTribeWarrior(quest, pos, watchedAreaPosition, watchedAreaPosition2) {
        _super.call(this, quest, pos, new Naming("A lost tribe warrior", "a lost tribe warrior"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(4, 3))), new QuestEntityMovement());

        // Create the watched area
        this.watchedAreaPosition = watchedAreaPosition;
        this.watchedAreaPosition2 = watchedAreaPosition2;

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(200);
        this.setHp(200);

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theHole/lostTribeWarrior"));
        this.setTransparency(new RenderTransparency(" "));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A tribal spear", "a tribal spear"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(6, 6))), 80));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(1, 2);
    }
    // update()
    LostTribeWarrior.prototype.update = function () {
        _super.prototype.update.call(this);

        if (this.playerInsideWatchedArea()) {
            // We go towards the player
            this.goTowards(this.getRenderAreaCenter(), this.getQuest().getGame().getPlayer().getRenderAreaCenter());
        } else {
            // We heal ourselves
            this.heal(1);
        }
    };

    // willDie()
    LostTribeWarrior.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(3000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));

        // The tribal spear
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponTribalSpear", "You found a tribal spear.", "You gain a tribal spear."));
    };

    // Private methods
    LostTribeWarrior.prototype.playerInsideWatchedArea = function () {
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.watchedAreaPosition.x)
            return false;

        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x > this.watchedAreaPosition2.x)
            return false;

        if (this.getQuest().getGame().getPlayer().getGlobalPosition().y < this.watchedAreaPosition.y)
            return false;

        if (this.getQuest().getGame().getPlayer().getGlobalPosition().y > this.watchedAreaPosition2.y)
            return false;

        // Else, the player is inside : return true
        return true;
    };
    return LostTribeWarrior;
})(QuestEntity);
var MainLoadingType;
(function (MainLoadingType) {
    MainLoadingType[MainLoadingType["NONE"] = 0] = "NONE";
    MainLoadingType[MainLoadingType["LOCAL"] = 1] = "LOCAL";
    MainLoadingType[MainLoadingType["FILE"] = 2] = "FILE";
})(MainLoadingType || (MainLoadingType = {}));
///<reference path="Place.ts"/>
// The default scroll
Saving.registerNumber("mainMapDefaultScroll", 400);

// Various steps
Saving.registerBool("mainMapDoneDesert", false);
Saving.registerBool("mainMapDoneBridge", false);
Saving.registerBool("mainMapDoneCaveEntrance", false);
Saving.registerBool("mainMapDonePier", false);
Saving.registerBool("mainMapDoneForest", false);
Saving.registerBool("mainMapDoneCastleEntrance", false);

var MainMap = (function (_super) {
    __extends(MainMap, _super);
    // Constructor
    function MainMap(game) {
        _super.call(this, game);
        this.renderArea = new RenderArea();
        this.load();
    }
    // willStopBeingDisplayed()
    MainMap.prototype.willStopBeingDisplayed = function () {
        Saving.saveNumber("mainMapDefaultScroll", this.getGame().getMainContentLocation().getScroll());
    };

    // Public getters
    MainMap.prototype.getDefaultScroll = function () {
        return Saving.loadNumber("mainMapDefaultScroll");
    };

    MainMap.prototype.getScrolling = function () {
        return true;
    };

    MainMap.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    MainMap.prototype.load = function () {
        // We erase the map
        this.renderArea.resetAllButSize();

        // We load the map itself
        this.renderArea.resizeFromArray(Database.getAscii("maps/map"));
        this.renderArea.drawArray(Database.getAscii("maps/map"));

        // We add various locations
        this.loadATree(143, 26);
        if (Saving.loadBool("gridItemPossessedFortressKey"))
            this.loadFortress(117, 39);
        this.loadTheDesert(114, 42);
        this.loadVillage(150, 36);
        this.loadLonelyHouse(159, 23);
        if (Saving.loadBool("TheCavePattern_TreasureMapSawMap") == true && Saving.loadBool("TheCavePattern_TreasureMapFoundTreasure") == false)
            this.loadTreasure(163, 29);
        if (Saving.loadBool("mainMapDoneDesert")) {
            this.loadFarm(115, 57);
            this.loadBridge(99, 61);
            this.loadCaveEntrance(52, 57);
            this.loadWishingWell(55, 66);
            if (Saving.loadBool("gridItemPossessedPogoStick") == false)
                this.loadMoutains(71, 52);
        }
        if (Saving.loadBool("mainMapDoneBridge"))
            this.loadSorceressHut(95, 68);
        if (Saving.loadBool("mainMapDoneCaveEntrance")) {
            this.loadPier(44, 33);
            this.loadForest(58, 30);
        }
        if (Saving.loadBool("mainMapDonePier")) {
            this.loadLighthouse(38, 16);
        }
        if (Saving.loadBool("mainMapDoneForest")) {
            this.loadCastleEntrance(88, 25);
            this.loadTheHole(126, 25);
        }
        if (Saving.loadBool("mainMapDoneCastleEntrance")) {
            this.loadCastle(87, 17);
        }
        if (Saving.loadBool("dragonDone")) {
            this.loadDragon(92, 11);
        }
    };

    // Private "go to" methods
    MainMap.prototype.goToATree = function () {
        this.getGame().setPlace(new ATree(this.getGame()));
    };

    MainMap.prototype.goToBridge = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new Bridge(this.getGame()));
    };

    MainMap.prototype.goToCastle = function () {
        this.getGame().goToCastle();
    };

    MainMap.prototype.goToDragon = function () {
        this.getGame().setPlace(new Dragon(this.getGame()));
    };

    MainMap.prototype.goToFarm = function () {
        Saving.saveBool("statusBarUnlockedLollipopFarm", true);
        this.getGame().updateStatusBar(true);
        this.getGame().getStatusBar().selectTabByType(StatusBarTabType.FARM);
        this.getGame().goToLollipopFarm();
    };

    MainMap.prototype.goToForest = function () {
        this.getGame().setPlace(new Forest(this.getGame()));
    };

    MainMap.prototype.goToFortress = function () {
        this.getGame().goToInsideFortress();
    };

    MainMap.prototype.goToLighthouse = function () {
        this.getGame().goToLighthouse();
    };

    MainMap.prototype.goToLonelyHouse = function () {
        this.getGame().setPlace(new LonelyHouse(this.getGame()));
    };

    MainMap.prototype.goToMoutains = function () {
        this.getGame().setPlace(new Moutains(this.getGame()));
    };

    MainMap.prototype.goToPier = function () {
        this.getGame().setPlace(new Pier(this.getGame()));
    };

    MainMap.prototype.goToSorceressHut = function () {
        this.getGame().goToSorceressHut();
    };

    MainMap.prototype.goToTheCave = function () {
        this.getGame().goToTheCave();
    };

    MainMap.prototype.goToTheDesert = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new Desert(this.getGame()));
    };

    MainMap.prototype.goToTheHole = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new OutsideTheHole(this.getGame()));
    };

    MainMap.prototype.goToTreasure = function () {
        this.getGame().setPlace(new Treasure(this.getGame()));
    };

    MainMap.prototype.goToWishingWell = function () {
        this.getGame().setPlace(new WishingWell(this.getGame()));
    };

    // Private "load" methods
    MainMap.prototype.loadATree = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapATreeButton", x + 2, x + 5, y, x + 1, x + 6, y + 1, x, x + 7, y + 2, x + 2, x + 5, y + 3, x + 2, x + 5, y + 4);

        // Comments
        this.renderArea.addFullComment(x - 2, y + 3, Database.getText("mapATreeComment"), Database.getTranslatedText("mapATreeComment"), "mapATreeComment");

        // Interactions
        this.renderArea.addLinkOver(".mapATreeButton, .mapATreeComment", ".mapATreeComment");
        this.renderArea.addLinkCall(".mapATreeButton, .mapATreeComment", new CallbackCollection(this.goToATree.bind(this)));
    };

    MainMap.prototype.loadBridge = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapBridgeButton", x, x + 3, y, x, x + 3, y + 1, x, x + 3, y + 2, x, x + 3, y + 3, x, x + 3, y + 4, x, x + 3, y + 5);

        // Comments
        this.renderArea.addFullComment(x + 2, y + 2, Database.getText("mapBridgeComment"), Database.getTranslatedText("mapBridgeComment"), "mapBridgeComment");

        // Interactions
        this.renderArea.addLinkOver(".mapBridgeButton, .mapBridgeComment", ".mapBridgeComment");
        this.renderArea.addLinkCall(".mapBridgeButton, .mapBridgeComment", new CallbackCollection(this.goToBridge.bind(this)));
    };

    MainMap.prototype.loadCastle = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapCastleButton", x + 2, x + 4, y, x + 17, x + 19, y, x + 1, x + 3, y + 1, x + 16, x + 18, y + 1, x, x + 4, y + 2, x + 15, x + 19, y + 2, x, x + 4, y + 3, x + 15, x + 19, y + 3, x, x + 19, y + 4, x, x + 19, y + 5, x, x + 19, y + 6);

        // Comments
        this.renderArea.addFullComment(x + 25, y + 4, Database.getText("mapCastleComment"), Database.getTranslatedText("mapCastleComment"), "mapCastleComment");

        // Interactions
        this.renderArea.addLinkOver(".mapCastleButton, .mapCastleComment", ".mapCastleComment");
        this.renderArea.addLinkCall(".mapCastleButton, .mapCastleComment", new CallbackCollection(this.goToCastle.bind(this)));
    };

    MainMap.prototype.loadCastleEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapCastleEntranceButton", x + 6, x + 11, y, x + 6, x + 11, y + 1, x, x + 17, y + 2, x, x + 17, y + 3);

        // Comments
        this.renderArea.addFullComment(x + 9, y + 4, Database.getText("mapCastleEntranceComment"), Database.getTranslatedText("mapCastleEntranceComment"), "mapCastleEntranceComment");

        // Interactions
        this.renderArea.addLinkOver(".mapCastleEntranceButton, .mapCastleEntranceComment", ".mapCastleEntranceComment");
        this.renderArea.addLinkCall(".mapCastleEntranceButton, .mapCastleEntranceComment", new CallbackCollection(this.getGame().goToCastleEntrance.bind(this.getGame())));
    };

    MainMap.prototype.loadCaveEntrance = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapCaveEntranceButton", x, x + 5, y);

        // Comments
        this.renderArea.addFullComment(x + 3, y + 1, Database.getText("mapCaveEntranceComment"), Database.getTranslatedText("mapCaveEntranceComment"), "mapCaveEntranceComment");

        // Interactions
        this.renderArea.addLinkOver(".mapCaveEntranceButton, .mapCaveEntranceComment", ".mapCaveEntranceComment");
        this.renderArea.addLinkCall(".mapCaveEntranceButton, .mapCaveEntranceComment", new CallbackCollection(this.goToTheCave.bind(this)));
    };

    MainMap.prototype.loadDragon = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapDragonButton", x + 5, x + 10, y, x + 4, x + 10, y + 1, x + 3, x + 7, y + 2, x + 2, x + 7, y + 3, x + 2, x + 7, y + 4, x + 1, x + 8, y + 5, x + 1, x + 8, y + 6, x + 1, x + 8, y + 7, x, x + 9, y + 8, x, x + 9, y + 9);

        // Comments
        this.renderArea.addFullComment(x + 5, y - 2, Database.getText("mapDragonComment"), Database.getTranslatedText("mapDragonComment"), "mapDragonComment");

        // Interactions
        this.renderArea.addLinkOver(".mapDragonButton, .mapDragonComment", ".mapDragonComment");
        this.renderArea.addLinkCall(".mapDragonButton, .mapDragonComment", new CallbackCollection(this.goToDragon.bind(this)));
    };

    MainMap.prototype.loadFarm = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapFarmButton", x + 5, x + 15, y, x + 5, x + 15, y + 1, x + 6, x + 16, y + 2, x + 6, x + 16, y + 3, x, x + 16, y + 3, x, x + 16, y + 4, x, x + 16, y + 5, x, x + 16, y + 6, x, x + 16, y + 7, x, x + 16, y + 8, x, x + 16, y + 9, x + 6, x + 16, y + 10);

        // Comments
        this.renderArea.addFullComment(x + 16, y + 5, Database.getText("mapFarmComment"), Database.getTranslatedText("mapFarmComment"), "mapFarmComment");

        // Interactions
        this.renderArea.addLinkOver(".mapFarmButton, .mapFarmComment", ".mapFarmComment");
        this.renderArea.addLinkCall(".mapFarmButton, .mapFarmComment", new CallbackCollection(this.goToFarm.bind(this)));
    };

    MainMap.prototype.loadForest = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapForestButton", x + 9, x + 11, y, x + 3, x + 12, y + 1, x + 2, x + 25, y + 2, x + 3, x + 43, y + 3, x + 1, x + 44, y + 4, x + 54, x + 56, y + 4, x, x + 47, y + 5, x + 53, x + 57, y + 5, x + 1, x + 56, y + 6, x + 2, x + 53, y + 7, x + 3, x + 52, y + 8, x + 7, x + 49, y + 9, x + 8, x + 48, y + 10, x + 17, x + 46, y + 11, x + 16, x + 45, y + 12, x + 17, x + 34, y + 13, x + 21, x + 35, y + 14, x + 23, x + 34, y + 15, x + 24, x + 25, y + 16);

        // Comments
        this.renderArea.addFullComment(x + 25, y + 7, Database.getText("mapForestComment"), Database.getTranslatedText("mapForestComment"), "mapForestComment");

        // Interactions
        this.renderArea.addLinkOver(".mapForestButton, .mapForestComment", ".mapForestComment");
        this.renderArea.addLinkCall(".mapForestButton, .mapForestComment", new CallbackCollection(this.goToForest.bind(this)));
    };

    MainMap.prototype.loadFortress = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapFortressButton", x + 1, x + 3, y, x + 10, x + 12, y, x, x + 4, y + 1, x + 9, x + 13, y + 1, x, x + 13, y + 2, x, x + 13, y + 3, x, x + 13, y + 4);

        // Comments
        this.renderArea.addFullComment(x + 7, y + 2, Database.getText("mapFortressComment"), Database.getTranslatedText("mapFortressComment"), "mapFortressComment");

        // Interactions
        this.renderArea.addLinkOver(".mapFortressButton, .mapFortressComment", ".mapFortressComment");
        this.renderArea.addLinkCall(".mapFortressButton, .mapFortressComment", new CallbackCollection(this.goToFortress.bind(this)));
    };

    MainMap.prototype.loadLighthouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapLighthouseButton", x + 1, x + 4, y, x, x + 5, y + 1, x, x + 5, y + 2, x, x + 5, y + 3, x, x + 5, y + 4, x, x + 5, y + 5, x, x + 5, y + 6, x, x + 5, y + 7, x, x + 5, y + 8, x, x + 5, y + 9);

        // Comments
        this.renderArea.addFullComment(x + 2, y + 3, Database.getText("mapLighthouseComment"), Database.getTranslatedText("mapLighthouseComment"), "mapLighthouseComment");

        // Interactions
        this.renderArea.addLinkOver(".mapLighthouseButton, .mapLighthouseComment", ".mapLighthouseComment");
        this.renderArea.addLinkCall(".mapLighthouseButton, .mapLighthouseComment", new CallbackCollection(this.goToLighthouse.bind(this)));
    };

    MainMap.prototype.loadLonelyHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapLonelyHouseButton", x, x + 3, y, x, x + 3, y + 1);

        // Comments
        this.renderArea.addFullComment(x + 1, y - 3, Database.getText("mapLonelyHouseComment"), Database.getTranslatedText("mapLonelyHouseComment"), "mapLonelyHouseComment");

        // Interactions
        this.renderArea.addLinkOver(".mapLonelyHouseButton, .mapLonelyHouseComment", ".mapLonelyHouseComment");
        this.renderArea.addLinkCall(".mapLonelyHouseButton, .mapLonelyHouseComment", new CallbackCollection(this.goToLonelyHouse.bind(this)));
    };

    MainMap.prototype.loadMoutains = function (x, y) {
        // The "*" show that there's a pogo stick here
        this.renderArea.drawString("*", 71, 52);

        // Button
        this.renderArea.addMultipleAsciiButtons("mapMoutainsButton", x, x + 1, y);

        // Interactions
        this.renderArea.addLinkOver(".mapMoutainsButton, .mapMoutainsComment", ".mapMoutainsComment");
        this.renderArea.addLinkCall(".mapMoutainsButton, .mapMoutainsComment", new CallbackCollection(this.goToMoutains.bind(this)));
    };

    MainMap.prototype.loadPier = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapPierButton", x + 1, x + 3, y, x + 2, x + 3, y + 1, x, x + 7, y + 2, x + 4, x + 7, y + 3);

        // Comments
        this.renderArea.addFullComment(x + 4, y + 4, Database.getText("mapPierComment"), Database.getTranslatedText("mapPierComment"), "mapPierComment");

        // Interactions
        this.renderArea.addLinkOver(".mapPierButton, .mapPierComment", ".mapPierComment");
        this.renderArea.addLinkCall(".mapPierButton, .mapPierComment", new CallbackCollection(this.goToPier.bind(this)));
    };

    MainMap.prototype.loadSorceressHut = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapSorceressHutButton", x, x + 3, y, x, x + 3, y + 1);

        // Comments
        this.renderArea.addFullComment(x + 2, y + 3, Database.getText("mapSorceressHutComment"), Database.getTranslatedText("mapSorceressHutComment"), "mapSorceressHutComment");

        // Interactions
        this.renderArea.addLinkOver(".mapSorceressHutButton, .mapSorceressHutComment", ".mapSorceressHutComment");
        this.renderArea.addLinkCall(".mapSorceressHutButton, .mapSorceressHutComment", new CallbackCollection(this.goToSorceressHut.bind(this)));
    };

    MainMap.prototype.loadTheDesert = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapTheDesertButton", x, x + 29, y + 2, x, x + 29, y + 3, x, x + 29, y + 4, x, x + 29, y + 5, x, x + 29, y + 6, x, x + 29, y + 7, x, x + 28, y + 8, x, x + 27, y + 9, x + 1, x + 26, y + 10, x + 2, x + 25, y + 11);

        // Comments
        this.renderArea.addFullComment(x + 14, y + 6, Database.getText("mapTheDesertComment"), Database.getTranslatedText("mapTheDesertComment"), "mapTheDesertComment");

        // Interactions
        this.renderArea.addLinkOver(".mapTheDesertButton, .mapTheDesertComment", ".mapTheDesertComment");
        this.renderArea.addLinkCall(".mapTheDesertButton, .mapTheDesertComment", new CallbackCollection(this.goToTheDesert.bind(this)));
    };

    MainMap.prototype.loadTheHole = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapTheHoleButton", x + 1, x + 4, y, x + 1, x + 3, y + 1);

        // Comments
        this.renderArea.addFullComment(x + 2, y + 3, Database.getText("mapTheHoleComment"), Database.getTranslatedText("mapTheHoleComment"), "mapTheHoleComment");

        // Interactions
        this.renderArea.addLinkOver(".mapTheHoleButton, .mapTheHoleComment", ".mapTheHoleComment");
        this.renderArea.addLinkCall(".mapTheHoleButton, .mapTheHoleComment", new CallbackCollection(this.goToTheHole.bind(this)));
    };

    MainMap.prototype.loadTreasure = function (x, y) {
        // The button
        this.renderArea.addAsciiNinjaButton(x, x + 3, y, "mapTreasureButton");

        // Interactions
        this.renderArea.addLinkCall(".mapTreasureButton", new CallbackCollection(this.goToTreasure.bind(this)));
    };

    MainMap.prototype.loadVillage = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageButton", x + 11, x + 19, y, x + 7, x + 19, y + 1, x + 4, x + 21, y + 2, x, x + 21, y + 3, x, x + 18, y + 4, x + 4, x + 18, y + 5, x + 8, x + 11, y + 6);

        // Comments
        this.renderArea.addFullComment(x + 11, y + 3, Database.getText("mapVillageComment"), Database.getTranslatedText("mapVillageComment"), "mapVillageComment");

        // Interactions
        this.renderArea.addLinkOver(".mapVillageButton, .mapVillageComment", ".mapVillageComment");
        this.renderArea.addLinkCall(".mapVillageButton, .mapVillageComment", new CallbackCollection(this.getGame().goToVillage.bind(this.getGame())));
    };

    MainMap.prototype.loadWishingWell = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapWishingWellButton", x, x + 3, y);

        // Comments
        this.renderArea.addFullComment(x + 1, y + 1, Database.getText("mapWishingWellComment"), Database.getTranslatedText("mapWishingWellComment"), "mapWishingWellComment");

        // Interactions
        this.renderArea.addLinkOver(".mapWishingWellButton, .mapWishingWellComment", ".mapWishingWellComment");
        this.renderArea.addLinkCall(".mapWishingWellButton, .mapWishingWellComment", new CallbackCollection(this.goToWishingWell.bind(this)));
    };
    return MainMap;
})(Place);
///<reference path="Game.ts"/>
///<reference path="./../../libs/jquery.d.ts"/>
var Main;
(function (Main) {
    // The game
    var game = null;

    // Information about loading
    var loadingType = MainLoadingType.NONE;
    var loadingString = null;

    // Information about the game mode
    var gameMode = null;

    // Public functions
    function documentIsReady() {
        Keyboard.execute();
        start();
    }
    Main.documentIsReady = documentIsReady;

    function reloadEverythingFromFile(fileContent) {
        // Clear intervals for the current game
        game.clearAllIntervals();

        // Set the loading type
        loadingType = MainLoadingType.FILE;

        // Set the loading string
        loadingString = fileContent;

        // Set the gamemode (null so that it is set from loading)
        gameMode = null;

        // We can't register anymore
        Saving.canRegister = false;

        // Finally start (this will erase the current game)
        start();
    }
    Main.reloadEverythingFromFile = reloadEverythingFromFile;

    function setUrlData(urlData) {
        // Create some variables
        var beforeEqual;
        var afterEqual;

        if (urlData != "" && urlData.indexOf("=") != -1 && urlData.indexOf("=") < urlData.length - 1) {
            // Strip the question mark
            urlData = urlData.substr(1);

            // Separate the data in two parts : before and after the equal sign
            beforeEqual = urlData.substr(0, urlData.indexOf("="));
            afterEqual = urlData.substr(urlData.indexOf("=") + 1);

            switch (beforeEqual) {
                case "slot":
                    loadingType = MainLoadingType.LOCAL;
                    loadingString = "slot" + afterEqual;
                    break;

                case "gamemode":
                    gameMode = afterEqual;
                    break;
            }
        }
    }
    Main.setUrlData = setUrlData;

    function start() {
        game = new Game(gameMode);
        Keyboard.setGame(game);
        Saving.load(game, loadingType, loadingString);
        game.postLoad();
    }
})(Main || (Main = {}));

$(document).ready(function () {
    Main.setUrlData(window.location.search);
    Main.documentIsReady();
});
///<reference path="QuestEntity.ts"/>
var MediumFish = (function (_super) {
    __extends(MediumFish, _super);
    // Constructor
    function MediumFish(quest, pos) {
        _super.call(this, quest, pos, new Naming("A fish", "a fish"), new RenderArea(8, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(1, 1), new Pos(7, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(8, 1)), new CollisionBox(this, new Pos(1, 3), new Pos(7, 1))), new QuestEntityMovement(new Pos(-1, 0)));

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(30);
        this.setHp(30);

        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/mediumFish"));

        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fins", "its fins"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(10, 6))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(4);
    }
    // willDie()
    MediumFish.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(15), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return MediumFish;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var MerchantHat = (function (_super) {
    __extends(MerchantHat, _super);
    // Constructor
    function MerchantHat() {
        _super.call(this, "eqItemHatMerchantHat", "eqItemHatMerchantHatName", "eqItemHatMerchantHatDescription", "eqItems/hats/merchantHat");
    }
    // Special ability
    MerchantHat.prototype.getSpecialAbility = function () {
        return "Multiplies the number of candies found in quests by 7 (merchant hat).";
    };

    // Candies found * 7
    MerchantHat.prototype.foundCandies = function (player, quest, howMany) {
        return howMany * 7;
    };
    return MerchantHat;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var MiniShark = (function (_super) {
    __extends(MiniShark, _super);
    // Constructor
    function MiniShark(quest, pos) {
        _super.call(this, quest, pos, new Naming("A dangerous fish", "a dangerous fish"), new RenderArea(19, 5), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(8, 1), new Pos(2, 1)), new CollisionBox(this, new Pos(17, 1), new Pos(2, 1)), new CollisionBox(this, new Pos(5, 2), new Pos(14, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(17, 1)), new CollisionBox(this, new Pos(0, 4), new Pos(12, 1)), new CollisionBox(this, new Pos(18, 4), new Pos(1, 1))), new QuestEntityMovement(new Pos(-1, 0)));

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(70);
        this.setHp(70);

        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/miniShark"));

        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its teeth", "its teeth"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(21, 7))), 8));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(2);
    }
    // willDie()
    MiniShark.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(50 + 10 * Random.upTo(5)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return MiniShark;
})(QuestEntity);
///<reference path="Fireball.ts"/>
var MonkeyWizardMagicalPurpleBall = (function (_super) {
    __extends(MonkeyWizardMagicalPurpleBall, _super);
    // Constructor
    function MonkeyWizardMagicalPurpleBall(quest, pos, naming, color, size, damage, questEntityDamageReason, timer) {
        // Call the mother class constructor
        _super.call(this, quest, pos, naming, color, size, damage, questEntityDamageReason);

        // Set the timer
        this.timer = timer;
    }
    // Public methods
    MonkeyWizardMagicalPurpleBall.prototype.update = function () {
        if (this.timer != null) {
            if (this.timer > 0)
                this.timer -= 1;
else {
                this.timer = null;
                this.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer());
            }
        }

        // Call the fireball update method
        _super.prototype.update.call(this);
    };
    return MonkeyWizardMagicalPurpleBall;
})(Fireball);
///<reference path="Quest.ts"/>
var MonkeyWizardQuest = (function (_super) {
    __extends(MonkeyWizardQuest, _super);
    // Constructor
    function MonkeyWizardQuest(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(100, 20);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 17));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the roof and the floor
        this.addRoofAndFloor();

        // Add the monkey wizard
        this.addMonkeyWizard(new Pos(88, 16));

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You challenged the monkey wizard. Let the fight begin!"));
    }
    // Public methods
    MonkeyWizardQuest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    MonkeyWizardQuest.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You continue to explore the cave."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    MonkeyWizardQuest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/monkeyWizard/roof"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToTheCave.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    MonkeyWizardQuest.prototype.addMonkeyWizard = function (pos) {
        var monkey = new MonkeyWizard(this, pos);
        monkey.setHealthBar(new QuestEntityHealthBar(monkey, new Pos(100, 1), new Pos(0, 5), QuestEntityHealthBarPositionType.FIXED, false, true, BarType.HEALTH));
        this.addEntity(monkey);
    };

    MonkeyWizardQuest.prototype.addRoofAndFloor = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));

        // Add the roof
        wall.addBox(new Pos(0, 0), new Pos(100, 2));
        wall.addBox(new Pos(0, 2), new Pos(7, 1));
        wall.addBox(new Pos(18, 2), new Pos(50, 1));
        wall.addBox(new Pos(71, 2), new Pos(29, 1));
        wall.addBox(new Pos(0, 3), new Pos(2, 1));
        wall.addBox(new Pos(24, 3), new Pos(21, 1));
        wall.addBox(new Pos(83, 3), new Pos(17, 1));
        wall.addBox(new Pos(0, 4), new Pos(1, 1));
        wall.addBox(new Pos(99, 4), new Pos(1, 1));

        // Add the floor
        wall.addBox(new Pos(-20, 20), new Pos(120, 1));

        // Add the wall entity
        this.addEntity(wall);
    };
    return MonkeyWizardQuest;
})(Quest);
///<reference path="MonkeyWizardStaffMotherClass.ts"/>
var MonkeyWizardStaff = (function (_super) {
    __extends(MonkeyWizardStaff, _super);
    // Constructor
    function MonkeyWizardStaff() {
        _super.call(this, "eqItemWeaponMonkeyWizardStaff", "eqItemWeaponMonkeyWizardStaffName", "eqItemWeaponMonkeyWizardStaffDescription", "eqItems/weapons/monkeyWizardStaff");

        // Set the timer
        this.timer = 0;
    }
    // Public getters
    MonkeyWizardStaff.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("The monkey wizard staff", "the monkey wizard staff"), player.getClassicCollisionBoxCollection(), 2);
        qew.getCloseCombatDelay().setFixedDelay(1);
        return qew;
    };

    // update()
    MonkeyWizardStaff.prototype.update = function (player, quest) {
        if (this.timer < 10)
            this.timer += 1;
else {
            this.timer = 0;
            var ent = this.getRandomEnemy(player, quest);
            if (ent != null)
                this.castPurpleBall(player, quest, ent);
        }
    };
    return MonkeyWizardStaff;
})(MonkeyWizardStaffMotherClass);
///<reference path="QuestEntity.ts"/>
var MonkeyWizard = (function (_super) {
    __extends(MonkeyWizard, _super);
    // Constructor
    function MonkeyWizard(quest, pos) {
        _super.call(this, quest, pos, new Naming("A monkey wizard", "a monkey wizard"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(3, 0), new Pos(1, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(4, 1))), new QuestEntityMovement());

        // Set the timers
        this.timer = 0;
        this.bigTimer = 0;

        // At first we're going left
        this.goingLeft = true;

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(false);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(300);
        this.setHp(300);

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/monkeyWizard/monkeyWizard"));
        this.setTransparency(new RenderTransparency(" "));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its staff", "its staff"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(6, 6))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
    }
    // update()
    MonkeyWizard.prototype.update = function () {
        _super.prototype.update.call(this);

        // Is the monkey angry?
        var angry = (this.getHp() < 70 ? true : false);

        // Store the player position
        var playerPos = this.getQuest().getGame().getPlayer().getGlobalPosition();

        if (this.timer < 80)
            this.timer += 1;
else
            this.timer = 0;

        if (this.bigTimer < 350)
            this.bigTimer += 1;
else
            this.bigTimer = 0;

        if (this.timer == 80 || this.timer == 12 || this.timer == 24 || this.timer == 36 || this.timer == 48 || (angry && this.timer == 6) || (angry && this.timer == 18) || (angry && this.timer == 30) || (angry && this.timer == 42) || (angry && this.timer == 54)) {
            this.castSpell(false);
        } else if (this.timer == 60 || this.timer == 64 || this.timer == 68 || this.timer == 72 || this.timer == 76 && this.bigTimer < 300) {
            this.castSpell(true);
        }

        if (Math.abs(playerPos.x - this.getGlobalPosition().x) < 9) {
            // We jump (hoping to jump above the player)
            this.jump3();
        }

        if (Math.abs(playerPos.x - this.getGlobalPosition().x) < 15) {
            if (this.goingLeft) {
                if (this.getGlobalPosition().x > 25)
                    this.goLeft();
else {
                    this.goRight();
                    this.goingLeft = false;
                }
            } else {
                if (playerPos.x < this.getGlobalPosition().x) {
                    if (this.getGlobalPosition().x < 75)
                        this.goRight();
else {
                        this.goLeft();
                        this.goingLeft = true;
                    }
                } else if (this.getGlobalPosition().x > 25) {
                    // We go left
                    this.goLeft();
                } else
                    this.dontMove();
            }
        } else
            this.dontMove();
    };

    // willDie()
    MonkeyWizard.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));

        // The monkey wizard staff
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponMonkeyWizardStaff", "You found a staff.", "You gain the monkey wizard staff."));
    };

    // Private methods
    MonkeyWizard.prototype.castSpell = function (stored) {
        var ball = new MonkeyWizardMagicalPurpleBall(this.getQuest(), this.getGlobalPosition().plus(new Pos(3, 0)), new Naming("An magical purple ball", "a magical purple ball"), (stored ? new Color(ColorType.MONKEY_WIZARD_BALL_STORED) : new Color(ColorType.MONKEY_WIZARD_BALL)), new Pos(2, 1), 15, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("An magical purple ball", "a magical purple ball")), (stored ? 350 - this.bigTimer : null));

        if (stored == false) {
            // Target the player
            ball.setTargetTypeTargetEntity(this.getQuest().getGame().getPlayer());
        } else {
            // Target the roof
            ball.setTargetTypeTargetPosition(new Pos(Random.between(1, 99), Random.between(4, 9)));
        }

        // Add it to the quest
        this.getQuest().addEntity(ball);
    };

    MonkeyWizard.prototype.dontMove = function () {
        this.getQuestEntityMovement().setOffset(new Pos(0, 0));
    };

    MonkeyWizard.prototype.goLeft = function () {
        this.getQuestEntityMovement().setOffset(new Pos(-1, 0));
    };

    MonkeyWizard.prototype.goRight = function () {
        this.getQuestEntityMovement().setOffset(new Pos(1, 0));
    };

    MonkeyWizard.prototype.jump3 = function () {
        this.jump(3);
    };
    return MonkeyWizard;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Monster = (function (_super) {
    __extends(Monster, _super);
    // Constructor
    function Monster(quest, globalPosition) {
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("The monster", "the monster"), new RenderArea(13, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(13, 1)), new CollisionBox(this, new Pos(1, 0), new Pos(11, 1)), new CollisionBox(this, new Pos(2, 0), new Pos(9, 1)), new CollisionBox(this, new Pos(3, 0), new Pos(7, 1))), new QuestEntityMovement());

        // At first, no egg was destroyed
        this.anEggWasDestroyed = false;

        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/castle/room3/monster"));
        this.setTransparency(new RenderTransparency(" ", "%"));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("??", "??"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(15, 6))), 10000));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);
    }
    // update()
    Monster.prototype.update = function () {
        if (this.anEggWasDestroyed == false) {
            this.goTowards(this.getGlobalPosition().plus(new Pos(6, 4)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(2, 0), true);
        } else {
            this.goTowards(this.getGlobalPosition().plus(new Pos(6, 4)), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)), 0, new Pos(4, 4));
        }

        // Call the mother classe update
        _super.prototype.update.call(this);
    };

    // Public methods
    Monster.prototype.eggDestroyed = function () {
        this.anEggWasDestroyed = true;
    };
    return Monster;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Mosquito = (function (_super) {
    __extends(Mosquito, _super);
    // Constructor
    function Mosquito(quest, pos, groundYPosition) {
        _super.call(this, quest, pos, new Naming("A forest mosquito", "a forest mosquito"), new RenderArea(1, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1))), new QuestEntityMovement());

        // Set the ground y position from the value given in parameter
        this.groundYPosition = groundYPosition;

        // Set the perfect position above the ground
        this.perfectYPositionAboveGround = Random.between(8, 13);

        // Set gravity
        this.getQuestEntityMovement().setGravity(false);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(1);
        this.setHp(1);

        // Set the ascii art (well, it's actually just a ".")
        this.getRenderArea().drawString(".");

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A proboscis", "a proboscis"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(3, 3))), 12));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setOnceThenWaitDelay(20);
    }
    // update()
    Mosquito.prototype.update = function () {
        // Calculate the distance from the player
        var distanceFromPlayer = this.getGlobalPosition().getDistance(this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)));

        // Go towards the player
        this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition().plus(new Pos(1, 0)));

        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    return Mosquito;
})(QuestEntity);
///<reference path="Place.ts"/>
var Moutains = (function (_super) {
    __extends(Moutains, _super);
    // Constructor
    function Moutains(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        this.renderArea.resizeFromArray(Database.getAscii("places/mountains"), 0, 10);
        this.update();
    }
    // getRenderArea()
    Moutains.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    Moutains.prototype.getPogoStick = function () {
        // Get the pogo stick
        this.getGame().gainItem("gridItemPossessedPogoStick");

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    Moutains.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "mountainsBackToTheMapButton");

        // Draw the moutains
        this.renderArea.drawArray(Database.getAscii("places/mountains"), 0, 3);

        if (Saving.loadBool("gridItemPossessedPogoStick") == false) {
            // Add the "*" showing that there's a pogo stick here
            this.renderArea.drawString("*", 52, 11);

            // Draw the text
            this.renderArea.drawString(Database.getText("mountainsText0"), 19, 22);
            this.renderArea.drawString(Database.getText("mountainsText1"), 19, 23);

            // Add the button
            this.renderArea.addAsciiRealButton(Database.getText("mountainsTextButton"), 19, 25, "mountainsClimbButton", Database.getTranslatedText("mountainsTextButton"));
            this.renderArea.addLinkCall(".mountainsClimbButton", new CallbackCollection(this.getPogoStick.bind(this)));

            // Draw the translated text
            this.renderArea.drawString(Database.getTranslatedText("mountainsText0"), 19, 27, true);
            this.renderArea.drawString(Database.getTranslatedText("mountainsText1"), 19, 28, true);
        } else {
            this.renderArea.drawString(Database.getText("mountainsTextAfter"), 19, 22);

            this.renderArea.drawString(Database.getTranslatedText("mountainsTextAfter"), 19, 24, true);
        }
    };
    return Moutains;
})(Place);
var Naming = (function () {
    // Constructor
    function Naming(beginning, anywhere) {
        if (typeof anywhere === "undefined") { anywhere = null; }
        this.beginning = beginning;
        if (anywhere != null)
            this.anywhere = anywhere;
else
            this.anywhere = this.beginning;
    }
    // Public getters
    Naming.prototype.getAnywhere = function () {
        return this.anywhere;
    };

    Naming.prototype.getBeginning = function () {
        return this.beginning;
    };
    return Naming;
})();
///<reference path="QuestEntitySpell.ts"/>
var ObsidianBrick = (function (_super) {
    __extends(ObsidianBrick, _super);
    // Constructor
    function ObsidianBrick(quest, pos, hp) {
        _super.call(this, quest, pos, new Naming("An obsidian brick", "an obsidian brick"), null, new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(2, 1))), new QuestEntityMovement());

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(hp);
        this.setHp(hp);

        // Add the color
        this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(0, 0), new Pos(2, 1), new Color(ColorType.PLAYER_OBSIDIAN_BRICK)));
    }
    return ObsidianBrick;
})(QuestEntitySpell);
///<reference path="EqItem.ts"/>
var OctopusKingCrown = (function (_super) {
    __extends(OctopusKingCrown, _super);
    // Constructor
    function OctopusKingCrown() {
        _super.call(this, "eqItemHatOctopusKingCrown", "eqItemHatOctopusKingCrownName", "eqItemHatOctopusKingCrownDescription", "eqItems/hats/octopusKingCrown");
    }
    // Special ability
    OctopusKingCrown.prototype.getSpecialAbility = function () {
        return "You are a lot more confident.";
    };
    return OctopusKingCrown;
})(EqItem);
///<reference path="EqItem.ts"/>
var OctopusKingCrownWithJaspers = (function (_super) {
    __extends(OctopusKingCrownWithJaspers, _super);
    // Constructor
    function OctopusKingCrownWithJaspers() {
        _super.call(this, "eqItemHatOctopusKingCrownWithJaspers", "eqItemHatOctopusKingCrownWithJaspersName", "eqItemHatOctopusKingCrownWithJaspersDescription", "eqItems/hats/octopusKingCrownWithJaspers");
        // The timer (to avoid casting fireballs too often..)
        this.currentTimer = 0;
        this.maxTimer = 3;
    }
    // Special ability
    OctopusKingCrownWithJaspers.prototype.getSpecialAbility = function () {
        return "Randomly cast powerful fireballs around you (Octopus King crown with jaspers).";
    };

    // update
    OctopusKingCrownWithJaspers.prototype.update = function (player, quest) {
        this.currentTimer += 1;

        if (this.currentTimer >= this.maxTimer) {
            // Cast the fireball
            this.castFireball(player, quest);

            // Reset the timer
            this.currentTimer = 0;
        }
    };

    // Private methods
    OctopusKingCrownWithJaspers.prototype.castFireball = function (player, quest) {
        // Create the fireball
        var fireball = new Fireball(quest, player.getSpellCastingPosition(), new Naming("A small fireball", "a small fireball"), new Color(ColorType.RED_ENCHANTED_GLOVES_FIREBALL), new Pos(4, 2), 18, player.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A fireball", "a fireball")));

        // Set the direction
        fireball.setTargetTypeNoTarget(Algo.getRandomNotImmobileDirectionUpToThisSpeed(1).multiply(new Pos(2, 2)));

        // Add the entity
        quest.addEntity(fireball);
    };
    return OctopusKingCrownWithJaspers;
})(EqItem);
///<reference path="EqItem.ts"/>
var OctopusKingCrownWithObsidian = (function (_super) {
    __extends(OctopusKingCrownWithObsidian, _super);
    // Constructor
    function OctopusKingCrownWithObsidian() {
        _super.call(this, "eqItemHatOctopusKingCrownWithObsidian", "eqItemHatOctopusKingCrownWithObsidianName", "eqItemHatOctopusKingCrownWithObsidianDescription", "eqItems/hats/octopusKingCrownWithObsidian");

        // Reset the timer for the first time
        this.resetTimer();
    }
    // Special ability
    OctopusKingCrownWithObsidian.prototype.getSpecialAbility = function () {
        return "Summon the Octopus King once in a while to help you.";
    };

    // update
    OctopusKingCrownWithObsidian.prototype.update = function (player, quest) {
        this.currentTimer -= 1;

        if (this.currentTimer <= 0) {
            if (this.summonOctopusKing(player, quest)) {
                // If it worked, reset the timer
                this.resetTimer();
            }
        }
    };

    // Private methods
    OctopusKingCrownWithObsidian.prototype.summonOctopusKing = function (player, quest) {
        // Create the king
        var king = new PlayerSummonedOctopusKing(quest, Random.fromPosition(new Pos(quest.getRealQuestSize().x - 1, quest.getRealQuestSize().y - 1)));

        if (quest.addEntity(king))
            return true;

        // No king added, we return false
        return false;
    };

    OctopusKingCrownWithObsidian.prototype.resetTimer = function () {
        this.currentTimer = Random.between(60, 120);
    };
    return OctopusKingCrownWithObsidian;
})(EqItem);
///<reference path="Quest.ts"/>
var OctopusKingQuest = (function (_super) {
    __extends(OctopusKingQuest, _super);
    // Constructor
    function OctopusKingQuest(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(100, 20);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 17));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the roof and the floor
        this.addRoofAndFloor();

        // Add the monkey wizard
        this.addOctopusKing(new Pos(88, 16));

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You challenged the Octopus King. Let the fight begin!"));
    }
    // Public methods
    OctopusKingQuest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    OctopusKingQuest.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You continue to explore the cave."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    OctopusKingQuest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("places/quests/octopusKing/roof"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToTheCave.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    OctopusKingQuest.prototype.addOctopusKing = function (pos) {
        var king = new OctopusKing(this, pos);
        king.setHealthBar(new QuestEntityHealthBar(king, new Pos(100, 1), new Pos(0, 5), QuestEntityHealthBarPositionType.FIXED, false, true, BarType.HEALTH));
        this.addEntity(king);
    };

    OctopusKingQuest.prototype.addRoofAndFloor = function () {
        // Create the wall entity
        var wall = new Wall(this, new Pos(0, 0));

        // Add the roof
        wall.addBox(new Pos(0, 0), new Pos(100, 2));
        wall.addBox(new Pos(0, 2), new Pos(7, 1));
        wall.addBox(new Pos(18, 2), new Pos(50, 1));
        wall.addBox(new Pos(71, 2), new Pos(29, 1));
        wall.addBox(new Pos(0, 3), new Pos(2, 1));
        wall.addBox(new Pos(24, 3), new Pos(21, 1));
        wall.addBox(new Pos(83, 3), new Pos(17, 1));
        wall.addBox(new Pos(0, 4), new Pos(1, 1));
        wall.addBox(new Pos(99, 4), new Pos(1, 1));

        // Add the floor
        wall.addBox(new Pos(-20, 20), new Pos(120, 1));

        // Add the wall entity
        this.addEntity(wall);
    };
    return OctopusKingQuest;
})(Quest);
///<reference path="QuestEntity.ts"/>
var OctopusKing = (function (_super) {
    __extends(OctopusKing, _super);
    // Constructor
    function OctopusKing(quest, pos) {
        _super.call(this, quest, pos, new Naming("The Octopus King", "the Octopus King"), new RenderArea(6, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(2, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(4, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(6, 1))), new QuestEntityMovement());

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(false);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(380);
        this.setHp(380);

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/octopusKing/octopusKing"));
        this.setTransparency(new RenderTransparency(" "));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its tentacles", "its tentacles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 6))), 16));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    // update()
    OctopusKing.prototype.update = function () {
        // Go towards the player
        this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition(), 0, new Pos(1, 0));

        // Call the mother class update method
        _super.prototype.update.call(this);
    };

    // willDie()
    OctopusKing.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(4000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));

        // The monkey wizard staff
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemHatOctopusKingCrown", "You found the Octopus King crown.", "You gain the Octopus King crown."));
    };
    return OctopusKing;
})(QuestEntity);
///<reference path="Place.ts"/>
var OutsideTheHole = (function (_super) {
    __extends(OutsideTheHole, _super);
    // Constructor
    function OutsideTheHole(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        this.renderArea.resizeFromArray(Database.getAscii("places/outsideTheHole"), 0, 4);
        this.update();
    }
    // getRenderArea()
    OutsideTheHole.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    OutsideTheHole.prototype.jump = function () {
        this.getGame().setPlace(new TheHole(this.getGame()));
    };

    OutsideTheHole.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "theHoleBackToTheMapButton");

        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/outsideTheHole"), 0, 3);

        // Add the button to jump in the hole
        this.renderArea.addAsciiRealButton(Database.getText("outsideTheHoleButton"), 34, 23, "outsideTheHoleButton", Database.getTranslatedText("outsideTheHoleButton"), true);
        this.renderArea.addLinkCall(".outsideTheHoleButton", new CallbackCollection(this.jump.bind(this)));
    };
    return OutsideTheHole;
})(Place);
///<reference path="StatusBarResource.ts"/>
var PainsAuChocolat = (function (_super) {
    __extends(PainsAuChocolat, _super);
    // Constructor
    function PainsAuChocolat(game, savingPrefix) {
        _super.call(this, game, savingPrefix);
    }
    // Public methods
    PainsAuChocolat.prototype.getCurrentAsString = function (totalSize) {
        if (typeof totalSize === "undefined") { totalSize = 10; }
        var n = this.getCurrent();
        var size = totalSize;

        var base = "";
        var prefix = "";
        var suffix = "";

        if (n < 0)
            return "What, negative pains au chocolat?!";
else if (n == 1)
            return "-> 1 pain au chocolat";
else
            base = Algo.numberToStringButNicely(n);

        // How much space do we still have ?
        size = totalSize - base.length;

        if (size >= 18) {
            suffix = " pains au chocolat";

            // We add a suffix
            // How much space do we still have ?
            size = totalSize - base.length - suffix.length;

            if (size >= 9)
                prefix = "You have ";
else if (size >= 3)
                prefix = "-> ";
        } else if (size >= 3)
            suffix = " pc";

        // How much space do we still have ?
        size = totalSize - base.length - prefix.length - suffix.length;

        return prefix + base + suffix;
    };
    return PainsAuChocolat;
})(StatusBarResource);
///<reference path="Place.ts"/>
var Pier = (function (_super) {
    __extends(Pier, _super);
    // Constructor
    function Pier(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        this.renderArea.resizeFromArray(Database.getAscii("places/pier"), 0, 6);
        this.update();
    }
    // getRenderArea()
    Pier.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    Pier.prototype.addLighthouseButton = function (x, y) {
        this.renderArea.addAsciiRealButton(Database.getText("pierLighthouseButton"), x, y, "pierLighthouseButton", Database.getTranslatedText("pierLighthouseButton"), true);
        this.renderArea.addLinkCall(".pierLighthouseButton", new CallbackCollection(this.clickedOnLighthouseButton.bind(this), this.getGame().goToLighthouse.bind(this.getGame())));
    };

    Pier.prototype.addTheSeaButton = function (x, y) {
        this.renderArea.addAsciiRealButton(Database.getText("pierTheSeaButton"), x, y, "pierTheSeaButton", Database.getTranslatedText("pierTheSeaButton"), true);
        this.renderArea.addLinkCall(".pierTheSeaButton", new CallbackCollection(this.goToTheSea.bind(this)));
    };

    Pier.prototype.clickedOnLighthouseButton = function () {
        Saving.saveBool("mainMapDonePier", true);
    };

    Pier.prototype.goToTheSea = function () {
        if (this.getGame().canStartQuest())
            this.getGame().setPlace(new TheSea(this.getGame()));
    };

    Pier.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "thePierBackToTheMapButton");

        // Draw the pier
        this.renderArea.drawArray(Database.getAscii("places/pier"), 0, 3);

        // Add the button to go to the lighthouse
        this.addLighthouseButton(3, 27);

        // Add the button to jump into the sea
        this.addTheSeaButton(52, 9);
    };
    return Pier;
})(Place);
///<reference path="EqItem.ts"/>
var PinkEnchantedGloves = (function (_super) {
    __extends(PinkEnchantedGloves, _super);
    // Constructor
    function PinkEnchantedGloves() {
        _super.call(this, "eqItemGlovesPinkEnchantedGloves", "eqItemGlovesPinkEnchantedGlovesName", "eqItemGlovesPinkEnchantedGlovesDescription", "eqItems/gloves/pinkEnchantedGloves");
    }
    // Special ability
    PinkEnchantedGloves.prototype.getSpecialAbility = function () {
        return "Slowly regain your health points in quests (pink enchanted gloves).";
    };

    // update
    PinkEnchantedGloves.prototype.update = function (player, quest) {
        player.heal(1);
    };
    return PinkEnchantedGloves;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var Plant = (function (_super) {
    __extends(Plant, _super);
    // Constructor
    function Plant(quest, leftDownCornerPosition, minPlantNumber, maxPlantNumber) {
        // Set the ascii art name
        var asciiArtName = "places/quests/theSea/plant" + Random.between(minPlantNumber, maxPlantNumber).toString();

        // Create the real global position
        var globalPosition = leftDownCornerPosition;
        globalPosition.add(new Pos(0, -Database.getAsciiHeight(asciiArtName) + 1));

        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("A plant", "a plant"), new RenderArea());

        // Draw the ascii art
        this.getRenderArea().resizeFromArray(Database.getAscii(asciiArtName));
        this.getRenderArea().drawArray(Database.getAscii(asciiArtName));

        if (asciiArtName == "places/quests/theSea/plant0" || asciiArtName == "places/quests/theSea/plant8" || asciiArtName == "places/quests/theSea/plant9" || asciiArtName == "places/quests/theSea/plant10") {
            this.setTransparency(new RenderTransparency(" ", "%"));
        } else {
            this.setTransparency(new RenderTransparency(" "));
        }
    }
    return Plant;
})(QuestEntity);
///<reference path="QuestEntityWeapon.ts"/>
var PlayerBludgeon = (function (_super) {
    __extends(PlayerBludgeon, _super);
    function PlayerBludgeon() {
        _super.apply(this, arguments);
    }
    // Public methods
    PlayerBludgeon.prototype.getRealDamage = function () {
        return Random.between(12, 16);
    };

    PlayerBludgeon.prototype.getRealDamageText = function () {
        return "12-16";
    };
    return PlayerBludgeon;
})(QuestEntityWeapon);
var PlayerCharacterType;
(function (PlayerCharacterType) {
    PlayerCharacterType[PlayerCharacterType["CANDYBOX"] = 0] = "CANDYBOX";
    PlayerCharacterType[PlayerCharacterType["MEDIUM"] = 1] = "MEDIUM";
    PlayerCharacterType[PlayerCharacterType["CANDYBOX_SQUEEZED"] = 2] = "CANDYBOX_SQUEEZED";
    PlayerCharacterType[PlayerCharacterType["MEDIUM_SQUEEZED"] = 3] = "MEDIUM_SQUEEZED";
})(PlayerCharacterType || (PlayerCharacterType = {}));
///<reference path="QuestEntity.ts"/>
var PlayerCloneCandyBox = (function (_super) {
    __extends(PlayerCloneCandyBox, _super);
    // Constructor
    function PlayerCloneCandyBox(quest, pos) {
        _super.call(this, quest, pos, new Naming("A clone", "a clone"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement());

        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(quest.getGame().getPlayer().getHp());
        this.setHp(quest.getGame().getPlayer().getHp());

        // Set the ascii art and the transparent character
        this.getRenderArea().drawString("\\o/");

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fists", "its fists"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    return PlayerCloneCandyBox;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var PlayerCloneMedium = (function (_super) {
    __extends(PlayerCloneMedium, _super);
    // Constructor
    function PlayerCloneMedium(quest, pos) {
        _super.call(this, quest, pos, new Naming("A clone", "a clone"), new RenderArea(11, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(11, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(9, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(7, 1)), new CollisionBox(this, new Pos(4, 3), new Pos(3, 1))), new QuestEntityMovement());

        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(quest.getGame().getPlayer().getHp());
        this.setHp(quest.getGame().getPlayer().getHp());

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("players/medium"));
        this.setTransparency(new RenderTransparency(" ", "%"));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fists", "its fists"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(13, 6))), 3));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    return PlayerCloneMedium;
})(QuestEntity);
///<reference path="QuestEntitySpell.ts"/>
var PlayerSummonedDemon = (function (_super) {
    __extends(PlayerSummonedDemon, _super);
    // Constructor
    function PlayerSummonedDemon(quest, globalPosition, damage) {
        _super.call(this, quest, globalPosition, new Naming("A demon", "a demon"));

        // Set the damage
        this.damage = damage;

        // Create the damage reason
        this.damageReason = new QuestEntityDamageReason(QuestEntityDamageReasonWhoType.ENTITY, QuestEntityDamageReasonWhatType.SPELL);
        this.damageReason.setQuestEntity(this.getQuest().getGame().getPlayer(), QuestEntityTeam.NATURE);
        this.damageReason.setSpellNaming(this.getRandomNaming());

        // Create the collision box collection
        this.damageCollisionBoxCollection = new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(8, 4)));

        // Add the demon colors randomly
        this.addRandomQuestEntitySpellColors();

        // Add the quest entity movement
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(3, 0)));
    }
    // Public methods
    PlayerSummonedDemon.prototype.update = function () {
        // Handle damage
        this.handleDamage();

        // Update
        _super.prototype.update.call(this);
    };

    // Private generation methods
    PlayerSummonedDemon.prototype.addRandomQuestEntitySpellColors = function () {
        // Array of 4*4 used to decide of the colors to add
        var arr = [];

        for (var i = 0; i < 4; i++) {
            arr.push([]);
            for (var j = 0; j < 4; j++) {
                arr[i].push(false);
            }
        }

        switch (Random.upTo(1)) {
            case 0:
                for (var i = 0; i < 2; i++) {
                    for (var j = 0; j < 4; j++) {
                        if (Random.flipACoin()) {
                            arr[i][j] = true;
                            arr[3 - i][j] = true;
                        }
                    }
                }
                break;

            case 1:
                for (var i = 0; i < 4; i++) {
                    for (var j = 0; j < 2; j++) {
                        if (Random.flipACoin()) {
                            arr[i][j] = true;
                            arr[i][3 - j] = true;
                        }
                    }
                }
                break;
        }

        for (var i = 0; i < 4; i++) {
            for (var j = 0; j < 4; j++) {
                if (arr[i][j])
                    this.addColor(new QuestEntitySpellColor(this.getQuest(), new Pos(i * 2, j), new Pos(2, 1), new Color(ColorType.PLAYER_SUMMONED_DEMON, true)));
            }
        }
    };

    PlayerSummonedDemon.prototype.getRandomNaming = function () {
        // The final name in a string
        var finalName = "";

        // How many syllables?
        var howManySyllables;
        if (Random.flipACoin())
            howManySyllables = 3;
else if (Random.oneChanceOutOf(10))
            howManySyllables = 4;
else if (Random.oneChanceOutOf(10))
            howManySyllables = 1;
else
            howManySyllables = 2;

        // The syllables array
        var syllablesArray = [];

        for (var i = 0; i < howManySyllables; i++) {
            syllablesArray.push(Random.fromArray(["lael", "ezek", "bal", "sen", "zen", "aps", "hir", "ta", "ozn", "eres", "non", "enon", "cesti", "mal", "aser", "oex", "nax", "arir", "nikon", "taor", "rael", "mael", "sael", "epit", "uer", "pod", "ehon", "edeo", "xa"]));
        }

        // Turn the first letter of the firsy syllable into upper case
        syllablesArray[0] = syllablesArray[0].charAt(0).toUpperCase() + syllablesArray[0].slice(1);

        for (var i = 0; i < syllablesArray.length; i++) {
            finalName += syllablesArray[i];
        }

        // Finally return the naming
        return new Naming("the demon " + finalName);
    };

    // Other private methods
    PlayerSummonedDemon.prototype.handleDamage = function () {
        for (var i = 0; i < this.getQuest().getEntities().length; i++) {
            if (this.getQuest().getEntities()[i].getDestructible()) {
                if (this.getQuest().getEntities()[i].getCbc() != null) {
                    if (this.getQuest().getEntities()[i].getCbc().collidesWith(this.damageCollisionBoxCollection)) {
                        // We inflict the damage
                        this.getQuest().getEntities()[i].inflictDamage(this.damage, this.damageReason);
                    }
                }
            }
        }
    };
    return PlayerSummonedDemon;
})(QuestEntitySpell);
///<reference path="QuestEntity.ts"/>
var PlayerSummonedOctopusKing = (function (_super) {
    __extends(PlayerSummonedOctopusKing, _super);
    // Constructor
    function PlayerSummonedOctopusKing(quest, pos) {
        _super.call(this, quest, pos, new Naming("An Octopus King", "an Octopus King"), new RenderArea(6, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(2, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(4, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(4, 1)), new CollisionBox(this, new Pos(0, 3), new Pos(6, 1))), new QuestEntityMovement());

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(380);
        this.setHp(380);

        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/octopusKing/octopusKing"));
        this.setTransparency(new RenderTransparency(" "));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its tentacles", "its tentacles"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 6))), 16));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    // update()
    PlayerSummonedOctopusKing.prototype.update = function () {
        // Go towards the player
        this.goTowards(this.getGlobalPosition(), this.getQuest().getGame().getPlayer().getGlobalPosition(), 0, new Pos(1, 0));

        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    return PlayerSummonedOctopusKing;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var PlayerSummonedTribeWarrior = (function (_super) {
    __extends(PlayerSummonedTribeWarrior, _super);
    // Constructor
    function PlayerSummonedTribeWarrior(quest, pos) {
        _super.call(this, quest, pos, new Naming("A tribe warrior", "a tribe warrior"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(4, 3))), new QuestEntityMovement());

        // Set gravity and worms like
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(25);
        this.setHp(25);

        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theHole/lostTribeWarrior"));
        this.setTransparency(new RenderTransparency(" "));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("A tribal spear", "a tribal spear"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(6, 6))), 8));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(2);
    }
    // update()
    PlayerSummonedTribeWarrior.prototype.update = function () {
        _super.prototype.update.call(this);
    };
    return PlayerSummonedTribeWarrior;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
// Register our hp
Saving.registerNumber("playerHp", 100);

var Player = (function (_super) {
    __extends(Player, _super);
    // Constructor
    function Player(game) {
        _super.call(this, null, new Pos(0, 0), new Naming("You", "you"));

        // Set the game
        this.game = game;

        // Set destructible
        this.setDestructible(true);
    }
    // Public methods
    Player.prototype.beginBerserk = function (duration) {
        if (_super.prototype.beginBerserk.call(this, duration)) {
            // Update the render area
            this.drawOnRenderArea();

            // Return true
            return true;
        }

        // We didn't become a turtle : return false
        return false;
    };

    Player.prototype.beginTurtle = function (duration) {
        if (_super.prototype.beginTurtle.call(this, duration)) {
            // Update the render area
            this.drawOnRenderArea();

            // Return true
            return true;
        }

        // We didn't become a turtle : return false
        return false;
    };

    Player.prototype.canJumpInMidAir = function () {
        if (this.game.isEquipped("boots", "eqItemBootsRocketBoots"))
            return true;

        return false;
    };

    Player.prototype.checkCollision = function (pos) {
        if (typeof pos === "undefined") { pos = new Pos(0, 0); }
        if (_super.prototype.checkCollision.call(this, pos) == true)
            return true;

        if (this.collidesWith(this.getQuest().getPlayerCollisionBoxes(), pos))
            return true;

        return false;
    };

    Player.prototype.getCharacterType = function () {
        return this.characterType;
    };

    Player.prototype.getClassicCollisionBoxCollection = function () {
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3)));
                break;
            case PlayerCharacterType.MEDIUM:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(13, 6)));
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(3, 3)));
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                return new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(8, 5)));
                break;
        }
    };

    Player.prototype.getQuestEntityWeapon = function (quest) {
        if (typeof quest === "undefined") { quest = null; }
        var qew;

        if (this.game.getSelectedEqItems()["weapon"] != null) {
            qew = this.game.getSelectedEqItems()["weapon"].getQuestEntityWeapon(quest, this);
        } else {
            qew = new QuestEntityWeapon(this.getQuest(), this, new Naming("Your fists", "your fists"), this.getClassicCollisionBoxCollection(), 1);
            qew.getCloseCombatDelay().setFixedDelay(6, 0);
        }

        return qew;
    };

    Player.prototype.getSpellCastingPosition = function (facingRight) {
        if (typeof facingRight === "undefined") { facingRight = true; }
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(3, -1));
else
                    return this.getGlobalPosition().plus(new Pos(-1, -1));
                break;
            case PlayerCharacterType.MEDIUM:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(11, 0));
else
                    return this.getGlobalPosition().plus(new Pos(-1, 0));
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(0, -1));
else
                    return this.getGlobalPosition().plus(new Pos(0, -1));
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                if (facingRight)
                    return this.getGlobalPosition().plus(new Pos(6, 0));
else
                    return this.getGlobalPosition().plus(new Pos(-1, 0));
                break;
        }
    };

    Player.prototype.getThornsPositionsArray = function () {
        // Create the array
        var arr;

        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                arr = [
                    new Pos(-6, 0),
                    new Pos(-4, -1),
                    new Pos(-2, -2),
                    new Pos(1, -2),
                    new Pos(3, -1),
                    new Pos(5, 0),
                    new Pos(3, 1),
                    new Pos(1, 2),
                    new Pos(-2, 2),
                    new Pos(-4, 1)
                ];
                break;
            case PlayerCharacterType.MEDIUM:
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                arr = [
                    new Pos(11, -2),
                    new Pos(12, -1),
                    new Pos(13, 0),
                    new Pos(13, 1),
                    new Pos(13, 2),
                    new Pos(12, 3),
                    new Pos(11, 4)
                ];
                break;
        }

        // Return the array
        return arr;
    };

    Player.prototype.hit = function (questEntity, damage, reason) {
        for (var savingName in this.game.getSelectedEqItems()) {
            damage = this.game.getSelectedEqItems()[savingName].hit(this, this.getQuest(), questEntity, damage, reason);
        }

        for (var savingName in this.game.getGridItems()) {
            if (Saving.loadBool(savingName))
                damage = this.game.getGridItems()[savingName].hit(this, this.getQuest(), questEntity, damage, reason);
        }

        if (Saving.loadNumber("gameGiftPower") > 0) {
            damage = Math.ceil(damage + damage * (Saving.loadNumber("gameGiftPower") / 5));
        }

        _super.prototype.hit.call(this, questEntity, damage, reason);
    };

    Player.prototype.inflictDamage = function (damage, reason) {
        for (var savingName in this.game.getSelectedEqItems()) {
            damage = this.game.getSelectedEqItems()[savingName].inflictDamage(this, this.getQuest(), damage, reason);
        }

        _super.prototype.inflictDamage.call(this, damage, reason);
    };

    Player.prototype.load = function () {
        this.setHp(Saving.loadNumber("playerHp"));
    };

    Player.prototype.loadCandyBoxCharacter = function (quest, firstTime) {
        if (typeof firstTime === "undefined") { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.CANDYBOX;

        if (firstTime)
            this.loadCharacter(quest);

        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(3, 1));
        this.drawOnRenderArea();

        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))));

        // Transparency
        this.setTransparency(null);
    };

    Player.prototype.loadCandyBoxSqueezedCharacter = function (quest, firstTime) {
        if (typeof firstTime === "undefined") { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.CANDYBOX_SQUEEZED;

        if (firstTime)
            this.loadCharacter(quest);

        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(1, 1));
        this.drawOnRenderArea();

        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(1, 1))));

        // Transparency
        this.setTransparency(null);
    };

    Player.prototype.loadCharacter = function (quest) {
        // Set the quest
        this.setQuest(quest);

        // Add the quest entity weapon
        this.addQuestEntityWeapon(this.getQuestEntityWeapon(this.getQuest()));

        // Set the team
        this.setTeam(QuestEntityTeam.PLAYER);
    };

    Player.prototype.loadMediumCharacter = function (quest, firstTime) {
        if (typeof firstTime === "undefined") { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.MEDIUM;

        if (firstTime)
            this.loadCharacter(quest);

        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(11, 4));
        this.drawOnRenderArea();

        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(11, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(9, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(7, 1)), new CollisionBox(this, new Pos(4, 3), new Pos(3, 1))));

        // Transparent character
        this.setTransparency(new RenderTransparency(" ", "%"));
    };

    Player.prototype.loadMediumSqueezedCharacter = function (quest, firstTime) {
        if (typeof firstTime === "undefined") { firstTime = true; }
        // Set the type
        this.characterType = PlayerCharacterType.MEDIUM_SQUEEZED;

        if (firstTime)
            this.loadCharacter(quest);

        // Set the ascii representation (size + what it looks like)
        this.setRenderArea(new RenderArea(6, 3));
        this.drawOnRenderArea();

        // Set the collision boxes
        this.setCbc(new CollisionBoxCollection(new CollisionBox(this, new Pos(2, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(0, 1), new Pos(6, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(2, 1))));

        // Transparent character
        this.setTransparency(new RenderTransparency(" ", "%"));
    };

    Player.prototype.magicHealthRegain = function () {
        if (this.game.getWeAreQuesting() == false) {
            var hpBonus = Math.ceil((1 - Math.exp(-this.game.getCandiesEaten().getCurrent() / 400000000)) * 500);
            if (hpBonus < 1)
                hpBonus = 1;
            this.setHp(this.getHp() + hpBonus);
        }
    };

    Player.prototype.move = function (pos, force) {
        if (typeof force === "undefined") { force = false; }
        // Position
        var posToUse = pos.copy();

        if (posToUse.x != 0 && this.game.isEquipped("boots", "eqItemBootsBootsOfIntrospection") && this.checkCollision(new Pos(0, 1)) == true && force == false)
            posToUse.x = 0;

        return _super.prototype.move.call(this, posToUse, force);
    };

    Player.prototype.moveWormsLike = function (pos) {
        // Position
        var posToUse = pos.copy();

        if (posToUse.x != 0 && this.game.isEquipped("boots", "eqItemBootsBootsOfIntrospection") && this.checkCollision(new Pos(0, 1)) == true)
            posToUse.x = 0;

        return _super.prototype.moveWormsLike.call(this, posToUse);
    };

    Player.prototype.reCalcMaxHp = function () {
        // Base maximum hp : 100
        var maxHp = 100;

        if (Saving.loadString("gameGameMode") != "hard") {
            maxHp += Math.ceil((1 - Math.exp(-this.game.getCandiesEaten().getCurrent() / 3000)) * 100) + Math.ceil((1 - Math.exp(-this.game.getCandiesEaten().getCurrent() / 400000)) * 800);
        }

        if (Saving.loadBool("gridItemPossessedHeartPendant"))
            maxHp += 300;

        if (Saving.loadBool("gridItemPossessedHeartPlug"))
            maxHp = Math.ceil(maxHp * 1.2);

        if (Saving.loadNumber("gameGiftHealth") > 0) {
            maxHp = maxHp + maxHp * (Saving.loadNumber("gameGiftHealth") / 5);
        }

        // We finally set the value we calculated
        this.setMaxHp(maxHp);

        // We update the status bar
        this.game.updateStatusBar();
    };

    Player.prototype.save = function () {
        Saving.saveNumber("playerHp", this.getHp());
    };

    Player.prototype.shouldDie = function () {
        if (_super.prototype.shouldDie.call(this) || this.getOutOfArea())
            return true;

        return false;
    };

    Player.prototype.squeeze = function () {
        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                // We squeeze
                this.loadCandyBoxSqueezedCharacter(this.getQuest(), false);
                this.move(new Pos(1, 0), true);

                // We add a message to the log
                this.game.getQuestLog().addMessage(new QuestLogMessage("You squeezed!"));
                break;
            case PlayerCharacterType.MEDIUM:
                // We squeeze
                this.loadMediumSqueezedCharacter(this.getQuest(), false);
                this.move(new Pos(2, 1), true);

                // We add a message to the log
                this.game.getQuestLog().addMessage(new QuestLogMessage("You squeezed!"));
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                // We unsqueeze
                this.loadCandyBoxCharacter(this.getQuest(), false);
                this.move(new Pos(-1, 0), true);

                if (this.checkCollision()) {
                    // We squeeze again
                    this.loadCandyBoxSqueezedCharacter(this.getQuest(), false);
                    this.move(new Pos(1, 0), true);

                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You can't unsqueeze because there isn't enough space."));
                } else {
                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You unsqueezed!"));
                }
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                // We unsqueeze
                this.loadMediumCharacter(this.getQuest(), false);
                this.move(new Pos(-2, -1), true);

                if (this.checkCollision()) {
                    // We squeeze again
                    this.loadMediumSqueezedCharacter(this.getQuest(), false);
                    this.move(new Pos(2, 1), true);

                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You can't unsqueeze because there isn't enough space."));
                } else {
                    // We add a message to the log
                    this.game.getQuestLog().addMessage(new QuestLogMessage("You unsqueezed!"));
                }
                break;
        }
    };

    Player.prototype.stopBerserk = function () {
        // Mother class method
        _super.prototype.stopBerserk.call(this);

        // Update the render area
        this.drawOnRenderArea();
    };

    Player.prototype.stopTurtle = function () {
        // Mother class method
        _super.prototype.stopTurtle.call(this);

        // Update the render area
        this.drawOnRenderArea();
    };

    Player.prototype.update = function () {
        for (var savingName in this.game.getSelectedEqItems()) {
            this.game.getSelectedEqItems()[savingName].update(this, this.getQuest());
        }

        for (var savingName in this.game.getGridItems()) {
            if (Saving.loadBool(savingName))
                this.game.getGridItems()[savingName].update(this, this.getQuest());
        }

        _super.prototype.update.call(this);
    };

    // Public setters : they must be public, because sometimes we have to set these things (at loading for example)
    Player.prototype.setHp = function (hp) {
        _super.prototype.setHp.call(this, hp);
        this.game.updateStatusBar();
    };

    Player.prototype.setMaxHp = function (hp) {
        _super.prototype.setMaxHp.call(this, hp);
        this.game.updateStatusBar();
    };

    // Private methods
    Player.prototype.drawOnRenderArea = function () {
        // Erase the render area
        this.getRenderArea().resetAllButSize();

        switch (this.characterType) {
            case PlayerCharacterType.CANDYBOX:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawString("TUR");
else if (this.getTurtle())
                    this.getRenderArea().drawString("tur");
else if (this.getBerserk())
                    this.getRenderArea().drawString("O_O");
else
                    this.getRenderArea().drawString("\\o/");
                break;
            case PlayerCharacterType.CANDYBOX_SQUEEZED:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawString("T");
else if (this.getTurtle())
                    this.getRenderArea().drawString("t");
else if (this.getBerserk())
                    this.getRenderArea().drawString("B");
else
                    this.getRenderArea().drawString("o");

                break;
            case PlayerCharacterType.MEDIUM:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumTurtleBerserk"));
else if (this.getTurtle())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumTurtle"));
else if (this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumBerserk"));
else
                    this.getRenderArea().drawArray(Database.getAscii("players/medium"));
                break;
            case PlayerCharacterType.MEDIUM_SQUEEZED:
                if (this.getTurtle() && this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezedTurtleBerserk"));
else if (this.getTurtle())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezedTurtle"));
else if (this.getBerserk())
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezedBerserk"));
else
                    this.getRenderArea().drawArray(Database.getAscii("players/mediumSqueezed"));
                break;
        }
    };
    return Player;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var PolishedSilverSword = (function (_super) {
    __extends(PolishedSilverSword, _super);
    // Constructor
    function PolishedSilverSword() {
        _super.call(this, "eqItemWeaponPolishedSilverSword", "eqItemWeaponPolishedSilverSwordName", "eqItemWeaponPolishedSilverSwordDescription", "eqItems/weapons/polishedSilverSword");
    }
    // Public getters
    PolishedSilverSword.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A polished silver sword", "a polished silver sword"), player.getClassicCollisionBoxCollection(), 7);
        qew.getCloseCombatDelay().setFixedDelay(4, 0);
        return qew;
    };
    return PolishedSilverSword;
})(EqItem);
var PondLine = (function () {
    // Constructor
    function PondLine(x1, x2) {
        // Is the line currently used by a lolligator ?
        this.isUsed = false;
        this.x1 = x1;
        this.x2 = x2;
    }
    // Public getters
    PondLine.prototype.getIsUsed = function () {
        return this.isUsed;
    };

    PondLine.prototype.getX1 = function () {
        return this.x1;
    };

    PondLine.prototype.getX2 = function () {
        return this.x2;
    };

    // Public setters
    PondLine.prototype.setIsUsed = function (isUsed) {
        this.isUsed = isUsed;
    };
    return PondLine;
})();
var PondLolligator = (function () {
    // Constructor
    function PondLolligator(pondLines, pondLineIndex) {
        // Out width
        this.width = 13;
        // Set from the parameters
        this.pondLines = pondLines;
        this.pondLineIndex = pondLineIndex;

        // Set the orientation (randomly)
        this.isLeft = Random.flipACoin();

        if (this.isLeft == false)
            this.x = this.pondLines[this.pondLineIndex].getX1();
else
            this.x = this.pondLines[this.pondLineIndex].getX2() - this.width;

        // At first, we're not fully visible
        this.visibleType = PondLolligatorVisibleType.NOT_FULLY_VISIBLE_YET;

        // Set isUsed for the pond lines we use
        this.setIsUsedForPondLines(true);
    }
    // Public methods
    PondLolligator.prototype.draw = function (renderArea, x, y) {
        renderArea.drawArray(Database.getAscii("places/lollipopFarm/lolligator" + (this.isLeft ? "Left" : "Right") + (this.visibleType == PondLolligatorVisibleType.FULLY_VISIBLE ? "Full" : "Top")), x + this.x, y + this.pondLineIndex);
    };

    PondLolligator.prototype.move = function () {
        if (this.isLeft) {
            this.x -= 1;

            if (this.visibleType == PondLolligatorVisibleType.NOT_FULLY_VISIBLE_YET && this.x + this.width < this.pondLines[this.pondLineIndex].getX2() - 2 && Random.oneChanceOutOf(5))
                this.visibleType = PondLolligatorVisibleType.FULLY_VISIBLE;
else if (this.visibleType == PondLolligatorVisibleType.FULLY_VISIBLE && (this.x < this.pondLines[this.pondLineIndex].getX1() + 2 || Random.oneChanceOutOf(2)))
                this.visibleType = PondLolligatorVisibleType.NOT_FULLY_VISIBLE_ANYMORE;
        } else {
            this.x += 1;

            if (this.visibleType == PondLolligatorVisibleType.NOT_FULLY_VISIBLE_YET && this.x > this.pondLines[this.pondLineIndex].getX1() + 2 && Random.oneChanceOutOf(5))
                this.visibleType = PondLolligatorVisibleType.FULLY_VISIBLE;
else if (this.visibleType == PondLolligatorVisibleType.FULLY_VISIBLE && (this.x + this.width > this.pondLines[this.pondLineIndex].getX2() - 2 || Random.oneChanceOutOf(2)))
                this.visibleType = PondLolligatorVisibleType.NOT_FULLY_VISIBLE_ANYMORE;
        }
    };

    // Called to know if the lolligator should be deleted or not
    PondLolligator.prototype.shouldBeDeleted = function () {
        if (this.isLeft == false) {
            if (this.x + this.width > this.pondLines[this.pondLineIndex].getX2())
                return true;
            return false;
        } else {
            if (this.x < this.pondLines[this.pondLineIndex].getX1())
                return true;
            return false;
        }
    };

    // Called just before the lolligator is deleted
    PondLolligator.prototype.willBeDeleted = function () {
        this.setIsUsedForPondLines(false);
    };

    // Private setters
    PondLolligator.prototype.setIsUsedForPondLines = function (isUsed) {
        // Set for the line of the lolligator
        this.pondLines[this.pondLineIndex].setIsUsed(isUsed);

        if (this.pondLineIndex > 0)
            this.pondLines[this.pondLineIndex - 1].setIsUsed(isUsed);
    };
    return PondLolligator;
})();
var PondLolligatorVisibleType;
(function (PondLolligatorVisibleType) {
    PondLolligatorVisibleType[PondLolligatorVisibleType["NOT_FULLY_VISIBLE_YET"] = 0] = "NOT_FULLY_VISIBLE_YET";
    PondLolligatorVisibleType[PondLolligatorVisibleType["FULLY_VISIBLE"] = 1] = "FULLY_VISIBLE";
    PondLolligatorVisibleType[PondLolligatorVisibleType["NOT_FULLY_VISIBLE_ANYMORE"] = 2] = "NOT_FULLY_VISIBLE_ANYMORE";
})(PondLolligatorVisibleType || (PondLolligatorVisibleType = {}));
var Pos = (function () {
    // Constructor
    function Pos(x, y) {
        if (typeof x === "undefined") { x = 0; }
        if (typeof y === "undefined") { y = 0; }
        this.x = x;
        this.y = y;
    }
    // Public methods
    Pos.prototype.add = function (pos) {
        this.x += pos.x;
        this.y += pos.y;
    };

    Pos.prototype.copy = function () {
        return new Pos(this.x, this.y);
    };

    Pos.prototype.getDistance = function (pos) {
        return new Pos(this.x - pos.x, this.y - pos.y);
    };

    Pos.prototype.invert = function () {
        var temp = this.x;
        this.x = this.y;
        this.y = temp;
    };

    Pos.prototype.multiply = function (pos) {
        this.x = this.x * pos.x;
        this.y = this.y * pos.y;
        return this;
    };

    Pos.prototype.plus = function (pos) {
        return new Pos(this.x + pos.x, this.y + pos.y);
    };
    return Pos;
})();
var QuestEntityAnimation = (function () {
    // Constructor
    function QuestEntityAnimation(intervalTime, currentTime, currentAsciiIndex) {
        var asciiNames = [];
        for (var _i = 0; _i < (arguments.length - 3); _i++) {
            asciiNames[_i] = arguments[_i + 3];
        }
        this.intervalTime = intervalTime;
        this.currentTime = currentTime;
        this.currentAsciiIndex = currentAsciiIndex;
        this.asciiNames = asciiNames;
    }
    // Public methods
    QuestEntityAnimation.prototype.draw = function (renderArea) {
        renderArea.drawArray(Database.getAscii(this.asciiNames[this.currentAsciiIndex]));
    };

    QuestEntityAnimation.prototype.shouldUpdateRenderAreaAtThisFrame = function () {
        return (this.currentTime == this.intervalTime);
    };

    QuestEntityAnimation.prototype.update = function () {
        this.currentTime += 1;
        if (this.currentTime > this.intervalTime) {
            this.currentTime = 0;
            this.currentAsciiIndex += 1;
            if (this.currentAsciiIndex >= this.asciiNames.length)
                this.currentAsciiIndex = 0;
        }
    };

    // Public getters
    QuestEntityAnimation.prototype.getCurrentAsciiIndex = function () {
        return this.currentAsciiIndex;
    };
    return QuestEntityAnimation;
})();
var QuestEntityDamageReason = (function () {
    // Constructor
    function QuestEntityDamageReason(whoType, whatType) {
        // Additional parameters, depeding on the who type
        // NATURE : no parameter
        // ENTITY
        this.questEntity = null;
        this.questEntityTeam = null;
        // Additional parameters, depeding on the what type
        // WEAPON
        this.questEntityWeapon = null;
        // SPELL
        this.spellNaming = null;
        this.whoType = whoType;
        this.whatType = whatType;
    }
    // Public methods
    QuestEntityDamageReason.prototype.getQuestEntityTeam = function () {
        return this.questEntityTeam;
    };

    QuestEntityDamageReason.prototype.getWhatNaming = function () {
        switch (this.whatType) {
            case QuestEntityDamageReasonWhatType.WEAPON:
                return this.questEntityWeapon.getNaming();
                break;
            case QuestEntityDamageReasonWhatType.SPELL:
                return this.spellNaming;
                break;
        }
    };

    QuestEntityDamageReason.prototype.getWhoNaming = function () {
        switch (this.whoType) {
            case QuestEntityDamageReasonWhoType.NATURE:
                return new Naming("Nature", "nature");
                break;
            case QuestEntityDamageReasonWhoType.ENTITY:
                return this.questEntity.getNaming();
                break;
        }
    };

    // Public setters
    QuestEntityDamageReason.prototype.setQuestEntity = function (questEntity, questEntityTeam) {
        if (typeof questEntityTeam === "undefined") { questEntityTeam = null; }
        this.questEntity = questEntity;
        if (questEntityTeam == null)
            this.questEntityTeam = questEntity.getTeam();
else
            this.questEntityTeam = questEntityTeam;
        return this;
    };

    QuestEntityDamageReason.prototype.setQuestEntityWeapon = function (questEntityWeapon) {
        this.questEntityWeapon = questEntityWeapon;
        return this;
    };

    QuestEntityDamageReason.prototype.setSpellNaming = function (naming) {
        this.spellNaming = naming;
        return this;
    };
    return QuestEntityDamageReason;
})();
var QuestEntityDamageReasonWhatType;
(function (QuestEntityDamageReasonWhatType) {
    QuestEntityDamageReasonWhatType[QuestEntityDamageReasonWhatType["WEAPON"] = 0] = "WEAPON";
    QuestEntityDamageReasonWhatType[QuestEntityDamageReasonWhatType["SPELL"] = 1] = "SPELL";
})(QuestEntityDamageReasonWhatType || (QuestEntityDamageReasonWhatType = {}));
var QuestEntityDamageReasonWhoType;
(function (QuestEntityDamageReasonWhoType) {
    QuestEntityDamageReasonWhoType[QuestEntityDamageReasonWhoType["NATURE"] = 0] = "NATURE";
    QuestEntityDamageReasonWhoType[QuestEntityDamageReasonWhoType["ENTITY"] = 1] = "ENTITY";
})(QuestEntityDamageReasonWhoType || (QuestEntityDamageReasonWhoType = {}));
var QuestEntityHealthBarPositionType;
(function (QuestEntityHealthBarPositionType) {
    QuestEntityHealthBarPositionType[QuestEntityHealthBarPositionType["RELATIVE"] = 0] = "RELATIVE";
    QuestEntityHealthBarPositionType[QuestEntityHealthBarPositionType["FIXED"] = 1] = "FIXED";
    QuestEntityHealthBarPositionType[QuestEntityHealthBarPositionType["FIXED_ON_PAGE"] = 2] = "FIXED_ON_PAGE";
})(QuestEntityHealthBarPositionType || (QuestEntityHealthBarPositionType = {}));
var QuestEntityHealthBar = (function () {
    // Constructor
    function QuestEntityHealthBar(questEntity, barSize, position, positionType, drawEvenIfFull, showText, barType) {
        if (typeof position === "undefined") { position = new Pos(0, -1); }
        if (typeof positionType === "undefined") { positionType = QuestEntityHealthBarPositionType.RELATIVE; }
        if (typeof drawEvenIfFull === "undefined") { drawEvenIfFull = false; }
        if (typeof showText === "undefined") { showText = false; }
        if (typeof barType === "undefined") { barType = BarType.UNICOLOR_HEALTH; }
        // Create the bar
        this.bar = new Bar(barType);

        // Set the parameters
        this.setBarSize(barSize);
        this.questEntity = questEntity;
        this.position = position;
        this.positionType = positionType;
        this.drawEvenIfFull = drawEvenIfFull;
        this.showText = showText;

        // Update for the first time
        this.update();
    }
    // Public methods
    QuestEntityHealthBar.prototype.draw = function (renderArea) {
        if (this.shouldBeDrawn) {
            switch (this.positionType) {
                case QuestEntityHealthBarPositionType.FIXED_ON_PAGE:
                    renderArea.drawArea(this.bar, ((this.questEntity.getQuest().getRenderArea().getWidth() - 100) - this.questEntity.getQuest().getGap()) / 2 + this.questEntity.getQuest().getRealQuestPosition().x + this.position.x + this.questEntity.getQuest().getGlobalDrawingOffset().x, this.questEntity.getQuest().getRealQuestPosition().y + this.position.y + this.questEntity.getQuest().getGlobalDrawingOffset().y, new RenderTransparency(" "));
                    break;
                case QuestEntityHealthBarPositionType.FIXED:
                    renderArea.drawArea(this.bar, this.questEntity.getQuest().getRealQuestPosition().x + this.position.x + this.questEntity.getQuest().getGlobalDrawingOffset().x, this.questEntity.getQuest().getRealQuestPosition().y + this.position.y + this.questEntity.getQuest().getGlobalDrawingOffset().y, new RenderTransparency(" "));
                    break;
                case QuestEntityHealthBarPositionType.RELATIVE:
                    if (this.questEntity.getQuest().getRealQuestPosition().x + this.questEntity.getGlobalPosition().x + this.position.x > 0 && this.questEntity.getQuest().getRealQuestPosition().x + this.questEntity.getGlobalPosition().x + this.position.x + this.bar.getWidth() <= renderArea.getWidth() && this.questEntity.getGlobalPosition().y + this.position.y > 0 && this.questEntity.getGlobalPosition().y + this.position.y <= this.questEntity.getQuest().getRealQuestSize().y) {
                        renderArea.drawArea(this.bar, this.questEntity.getQuest().getRealQuestPosition().x + this.questEntity.getGlobalPosition().x + this.position.x + this.questEntity.getQuest().getGlobalDrawingOffset().x, this.questEntity.getQuest().getRealQuestPosition().y + this.questEntity.getGlobalPosition().y + this.position.y + this.questEntity.getQuest().getGlobalDrawingOffset().y, new RenderTransparency(" "));
                    }
                    break;
            }
        }
    };

    QuestEntityHealthBar.prototype.update = function () {
        if (this.drawEvenIfFull || this.questEntity.getHp() / this.questEntity.getMaxHp() != 1) {
            this.shouldBeDrawn = true;
        } else
            this.shouldBeDrawn = false;

        if (this.shouldBeDrawn) {
            if (this.showText == false)
                this.bar.update(this.questEntity.getHp() / this.questEntity.getMaxHp(), this.questEntity.getHp().toString());
else
                this.bar.update(this.questEntity.getHp() / this.questEntity.getMaxHp(), this.questEntity.getNaming().getBeginning() + " : " + this.questEntity.getHp().toString() + "/" + this.questEntity.getMaxHp().toString());
        }
    };

    // Public setters
    QuestEntityHealthBar.prototype.setBarSize = function (barSize) {
        this.barSize = barSize;
        this.bar.resize(this.barSize.x, this.barSize.y);
    };

    QuestEntityHealthBar.prototype.setDrawEvenIfFull = function (value) {
        this.drawEvenIfFull = value;
    };
    return QuestEntityHealthBar;
})();
var QuestEntityMovement = (function () {
    // Constructor
    function QuestEntityMovement(offset, intervalTime, currentTime) {
        if (typeof offset === "undefined") { offset = new Pos(0, 0); }
        if (typeof intervalTime === "undefined") { intervalTime = 0; }
        if (typeof currentTime === "undefined") { currentTime = 0; }
        // Special bools
        this.gravity = false;
        this.wormsLike = false;
        this.offset = offset;
        this.intervalTime = intervalTime;
        this.currentTime = currentTime;
    }
    // Public methods
    QuestEntityMovement.prototype.shouldMoveAtThisFrame = function () {
        return (this.currentTime == this.intervalTime);
    };

    QuestEntityMovement.prototype.update = function () {
        this.currentTime += 1;
        if (this.currentTime > this.intervalTime)
            this.currentTime = 0;
    };

    // Public getters
    QuestEntityMovement.prototype.getCurrentFrameMovement = function () {
        if (this.shouldMoveAtThisFrame())
            return this.offset;
else
            return new Pos(0, 0);
    };

    QuestEntityMovement.prototype.getGravity = function () {
        return this.gravity;
    };

    QuestEntityMovement.prototype.getOffset = function () {
        return this.offset;
    };

    QuestEntityMovement.prototype.getWormsLike = function () {
        return this.wormsLike;
    };

    // Public setters
    QuestEntityMovement.prototype.setGravity = function (value) {
        this.gravity = value;
    };

    QuestEntityMovement.prototype.setOffset = function (offset) {
        this.offset = offset;
    };

    QuestEntityMovement.prototype.setWormsLike = function (value) {
        this.wormsLike = value;
    };
    return QuestEntityMovement;
})();
var QuestEntitySpellCaster = (function () {
    // Constructor
    function QuestEntitySpellCaster(callbackCollection) {
        // The delay
        this.delay = new QuestEntityWeaponDelay();
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    QuestEntitySpellCaster.prototype.tryToCast = function () {
        if (this.delay.tryToAttack()) {
            this.callbackCollection.fire();
        }
    };

    // Public getters
    QuestEntitySpellCaster.prototype.getDelay = function () {
        return this.delay;
    };
    return QuestEntitySpellCaster;
})();
var QuestEntitySpellColor = (function () {
    // Constructor
    function QuestEntitySpellColor(quest, position, size, color) {
        this.quest = quest;
        this.position = position;
        this.size = size;
        this.color = color;
    }
    // Public methods
    QuestEntitySpellColor.prototype.draw = function (renderArea, areaPosition) {
        var x1;
        var x2;
        var y;

        for (var i = 0; i < this.size.y; i++) {
            // x1
            x1 = this.position.x + areaPosition.x;
            if (x1 < this.quest.getRealQuestPosition().x)
                x1 = this.quest.getRealQuestPosition().x;

            // x2
            x2 = this.position.x + areaPosition.x + this.size.x;
            if (x2 > this.quest.getRealQuestPosition().x + this.quest.getRealQuestSize().x)
                x2 = this.quest.getRealQuestPosition().x + this.quest.getRealQuestSize().x;

            // y
            y = this.position.y + areaPosition.y + i;

            if (x1 < x2 && y >= this.quest.getRealQuestPosition().y && y < this.quest.getRealQuestPosition().y + this.quest.getRealQuestSize().y) {
                renderArea.addBackgroundColor(x1, x2, y, this.color);
            }
        }
    };
    return QuestEntitySpellColor;
})();
var QuestEntityTeam;
(function (QuestEntityTeam) {
    QuestEntityTeam[QuestEntityTeam["PLAYER"] = 0] = "PLAYER";
    QuestEntityTeam[QuestEntityTeam["MOBS"] = 1] = "MOBS";
    QuestEntityTeam[QuestEntityTeam["NATURE"] = 2] = "NATURE";
})(QuestEntityTeam || (QuestEntityTeam = {}));
var QuestEntityWeaponDelay = (function () {
    // Constructor
    function QuestEntityWeaponDelay() {
        // By default, the type is FIXED and the maxDelay is 0
        this.type = QuestEntityWeaponDelayType.FIXED;
        this.currentDelay = 0;
        this.maxDelay = 0;
    }
    // Public methods
    QuestEntityWeaponDelay.prototype.getText = function () {
        // Create the delay var
        var delay;

        if (this.type == QuestEntityWeaponDelayType.BETWEEN)
            delay = Math.floor(this.minBetweenDelay + (this.maxBetweenDelay - this.minBetweenDelay) / 2);
else
            delay = this.maxDelay;

        switch (delay) {
            case 0:
                return "incredibly fast";
                break;
            case 1:
                return "very fast";
                break;
            case 2:
                return "fast";
                break;
            case 3:
                return "rather fast";
                break;
            case 4:
                return "medium speed";
            case 5:
                return "rather slow";
                break;
            case 6:
            case 7:
                return "slow";
                break;
            case 8:
            case 9:
                return "very slow";
                break;
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
                return "incredibly slow";
                break;
            default:
                "couldn't be slower";
                break;
        }
    };

    QuestEntityWeaponDelay.prototype.tryToAttack = function () {
        // We increase the current delay
        this.currentDelay++;

        switch (this.type) {
            case QuestEntityWeaponDelayType.FIXED:
                if (this.currentDelay > this.maxDelay) {
                    this.currentDelay = 0;
                    return true;
                }
                break;
            case QuestEntityWeaponDelayType.BETWEEN:
                if (this.currentDelay > this.maxDelay) {
                    this.currentDelay = 0;
                    this.chooseBetweenDelay();
                    return true;
                }
                break;
            case QuestEntityWeaponDelayType.ONCE_THEN_WAIT:
                if (this.currentDelay > this.maxDelay) {
                    return true;
                }
                break;
        }

        return false;
    };

    QuestEntityWeaponDelay.prototype.setBetweenDelay = function (minBetweenDelay, maxBetweenDelay, currentDelay) {
        if (typeof currentDelay === "undefined") { currentDelay = 0; }
        this.type = QuestEntityWeaponDelayType.BETWEEN;
        this.minBetweenDelay = minBetweenDelay;
        this.maxBetweenDelay = maxBetweenDelay;
        this.chooseBetweenDelay();
    };

    QuestEntityWeaponDelay.prototype.setFixedDelay = function (maxDelay, currentDelay) {
        if (typeof maxDelay === "undefined") { maxDelay = 0; }
        if (typeof currentDelay === "undefined") { currentDelay = 0; }
        this.type = QuestEntityWeaponDelayType.FIXED;
        this.maxDelay = maxDelay;
        this.currentDelay = currentDelay;
    };

    QuestEntityWeaponDelay.prototype.setOnceThenWaitDelay = function (maxDelay, currentDelay) {
        if (typeof maxDelay === "undefined") { maxDelay = 0; }
        if (typeof currentDelay === "undefined") { currentDelay = 0; }
        this.type = QuestEntityWeaponDelayType.ONCE_THEN_WAIT;
        this.maxDelay = maxDelay;
        this.currentDelay = currentDelay;
    };

    QuestEntityWeaponDelay.prototype.theWeaponAttacked = function () {
        if (this.type == QuestEntityWeaponDelayType.ONCE_THEN_WAIT)
            this.currentDelay = 0;
    };

    // Private methods
    QuestEntityWeaponDelay.prototype.chooseBetweenDelay = function () {
        this.maxDelay = Random.between(this.minBetweenDelay, this.maxBetweenDelay);
    };
    return QuestEntityWeaponDelay;
})();
var QuestEntityWeaponDelayType;
(function (QuestEntityWeaponDelayType) {
    QuestEntityWeaponDelayType[QuestEntityWeaponDelayType["FIXED"] = 0] = "FIXED";
    QuestEntityWeaponDelayType[QuestEntityWeaponDelayType["BETWEEN"] = 1] = "BETWEEN";
    QuestEntityWeaponDelayType[QuestEntityWeaponDelayType["ONCE_THEN_WAIT"] = 2] = "ONCE_THEN_WAIT";
})(QuestEntityWeaponDelayType || (QuestEntityWeaponDelayType = {}));
var QuestItemFound = (function () {
    // Constructor
    function QuestItemFound(quest, savingName, foundText, getText) {
        this.quest = quest;
        this.savingName = savingName;
        this.foundText = foundText;
        this.getText = getText;
    }
    // Public methods
    QuestItemFound.prototype.found = function () {
        this.quest.getGame().getQuestLog().addMessage(new QuestLogMessage(this.foundText, null, true));
    };

    QuestItemFound.prototype.get = function () {
        this.quest.getGame().getQuestLog().addMessage(new QuestLogMessage(this.getText, null, true));
    };

    // Public getters
    QuestItemFound.prototype.getSavingName = function () {
        return this.savingName;
    };
    return QuestItemFound;
})();
var QuestLogMessage = (function () {
    // Constructor
    function QuestLogMessage(left, right, bold) {
        if (typeof right === "undefined") { right = null; }
        if (typeof bold === "undefined") { bold = false; }
        // Strings
        this.left = null;
        this.right = null;
        // Set the parameters
        this.left = left;
        this.right = right;
        this.bold = bold;

        if (this.left.length > 100 - (this.right != null ? this.right.length : 0)) {
            this.left = this.left.substr(0, 100 - (this.right != null ? this.right.length : 0) - 7) + " (...)";
        }
    }
    // Public methods
    QuestLogMessage.prototype.draw = function (renderArea, pos, width) {
        if (this.left != null) {
            renderArea.drawString(this.left, pos.x, pos.y);
            if (this.bold)
                renderArea.addBold(pos.x, pos.x + this.left.length, pos.y);
        }
        if (this.right != null) {
            renderArea.drawString(this.right, pos.x + width - this.right.length, pos.y);
            if (this.bold)
                renderArea.addBold(pos.x + width - this.right.length, width, pos.y);
        }
    };
    return QuestLogMessage;
})();
var QuestLog = (function () {
    // Constructor
    function QuestLog() {
        // Array of messages contained in the quest log
        this.messages = [];
    }
    // Public method
    QuestLog.prototype.addDelimiter = function () {
        this.messages.push(new QuestLogMessage("----------------------------------------------------------------------------------------------------"));
        this.messages.push(new QuestLogMessage(""));
    };

    QuestLog.prototype.addMessage = function (message) {
        // We add the message
        this.messages.push(message);

        // We check the log size
        this.checkLogSize();
    };

    QuestLog.prototype.draw = function (renderArea, pos) {
        // We draw the lines
        renderArea.drawHorizontalLine("-", pos.x, pos.x + 100, pos.y);
        renderArea.drawHorizontalLine("-", pos.x, pos.x + 100, pos.y + 11);

        for (var i = 0; i < this.messages.length; i++) {
            this.messages[i].draw(renderArea, new Pos(pos.x, 1 + pos.y + this.messages.length - 1 - i), 100);
        }
    };

    // Private methods
    QuestLog.prototype.checkLogSize = function () {
        if (this.messages.length > 10) {
            this.messages.splice(0, this.messages.length - 10);
        }
    };
    return QuestLog;
})();
var QuestPlayerSpellCountdownType;
(function (QuestPlayerSpellCountdownType) {
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["SPELLS"] = 0] = "SPELLS";
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["POTIONS"] = 1] = "POTIONS";
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["ITEM_CAPACITIES"] = 2] = "ITEM_CAPACITIES";
    QuestPlayerSpellCountdownType[QuestPlayerSpellCountdownType["BLACKHOLE"] = 3] = "BLACKHOLE";
})(QuestPlayerSpellCountdownType || (QuestPlayerSpellCountdownType = {}));
// Potions
Saving.registerBool("questPlayerSpellHealthPotionHasSpell", false);
Saving.registerBool("questPlayerSpellTurtlePotionHasSpell", false);
Saving.registerBool("questPlayerSpellAntiGravityPotionHasSpell", false);
Saving.registerBool("questPlayerSpellBerserkPotionHasSpell", false);
Saving.registerBool("questPlayerSpellCloningPotionHasSpell", false);
Saving.registerBool("questPlayerSpellPPotionHasSpell", false);
Saving.registerBool("questPlayerSpellXPotionHasSpell", false);

Saving.registerNumber("questPlayerSpellHealthPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellAntiGravityPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellTurtlePotionQuantity", 0);
Saving.registerNumber("questPlayerSpellBerserkPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellCloningPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellPPotionQuantity", 0);
Saving.registerNumber("questPlayerSpellXPotionQuantity", 0);

var QuestPlayerSpell = (function () {
    // Constructor
    function QuestPlayerSpell(quest, buttonClassName, buttonPosition, buttonText, buttonColor, callbackCollection, countdownType, countdownTime, underlinedLetter, hotkeyLetter, numberIdWichLimitsQuantity) {
        if (typeof underlinedLetter === "undefined") { underlinedLetter = null; }
        if (typeof hotkeyLetter === "undefined") { hotkeyLetter = null; }
        if (typeof numberIdWichLimitsQuantity === "undefined") { numberIdWichLimitsQuantity = null; }
        this.quest = quest;
        this.buttonClassName = buttonClassName;
        this.buttonPosition = buttonPosition;
        this.buttonText = buttonText;
        this.buttonColor = buttonColor;
        this.callbackCollection = callbackCollection;
        this.countdownType = countdownType;
        this.countdownTime = countdownTime;
        this.underlinedLetter = underlinedLetter;
        this.hotkeyLetter = hotkeyLetter;
        this.numberIdWichLimitsQuantity = numberIdWichLimitsQuantity;
    }
    // Public methods
    QuestPlayerSpell.prototype.draw = function (renderArea, position) {
        // Set the text
        var text = this.buttonText;

        if (this.numberIdWichLimitsQuantity != null) {
            if (Saving.loadNumber(this.numberIdWichLimitsQuantity) <= 999)
                text += " " + Saving.loadNumber(this.numberIdWichLimitsQuantity);
else
                text += " 999+";
        }

        // Add the button
        renderArea.addAsciiRealButton(text, position.x + this.buttonPosition.x, position.y + this.buttonPosition.y, this.buttonClassName + " keepBlackTextWhenInverted", "", false, this.underlinedLetter, this.buttonColor);

        // Add the link
        renderArea.addLinkCall("." + this.buttonClassName, new CallbackCollection(this.cast.bind(this)));
    };

    QuestPlayerSpell.prototype.getHotkey = function () {
        return new Hotkey(this.hotkeyLetter, new CallbackCollection(this.cast.bind(this)));
    };

    // Public getters
    QuestPlayerSpell.prototype.getButtonPosition = function () {
        return this.buttonPosition;
    };

    // Private methods
    QuestPlayerSpell.prototype.cast = function () {
        var canWeCast = true;

        if (this.quest.getQuestEnded())
            canWeCast = false;

        if (canWeCast == true) {
            switch (this.countdownType) {
                case QuestPlayerSpellCountdownType.SPELLS:
                    if (this.quest.getPlayerSpellsCountdown() > 0)
                        canWeCast = false;
                    break;
                case QuestPlayerSpellCountdownType.POTIONS:
                    if (this.quest.getPlayerPotionsCountdown() > 0)
                        canWeCast = false;
                    break;
                case QuestPlayerSpellCountdownType.BLACKHOLE:
                    if (this.countdownTime <= 0)
                        canWeCast = false;
                    break;
                default:
                    break;
            }
        }

        if (this.numberIdWichLimitsQuantity != null) {
            if (Saving.loadNumber(this.numberIdWichLimitsQuantity) <= 0) {
                canWeCast = false;
            }
        }

        if (canWeCast == true) {
            switch (this.countdownType) {
                case QuestPlayerSpellCountdownType.SPELLS:
                    this.quest.increasePlayerSpellsCountdown(this.countdownTime);
                    break;
                case QuestPlayerSpellCountdownType.POTIONS:
                    this.quest.increasePlayerPotionsCountdown(this.countdownTime);
                    break;
                case QuestPlayerSpellCountdownType.BLACKHOLE:
                    this.countdownTime -= 1;
                    break;
                default:
                    break;
            }

            if (this.numberIdWichLimitsQuantity != null) {
                Saving.saveNumber(this.numberIdWichLimitsQuantity, Saving.loadNumber(this.numberIdWichLimitsQuantity) - 1);
            }

            // Fire the callback collection which was given to us
            this.callbackCollection.fire();
        }
    };
    return QuestPlayerSpell;
})();
var Random;
(function (Random) {
    function between(a, b) {
        if (Bugs.getUltimateBugLevel() >= 2)
            return b;

        return Math.floor(Math.random() * (b - a + 1)) + a;
    }
    Random.between = between;

    function flipACoin() {
        if (Bugs.getUltimateBugLevel() >= 2)
            return true;

        if (Math.random() < 0.5)
            return false;
        return true;
    }
    Random.flipACoin = flipACoin;

    function fromArray(arr) {
        if (Bugs.getUltimateBugLevel() >= 4)
            return fromArray(["a", "b", "c", "d", -852, null, "aniwey", "ilovebugs", "42", 42]);

        return arr[upTo(arr.length - 1)];
    }
    Random.fromArray = fromArray;

    function fromPosition(pos) {
        if (Bugs.getUltimateBugLevel() >= 3)
            return new Pos(-pos.x, -pos.y);

        return new Pos(Random.upTo(pos.x), Random.upTo(pos.y));
    }
    Random.fromPosition = fromPosition;

    function oneChanceOutOf(n) {
        if (Bugs.getUltimateBugLevel() >= 1)
            return flipACoin();

        if (this.upTo(n - 1) == 0)
            return true;
        return false;
    }
    Random.oneChanceOutOf = oneChanceOutOf;

    function upTo(n) {
        if (Bugs.getUltimateBugLevel() >= 3)
            return -n;

        return Math.floor(Math.random() * (n + 1));
    }
    Random.upTo = upTo;
})(Random || (Random = {}));
///<reference path="QuestEntity.ts"/>
var Rat = (function (_super) {
    __extends(Rat, _super);
    // Constructor
    function Rat(quest, pos) {
        _super.call(this, quest, pos, new Naming("A rat", "a rat"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement());

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(3);
        this.setHp(3);

        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/cellar/rat"));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its teeth", "its teeth"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 2))), 1));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(3);
    }
    // Public methods
    Rat.prototype.willDie = function () {
        if (Random.oneChanceOutOf(3))
            this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(1), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
else
            this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage()));
    };
    return Rat;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var RedEnchantedGloves = (function (_super) {
    __extends(RedEnchantedGloves, _super);
    // Constructor
    function RedEnchantedGloves() {
        _super.call(this, "eqItemGlovesRedEnchantedGloves", "eqItemGlovesRedEnchantedGlovesName", "eqItemGlovesRedEnchantedGlovesDescription", "eqItems/gloves/redEnchantedGloves");
        // The timer (to avoid casting fireballs too often..)
        this.currentTimer = 0;
        this.maxTimer = 5;
    }
    // Special ability
    RedEnchantedGloves.prototype.getSpecialAbility = function () {
        return "Randomly cast small fireballs around you (red enchanted gloves).";
    };

    // update
    RedEnchantedGloves.prototype.update = function (player, quest) {
        this.currentTimer += 1;

        if (this.currentTimer >= this.maxTimer) {
            // Cast the fireball
            this.castFireball(player, quest);

            // Reset the timer
            this.currentTimer = 0;
        }
    };

    // Private methods
    RedEnchantedGloves.prototype.castFireball = function (player, quest) {
        // Create the fireball
        var fireball = new Fireball(quest, player.getSpellCastingPosition(), new Naming("A small fireball", "a small fireball"), new Color(ColorType.RED_ENCHANTED_GLOVES_FIREBALL), new Pos(2, 1), 15, player.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A small fireball", "a small fireball")));

        // Set the direction
        fireball.setTargetTypeNoTarget(Algo.getRandomNotImmobileDirectionUpToThisSpeed(1).multiply(new Pos(2, 2)));

        // Add the entity
        quest.addEntity(fireball);
    };
    return RedEnchantedGloves;
})(EqItem);
var RenderLinkCallbackCollection = (function (_super) {
    __extends(RenderLinkCallbackCollection, _super);
    // Constructor
    function RenderLinkCallbackCollection(callbackCollection) {
        _super.call(this);
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    RenderLinkCallbackCollection.prototype.run = function () {
        this.callbackCollection.fire();
    };
    return RenderLinkCallbackCollection;
})(RenderLink);
var RenderLinkChange = (function (_super) {
    __extends(RenderLinkChange, _super);
    // Constructor
    function RenderLinkChange(element, callbackCollection) {
        _super.call(this);
        this.element = element;
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    RenderLinkChange.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;

        $(this.element).change(function (event) {
            renderLink.callbackCollection.fire();
            return false;
        });
    };
    return RenderLinkChange;
})(RenderLink);
var RenderLinkCheckbox = (function (_super) {
    __extends(RenderLinkCheckbox, _super);
    // Constructor
    function RenderLinkCheckbox(element, callbackCollectionWhenChecked, callbackCollectionWhenUnchecked) {
        _super.call(this);
        this.element = element;
        this.callbackCollectionWhenChecked = callbackCollectionWhenChecked;
        this.callbackCollectionWhenUnchecked = callbackCollectionWhenUnchecked;
    }
    // Public methods
    RenderLinkCheckbox.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;

        // We set the change event
        $(this.element).change(function (event) {
            if ($(this).is(':checked')) {
                // We fire the callback collection
                renderLink.callbackCollectionWhenChecked.fire();
            } else {
                renderLink.callbackCollectionWhenUnchecked.fire();
            }

            return false;
        });
    };
    return RenderLinkCheckbox;
})(RenderLink);
var RenderLinkClick = (function (_super) {
    __extends(RenderLinkClick, _super);
    // Constructor
    function RenderLinkClick(element, callbackCollection) {
        _super.call(this);
        this.element = element;
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    RenderLinkClick.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;

        $(this.element).mouseup(function (event) {
            renderLink.callbackCollection.fire();
            return false;
        });
    };
    return RenderLinkClick;
})(RenderLink);
var RenderLinkInput = (function (_super) {
    __extends(RenderLinkInput, _super);
    // Constructor
    function RenderLinkInput(element, enigmaAnswer, callbackCollection, callbackCollectionWrong) {
        _super.call(this);
        this.element = element;
        this.enigmaAnswer = enigmaAnswer;
        this.callbackCollection = callbackCollection;
        this.callbackCollectionWrong = callbackCollectionWrong;
    }
    // Public methods
    RenderLinkInput.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;

        // We set the change event
        $(this.element).change(function (event) {
            if (renderLink.enigmaAnswer.isRight($(this).val()))
                renderLink.callbackCollection.fire();
else if (renderLink.callbackCollectionWrong != null) {
                renderLink.callbackCollectionWrong.fire();
            }

            // We empty the input area
            $(this).val("");

            return false;
        });

        // We set the focus
        $(this.element).focus();
    };
    return RenderLinkInput;
})(RenderLink);
var RenderLinkOnHoverShowTooltip = (function (_super) {
    __extends(RenderLinkOnHoverShowTooltip, _super);
    // Constructor
    function RenderLinkOnHoverShowTooltip(classHover, classTooltip) {
        _super.call(this);
        this.classHover = classHover;
        this.classTooltip = classTooltip;
    }
    // Public methods
    RenderLinkOnHoverShowTooltip.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;

        // If we hover on the classHover elements
        $(this.classHover).hover(function (event) {
            // We show the classTooltip tooltips
            $(renderLink.classTooltip).css({
                "display": "block"
            });

            // Avoid event bubbling
            return false;
        });

        // Else, if we're out of the classHover elements
        $(this.classHover).mouseout(function (event) {
            // We stop showing the classTooltip tooltips
            $(renderLink.classTooltip).css({
                display: "none"
            });

            // Avoid event bubbling
            return false;
        });

        // If the mouse moves, we put the classTooltip elements under the mouse
        $(this.classHover).on('mousemove', function (e) {
            $(renderLink.classTooltip).css({
                left: e.pageX - $(document).scrollLeft(),
                top: e.pageY - $(document).scrollTop()
            });
        });
    };
    return RenderLinkOnHoverShowTooltip;
})(RenderLink);
///<reference path="RenderLink.ts"/>
var RenderLinkOver = (function (_super) {
    __extends(RenderLinkOver, _super);
    // Constructor
    function RenderLinkOver(firstElement, secondElement) {
        _super.call(this);
        this.firstElement = firstElement;
        this.secondElement = secondElement;
    }
    // Public methods
    RenderLinkOver.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;

        $(this.firstElement).mouseenter(function (event) {
            $(renderLink.secondElement).show();

            return false;
        }).mouseleave(function (event) {
            $(renderLink.secondElement).hide();

            return false;
        });
        /*
        $(this.firstElement).hover(
        function(){
        $(renderLink.secondElement).css('visibility', 'visible');
        },
        function(){
        $(renderLink.secondElement).css('visibility', 'hidden');
        }
        );
        */
    };
    return RenderLinkOver;
})(RenderLink);
var RenderLinkSimpleInput = (function (_super) {
    __extends(RenderLinkSimpleInput, _super);
    // Constructor
    function RenderLinkSimpleInput(element, callbackCollection, defaultValue, hasFocus) {
        _super.call(this);
        this.element = element;
        this.callbackCollection = callbackCollection;
        this.defaultValue = defaultValue;
        this.hasFocus = hasFocus;
    }
    // Public methods
    RenderLinkSimpleInput.prototype.run = function () {
        // We copy the render link so we can use it in the functions below
        var renderLink = this;

        if (this.defaultValue != null) {
            // We set the default value
            $(this.element).val(this.defaultValue);
        }

        // We set the change event
        $(this.element).change(function (event) {
            // We fire the callback collection
            renderLink.callbackCollection.fire();

            return false;
        });

        if (this.hasFocus)
            $(this.element).focus();
    };
    return RenderLinkSimpleInput;
})(RenderLink);
///<reference path="RenderTag.ts"/>
var RenderTagLt = (function (_super) {
    __extends(RenderTagLt, _super);
    // Constructor
    function RenderTagLt(x) {
        _super.call(this, x, "");
    }
    // Public methods
    RenderTagLt.prototype.clone = function () {
        return _super.prototype.clone.call(this);
    };

    RenderTagLt.prototype.draw = function (str) {
        // Instead of adding ourselves, we delete one character under the x position and then add the "&lt;"
        str = str.replaceAt(this.getX(), "&");
        return str.addAt(this.getX() + 1, "lt;");
    };
    return RenderTagLt;
})(RenderTag);
var RenderTransparency = (function () {
    // Constructor
    function RenderTransparency(alphaCharacter, metaAlphaCharacter) {
        if (typeof metaAlphaCharacter === "undefined") { metaAlphaCharacter = null; }
        this.alphaCharacter = alphaCharacter;
        this.metaAlphaCharacter = metaAlphaCharacter;
    }
    // Public getters
    RenderTransparency.prototype.getAlphaCharacter = function () {
        return this.alphaCharacter;
    };

    RenderTransparency.prototype.getMetaAlphaCharacter = function () {
        return this.metaAlphaCharacter;
    };
    return RenderTransparency;
})();
///<reference path="EqItem.ts"/>
var RocketBoots = (function (_super) {
    __extends(RocketBoots, _super);
    // Constructor
    function RocketBoots() {
        _super.call(this, "eqItemBootsRocketBoots", "eqItemBootsRocketBootsName", "eqItemBootsRocketBootsDescription", "eqItems/boots/rocketBoots");
    }
    // Special ability
    RocketBoots.prototype.getSpecialAbility = function () {
        return "Jump in mid-air without limit (rocket boots).";
    };
    return RocketBoots;
})(EqItem);
///<reference path="Place.ts"/>
///<reference path="main.ts"/>
var Save = (function (_super) {
    __extends(Save, _super);
    // Constructor
    function Save(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The currently selected slot (slot1 by default)
        this.selectedSlot = "slot1";
        // The last local autosave minute we drew (used to refresh the page at the right time)
        this.lastLocalAutosaveMinute = null;
        // Should we show the file save warning?
        this.showFileSaveWarning = false;
        // The textarea content
        this.fileSaveTextareaContent = null;

        // Resize
        this.resize();

        // Create the slots array
        this.createSlotsArray();

        // Update
        this.update();
    }
    // getRenderArea()
    Save.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // willBeDisplayed()
    Save.prototype.willBeDisplayed = function () {
        // We resize (we must do this there and not in the constructor because the size depends on the translation)
        this.resize();

        // We add a callback : we will be updated every second (in order to show the correct time for the local autosave countdown)
        this.getGame().getOneSecondCallbackCollection().addCallback(this.oneSecondCallback.bind(this));
    };

    // Private methods
    Save.prototype.clickedAutosave = function () {
        // Save on the selected slot
        Saving.save(this.getGame(), MainLoadingType.LOCAL, this.selectedSlot);

        // Enable autosaving
        this.getGame().enableLocalAutosave(this.selectedSlot);

        // Re-create the slots array
        this.createSlotsArray();

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    Save.prototype.clickedDisableAutosave = function () {
        // We disable auto saving
        this.getGame().disableLocalAutosave();

        // We update
        this.update();
        this.getGame().updatePlace();
    };

    Save.prototype.clickedFileLoad = function () {
        Main.reloadEverythingFromFile($(".saveFileLoadTextarea").val());
    };

    Save.prototype.clickedFileSave = function () {
        // Save some special variables by calling the save() methods of various objects
        this.getGame().save();
        this.getGame().getPlayer().save();

        // We now show the warning
        this.showFileSaveWarning = true;

        // Reset the textarea content
        this.fileSaveTextareaContent = "";

        for (var str in Saving.getAllBools()) {
            if (this.fileSaveTextareaContent != "")
                this.fileSaveTextareaContent += ", ";
            this.fileSaveTextareaContent += "bool " + str + "=" + Saving.boolToString(Saving.getAllBools()[str]);
        }

        for (var str in Saving.getAllNumbers()) {
            if (this.fileSaveTextareaContent != "")
                this.fileSaveTextareaContent += ", ";
            this.fileSaveTextareaContent += "number " + str + "=" + Saving.numberToString(Saving.getAllNumbers()[str]);
        }

        for (var str in Saving.getAllStrings()) {
            if (this.fileSaveTextareaContent != "")
                this.fileSaveTextareaContent += ", ";
            this.fileSaveTextareaContent += "string " + str + "=" + Saving.getAllStrings()[str];
        }

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    Save.prototype.clickedSave = function () {
        // Save on the selected slot
        Saving.save(this.getGame(), MainLoadingType.LOCAL, this.selectedSlot);

        // Re-create the slots array
        this.createSlotsArray();

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    Save.prototype.createSlotsArray = function () {
        // Reset the array
        this.slotsArray = [];

        for (var i = 1; i <= 5; i++) {
            this.slotsArray.push("slot" + i.toString());
            this.slotsArray.push("Slot " + i.toString() + " (" + LocalSaving.getSlotSummaryAsString("slot" + i.toString()) + ")");
        }
    };

    Save.prototype.drawGreen = function (text, x, y, translated) {
        if (typeof translated === "undefined") { translated = false; }
        this.renderArea.drawString(text, x, y, translated);
        this.renderArea.addColor(x, x + text.length, y, new Color(ColorType.SAVE_GREEN));
    };

    Save.prototype.drawLocalLoad = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;

        // Var we will use for link generation
        var link;

        // Title
        this.drawTitle("saveLocalLoadTitle", y + yAdd);

        if (LocalSaving.supportsLocalSaving()) {
            // "You can load.."
            this.drawPoint("saveLocalLoadYouCan", x, y + yAdd + 2);
            if (Database.isTranslated())
                yAdd += 1;

            for (var i = 1; i <= 5; i++) {
                link = "http://candybox2.net/?slot=" + i.toString();
                this.renderArea.addHtmlLink(x + 2, y + yAdd + 3 + i, link, link);
                this.renderArea.drawString("(slot " + i.toString() + ")", x + link.length + 4, y + yAdd + 3 + i);
            }

            // "Thanks to.."
            this.drawPoint("saveLocalLoadThanksTo", x, y + yAdd + 10);
            if (Database.isTranslated())
                yAdd += 1;
        } else {
            // Warning messages
            this.drawWarning(Database.getText("saveLocalSaveWarning0") + " (local storage and application cache)", x, y + yAdd + 2);
            this.drawWarning(Database.getText("saveLocalSaveWarning1"), x, y + yAdd + 3);

            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning0"), x, y + yAdd + 5, true);
            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning1"), x, y + yAdd + 6, true);
        }

        // Return yAdd
        return yAdd;
    };

    Save.prototype.drawLocalSave = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;

        // Title & why
        this.drawTitle("saveLocalSaveTitle", y + yAdd);
        this.drawPoint("saveLocalSaveWhy", x, y + yAdd + 2);
        if (Database.isTranslated())
            yAdd += 1;

        if (LocalSaving.supportsLocalSaving()) {
            // Choose a slot text
            this.drawPoint("saveLocalSaveChooseSlot", x, y + yAdd + 4);

            // Slots list
            this.renderArea.addList(x + 5, x + 45, y + yAdd + 7, "saveLocalSaveSlotsList", new CallbackCollection(this.slotSelected.bind(this)), this.slotsArray);

            if (this.getGame().getLocalAutosaveEnabled()) {
                this.drawGreen(Database.getText("saveLocalSaveAutosaveEnabled"), x, y + yAdd + 9);
                if (Database.getTranslatedText("saveLocalSaveAutosaveEnabled") != "")
                    this.drawGreen("(" + Database.getTranslatedText("saveLocalSaveAutosaveEnabled") + ")", x, y + yAdd + 10, true);
                this.drawGreen("Next save in " + Algo.pluralFormat(Math.ceil(this.getGame().getLocalAutosaveTime() / 60), " minute", " minutes") + " on slot " + this.getGame().getLocalAutosaveSlot().substr(4, 1) + ".", x, y + yAdd + 11);
            }

            // Separation lines
            this.renderArea.drawVerticalLine("|", x + 50, y + yAdd + 5, y + yAdd + 11);
            this.renderArea.drawHorizontalLine("-", x, x + 100, y + yAdd + 3);
            this.renderArea.drawHorizontalLine("-", x, x + 100, y + yAdd + 12);

            // Choose what to do text
            this.drawPoint("saveLocalSaveChooseWhatToDo", x + 51, y + yAdd + 4);

            // Add save button
            this.renderArea.addAsciiRealButton(Database.getText("saveLocalSaveSaveButton") + " on slot " + this.selectedSlot.substr(4, 1), x + 51, y + yAdd + 7, "saveLocalSaveSaveButton", Database.getTranslatedText("saveLocalSaveSaveButton"), true, -1, null, false);
            this.renderArea.addLinkCall(".saveLocalSaveSaveButton", new CallbackCollection(this.clickedSave.bind(this)));

            if (this.getGame().getLocalAutosaveEnabled() == false) {
                // Add autosave button
                this.renderArea.addAsciiRealButton(Database.getText("saveLocalSaveAutosaveButton") + " on slot " + this.selectedSlot.substr(4, 1), x + 51, y + yAdd + 10, "saveLocalSaveAutosaveButton", Database.getTranslatedText("saveLocalSaveAutosaveButton"), true, -1, null, false);
                this.renderArea.addLinkCall(".saveLocalSaveAutosaveButton", new CallbackCollection(this.clickedAutosave.bind(this)));
            } else {
                // Add disable autosave button
                this.renderArea.addAsciiRealButton(Database.getText("saveLocalSaveDisableAutosaveButton"), x + 51, y + yAdd + 10, "saveLocalSaveDisableAutosaveButton", Database.getTranslatedText("saveLocalSaveDisableAutosaveButton"), true, -1, null, false);
                this.renderArea.addLinkCall(".saveLocalSaveDisableAutosaveButton", new CallbackCollection(this.clickedDisableAutosave.bind(this)));
            }
        } else {
            // Warning messages
            this.drawWarning(Database.getText("saveLocalSaveWarning0") + " (local storage and application cache)", x, y + yAdd + 4);
            this.drawWarning(Database.getText("saveLocalSaveWarning1"), x, y + yAdd + 5);

            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning0"), x, y + yAdd + 7, true);
            this.drawWarning(Database.getTranslatedText("saveLocalSaveWarning1"), x, y + yAdd + 8, true);
        }

        // Return yAdd
        return yAdd;
    };

    Save.prototype.drawFileLoad = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;

        // Title
        this.drawTitle("saveFileLoadTitle", y + yAdd);

        // Instructions
        this.renderArea.drawString(Database.getText("saveFileLoadPaste"), x, y + yAdd + 2);
        this.renderArea.drawString(Database.getTranslatedText("saveFileLoadPaste"), x, y + yAdd + 3, true);

        // Add the text area
        this.renderArea.addTextarea(x + 2, y + yAdd + 5, 96, 6, "saveFileLoadTextarea");

        // Add the load button
        this.renderArea.addAsciiRealButton(Database.getText("saveFileLoadButton"), 48, y + yAdd + 13, "saveFileLoadButton", Database.getTranslatedText("saveFileLoadButton"), true);
        this.renderArea.addLinkCall(".saveFileLoadButton", new CallbackCollection(this.clickedFileLoad.bind(this)));

        // Return yAdd
        return yAdd;
    };

    Save.prototype.drawFileSave = function (x, y) {
        // The y we will return (will remain 0 if there's no translation to show)
        var yAdd = 0;

        // The title
        this.drawTitle("saveFileSaveTitle", y + yAdd);

        // The "why"
        this.renderArea.drawString(Database.getText("saveFileSaveWhy0"), x, y + yAdd + 2);
        this.renderArea.drawString(" - " + Database.getText("saveFileSaveWhy1"), x, y + yAdd + 3);
        this.renderArea.drawString(" - " + Database.getText("saveFileSaveWhy2"), x, y + yAdd + 4);
        this.renderArea.drawString(" - " + Database.getText("saveFileSaveWhy3"), x, y + yAdd + 5);
        this.renderArea.drawString("   " + Database.getText("saveFileSaveWhy4"), x, y + yAdd + 6);

        if (Database.isTranslated()) {
            this.renderArea.drawString(Database.getTranslatedText("saveFileSaveWhy0"), x, y + yAdd + 8, true);
            this.renderArea.drawString(" - " + Database.getTranslatedText("saveFileSaveWhy1"), x, y + yAdd + 9, true);
            this.renderArea.drawString(" - " + Database.getTranslatedText("saveFileSaveWhy2"), x, y + yAdd + 10, true);
            this.renderArea.drawString(" - " + Database.getTranslatedText("saveFileSaveWhy3"), x, y + yAdd + 11, true);
            this.renderArea.drawString("   " + Database.getTranslatedText("saveFileSaveWhy4"), x, y + yAdd + 12, true);
            yAdd += 6;
        }

        // Add the button
        this.renderArea.addAsciiRealButton(Database.getText("saveFileSaveButton"), 35, y + yAdd + 8, "saveFileSaveButton", Database.getTranslatedText("saveFileSaveButton"), true);
        this.renderArea.addLinkCall(".saveFileSaveButton", new CallbackCollection(this.clickedFileSave.bind(this)));

        // Add the text area
        this.renderArea.addTextarea(x + 2, y + yAdd + 11, 96, 6, "saveFileSaveTextarea", (this.fileSaveTextareaContent != null ? this.fileSaveTextareaContent : ""));

        if (this.showFileSaveWarning) {
            this.drawWarning(Database.getText("saveFileSaveWarning"), x + 2, y + yAdd + 12);
            this.drawWarning(Database.getTranslatedText("saveFileSaveWarning"), x + 2, y + yAdd + 13, true);
        }

        // We return yAdd
        return yAdd;
    };

    Save.prototype.drawPoint = function (textName, x, y) {
        this.renderArea.drawString(Database.getText(textName), x, y);
        this.renderArea.drawString(Database.getTranslatedText(textName), x, y + 1, true);
    };

    Save.prototype.drawTitle = function (textName, y) {
        var x = 50 - Math.floor((Database.getText(textName).length / 2 + 1 + Database.getTranslatedText(textName).length / 2));
        this.renderArea.drawString(Database.getText(textName), x, y);
        this.renderArea.addBold(x, x + Database.getText(textName).length, y);
        this.renderArea.drawString(Database.getTranslatedText(textName), x + Database.getText(textName).length + 1, y, true);
    };

    Save.prototype.drawWarning = function (text, x, y, translated) {
        if (typeof translated === "undefined") { translated = false; }
        if (text != "") {
            this.renderArea.drawString(text, x, y, translated);
            this.renderArea.addColor(x, x + text.length, y, new Color(ColorType.SAVE_RED));
        }
    };

    Save.prototype.oneSecondCallback = function () {
        if (this.lastLocalAutosaveMinute == null || this.lastLocalAutosaveMinute != Math.ceil(this.getGame().getLocalAutosaveTime() / 60)) {
            // We set the minute
            this.lastLocalAutosaveMinute = Math.ceil(this.getGame().getLocalAutosaveTime() / 60);

            // We update
            this.createSlotsArray();
            this.update();
            this.getGame().updatePlace();
        }
    };

    Save.prototype.resize = function () {
        if (Database.isTranslated())
            this.renderArea.resize(100, 84);
else
            this.renderArea.resize(100, 74);
    };

    Save.prototype.selectRightSlot = function () {
        // We select the right slot
        $("#" + this.selectedSlot).prop('selected', true);
    };

    Save.prototype.slotSelected = function () {
        // Get the selected language id
        this.selectedSlot = $("#saveLocalSaveSlotsList").find(":selected").attr("id");

        // Update the ligthouse
        this.update();
        this.getGame().updatePlace();
    };

    Save.prototype.update = function () {
        var yPosition = 0;

        // Erase everything
        this.renderArea.resetAllButSize();

        // Saving
        this.renderArea.drawArray(Database.getAscii("text/Saving"), 50 - Math.floor((Database.getAsciiWidth("text/Saving") / 2)), yPosition);
        yPosition += this.drawLocalSave(0, yPosition + 7);
        yPosition += this.drawFileSave(0, yPosition + 21);

        // Loading
        this.renderArea.drawArray(Database.getAscii("text/Loading"), 50 - Math.floor((Database.getAsciiWidth("text/Loading") / 2)), yPosition + 40);
        yPosition += this.drawLocalLoad(0, yPosition + 47);
        yPosition += this.drawFileLoad(0, yPosition + 59);

        // Add the link which will call the selectRightSlot method after the html dom is created
        this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightSlot.bind(this)));
    };
    return Save;
})(Place);
///<reference path="EqItem.ts"/>
var Scythe = (function (_super) {
    __extends(Scythe, _super);
    // Constructor
    function Scythe() {
        _super.call(this, "eqItemWeaponScythe", "eqItemWeaponScytheName", "eqItemWeaponScytheDescription", "eqItems/weapons/scythe");
    }
    // Public getters
    Scythe.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A scythe", "a scythe"), player.getClassicCollisionBoxCollection(), 21);
        qew.getCloseCombatDelay().setFixedDelay(0);
        return qew;
    };
    return Scythe;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var Seahorse = (function (_super) {
    __extends(Seahorse, _super);
    // Constructor
    function Seahorse(quest, pos, intendedXPosition) {
        _super.call(this, quest, pos, new Naming("A magical seahorse", "a magical seahorse"), new RenderArea(4, 4), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1)), new CollisionBox(this, new Pos(1, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(2, 2), new Pos(1, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(1, 1))), new QuestEntityMovement(new Pos(-1, 0)));

        // Set the intended x position
        this.intendedXPosition = intendedXPosition;

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(20);
        this.setHp(20);

        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/seahorse"));

        // Set the transparency
        this.setTransparency(new RenderTransparency(" "));

        // Add a spell caster
        this.addQuestEntitySpellCaster(new QuestEntitySpellCaster(new CallbackCollection(this.castWaterBall.bind(this))));
        this.getLastQuestEntitySpellCaster().getDelay().setFixedDelay(30, Random.upTo(30));
    }
    // Public methods
    Seahorse.prototype.tryToGoToIntendedXPosition = function (baseX) {
        this.goTowards(this.getGlobalPosition(), new Pos(baseX + this.intendedXPosition, this.getGlobalPosition().y), 0, new Pos(1, 0));
    };

    // Private methods
    Seahorse.prototype.castWaterBall = function () {
        // Create the waterBall
        var waterBall = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos(-2, 0)), new Naming("A magical water ball", "a magical water ball"), new Color(ColorType.SEAHORSE_WATER_BALL), new Pos(2, 1), 70, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical water ball", "a magical water ball")));

        // No target
        waterBall.setTargetTypeNoTarget(new Pos(-2, 0));

        // Add the entity
        this.getQuest().addEntity(waterBall);
    };

    // willDie()
    Seahorse.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(150), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return Seahorse;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var SeaSnake = (function (_super) {
    __extends(SeaSnake, _super);
    // Constructor
    function SeaSnake(quest, pos) {
        _super.call(this, quest, pos, new Naming("A sea snake", "a sea snake"), new RenderArea(78, 11), new Pos(0, 0));

        // Set the movement and the animation
        this.setQuestEntityMovement(new QuestEntityMovement(new Pos(-Random.between(3, 5), 0)));
        this.setQuestEntityAnimation(new QuestEntityAnimation(0, 0, Random.upTo(11), "places/quests/theSea/seaSnake/1", "places/quests/theSea/seaSnake/2", "places/quests/theSea/seaSnake/3", "places/quests/theSea/seaSnake/4", "places/quests/theSea/seaSnake/5", "places/quests/theSea/seaSnake/6", "places/quests/theSea/seaSnake/7", "places/quests/theSea/seaSnake/8", "places/quests/theSea/seaSnake/9", "places/quests/theSea/seaSnake/10", "places/quests/theSea/seaSnake/11", "places/quests/theSea/seaSnake/12"));

        // Set the transparency
        this.setTransparency(new RenderTransparency(" ", "%"));

        // Set destructible
        this.setDestructible(false);
    }
    // update()
    SeaSnake.prototype.update = function () {
        if (Random.oneChanceOutOf(3) == false)
            this.castWaterBall();

        // Call the mother class update method
        _super.prototype.update.call(this);
    };

    // Private methods
    SeaSnake.prototype.castWaterBall = function () {
        // Create the waterBall
        var waterBall = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos(-2, this.getYCastingOffset())), new Naming("A magical water ball", "a magical water ball"), new Color(ColorType.SEAHORSE_WATER_BALL), new Pos(2, 1), 300, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical water ball", "a magical water ball")));

        // No target
        waterBall.setTargetTypeNoTarget(new Pos(-Random.between(2, 4), Random.fromArray([-1, 0, 1])));

        // Add the entity
        this.getQuest().addEntity(waterBall);
    };

    SeaSnake.prototype.getYCastingOffset = function () {
        switch (this.getQuestEntityAnimation().getCurrentAsciiIndex()) {
            case 0:
                return 4;
                break;
            case 1:
                return 5;
                break;
            case 2:
                return 6;
                break;
            case 3:
                return 7;
                break;
            case 4:
                return 8;
                break;
            case 5:
                return 9;
                break;
            case 6:
                return 10;
                break;
            case 7:
                return 9;
                break;
            case 8:
                return 8;
                break;
            case 9:
                return 7;
                break;
            case 10:
                return 6;
                break;
            case 11:
                return 5;
                break;
        }
    };
    return SeaSnake;
})(QuestEntity);
///<reference path="House.ts"/>
// Lollipops
Saving.registerBool("secondHouseLollipop1Bought", false);
Saving.registerBool("secondHouseLollipop2Bought", false);
Saving.registerBool("secondHouseLollipop3Bought", false);

// The leather boots
Saving.registerBool("secondHouseLeatherBootsBought", false);

// The chocolate bar
Saving.registerBool("secondHouseChocolateBarBought", false);

// The merchant's hat
Saving.registerBool("secondHouseMerchantHatBought", false);

// The time ring
Saving.registerBool("secondHouseTimeRingBought", false);

var SecondHouse = (function (_super) {
    __extends(SecondHouse, _super);
    // Constructor
    function SecondHouse(game) {
        // House constructor
        _super.call(this, game);
        this.renderArea = new RenderArea();
        // Items sold by the candy merchant
        this.items = [];
        // Selected item (an item is selected when the players clicks on it)
        this.selectedItemIndex = null;
        // Should we draw the intro speech ? (will be set to false as soon as we select an item)
        this.shouldDrawIntroSpeech = true;

        // We add all the items
        // Lollipops
        this.addItem(new CandyMerchantItem_Lollipop(this.getGame(), "secondHouseLollipop1Bought", "places/village/candyMerchantItems/lollipopRight", new Pos(14, 22), "secondHouseLollipop1Speech", 60, "secondHouseLollipopButtonText", "secondHouseLollipop1Button"));
        this.addItem(new CandyMerchantItem_Lollipop(this.getGame(), "secondHouseLollipop2Bought", "places/village/candyMerchantItems/lollipopLeft", new Pos(12, 23), "secondHouseLollipop2Speech", 60, "secondHouseLollipopButtonText", "secondHouseLollipop2Button"));
        this.addItem(new CandyMerchantItem_Lollipop(this.getGame(), "secondHouseLollipop3Bought", "places/village/candyMerchantItems/lollipopRight", new Pos(18, 24), "secondHouseLollipop3Speech", 60, "secondHouseLollipopButtonText", "secondHouseLollipop3Button"));

        // The leather boots
        this.addItem(new CandyMerchantItem_LeatherBoots(this.getGame(), "eqItemBootsLeatherBoots", "places/village/candyMerchantItems/boots", new Pos(5, 25), "secondHouseLeatherBootsSpeech", 300, "secondHouseLeatherBootsButtonText", "secondHouseLeatherBootsButton"));

        // The chocolate bar
        this.addItem(new CandyMerchantItem_ChocolateBar(this.getGame(), "secondHouseChocolateBarBought", "places/village/candyMerchantItems/chocolateBar", new Pos(62, 27), "secondHouseChocolateBarSpeech", 800, "secondHouseChocolateBarButtonText", "secondHouseChocolateBarButton"));

        // The merchant hat
        this.addItem(new CandyMerchantItem_MerchantHat(this.getGame(), "secondHouseMerchantHatBought", "places/village/candyMerchantItems/hat", new Pos(53, 13), "secondHouseMerchantHatSpeech", 1000000, "secondHouseMerchantHatButtonText", "secondHouseMerchantHatButton"));

        // The time ring
        this.addItem(new CandyMerchantItem_TimeRing(this.getGame(), "secondHouseTimeRingBought", "places/village/candyMerchantItems/timeRing", new Pos(43, 28), "secondHouseTimeRingSpeech", 500, "secondHouseTimeRingButtonText", "secondHouseTimeRingButton"));

        // Leather gloves
        this.addItem(new CandyMerchantItem_LeatherGloves(this.getGame(), "eqItemGlovesLeatherGloves", "places/village/candyMerchantItems/leatherGloves", new Pos(82, 27), "secondHouseLeatherGlovesSpeech", 300, "secondHouseLeatherGlovesButtonText", "secondHouseLeatherGlovesButton"));

        // We resize the render area and update it
        this.renderArea.resizeFromArray(Database.getAscii("places/village/secondHouse"), 0, 3);
        this.update();
    }
    // Public methods
    SecondHouse.prototype.willBeDisplayed = function () {
        // We need to update each time we're going to be displayed in case some item should not be sold anymore because of some stuff we were doing while this place wasn't displayed
        this.update();
    };

    // getRenderArea()
    SecondHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    SecondHouse.prototype.addItem = function (item) {
        this.items.push(item);
    };

    SecondHouse.prototype.buySelectedItem = function () {
        if (this.getGame().getCandies().getCurrent() >= this.items[this.selectedItemIndex].getPrice()) {
            // We pay the price
            this.getGame().getCandies().add(-this.items[this.selectedItemIndex].getPrice());

            // We tell the item that we just bought it
            this.items[this.selectedItemIndex].buy();

            // No more selected item
            this.selectedItemIndex = null;

            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };

    SecondHouse.prototype.clickedOnItem = function (index) {
        // Set the currently selected item index
        this.selectedItemIndex = index;

        // We shouldn't draw the intro speech anymore
        this.shouldDrawIntroSpeech = false;

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    SecondHouse.prototype.drawIntroSpeech = function () {
        this.drawSpeech("secondHouseIntroSpeech");
    };

    SecondHouse.prototype.drawItems = function () {
        for (var i = 0; i < this.items.length; i++) {
            if (this.items[i].canBeShown()) {
                // We draw the item at the correct position
                this.renderArea.drawArray(Database.getAscii(this.items[i].getAsciiName()), this.items[i].getAsciiPosition().x, this.items[i].getAsciiPosition().y, new RenderTransparency(" ", "%"));

                if (this.items[i].canBeClicked()) {
                    for (var j = 0; j < Database.getAsciiHeight(this.items[i].getAsciiName()); j++) {
                        // Button
                        this.renderArea.addAsciiButton(this.items[i].getAsciiPosition().x, this.items[i].getAsciiPosition().x + Database.getAsciiWidth(this.items[i].getAsciiName()), this.items[i].getAsciiPosition().y + j, this.items[i].getButtonName() + "RealItem");

                        // Link
                        this.renderArea.addLinkCall("." + this.items[i].getButtonName() + "RealItem", new CallbackCollection(this.clickedOnItem.bind(this, i)));
                    }
                }
            }
        }
    };

    SecondHouse.prototype.drawSelectedItemStuff = function () {
        var yPos;

        // Draw the speech
        yPos = this.drawSpeech(this.items[this.selectedItemIndex].getMerchantSpeech());

        if (this.items[this.selectedItemIndex].canBeBought()) {
            // Add the buying button
            this.renderArea.addAsciiRealButton(Database.getText(this.items[this.selectedItemIndex].getButtonText()), 45 - Math.floor(Database.getText(this.items[this.selectedItemIndex].getButtonText()).length / 2), yPos + 2, this.items[this.selectedItemIndex].getButtonName() + "BuyingButton", Database.getTranslatedText(this.items[this.selectedItemIndex].getButtonText()), true);

            // Add the link
            this.renderArea.addLinkCall("." + this.items[this.selectedItemIndex].getButtonName() + "BuyingButton", new CallbackCollection(this.buySelectedItem.bind(this)));
        }
    };

    SecondHouse.prototype.drawSpeech = function (speechName) {
        return this.renderArea.drawSpeech(Database.getText(speechName), 3, 30, 60, "secondHouseMerchantSpeech", Database.getTranslatedText(speechName));
    };

    SecondHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the village button
        this.addBackToTheVillageButton(this.renderArea, "secondHouseBackToTheVillageButton");

        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/secondHouse"), 0, 3);

        // Draw items
        this.drawItems();

        if (this.shouldDrawIntroSpeech)
            this.drawIntroSpeech();

        if (this.selectedItemIndex != null) {
            this.drawSelectedItemStuff();
        }
    };
    return SecondHouse;
})(House);
///<reference path="QuestEntity.ts"/>
var ShellPowder = (function (_super) {
    __extends(ShellPowder, _super);
    // Constructor
    function ShellPowder(quest, leftDownCornerPosition) {
        // Create the real global position
        var globalPosition = leftDownCornerPosition;
        globalPosition.add(new Pos(0, -Database.getAsciiHeight("places/quests/theSea/shellPowder") + 1));

        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("Shell powder", "shell powder"), new RenderArea(), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 3))));

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(10);
        this.setHp(10);

        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);

        // Draw the ascii art
        this.getRenderArea().resizeFromArray(Database.getAscii("places/quests/theSea/shellPowder"));
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/shellPowder"));
    }
    // willDie()
    ShellPowder.prototype.willDie = function () {
        _super.prototype.willDie.call(this);
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedShellPowder", "You found shell powder.", "You gain shell powder."));
    };
    return ShellPowder;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var SmallestFish = (function (_super) {
    __extends(SmallestFish, _super);
    // Constructor
    function SmallestFish(quest, pos) {
        _super.call(this, quest, pos, new Naming("A very small fish", "a very small fish"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement(new Pos(-1, 0)));

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(10);
        this.setHp(10);

        // Set the ascii art
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/smallestFish"));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fins", "its fins"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 2))), 1));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(6);
    }
    return SmallestFish;
})(QuestEntity);
var Smoke = (function () {
    // Constructor
    function Smoke(x, y, width, height, minWaitingTime, maxWaitingTime) {
        if (typeof minWaitingTime === "undefined") { minWaitingTime = 0; }
        if (typeof maxWaitingTime === "undefined") { maxWaitingTime = 0; }
        // Position
        this.x = x;
        this.y = y;

        // Size
        this.width = width;
        this.height = height;

        // Waiting time
        this.minWaitingTime = minWaitingTime;
        this.maxWaitingTime = maxWaitingTime;

        // Init the smoke
        this.init(false);
    }
    // Public methods
    Smoke.prototype.draw = function (renderArea) {
        if (this.weAreWaiting == false) {
            if (this.inverted == false) {
                renderArea.drawString("(", this.x + this.xGap, this.y + this.yGap);
                renderArea.drawString(")", this.x + this.xGap + 1, this.y + this.yGap - 1);
            } else {
                renderArea.drawString("(", this.x + this.xGap, this.y + this.yGap - 1);
                renderArea.drawString(")", this.x + this.xGap + 1, this.y + this.yGap);
            }
        }
    };

    Smoke.prototype.move = function () {
        if (this.weAreWaiting == false) {
            // We make the smoke going up
            this.yGap--;

            if (-this.yGap >= this.height) {
                this.init();
            } else {
                this.inverted = !this.inverted;
            }
        } else {
            this.currentWaitingTime++;
            if (this.currentWaitingTime > this.chosenWaitingTime)
                this.weAreWaiting = false;
        }
    };

    // Private methods
    Smoke.prototype.init = function (weMustBeWaitingAtFirst) {
        if (typeof weMustBeWaitingAtFirst === "undefined") { weMustBeWaitingAtFirst = true; }
        // Inverted
        this.inverted = Random.flipACoin();

        // Step
        this.xGap = Random.upTo(this.width - 1);

        if (Random.flipACoin() && weMustBeWaitingAtFirst == false) {
            // Y position
            this.yGap = -Random.upTo(this.height - 1);

            // Waiting stuff
            this.weAreWaiting = false;
        } else {
            // Y position
            this.yGap = 0;

            // Waiting stuff
            this.weAreWaiting = true;
            this.chosenWaitingTime = Random.between(this.minWaitingTime, this.maxWaitingTime);
            this.currentWaitingTime = 0;
        }
    };
    return Smoke;
})();
///<reference path="EqItem.ts"/>
var SorceressHat = (function (_super) {
    __extends(SorceressHat, _super);
    // Constructor
    function SorceressHat() {
        _super.call(this, "eqItemHatSorceressHat", "eqItemHatSorceressHatName", "eqItemHatSorceressHatDescription", "eqItems/hats/sorceressHat");
    }
    // Special ability
    SorceressHat.prototype.getSpecialAbility = function () {
        return "Enhances your spells & potions effects (sorceress hat).";
    };
    return SorceressHat;
})(EqItem);
///<reference path="Place.ts"/>
Saving.registerBool("sorceressHutTookLollipop", false);
Saving.registerBool("sorceressHutBoughtGrimoire", false);
Saving.registerBool("sorceressHutBoughtGrimoire2", false);
Saving.registerBool("sorceressHutBoughtCauldron", false);
Saving.registerBool("sorceressHutBoughtHat", false);

var SorceressHut = (function (_super) {
    __extends(SorceressHut, _super);
    // Constructor
    function SorceressHut(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        // Set the default speech
        this.currentSpeech = "sorceressHutHello";

        // Resize & update
        this.renderArea.resize(144, 48);
        this.update();
    }
    // getRenderArea()
    SorceressHut.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    SorceressHut.prototype.buyCauldron = function () {
        if (this.getGame().getLollipops().getCurrent() >= 100000) {
            this.getGame().getLollipops().add(-100000);
            Saving.saveBool("statusBarUnlockedCauldron", true);
            Saving.saveBool("sorceressHutBoughtCauldron", true);
            this.getGame().updateStatusBar(true);
            this.currentSpeech = "sorceressHutBuyCauldronSpeech";

            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };

    SorceressHut.prototype.buyGrimoire = function () {
        if (this.getGame().getLollipops().getCurrent() >= 5000) {
            this.getGame().getLollipops().add(-5000);
            this.getGame().gainItem("gridItemPossessedBeginnersGrimoire");
            Saving.saveBool("sorceressHutBoughtGrimoire", true);
            this.currentSpeech = "sorceressHutBuyGrimoireSpeech";

            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };

    SorceressHut.prototype.buyGrimoire2 = function () {
        if (this.getGame().getLollipops().getCurrent() >= 20000) {
            this.getGame().getLollipops().add(-20000);
            this.getGame().gainItem("gridItemPossessedAdvancedGrimoire");
            Saving.saveBool("sorceressHutBoughtGrimoire2", true);
            this.currentSpeech = "sorceressHutBuyGrimoire2Speech";

            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };

    SorceressHut.prototype.buyHat = function () {
        if (this.getGame().getLollipops().getCurrent() >= 1000000000) {
            this.getGame().getLollipops().add(-1000000000);
            Saving.saveBool("sorceressHutBoughtHat", true);
            this.getGame().gainItem("eqItemHatSorceressHat");
            this.currentSpeech = "sorceressHutBuyHatSpeech";

            // We update
            this.update();
            this.getGame().updatePlace();
        }
    };

    SorceressHut.prototype.clickedCauldron = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedCauldron";

        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyCauldronButton", new CallbackCollection(this.buyCauldron.bind(this)));
        this.getGame().updatePlace();
    };

    SorceressHut.prototype.clickedGrimoire = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedGrimoire";

        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyGrimoireButton", new CallbackCollection(this.buyGrimoire.bind(this)));
        this.getGame().updatePlace();
    };

    SorceressHut.prototype.clickedGrimoire2 = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedGrimoire2";

        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyGrimoire2Button", new CallbackCollection(this.buyGrimoire2.bind(this)));
        this.getGame().updatePlace();
    };

    SorceressHut.prototype.clickedHat = function () {
        // Set the new speech
        this.currentSpeech = "sorceressHutClickedHat";

        // Update
        this.update();
        this.drawBuyingButton("sorceressHutBuyHatButton", new CallbackCollection(this.buyHat.bind(this)));
        this.getGame().updatePlace();
    };

    SorceressHut.prototype.drawBackground = function (x, y) {
        this.renderArea.drawArray(Database.getAscii("places/sorceressHut/background"), x, y);
    };

    SorceressHut.prototype.drawBroom = function (x, y) {
        this.renderArea.drawArray(Database.getAscii("places/sorceressHut/broom"), x, y);
    };

    SorceressHut.prototype.drawBuyingButton = function (textName, callbackCollection) {
        this.renderArea.addAsciiRealButton(Database.getText(textName), 73, 22, "sorceressHutBuyingButton", Database.getTranslatedText(textName), true, -1, null, false);
        this.renderArea.addLinkCall(".sorceressHutBuyingButton", callbackCollection);
    };

    SorceressHut.prototype.drawCauldron = function (x, y) {
        if (Saving.loadBool("sorceressHutBoughtCauldron") == false) {
            // Draw it
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/cauldron"), x, y, new RenderTransparency(" ", "%"));

            // Add the button
            this.renderArea.addMultipleAsciiButtons("sorceressHutBuyCauldronButton", x + 11, x + 30, y + 1, x + 10, x + 31, y + 2, x + 8, x + 33, y + 3, x + 7, x + 34, y + 4, x + 6, x + 35, y + 5, x + 5, x + 36, y + 6, x + 4, x + 37, y + 7, x + 4, x + 37, y + 8, x + 4, x + 37, y + 9, x + 5, x + 36, y + 10, x + 6, x + 35, y + 11, x + 8, x + 33, y + 12);

            // Add the link
            this.renderArea.addLinkCall(".sorceressHutBuyCauldronButton", new CallbackCollection(this.clickedCauldron.bind(this)));
        }
    };

    SorceressHut.prototype.drawCurrentSpeech = function (x, y) {
        this.renderArea.drawSpeech(Database.getText(this.currentSpeech), y, x, x + 27, "sorceressHutSpeech", Database.getTranslatedText(this.currentSpeech));
    };

    SorceressHut.prototype.drawHat = function (x, y) {
        if (Saving.loadBool("sorceressHutBoughtHat") == false) {
            // Draw it
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/hat"), x, y, new RenderTransparency(" ", "%"));

            // Add the button
            this.renderArea.addMultipleAsciiButtons("sorceressHutBuyHatButton", x + 20, x + 23, y, x + 16, x + 25, y + 1, x + 14, x + 26, y + 2, x + 11, x + 19, y + 3, x + 10, x + 19, y + 4, x + 9, x + 20, y + 5, x + 1, x + 27, y + 6);

            // Add the link
            this.renderArea.addLinkCall(".sorceressHutBuyHatButton", new CallbackCollection(this.clickedHat.bind(this)));
        }
    };

    SorceressHut.prototype.drawShelves = function (x, y) {
        // Draw the ascii art
        this.renderArea.drawArray(Database.getAscii("places/sorceressHut/shelves"), x, y);

        if (Saving.loadBool("sorceressHutTookLollipop") == false) {
            // Draw the lollipop
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/lollipop"), x + 32, y + 16);

            // Add the button and the link
            this.renderArea.addAsciiButton(x + 32, x + 37, y + 16, "sorceressHutTakeLollipopButton");
            this.renderArea.addLinkCall(".sorceressHutTakeLollipopButton", new CallbackCollection(this.takeLollipop.bind(this)));
        }

        if (Saving.loadBool("sorceressHutBoughtGrimoire") == false) {
            // Draw the grimoire
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/grimoire"), x + 18, y + 8);

            // Add the button and the link
            this.renderArea.addAsciiButton(x + 18, x + 20, y + 9, "sorceressHutBuyGrimoireButton");
            this.renderArea.addAsciiButton(x + 18, x + 20, y + 10, "sorceressHutBuyGrimoireButton");
            this.renderArea.addAsciiButton(x + 18, x + 20, y + 11, "sorceressHutBuyGrimoireButton");
            this.renderArea.addLinkCall(".sorceressHutBuyGrimoireButton", new CallbackCollection(this.clickedGrimoire.bind(this)));
        }

        if (Saving.loadBool("sorceressHutBoughtGrimoire2") == false) {
            // Draw the grimoire
            this.renderArea.drawArray(Database.getAscii("places/sorceressHut/grimoire2"), x + 30, y + 1);

            // Add the button and the link
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 2, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 3, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 4, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 5, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addAsciiButton(x + 31, x + 34, y + 6, "sorceressHutBuyGrimoire2Button");
            this.renderArea.addLinkCall(".sorceressHutBuyGrimoire2Button", new CallbackCollection(this.clickedGrimoire2.bind(this)));
        }
    };

    SorceressHut.prototype.takeLollipop = function () {
        // We took the lollipop
        Saving.saveBool("sorceressHutTookLollipop", true);

        // Add 1 lollipop
        this.getGame().getLollipops().add(1);

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    SorceressHut.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "theHoleBackToTheMapButton");

        // Draw everything
        this.drawBackground(0, 3);
        this.drawHat(14, 3);
        this.drawShelves(73, 3);
        this.drawCauldron(80, 27);
        this.drawBroom(49, 18);

        // Draw the speech
        this.drawCurrentSpeech(43, 4);
    };
    return SorceressHut;
})(Place);
///<reference path="QuestEntity.ts"/>
var Spikes = (function (_super) {
    __extends(Spikes, _super);
    // Constructor
    function Spikes(quest, globalPosition, width, damage, inverted) {
        if (typeof damage === "undefined") { damage = 200; }
        if (typeof inverted === "undefined") { inverted = false; }
        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("Some spikes", "some spikes"), new RenderArea(), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(width, 1))));

        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its spikes", "its spikes"), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, (inverted ? 1 : -1)), new Pos(width, 1))), damage));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(0);

        // Draw the ascii art
        this.getRenderArea().resize(width, 1);
        for (var i = 0; i < Math.floor(width / 2); i++) {
            if (inverted == false)
                this.getRenderArea().drawString("/\\", i * 2, 0);
else
                this.getRenderArea().drawString("\\/", i * 2, 0);
        }
    }
    return Spikes;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var Sponge = (function (_super) {
    __extends(Sponge, _super);
    // Constructor
    function Sponge(quest, leftDownCornerPosition) {
        // Create the real global position
        var globalPosition = leftDownCornerPosition;
        globalPosition.add(new Pos(0, -Database.getAsciiHeight("places/quests/theSea/sponge") + 1));

        // Call the mother constructor
        _super.call(this, quest, globalPosition, new Naming("A sponge", "a sponge"), new RenderArea(), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 3))));

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(40);
        this.setHp(40);

        // Set the team (nature)
        this.setTeam(QuestEntityTeam.NATURE);

        // Draw the ascii art
        this.getRenderArea().resizeFromArray(Database.getAscii("places/quests/theSea/sponge"));
        this.getRenderArea().drawArray(Database.getAscii("places/quests/theSea/sponge"));
    }
    // willDie()
    Sponge.prototype.willDie = function () {
        _super.prototype.willDie.call(this);
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedSponge", "You found a sponge.", "You gain a sponge."));
    };
    return Sponge;
})(QuestEntity);
var StatusBarTab = (function () {
    // Constructor
    function StatusBarTab(statusBar, type, xPos, text1, text2, text3, tabIndexWhenSelected, callbackCollectionWhenSelected) {
        if (typeof tabIndexWhenSelected === "undefined") { tabIndexWhenSelected = -1; }
        if (typeof callbackCollectionWhenSelected === "undefined") { callbackCollectionWhenSelected = new CallbackCollection(); }
        // Set the status bar
        this.statusBar = statusBar;

        // Set teh type
        this.type = type;

        // Set xPos
        this.xPos = xPos;

        // Add the three strings to our 3 strings array
        this.setText(text1, text2, text3);

        // Set the rest
        this.tabIndexWhenSelected = tabIndexWhenSelected;
        this.callbackCollectionWhenSelected = callbackCollectionWhenSelected;
    }
    // Public methods
    StatusBarTab.prototype.clicked = function () {
        this.callbackCollectionWhenSelected.fire();
        this.statusBar.selectTab(this.tabIndexWhenSelected);
    };

    StatusBarTab.prototype.render = function (renderArea, x, y, selected) {
        // We draw the borders
        renderArea.drawVerticalLine("|", x + this.xPos - 1, y, 3);
        renderArea.drawVerticalLine("|", x + this.xPos + this.width, y, 3);

        for (var i = 0; i < 3; i++) {
            // We draw the string
            renderArea.drawString(this.text[i], x + this.xPos + 1, y + i);

            if (selected)
                renderArea.addBackgroundColor(x + this.xPos, x + this.xPos + this.width, y + i, new Color(ColorType.STATUS_BAR_SELECTED_TAB, true));
        }

        if (selected == false) {
            renderArea.addMultipleAsciiButtons("statusBarTabButton" + this.tabIndexWhenSelected, x + this.xPos, x + this.xPos + this.width, y, x + this.xPos, x + this.xPos + this.width, y + 1, x + this.xPos, x + this.xPos + this.width, y + 2);
            renderArea.addLinkCall(".statusBarTabButton" + this.tabIndexWhenSelected, new CallbackCollection(this.clicked.bind(this)));
        }
    };

    // Public getters
    StatusBarTab.prototype.getType = function () {
        return this.type;
    };

    StatusBarTab.prototype.getWidth = function () {
        return this.width;
    };

    // Private methods
    StatusBarTab.prototype.calculateWidth = function () {
        this.width = 0;

        for (var i = 0; i < 3; i++) {
            if (this.text[i].length > this.width)
                this.width = this.text[i].length;
        }

        // We add two ! (because a tab has two spaces on left and right
        this.width += 2;
    };

    StatusBarTab.prototype.setText = function (text1, text2, text3) {
        // We empty the text array
        this.text = [];

        // We add the three strings given in parameters
        this.text.push(text1);
        this.text.push(text2);
        this.text.push(text3);

        // We re-calculate the tab's width
        this.calculateWidth();
    };
    return StatusBarTab;
})();
var StatusBarTabType;
(function (StatusBarTabType) {
    StatusBarTabType[StatusBarTabType["CANDY_BOX"] = 0] = "CANDY_BOX";
    StatusBarTabType[StatusBarTabType["INVENTORY"] = 1] = "INVENTORY";
    StatusBarTabType[StatusBarTabType["MAP"] = 2] = "MAP";
    StatusBarTabType[StatusBarTabType["FARM"] = 3] = "FARM";
    StatusBarTabType[StatusBarTabType["CAULDRON"] = 4] = "CAULDRON";
    StatusBarTabType[StatusBarTabType["INSIDE_YOUR_BOX"] = 5] = "INSIDE_YOUR_BOX";
    StatusBarTabType[StatusBarTabType["THE_COMPUTER"] = 6] = "THE_COMPUTER";
    StatusBarTabType[StatusBarTabType["THE_ARENA"] = 7] = "THE_ARENA";
    StatusBarTabType[StatusBarTabType["SAVE"] = 8] = "SAVE";
    StatusBarTabType[StatusBarTabType["CFG"] = 9] = "CFG";
})(StatusBarTabType || (StatusBarTabType = {}));
// Saving stuff related to the status bar itself
Saving.registerBool("statusBarUnlocked", false);

// Saving stuff related to unlocked tabs
Saving.registerBool("statusBarUnlockedCfg", false);
Saving.registerBool("statusBarUnlockedSave", false);
Saving.registerBool("statusBarUnlockedMap", false);
Saving.registerBool("statusBarUnlockedInventory", false);
Saving.registerBool("statusBarUnlockedLollipopFarm", false);
Saving.registerBool("statusBarUnlockedCauldron", false);
Saving.registerBool("statusBarUnlockedInsideYourBox", false);
Saving.registerBool("statusBarUnlockedTheComputer", false);
Saving.registerBool("statusBarUnlockedTheArena", false);

// Saving stuff for the unlocked health bar
Saving.registerBool("statusBarUnlockedHealthBar", false);

// The corner step
Saving.registerNumber("statusBarCornerStep", 0);

var StatusBar = (function () {
    // Constructor
    function StatusBar(game, selectedTabIndex) {
        // Render areas
        this.playerHealthBar = null;
        this.renderArea = new RenderArea(100, 6, " ");
        // Tabs
        this.tabs = [];
        // Se the game
        this.game = game;

        // Set the default selected tab index
        this.selectedTabIndex = selectedTabIndex;

        // Add everything for the first time
        this.deleteAndReAddEverything();
    }
    // Public methods
    StatusBar.prototype.deleteAndReAddEverything = function () {
        // Delete tabs
        this.tabs = [];

        // Reset special hotkeys
        this.game.resetSpecialHotkeys();

        // Delete the player health bar
        this.playerHealthBar = null;

        if (Saving.loadBool("statusBarUnlockedHealthBar")) {
            this.playerHealthBar = new Bar(BarType.HEALTH);
            this.playerHealthBar.resize(72, 1);
        }

        if (Saving.loadBool("statusBarUnlocked"))
            this.addTab(StatusBarTabType.CANDY_BOX, 0, " THE", "CANDY", " BOX", new CallbackCollection(this.game.goToCandyBox.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedInventory"))
            this.addTab(StatusBarTabType.INVENTORY, 8, "INV", " ENT", "ORY", new CallbackCollection(this.game.goToInventory.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedMap"))
            this.addTab(StatusBarTabType.MAP, 15, "", "MAP", "", new CallbackCollection(this.game.goToMap.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedLollipopFarm"))
            this.addTab(StatusBarTabType.FARM, 21, "LOLL", "IPOP", "FARM", new CallbackCollection(this.game.goToLollipopFarm.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedCauldron"))
            this.addTab(StatusBarTabType.CAULDRON, 28, "", "CLDR", "", new CallbackCollection(this.game.goToCauldron.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedInsideYourBox"))
            this.addTab(StatusBarTabType.INSIDE_YOUR_BOX, 35, "INSIDE", " YOUR", " BOX!", new CallbackCollection(this.game.goToInsideYourBox.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedTheComputer"))
            this.addTab(StatusBarTabType.THE_COMPUTER, 44, " THE", " COM", "PUTER", new CallbackCollection(this.game.goToTheComputer.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedTheArena"))
            this.addTab(StatusBarTabType.THE_ARENA, 52, " THE", "ARENA", " /!\\", new CallbackCollection(this.game.goToTheArena.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedSave"))
            this.addTab(StatusBarTabType.SAVE, 60, "", "SAVE", "", new CallbackCollection(this.game.goToSave.bind(this.game)));
        if (Saving.loadBool("statusBarUnlockedCfg"))
            this.addTab(StatusBarTabType.CFG, 67, "C", "F", "G", new CallbackCollection(this.game.goToCfg.bind(this.game)));

        if (Saving.loadBool("statusBarUnlocked")) {
            this.game.addSpecialHotkey(new Hotkey("n", new CallbackCollection(this.nextTab.bind(this))));
        }
    };

    StatusBar.prototype.selectTab = function (index) {
        this.selectedTabIndex = index;
        this.game.updateStatusBar();
    };

    StatusBar.prototype.selectTabByType = function (type) {
        for (var i = 0; i < this.tabs.length; i++) {
            if (this.tabs[i].getType() == type) {
                // We select it and we break
                this.selectedTabIndex = i;
                this.game.updateStatusBar();
            }
        }
    };

    StatusBar.prototype.updateAll = function () {
        // We erase
        this.renderArea.resetAllButSize();

        if (Saving.loadBool("statusBarUnlocked")) {
            this.renderArea.drawString("+", 0, 0);
            this.renderArea.drawString("+", this.renderArea.getWidth() - 1, 0);
            this.renderArea.drawString("+", 0, 5);
            this.renderArea.drawString("+", this.renderArea.getWidth() - 1, 5);
            this.renderArea.drawVerticalLine("|", 0, 1, 4);
            this.renderArea.drawVerticalLine("|", this.renderArea.getWidth() - 1, 1, 4);
            this.renderArea.drawHorizontalLine("-", 1, this.renderArea.getWidth() - 1, 0);
            this.renderArea.drawHorizontalLine("-", 1, this.renderArea.getWidth() - 1, 5);
        }

        // We draw the candies we have
        this.renderArea.drawString(this.game.getCandies().getCurrentAsString(26), 2, 1);

        if (this.game.getLollipops().getMax() > 0)
            this.renderArea.drawString(this.game.getLollipops().getCurrentAsString(26), 2, 2);

        if (this.game.getChocolateBars().getMax() > 0)
            this.renderArea.drawString(this.game.getChocolateBars().getCurrentAsString(26), 2, 3);

        if (this.game.getPainsAuChocolat().getMax() > 0)
            this.renderArea.drawString(this.game.getPainsAuChocolat().getCurrentAsString(26), 2, 4);

        // We draw tabs
        this.drawTabs();

        // We draw the health bar
        this.updateHealthBar();

        // We draw the stuff about the status bar's corners
        this.drawStatusBarCornersStuff();
    };

    StatusBar.prototype.updateHealthBar = function () {
        if (this.playerHealthBar != null) {
            // We update the bar from the player's health
            this.playerHealthBar.update(this.game.getPlayer().getHp() / this.game.getPlayer().getMaxHp(), "Your health : " + this.game.getPlayer().getHp() + "/" + this.game.getPlayer().getMaxHp());

            // We draw the bar
            this.renderArea.drawArea(this.playerHealthBar, 28, 4);
        }
    };

    // Public getters
    StatusBar.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    StatusBar.prototype.addTab = function (type, xPos, text1, text2, text3, callbackCollection) {
        // We add the tab
        this.tabs.push(new StatusBarTab(this, type, xPos, text1, text2, text3, this.tabs.length, callbackCollection));
    };

    StatusBar.prototype.clickedOnCorner = function () {
        this.setNextCornerStep();
        this.game.updateStatusBar();
    };

    StatusBar.prototype.drawAllCorners = function (character) {
        this.drawUpLeftCorner(character);
        this.drawUpRightCorner(character);
        this.drawDownLeftCorner(character);
        this.drawDownRightCorner(character);
    };

    StatusBar.prototype.drawDownLeftCorner = function (character) {
        this.renderArea.drawString(character, 0, 5);
    };

    StatusBar.prototype.drawDownRightCorner = function (character) {
        this.renderArea.drawString(character, 99, 5);
    };

    StatusBar.prototype.drawStatusBarCornersStuff = function () {
        // We add buttons
        this.renderArea.addAsciiNinjaButton(0, 1, 0, "statusBarCornerButton");
        this.renderArea.addAsciiNinjaButton(99, 100, 0, "statusBarCornerButton");
        this.renderArea.addAsciiNinjaButton(0, 1, 5, "statusBarCornerButton");
        this.renderArea.addAsciiNinjaButton(99, 100, 5, "statusBarCornerButton");

        // We add the link
        this.renderArea.addLinkCall(".statusBarCornerButton", new CallbackCollection(this.clickedOnCorner.bind(this)));

        switch (Saving.loadNumber("statusBarCornerStep")) {
            case 0:
                break;
            case 1:
                this.drawAllCorners("*");
                break;
            case 2:
                this.drawAllCorners("#");
                break;
            case 3:
                this.drawAllCorners("-");
                break;
            case 4:
                this.drawUpLeftCorner("A");
                this.drawUpRightCorner("B");
                this.drawDownRightCorner("C");
                this.drawDownLeftCorner("D");
                break;
            case 5:
                this.drawUpLeftCorner("0");
                this.drawUpRightCorner("1");
                this.drawDownRightCorner("2");
                this.drawDownLeftCorner("3");
                break;
            case 6:
                this.drawAllCorners("@");
                break;
        }
    };

    StatusBar.prototype.drawTabs = function () {
        if (Saving.loadBool("statusBarUnlocked")) {
            this.renderArea.drawVerticalLine("|", 28, 1, 4);

            for (var i = 0; i < this.tabs.length; i++) {
                this.tabs[i].render(this.renderArea, 29, 1, (this.selectedTabIndex == i ? true : false));
            }
        }
    };

    StatusBar.prototype.drawUpLeftCorner = function (character) {
        this.renderArea.drawString(character, 0, 0);
    };

    StatusBar.prototype.drawUpRightCorner = function (character) {
        this.renderArea.drawString(character, 99, 0);
    };

    StatusBar.prototype.previousTab = function () {
        if (this.selectedTabIndex - 1 >= 0)
            this.tabs[this.selectedTabIndex - 1].clicked();
    };

    StatusBar.prototype.nextTab = function () {
        if (this.game.getIsStatusBarAllowedToUseTheNKey()) {
            if (this.selectedTabIndex + 1 < this.tabs.length)
                this.tabs[this.selectedTabIndex + 1].clicked();
else
                this.tabs[0].clicked();
        }
    };

    StatusBar.prototype.setNextCornerStep = function () {
        var nextCornerStep = Saving.loadNumber("statusBarCornerStep");
        nextCornerStep += 1;
        if (nextCornerStep > 6)
            nextCornerStep = 0;

        Saving.saveNumber("statusBarCornerStep", nextCornerStep);
    };
    return StatusBar;
})();
///<reference path="EqItem.ts"/>
var SummoningTribalSpear = (function (_super) {
    __extends(SummoningTribalSpear, _super);
    // Constructor
    function SummoningTribalSpear() {
        _super.call(this, "eqItemWeaponSummoningTribalSpear", "eqItemWeaponSummoningTribalSpearName", "eqItemWeaponSummoningTribalSpearDescription", "eqItems/weapons/summoningTribalSpear");
        // Time since we last summoned a warrior
        this.timeSinceSummon = 0;
    }
    // Public getters
    SummoningTribalSpear.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A summoning tribal spear", "a summoning tribal spear"), player.getClassicCollisionBoxCollection(), 10);
        qew.getCloseCombatDelay().setFixedDelay(2);
        return qew;
    };

    // Special ability
    SummoningTribalSpear.prototype.getSpecialAbility = function () {
        return "Frequently summons tribe warriors fighting on your side (summoning tribal spear).";
    };

    // update()
    SummoningTribalSpear.prototype.update = function (player, quest) {
        this.timeSinceSummon += 1;

        if (this.timeSinceSummon > 35) {
            this.summon(player, quest);
        }
    };

    // Private methods
    SummoningTribalSpear.prototype.summon = function (player, quest) {
        // Create the warrior
        var warrior = new PlayerSummonedTribeWarrior(quest, player.getSpellCastingPosition().plus(new Pos(1, -3)));

        // Add the health bar
        warrior.setHealthBar(new QuestEntityHealthBar(warrior, new Pos(4, 1)));

        // Add it to the quest
        quest.addEntity(warrior);

        // Reset the summon time
        this.timeSinceSummon = 0;
    };
    return SummoningTribalSpear;
})(EqItem);
var SuperRPGFloorStep;
(function (SuperRPGFloorStep) {
    SuperRPGFloorStep[SuperRPGFloorStep["SHOP"] = 0] = "SHOP";
    SuperRPGFloorStep[SuperRPGFloorStep["MONSTER1"] = 1] = "MONSTER1";
    SuperRPGFloorStep[SuperRPGFloorStep["MONSTER2"] = 2] = "MONSTER2";
    SuperRPGFloorStep[SuperRPGFloorStep["MONSTER3"] = 3] = "MONSTER3";
})(SuperRPGFloorStep || (SuperRPGFloorStep = {}));
var SuperRPGMenuEntry = (function () {
    // Constructor
    function SuperRPGMenuEntry(text, callbackCollection) {
        this.text = text;
        this.callbackCollection = callbackCollection;
    }
    // Public methods
    SuperRPGMenuEntry.prototype.draw = function (renderArea, x, y, selected, width) {
        // Create a var which will contain the text to draw
        var textToDraw;

        if (selected)
            textToDraw = "> " + this.text + " <";
else
            textToDraw = this.text;

        // Draw the text to draw
        renderArea.drawString(textToDraw, x + Math.floor((width - textToDraw.length) / 2), y);
    };

    // Public getters
    SuperRPGMenuEntry.prototype.getCallbackCollection = function () {
        return this.callbackCollection;
    };
    return SuperRPGMenuEntry;
})();
var SuperRPGMenu = (function () {
    // Constructor
    function SuperRPGMenu(superRPG, asciiName, currentlySelectedEntryIndex) {
        // Menu entries
        this.entries = [];
        // Set from parameters
        this.superRPG = superRPG;
        this.asciiName = asciiName;
        this.currentlySelectedEntryIndex = currentlySelectedEntryIndex;
    }
    // Public methods
    SuperRPGMenu.prototype.addEntry = function (entry) {
        this.entries.push(entry);
    };

    SuperRPGMenu.prototype.draw = function (renderArea) {
        // Draw the separating line
        renderArea.drawVerticalLine("|", 26, 3, 11);

        // Draw the ascii art on the left
        renderArea.drawArray(Database.getAscii(this.asciiName), 0 + Math.floor((26 - Database.getAsciiWidth(this.asciiName)) / 2), 2 + Math.floor((10 - Database.getAsciiHeight(this.asciiName)) / 2));

        for (var i = 0; i < this.entries.length; i++) {
            this.entries[i].draw(renderArea, 27, 3 + Math.floor((10 - (this.entries.length * 2)) / 2) + i * 2, (this.currentlySelectedEntryIndex == i), 26);
        }
    };

    SuperRPGMenu.prototype.pressedDownButton = function () {
        this.currentlySelectedEntryIndex += 1;
        if (this.currentlySelectedEntryIndex >= this.entries.length)
            this.currentlySelectedEntryIndex = this.entries.length - 1;
    };

    SuperRPGMenu.prototype.pressedSpaceButton = function () {
        this.entries[this.currentlySelectedEntryIndex].getCallbackCollection().fire();
    };

    SuperRPGMenu.prototype.pressedUpButton = function () {
        this.currentlySelectedEntryIndex -= 1;
        if (this.currentlySelectedEntryIndex < 0)
            this.currentlySelectedEntryIndex = 0;
    };

    // Public getters
    SuperRPGMenu.prototype.getSuperRPG = function () {
        return this.superRPG;
    };

    // Public setters
    SuperRPGMenu.prototype.setAsciiName = function (asciiName) {
        this.asciiName = asciiName;
    };

    SuperRPGMenu.prototype.setEntries = function () {
        var entries = [];
        for (var _i = 0; _i < (arguments.length - 0); _i++) {
            entries[_i] = arguments[_i + 0];
        }
        this.entries = entries;
    };
    return SuperRPGMenu;
})();
///<reference path="SuperRPGMenu.ts"/>
var SuperRPGMenu_Ingame = (function (_super) {
    __extends(SuperRPGMenu_Ingame, _super);
    function SuperRPGMenu_Ingame() {
        _super.apply(this, arguments);
    }
    // Public methods
    SuperRPGMenu_Ingame.prototype.draw = function (renderArea) {
        // First status bar line
        // Floor
        renderArea.drawString("Floor " + this.getSuperRPG().getFloor(), 0, 0);

        // Separation bar
        renderArea.drawString("|", 10, 0);

        switch (this.getSuperRPG().getFloorStep()) {
            case SuperRPGFloorStep.SHOP:
                renderArea.drawString("shop", 15, 0);
                break;
            case SuperRPGFloorStep.MONSTER1:
                renderArea.drawString("1st monster", 12, 0);
                break;
            case SuperRPGFloorStep.MONSTER2:
                renderArea.drawString("2nd monster", 12, 0);
                break;
            case SuperRPGFloorStep.MONSTER3:
                renderArea.drawString("3rd monster", 12, 0);
                break;
        }

        // Separation bar
        renderArea.drawString("|", 24, 0);

        // Hp and max hp
        renderArea.drawString("HP " + this.getSuperRPG().getHp().toString() + "/" + this.getSuperRPG().getMaxHp().toString(), 26, 0);

        // Separation bar
        renderArea.drawString("|", 39, 0);

        // Coins
        renderArea.drawString("Coins " + this.getSuperRPG().getCoins(), 41, 0);

        // Second status bar line
        // ATK + weapon + damage
        renderArea.drawString("ATK " + this.getSuperRPG().getWeapon() + " (" + this.getSuperRPG().getDamage() + ")", 0, 1);

        // Separation bar
        renderArea.drawString("|", 24, 1);

        // DEF + defense item + defense
        renderArea.drawString("DEF " + this.getSuperRPG().getDefenseItem() + " (" + this.getSuperRPG().getDefense() + ")", 26, 1);

        // Call the mother class draw method
        _super.prototype.draw.call(this, renderArea);
    };
    return SuperRPGMenu_Ingame;
})(SuperRPGMenu);
///<reference path="SuperRPGMenu.ts"/>
var SuperRPGMenu_Main = (function (_super) {
    __extends(SuperRPGMenu_Main, _super);
    // Constructor
    function SuperRPGMenu_Main(superRPG) {
        _super.call(this, superRPG, "places/village/thirdHouseGames/SuperRPG/mainMenu", 0);
        this.addEntry(new SuperRPGMenuEntry("Start", new CallbackCollection(this.getSuperRPG().startGame.bind(this.getSuperRPG(), false))));
        if (Saving.loadBool("SuperRPGUnlockedHardmode"))
            this.addEntry(new SuperRPGMenuEntry("Start (hardmode)", new CallbackCollection(this.getSuperRPG().startGame.bind(this.getSuperRPG(), true))));
        this.addEntry(new SuperRPGMenuEntry("Exit", new CallbackCollection(this.getSuperRPG().exitGame.bind(this.getSuperRPG()))));
    }
    // Public methods
    SuperRPGMenu_Main.prototype.draw = function (renderArea) {
        // Draw the "main menu" text
        renderArea.drawString("Main menu", 22, 0);

        // Mother class draw method
        _super.prototype.draw.call(this, renderArea);
    };
    return SuperRPGMenu_Main;
})(SuperRPGMenu);
///<reference path="SuperRPGMenu_Ingame.ts"/>
var SuperRPGMenu_Monster = (function (_super) {
    __extends(SuperRPGMenu_Monster, _super);
    // Constructor
    function SuperRPGMenu_Monster(superRPG) {
        _super.call(this, superRPG, "", 0);
    }
    // Public methods
    SuperRPGMenu_Monster.prototype.addUsualEntries = function () {
        this.addEntry(new SuperRPGMenuEntry("Attack", new CallbackCollection(this.playerAttacks.bind(this))));
    };

    SuperRPGMenu_Monster.prototype.draw = function (renderArea) {
        // Draw the monster damage
        renderArea.drawString("ATK " + this.damage, 0, 11);

        // Draw the monster defense
        renderArea.drawString("DEF " + this.defense, 7, 11);

        // Draw the monster hp and max hp
        renderArea.drawString("HP " + this.hp + "/" + this.maxHp, 14, 11);

        // Call the mother class draw method
        _super.prototype.draw.call(this, renderArea);
    };

    SuperRPGMenu_Monster.prototype.setAbstract = function (atk, def, coins, hp) {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/" + Random.fromArray(["cross", "mobius", "triforce", "randomShape", "circle", "dna", "hive", "star"]), atk, def, coins, hp);
    };

    SuperRPGMenu_Monster.prototype.setBabyVampire = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/babyVampire", 10, 2, 8, 30);
    };

    SuperRPGMenu_Monster.prototype.setBlob = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/blob", Random.between(1, 3), 0, Random.between(5, 8), 3);
    };

    SuperRPGMenu_Monster.prototype.setBomb = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/bomb", 99, 0, 0, 12);
    };

    SuperRPGMenu_Monster.prototype.setChest = function (coins) {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/chest", 0, 0, coins, 10);
    };

    SuperRPGMenu_Monster.prototype.setCorpse1 = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/corpse1", 0, 0, (Random.flipACoin() ? 0 : Random.between(1, 300)), 0);
    };

    SuperRPGMenu_Monster.prototype.setCorpse2 = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/corpse2", 0, 0, (Random.flipACoin() ? 0 : Random.between(1, 300)), 0);
    };

    SuperRPGMenu_Monster.prototype.setDragon = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/dragon", Random.between(28, 32), Random.between(7, 9), 1000, Random.fromArray([45, 50, 55]));
    };

    SuperRPGMenu_Monster.prototype.setFerociousBlob = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/ferociousBlob", Random.between(2, 4), 0, Random.between(7, 10), 2);
    };

    SuperRPGMenu_Monster.prototype.setFerociousGoblin = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/ferociousGoblin", 5, 3, 20, 5);
    };

    SuperRPGMenu_Monster.prototype.setFerociousSkeleton = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/ferociousSkeleton", 8, 1, 40, 10);
    };

    SuperRPGMenu_Monster.prototype.setGoblin = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/goblin", 4, 1, 15, 5);
    };

    SuperRPGMenu_Monster.prototype.setSkeletonOrBillGatesSkeleton = function () {
        if (Random.oneChanceOutOf(10))
            this.setMonster("places/village/thirdHouseGames/SuperRPG/billGatesSkeleton", 6, 1, 50, 7);
else
            this.setMonster("places/village/thirdHouseGames/SuperRPG/skeleton", 6, 1, 25, 7);
    };

    SuperRPGMenu_Monster.prototype.setSpider = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/spider", 10, 5, Random.between(100, 200), 25);
    };

    SuperRPGMenu_Monster.prototype.setSpiders = function () {
        this.setMonster("places/village/thirdHouseGames/SuperRPG/spiders", 9, 2, 9, 15);
    };

    SuperRPGMenu_Monster.prototype.setThing = function () {
        switch (Random.between(0, 2)) {
            case 0:
                this.setMonster("places/village/thirdHouseGames/SuperRPG/thing", 20, 3, 120, 10);
                break;
            case 1:
                this.setMonster("places/village/thirdHouseGames/SuperRPG/thing", 12, 6, 120, 30);
                break;
            case 2:
                this.setMonster("places/village/thirdHouseGames/SuperRPG/thing", 14, 4, 120, 20);
                break;
        }
    };

    // Private methods
    SuperRPGMenu_Monster.prototype.playerAttacks = function () {
        // Variable used for damage calculation
        var damage;

        // We lose hp
        damage = this.getSuperRPG().getDamage() - this.defense;
        if (damage > 0) {
            this.hp -= damage;

            if (this.hp <= 0) {
                this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() + this.coins);
                this.getSuperRPG().nextFloorStep();
                return;
            }
        }

        // We didn't return : it means we're still alive : we counter attack
        damage = this.damage - this.getSuperRPG().getDefense();
        if (damage > 0) {
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() - damage);
        }
    };

    SuperRPGMenu_Monster.prototype.setMonster = function (asciiName, damage, defense, coins, hp, maxHp) {
        if (typeof maxHp === "undefined") { maxHp = null; }
        // Set from the parameters
        this.setAsciiName(asciiName);
        this.damage = (this.getSuperRPG().getHardmode() ? Math.floor(damage * 1.2) : damage);
        this.defense = (this.getSuperRPG().getHardmode() ? Math.floor(defense * 1.2) : defense);
        this.coins = (this.getSuperRPG().getHardmode() ? Math.ceil(coins * 0.8) : coins);
        this.hp = (this.getSuperRPG().getHardmode() ? Math.floor(hp * 1.2) : hp);
        if (maxHp == null)
            this.maxHp = this.hp;
else
            this.maxHp = (this.getSuperRPG().getHardmode() ? Math.floor(maxHp * 1.2) : maxHp);
    };
    return SuperRPGMenu_Monster;
})(SuperRPGMenu_Ingame);
///<reference path="SuperRPGMenu_Ingame.ts"/>
var SuperRPGMenu_Shop = (function (_super) {
    __extends(SuperRPGMenu_Shop, _super);
    // Constructor
    function SuperRPGMenu_Shop(superRPG) {
        _super.call(this, superRPG, "places/village/thirdHouseGames/SuperRPG/shop", 0);
    }
    // Public methods
    SuperRPGMenu_Shop.prototype.addBuyingDefenseItem = function (defenseItem, defense, price) {
        this.addEntry(new SuperRPGMenuEntry(defenseItem + " (" + price + ")", new CallbackCollection(this.buyDefenseItem.bind(this, defenseItem, defense, price))));
    };

    SuperRPGMenu_Shop.prototype.addBuyingHealthCrystal = function () {
        this.addEntry(new SuperRPGMenuEntry("Health crystal (100)", new CallbackCollection(this.buyHealthCrystal.bind(this))));
    };

    SuperRPGMenu_Shop.prototype.addBuyingHealthPendant = function () {
        this.addEntry(new SuperRPGMenuEntry("Health pendant (30)", new CallbackCollection(this.buyHealthPendant.bind(this))));
    };

    SuperRPGMenu_Shop.prototype.addBuyingHealthPotion = function () {
        this.addEntry(new SuperRPGMenuEntry("Health potion (5)", new CallbackCollection(this.buyHealthPotion.bind(this))));
    };

    SuperRPGMenu_Shop.prototype.addBuyingSuperHealthPotion = function () {
        this.addEntry(new SuperRPGMenuEntry("Health potion ++ (25)", new CallbackCollection(this.buySuperHealthPotion.bind(this))));
    };

    SuperRPGMenu_Shop.prototype.addBuyingWeapon = function (weapon, damage, price) {
        this.addEntry(new SuperRPGMenuEntry(weapon + " (" + price + ")", new CallbackCollection(this.buyWeapon.bind(this, weapon, damage, price))));
    };

    SuperRPGMenu_Shop.prototype.addQuitTheShop = function () {
        this.addEntry(new SuperRPGMenuEntry("Quit the shop", new CallbackCollection(this.getSuperRPG().nextFloorStep.bind(this.getSuperRPG()))));
    };

    // Private methods
    SuperRPGMenu_Shop.prototype.buyDefenseItem = function (defenseItem, defense, price) {
        if (this.getSuperRPG().getCoins() >= price && this.getSuperRPG().getDefense() < defense) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - price);
            this.getSuperRPG().setDefenseItem(defenseItem);
            this.getSuperRPG().setDefense(defense);
        }
    };

    SuperRPGMenu_Shop.prototype.buyHealthCrystal = function () {
        if (this.getSuperRPG().getCoins() >= 100) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 100);
            this.getSuperRPG().setMaxHp(this.getSuperRPG().getMaxHp() + 20);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 20);
        }
    };

    SuperRPGMenu_Shop.prototype.buyHealthPendant = function () {
        if (this.getSuperRPG().getCoins() >= 30) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 30);
            this.getSuperRPG().setMaxHp(this.getSuperRPG().getMaxHp() + 5);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 5);
        }
    };

    SuperRPGMenu_Shop.prototype.buyHealthPotion = function () {
        if (this.getSuperRPG().getCoins() >= 5 && this.getSuperRPG().getHp() < this.getSuperRPG().getMaxHp()) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 5);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 8);
        }
    };

    SuperRPGMenu_Shop.prototype.buySuperHealthPotion = function () {
        if (this.getSuperRPG().getCoins() >= 25 && this.getSuperRPG().getHp() < this.getSuperRPG().getMaxHp()) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - 25);
            this.getSuperRPG().setHp(this.getSuperRPG().getHp() + 50);
        }
    };

    SuperRPGMenu_Shop.prototype.buyWeapon = function (weapon, damage, price) {
        if (this.getSuperRPG().getCoins() >= price && this.getSuperRPG().getDamage() < damage) {
            this.getSuperRPG().setCoins(this.getSuperRPG().getCoins() - price);
            this.getSuperRPG().setWeapon(weapon);
            this.getSuperRPG().setDamage(damage);
        }
    };
    return SuperRPGMenu_Shop;
})(SuperRPGMenu_Ingame);
var SuperRPGStep;
(function (SuperRPGStep) {
    SuperRPGStep[SuperRPGStep["SPLASH_SCREEN"] = 0] = "SPLASH_SCREEN";
    SuperRPGStep[SuperRPGStep["GAME"] = 1] = "GAME";
    SuperRPGStep[SuperRPGStep["LOSE"] = 2] = "LOSE";
})(SuperRPGStep || (SuperRPGStep = {}));
///<reference path="ThirdHouseGame.ts"/>
Saving.registerBool("SuperRPGReward1", false);
Saving.registerBool("SuperRPGReward2", false);
Saving.registerBool("SuperRPGReward3", false);
Saving.registerBool("SuperRPGReward4", false);
Saving.registerBool("SuperRPGUnlockedHardmode", false);

var SuperRPG = (function (_super) {
    __extends(SuperRPG, _super);
    function SuperRPG() {
        _super.apply(this, arguments);
        // The global step of the game (splash screen, the menu, or the game itself
        this.step = SuperRPGStep.SPLASH_SCREEN;
        // The timer used for the splash screen
        this.splashScreenTimer = 39;
        // The current menu
        this.menu = null;
        // Should we exit the game?
        this.shouldExitGame = false;
    }
    // Public methods
    SuperRPG.prototype.exitGame = function () {
        this.shouldExitGame = true;
    };

    SuperRPG.prototype.nextFloorStep = function () {
        switch (this.floorStep) {
            case SuperRPGFloorStep.SHOP:
                this.floorStep = SuperRPGFloorStep.MONSTER1;
                this.goToMonster();
                break;
            case SuperRPGFloorStep.MONSTER1:
                this.floorStep = SuperRPGFloorStep.MONSTER2;
                this.goToMonster();
                break;
            case SuperRPGFloorStep.MONSTER2:
                this.floorStep = SuperRPGFloorStep.MONSTER3;
                this.goToMonster();
                break;
            case SuperRPGFloorStep.MONSTER3:
                this.floorStep = SuperRPGFloorStep.SHOP;
                this.floor += 1;
                this.goToShop();
                break;
        }
    };

    SuperRPG.prototype.startGame = function (hardmode) {
        // Set the hardmode (from parameter)
        this.hardmode = hardmode;

        // Set various stuff
        this.floor = 0;
        this.floorStep = SuperRPGFloorStep.SHOP;
        this.coins = 15;
        this.hp = 10;
        this.maxHp = 10;
        this.weapon = "Your fists";
        this.damage = 1;
        this.defenseItem = "Nothing";
        this.defense = 0;

        // Load the shop
        this.goToShop();
    };

    SuperRPG.prototype.run = function () {
        // To store the return value
        var returnValue = false;

        if (this.shouldExitGame)
            return true;

        // Reset the area
        this.getRenderArea().resetAllButSize();

        switch (this.step) {
            case SuperRPGStep.SPLASH_SCREEN:
                this.drawSplashScreen();
                returnValue = this.runSplashScreen();
                break;
            case SuperRPGStep.GAME:
                this.drawGame();
                returnValue = this.runGame();
                break;
            case SuperRPGStep.LOSE:
                this.drawLose();
                returnValue = false;
                break;
        }

        // We return
        return returnValue;
    };

    // Public getters
    SuperRPG.prototype.getCoins = function () {
        return this.coins;
    };

    SuperRPG.prototype.getDamage = function () {
        return this.damage;
    };

    SuperRPG.prototype.getDefense = function () {
        return this.defense;
    };

    SuperRPG.prototype.getDefenseItem = function () {
        return this.defenseItem;
    };

    SuperRPG.prototype.getFloor = function () {
        return this.floor;
    };

    SuperRPG.prototype.getFloorStep = function () {
        return this.floorStep;
    };

    SuperRPG.prototype.getHardmode = function () {
        return this.hardmode;
    };

    SuperRPG.prototype.getHp = function () {
        return this.hp;
    };

    SuperRPG.prototype.getMaxHp = function () {
        return this.maxHp;
    };

    SuperRPG.prototype.getWeapon = function () {
        return this.weapon;
    };

    // Public setters
    SuperRPG.prototype.setCoins = function (coins) {
        this.coins = coins;
    };

    SuperRPG.prototype.setDamage = function (damage) {
        this.damage = damage;
    };

    SuperRPG.prototype.setDefense = function (defense) {
        this.defense = defense;
    };

    SuperRPG.prototype.setDefenseItem = function (defenseItem) {
        this.defenseItem = defenseItem;
    };

    SuperRPG.prototype.setHp = function (hp) {
        this.hp = hp;

        if (this.hp > this.maxHp)
            this.hp = this.maxHp;

        if (this.hp <= 0)
            this.goToLose();
    };

    SuperRPG.prototype.setMaxHp = function (maxHp) {
        this.maxHp = maxHp;
    };

    SuperRPG.prototype.setWeapon = function (weapon) {
        this.weapon = weapon;
    };

    // Private methods
    SuperRPG.prototype.drawGame = function () {
        this.menu.draw(this.getRenderArea());
    };

    SuperRPG.prototype.drawLose = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/SuperRPG/youLose"), 8, 1);
        if (this.reward == 0)
            this.getRenderArea().drawString("At floor " + this.floor + ". And got no candies.", 8, 7);
else
            this.getRenderArea().drawString("At floor " + this.floor + ". And got " + this.reward + " candies.", 8, 7);
    };

    SuperRPG.prototype.drawSplashScreen = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/village/thirdHouseGames/SuperRPG/splashScreen"), -67 + this.splashScreenTimer * 3, 2);
    };

    SuperRPG.prototype.getCandiesWeWillGain = function () {
        // The reward
        var reward = 0;

        if (Saving.loadBool("SuperRPGReward1") == false && this.floor > 5) {
            reward += 100;
            Saving.saveBool("SuperRPGReward1", true);
        }

        if (Saving.loadBool("SuperRPGReward2") == false && this.floor > 10) {
            reward += 1000;
            Saving.saveBool("SuperRPGReward2", true);
        }

        if (Saving.loadBool("SuperRPGReward3") == false && this.floor > 13) {
            reward += 10000;
            Saving.saveBool("SuperRPGReward3", true);
        }

        if (Saving.loadBool("SuperRPGReward4") == false && this.floor > 20) {
            reward += 30000;
            Saving.saveBool("SuperRPGReward4", true);
            Saving.saveBool("SuperRPGUnlockedHardmode", true);
        }

        // We return the reward
        return reward;
    };

    SuperRPG.prototype.goToLose = function () {
        // No more menu
        this.menu = null;

        // Change the step
        this.step = SuperRPGStep.LOSE;

        // Get the candies
        this.reward = this.getCandiesWeWillGain();
        this.getThirdHouse().getGame().getCandies().add(this.reward);
    };

    SuperRPG.prototype.goToMainMenu = function () {
        // Change the step
        this.step = SuperRPGStep.GAME;

        // Set the main menu
        this.menu = new SuperRPGMenu_Main(this);
    };

    SuperRPG.prototype.goToMonster = function () {
        // Create the new menu
        var menu = new SuperRPGMenu_Monster(this);

        // Add the entry used to quit the shop
        menu.addUsualEntries();

        switch (this.floor) {
            case 0:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(20);
else
                    menu.setBlob();
                break;
            case 1:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(30);
else if (Random.flipACoin())
                    menu.setBlob();
else
                    menu.setFerociousBlob();
                break;
            case 2:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(40);
else if (Random.flipACoin()) {
                    if (Random.oneChanceOutOf(5))
                        menu.setBlob();
else
                        menu.setFerociousBlob();
                } else
                    menu.setGoblin();
                break;
            case 3:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(50);
else if (this.floorStep == SuperRPGFloorStep.MONSTER3)
                    menu.setGoblin();
else
                    menu.setFerociousGoblin();
                break;
            case 4:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(60);
else if (Random.oneChanceOutOf(3))
                    menu.setFerociousGoblin();
else
                    menu.setSkeletonOrBillGatesSkeleton();
                break;
            case 5:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(70);
else if (Random.oneChanceOutOf(3))
                    menu.setSkeletonOrBillGatesSkeleton();
else
                    menu.setFerociousSkeleton();
                break;
            case 6:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(80);
else
                    menu.setFerociousSkeleton();
                break;
            case 7:
                if (this.floorStep == SuperRPGFloorStep.MONSTER3)
                    menu.setSpider();
else
                    menu.setSpiders();
                break;
            case 8:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(100);
else
                    menu.setBabyVampire();
                break;
            case 9:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(110);
else {
                    if (this.floorStep == SuperRPGFloorStep.MONSTER2)
                        menu.setSpiders();
else
                        menu.setSpider();
                }
                break;
            case 10:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(120);
else
                    menu.setThing();
                break;
            case 11:
                if (Random.oneChanceOutOf(100))
                    menu.setChest(130);
else
                    menu.setSpider();
                break;
            case 12:
                if (Random.flipACoin())
                    menu.setChest(140);
else
                    menu.setBomb();
                break;
            case 13:
                switch (this.floorStep) {
                    case SuperRPGFloorStep.MONSTER1:
                        menu.setCorpse1();
                        break;
                    case SuperRPGFloorStep.MONSTER2:
                        menu.setCorpse2();
                        break;
                    case SuperRPGFloorStep.MONSTER3:
                        menu.setDragon();
                        break;
                }
                break;
            default:
                menu.setAbstract(10 + (this.floor - 14) * 12, 0, Math.ceil(500 * (1 / (this.floor - 13))), 30 + (this.floor - 13) * 3);
                break;
        }

        // Set the menu
        this.menu = menu;
    };

    SuperRPG.prototype.goToShop = function () {
        // Create the new menu
        var menu = new SuperRPGMenu_Shop(this);

        switch (this.floor) {
            case 0:
                menu.addBuyingWeapon("Wooden sword", 2, 10);
                menu.addBuyingDefenseItem("Wooden shield", 1, 10);
                break;
            case 1:
                menu.addBuyingWeapon("Copper sword", 3, 15);
                menu.addBuyingDefenseItem("Copper shield", 2, 15);
                menu.addBuyingHealthPotion();
                break;
            case 2:
                menu.addBuyingWeapon("Iron sword", 4, 20);
                menu.addBuyingDefenseItem("Iron shield", 3, 20);
                menu.addBuyingHealthPotion();
                break;
            case 3:
                menu.addBuyingWeapon("Silver sword", 5, 30);
                menu.addBuyingDefenseItem("Silver shield", 4, 30);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 4:
                menu.addBuyingWeapon("Gold sword", 6, 40);
                menu.addBuyingDefenseItem("Gold shield", 5, 40);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 5:
                menu.addBuyingWeapon("Diamond sword", 7, 50);
                menu.addBuyingDefenseItem("Diamond shield", 6, 50);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 6:
                menu.addBuyingWeapon("Falchion", 8, 100);
                menu.addBuyingDefenseItem("Diamond shield", 6, 50);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 7:
                menu.addBuyingWeapon("Falchion", 8, 100);
                menu.addBuyingDefenseItem("Shield of El Cid", 8, 100);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 8:
                menu.addBuyingWeapon("Dagger of Time", 10, 180);
                menu.addBuyingDefenseItem("Shield of El Cid", 8, 100);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 9:
                menu.addBuyingWeapon("Dagger of Time", 10, 180);
                menu.addBuyingDefenseItem("Shield of Achilles", 10, 180);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 10:
                menu.addBuyingWeapon("Vorpal sword", 12, 250);
                menu.addBuyingDefenseItem("Shield of Achilles", 10, 180);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 11:
                menu.addBuyingWeapon("Vorpal sword", 12, 250);
                menu.addBuyingDefenseItem("Wynebgwrthucher", 12, 250);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 12:
                menu.addBuyingWeapon("Morgul-blade", 14, 400);
                menu.addBuyingDefenseItem("Wynebgwrthucher", 12, 250);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 13:
                menu.addBuyingWeapon("Morgul-blade", 14, 400);
                menu.addBuyingDefenseItem("Ancile", 14, 400);
                menu.addBuyingHealthPotion();
                menu.addBuyingHealthPendant();
                break;
            case 14:
                menu.addBuyingWeapon("Excalibur", 16, 600);
                menu.addBuyingDefenseItem("Ancile", 14, 400);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            case 15:
                menu.addBuyingWeapon("Excalibur", 16, 600);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            case 16:
                menu.addBuyingWeapon("Tonbogiri", 18, 1000);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            case 17:
            case 18:
            case 19:
                menu.addBuyingWeapon("Gungnir", 20, 1500);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
            default:
                menu.addBuyingWeapon("Mjolnir", 30, 2000);
                menu.addBuyingDefenseItem("Aegis", 16, 600);
                menu.addBuyingSuperHealthPotion();
                menu.addBuyingHealthCrystal();
                break;
        }

        // Add the entry used to quit the shop
        menu.addQuitTheShop();

        // Set the menu
        this.menu = menu;
    };

    SuperRPG.prototype.pressedDownButton = function () {
        if (this.menu != null)
            this.menu.pressedDownButton();
    };

    SuperRPG.prototype.pressedSpaceButton = function () {
        if (this.step == SuperRPGStep.LOSE) {
            this.shouldExitGame = true;
        }

        if (this.menu != null)
            this.menu.pressedSpaceButton();
    };

    SuperRPG.prototype.pressedUpButton = function () {
        if (this.menu != null)
            this.menu.pressedUpButton();
    };

    SuperRPG.prototype.runGame = function () {
        return false;
    };

    SuperRPG.prototype.runSplashScreen = function () {
        if (this.splashScreenTimer >= 0) {
            // Reduce the timer
            this.splashScreenTimer -= 1;
        } else {
            // Switch to the next step
            this.goToMainMenu();
        }

        // We can't end the game during the splash screen
        return false;
    };
    return SuperRPG;
})(ThirdHouseGame);
///<reference path="QuestEntity.ts"/>
var Teapot = (function (_super) {
    __extends(Teapot, _super);
    // Constructor
    function Teapot(quest, pos) {
        _super.call(this, quest, pos, new Naming("A teapot", "a teapot"), new RenderArea(19, 6), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(3, 1)), new CollisionBox(this, new Pos(6, 1), new Pos(8, 1)), new CollisionBox(this, new Pos(1, 2), new Pos(18, 1)), new CollisionBox(this, new Pos(2, 3), new Pos(17, 1)), new CollisionBox(this, new Pos(3, 4), new Pos(16, 1)), new CollisionBox(this, new Pos(5, 5), new Pos(12, 1))), new QuestEntityMovement());

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(1000000);
        this.setHp(1000000);

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/teapot"));
        this.setTransparency(new RenderTransparency(" ", "%"));
    }
    // update()
    Teapot.prototype.update = function () {
        _super.prototype.update.call(this);

        console.log(this.getHp());

        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.getGlobalPosition().x - 50)
            this.heal(50);
    };

    // willDie()
    Teapot.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage()));

        // The spoon
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponGiantSpoon", "You found a giant spoon inside the teapot.", "You gain a giant spoon."));
    };
    return Teapot;
})(QuestEntity);
var TheArenaModuleQuest = (function () {
    // Constructor
    function TheArenaModuleQuest(questFolderName, specialCallback) {
        // Set from parameters
        this.questFolderName = questFolderName;
        this.specialCallback = specialCallback;
    }
    // Public methods
    TheArenaModuleQuest.prototype.drawLogo = function (renderArea, x, y, game) {
        // Draw the logo ascii art
        renderArea.drawArray(Database.getAscii("arena/" + this.questFolderName + "/logo"), x + 1, y + 1);

        // Add the button and the link
        renderArea.addMultipleAsciiButtons("theArenaQuest" + this.questFolderName, x + 1, x + 19, y + 1, x + 1, x + 19, y + 2, x + 1, x + 19, y + 3, x + 1, x + 19, y + 4);
        renderArea.addLinkCall(".theArenaQuest" + this.questFolderName, new CallbackCollection(this.launchQuest.bind(this, game)));
    };

    // Public getters
    TheArenaModuleQuest.prototype.getQuestFolderName = function () {
        return this.questFolderName;
    };

    // Private methods
    TheArenaModuleQuest.prototype.launchQuest = function (game) {
        if (game.canStartQuest()) {
            game.getStatusBar().selectTabByType(StatusBarTabType.MAP);
            game.goToMap();
            game.setPlace(this.specialCallback(game));
        }
    };
    return TheArenaModuleQuest;
})();
var TheArenaModule;
(function (TheArenaModule) {
    var quests = {};

    // Add a quest
    function addQuest(quest) {
        quests[quest.getQuestFolderName()] = quest;
    }
    TheArenaModule.addQuest = addQuest;

    // Get a quest
    function getQuest(questFolderName) {
        return quests[questFolderName];
    }
    TheArenaModule.getQuest = getQuest;
})(TheArenaModule || (TheArenaModule = {}));
///<reference path="Place.ts"/>
var TheArena = (function (_super) {
    __extends(TheArena, _super);
    // Constructor
    function TheArena(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        this.renderArea.resize(100, 20);
        this.update();
    }
    // getRenderArea()
    TheArena.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    TheArena.prototype.drawQuestLogo = function (questFolderName, x, y) {
        if (questFolderName != null) {
            if (TheArenaModule.getQuest(questFolderName) == null)
                console.log("Trying to draw the arena quest " + questFolderName + " which wasn't added to the arena module.");
else {
                // Draw the logo
                TheArenaModule.getQuest(questFolderName).drawLogo(this.renderArea, x, y, this.getGame());
            }
        }

        // Draw the borders
        this.renderArea.drawHorizontalLine("-", x, x + 19, y);
        this.renderArea.drawHorizontalLine("-", x, x + 19, y + 5);
        this.renderArea.drawVerticalLine("|", x, y, y + 5);
        this.renderArea.drawVerticalLine("|", x + 19, y, y + 5);
    };

    TheArena.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Quick explanation
        this.renderArea.drawString("The Arena is a special area featuring additional quests written by players.", 12, 1);

        // List of quests
        this.drawQuestLogo("peacefulForest", 2, 3);
        this.drawQuestLogo("hardcorePlatformer", 21, 3);
        this.drawQuestLogo(null, 40, 3);
        this.drawQuestLogo(null, 59, 3);
        this.drawQuestLogo(null, 78, 3);

        this.drawQuestLogo(null, 2, 8);
        this.drawQuestLogo(null, 21, 8);
        this.drawQuestLogo(null, 40, 8);
        this.drawQuestLogo(null, 59, 8);
        this.drawQuestLogo(null, 78, 8);

        // Hardmode
        this.renderArea.drawString("If you want more challenge, you can also play hardmode here : ", 1, 17);
        this.renderArea.addHtmlLink(63, 17, "http://candybox2.net/?gamemode=hard", "http://candybox2.net/?gamemode=hard");

        // Create your quest!
        this.renderArea.drawString("If you're a programmer and you want to create a quest,                     and                 !", 1, 15);
        this.renderArea.addHtmlLink(56, 15, "source_code.html", "get the source code");
        this.renderArea.addHtmlLink(80, 15, "create_quest.html", "follow the guide");
    };
    return TheArena;
})(Place);
var TheCaveAdditionalCharacter = (function () {
    // Constructor
    function TheCaveAdditionalCharacter(theCave, characterString, characterPosition) {
        if (typeof characterString === "undefined") { characterString = null; }
        if (typeof characterPosition === "undefined") { characterPosition = null; }
        // We set the cave
        this.theCave = theCave;

        if (characterString != null) {
            // We set our string from this one
            this.characterString = characterString;
        } else {
            // We choose a string randomly from the possible strings
            this.characterString = this.theCave.getAdditionalCharactersPossible()[Random.upTo(this.theCave.getAdditionalCharactersPossible().length - 1)];
        }

        if (characterPosition != null) {
            // We set our position from this one
            this.characterPosition = characterPosition;
        } else {
            // We choose a position randomly from the possible positions
            this.characterPosition = this.theCave.getAdditionalCharactersPositionsPossible()[Random.upTo(this.theCave.getAdditionalCharactersPositionsPossible().length - 1)];
        }
    }
    // Public getters
    TheCaveAdditionalCharacter.prototype.getPosition = function () {
        return this.characterPosition;
    };

    TheCaveAdditionalCharacter.prototype.getString = function () {
        return this.characterString;
    };
    return TheCaveAdditionalCharacter;
})();
///<reference path="Place.ts"/>
var TheCaveExit = (function (_super) {
    __extends(TheCaveExit, _super);
    // Constructor
    function TheCaveExit(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        this.renderArea.resizeFromArray(Database.getAscii("places/theCave/exit"), 42, 3);
        this.update();
    }
    // getRenderArea()
    TheCaveExit.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    TheCaveExit.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Draw the background
        this.renderArea.drawArray(Database.getAscii("places/theCave/exit"), 21, 3);

        // Draw the text
        this.renderArea.drawString(Database.getText("theCaveExitText0"), 30, 3);
        this.renderArea.drawString(Database.getText("theCaveExitText1"), 30, 4);

        // Draw the translated text
        this.renderArea.drawString(Database.getTranslatedText("theCaveExitText0"), 30, 6, true);
        this.renderArea.drawString(Database.getTranslatedText("theCaveExitText1"), 30, 7, true);

        // Add the button to return to the main map
        this.renderArea.addAsciiRealButton(Database.getText("theCaveExitButtonText"), 41, 20, "theCaveExitReturnToMapButton", Database.getTranslatedText("theCaveExitButtonText"), true);
        this.renderArea.addLinkCall(".theCaveExitReturnToMapButton", new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())));
    };
    return TheCaveExit;
})(Place);
var TheCaveMoveType;
(function (TheCaveMoveType) {
    TheCaveMoveType[TheCaveMoveType["LEFT"] = 0] = "LEFT";
    TheCaveMoveType[TheCaveMoveType["RIGHT"] = 1] = "RIGHT";
    TheCaveMoveType[TheCaveMoveType["STRAIGHT"] = 2] = "STRAIGHT";
})(TheCaveMoveType || (TheCaveMoveType = {}));
var TheCavePattern = (function () {
    // Constructor
    function TheCavePattern(theCave) {
        this.theCave = theCave;
    }
    // Public methods
    TheCavePattern.prototype.draw = function (renderArea, x, y) {
    };

    TheCavePattern.prototype.ended = function () {
        return false;
    };

    TheCavePattern.prototype.getSentence = function () {
        return null;
    };

    TheCavePattern.prototype.move = function (type) {
    };

    // Public getters
    TheCavePattern.prototype.getTheCave = function () {
        return this.theCave;
    };
    return TheCavePattern;
})();
///<reference path="TheCavePattern.ts"/>
var TheCavePattern_ArrowsToHeartPlug = (function (_super) {
    __extends(TheCavePattern_ArrowsToHeartPlug, _super);
    // Constructor
    function TheCavePattern_ArrowsToHeartPlug(theCave) {
        _super.call(this, theCave);
        // Is the pattern stopped?
        this.stopped = false;
        // Should we draw an arrow?
        this.arrow = true;
        // Number of times the player correctly followed the arrows
        this.followedNumber = 0;
        // Did we find the heart plug?
        this.foundPlug = false;
        // Did we get the heart plug? (true if the player clicked on it)
        this.gotPlug = false;

        // Choose a random direction
        this.arrowAtRight = Random.flipACoin();
    }
    // Public methods
    TheCavePattern_ArrowsToHeartPlug.prototype.draw = function (renderArea, x, y) {
        if (this.arrow) {
            if (this.arrowAtRight == true) {
                renderArea.drawString("->", x + 71, y + 17);
            } else {
                renderArea.drawString("<-", x + 26, y + 17);
            }
        }

        if (this.foundPlug == true && this.gotPlug == false) {
            // Draw the plug ascii art
            renderArea.drawArray(Database.getAscii("places/theCave/heartPlug"), x + 46, y + 14);

            // Draw the button over the plug
            renderArea.addMultipleAsciiButtons("theCavePattern_ArrowsToHeartPlugButton", x + 46, x + 53, y + 14, x + 46, x + 53, y + 15);

            // Add the button link
            renderArea.addLinkCall(".theCavePattern_ArrowsToHeartPlugButton", new CallbackCollection(this.getPlug.bind(this)));
        }
    };

    TheCavePattern_ArrowsToHeartPlug.prototype.ended = function () {
        return this.stopped;
    };

    TheCavePattern_ArrowsToHeartPlug.prototype.getSentence = function () {
        if (this.foundPlug == true && this.gotPlug == false) {
            return "theCavePattern_ArrowsToHeartPlugSeeStrangePlug";
        }

        // Else, we return null
        return null;
    };

    TheCavePattern_ArrowsToHeartPlug.prototype.move = function (type) {
        if ((this.arrowAtRight == true && type == TheCaveMoveType.RIGHT) || (this.arrowAtRight == false && type == TheCaveMoveType.LEFT)) {
            if (this.foundPlug == false) {
                if (this.followedNumber > 6) {
                    this.foundPlug = true;
                    this.arrow = false;
                } else {
                    // Possibly change the arrow direction
                    this.arrowAtRight = Random.flipACoin();

                    // Increase the followed number
                    this.followedNumber += 1;
                }
            } else
                this.stopped = true;
        } else {
            this.stopped = true;
        }
    };

    // Private methods
    TheCavePattern_ArrowsToHeartPlug.prototype.getPlug = function () {
        // Get the plug
        this.getTheCave().getGame().gainItem("gridItemPossessedHeartPlug");
        this.gotPlug = true;

        // Ask the cave for an update
        this.getTheCave().aPatternNeedsUpdating();
    };
    return TheCavePattern_ArrowsToHeartPlug;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
Saving.registerBool("TheCavePattern_ChocolateBarNowGotTheBar", false);

var TheCavePattern_ChocolateBarNow = (function (_super) {
    __extends(TheCavePattern_ChocolateBarNow, _super);
    // Constructor
    function TheCavePattern_ChocolateBarNow(theCave) {
        _super.call(this, theCave);
        // Did we clicked to get the bar?
        this.gotTheBar = false;
    }
    // Public methods
    TheCavePattern_ChocolateBarNow.prototype.draw = function (renderArea, x, y) {
        if (this.gotTheBar == false) {
            // Draw the bar ascii art
            renderArea.drawArray(Database.getAscii("places/theCave/chocolateBar"), x + 40, y + 25);

            // Draw the button over the plug
            renderArea.addMultipleAsciiButtons("theCavePattern_ChocolateBarNowButton", x + 40, x + 57, y + 26, x + 40, x + 57, y + 27);

            // Add the button link
            renderArea.addLinkCall(".theCavePattern_ChocolateBarNowButton", new CallbackCollection(this.getTheBar.bind(this)));
        }
    };

    TheCavePattern_ChocolateBarNow.prototype.ended = function () {
        return true;
    };

    TheCavePattern_ChocolateBarNow.prototype.getSentence = function () {
        if (this.gotTheBar == false) {
            return "theCavePattern_ChocolateBarNowSeeChocolateBar";
        }

        // Else, we return null
        return null;
    };

    // Private methods
    TheCavePattern_ChocolateBarNow.prototype.getTheBar = function () {
        // Get the bar
        this.getTheCave().getGame().getChocolateBars().add(1);
        this.gotTheBar = true;

        // We can't get the bar anymore (we can't start this pattern)
        Saving.saveBool("TheCavePattern_ChocolateBarNowGotTheBar", true);

        // Ask the cave for an update
        this.getTheCave().aPatternNeedsUpdating();
    };
    return TheCavePattern_ChocolateBarNow;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
var TheCavePattern_MonkeyWizard = (function (_super) {
    __extends(TheCavePattern_MonkeyWizard, _super);
    // Constructor
    function TheCavePattern_MonkeyWizard(theCave) {
        _super.call(this, theCave);
    }
    // Public methods
    TheCavePattern_MonkeyWizard.prototype.draw = function (renderArea, x, y) {
        // Draw the monkey wizard
        renderArea.drawArray(Database.getAscii("places/theCave/monkeyWizard"), x + 32, y + 6, new RenderTransparency(" ", "%"));

        // Add the button & the link allowing the player to challenge him
        renderArea.addAsciiRealButton(Database.getText("theCavePattern_MonkeyWizardButton"), x + 39, y + 26, "theCavePattern_MonkeyWizardButton", Database.getTranslatedText("theCavePattern_MonkeyWizardButton"));
        renderArea.addLinkCall(".theCavePattern_MonkeyWizardButton", new CallbackCollection(this.challenge.bind(this)));
    };

    TheCavePattern_MonkeyWizard.prototype.ended = function () {
        return true;
    };

    TheCavePattern_MonkeyWizard.prototype.getSentence = function () {
        return "theCavePattern_MonkeyWizardSentence";
    };

    // Private methods
    TheCavePattern_MonkeyWizard.prototype.challenge = function () {
        if (this.getTheCave().getGame().canStartQuest())
            this.getTheCave().getGame().setPlace(new MonkeyWizardQuest(this.getTheCave().getGame()));
    };
    return TheCavePattern_MonkeyWizard;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
var TheCavePattern_OctopusKing = (function (_super) {
    __extends(TheCavePattern_OctopusKing, _super);
    // Constructor
    function TheCavePattern_OctopusKing(theCave) {
        _super.call(this, theCave);
    }
    // Public methods
    TheCavePattern_OctopusKing.prototype.draw = function (renderArea, x, y) {
        // Draw the monkey wizard
        renderArea.drawArray(Database.getAscii("places/theCave/octopusKing"), x + 32, y + 6, new RenderTransparency(" ", "%"));

        // Add the button & the link allowing the player to challenge him
        renderArea.addAsciiRealButton(Database.getText("theCavePattern_OctopusKingButton"), x + 39, y + 26, "theCavePattern_OctopusKingButton", Database.getTranslatedText("theCavePattern_OctopusKingButton"));
        renderArea.addLinkCall(".theCavePattern_OctopusKingButton", new CallbackCollection(this.challenge.bind(this)));
    };

    TheCavePattern_OctopusKing.prototype.ended = function () {
        return true;
    };

    TheCavePattern_OctopusKing.prototype.getSentence = function () {
        return "theCavePattern_OctopusKingSentence";
    };

    // Private methods
    TheCavePattern_OctopusKing.prototype.challenge = function () {
        if (this.getTheCave().getGame().canStartQuest())
            this.getTheCave().getGame().setPlace(new OctopusKingQuest(this.getTheCave().getGame()));
    };
    return TheCavePattern_OctopusKing;
})(TheCavePattern);
///<reference path="TheCavePattern.ts"/>
Saving.registerBool("TheCavePattern_TreasureMapSawMap", false);
Saving.registerBool("TheCavePattern_TreasureMapFoundTreasure", false);

var TheCavePattern_TreasureMap = (function (_super) {
    __extends(TheCavePattern_TreasureMap, _super);
    // Constructor
    function TheCavePattern_TreasureMap(theCave) {
        _super.call(this, theCave);

        // We saw the map!
        Saving.saveBool("TheCavePattern_TreasureMapSawMap", true);
    }
    // Public methods
    TheCavePattern_TreasureMap.prototype.draw = function (renderArea, x, y) {
        renderArea.drawArray(Database.getAscii("places/theCave/treasureMap"), x + 38, y + 22);
    };

    TheCavePattern_TreasureMap.prototype.ended = function () {
        return true;
    };

    TheCavePattern_TreasureMap.prototype.getSentence = function () {
        return "theCavePattern_TreasureMapSentence";
    };
    return TheCavePattern_TreasureMap;
})(TheCavePattern);
///<reference path="Place.ts"/>
var TheCave = (function (_super) {
    __extends(TheCave, _super);
    // Constructor
    function TheCave(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Last moves chosen
        this.lastMoves = [];
        // Database text names for the first sentence below
        this.firstSentence = null;
        // Pattern currently in use
        this.pattern = null;

        // Add the additional characters to the array
        this.createAdditionalCharactersPossible();

        // Add the additional characters positions to the array
        this.createAdditionalCharactersPositionsPossible();

        // Create the current way
        this.createWay();

        // Resize & update
        this.renderArea.resizeFromArray(Database.getAscii("places/theCave/ways"), 42, 7);
        this.update();
    }
    // getRenderArea()
    TheCave.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Public methods
    TheCave.prototype.aPatternNeedsUpdating = function () {
        this.update();
        this.getGame().updatePlace();
    };

    // Public getters
    TheCave.prototype.getAdditionalCharactersPositionsPossible = function () {
        return this.additionalCharactersPositionsPossible;
    };

    TheCave.prototype.getAdditionalCharactersPossible = function () {
        return this.additionalCharactersPossible;
    };

    // Private methods
    TheCave.prototype.createAdditionalCharactersPositionsPossible = function () {
        // Reset the array
        this.additionalCharactersPositionsPossible = [];

        // Add positions
        this.additionalCharactersPositionsPossible.push(new Pos(20, 6));
        this.additionalCharactersPositionsPossible.push(new Pos(19, 9));
        this.additionalCharactersPositionsPossible.push(new Pos(17, 13));
        this.additionalCharactersPositionsPossible.push(new Pos(20, 18));
        this.additionalCharactersPositionsPossible.push(new Pos(17, 24));
        this.additionalCharactersPositionsPossible.push(new Pos(41, 19));
        this.additionalCharactersPositionsPossible.push(new Pos(56, 16));
        this.additionalCharactersPositionsPossible.push(new Pos(52, 22));
        this.additionalCharactersPositionsPossible.push(new Pos(31, 23));
        this.additionalCharactersPositionsPossible.push(new Pos(64, 28));
        this.additionalCharactersPositionsPossible.push(new Pos(64, 12));
        this.additionalCharactersPositionsPossible.push(new Pos(75, 5));
        this.additionalCharactersPositionsPossible.push(new Pos(80, 12));
        this.additionalCharactersPositionsPossible.push(new Pos(77, 17));
        this.additionalCharactersPositionsPossible.push(new Pos(80, 20));
        this.additionalCharactersPositionsPossible.push(new Pos(78, 26));
    };

    TheCave.prototype.createAdditionalCharactersPossible = function () {
        // Reset the array
        this.additionalCharactersPossible = [];

        // Add characters
        this.additionalCharactersPossible.push("V");
        this.additionalCharactersPossible.push("\\");
        this.additionalCharactersPossible.push("/");
        this.additionalCharactersPossible.push("'");
        this.additionalCharactersPossible.push("`");
        this.additionalCharactersPossible.push("~");
        this.additionalCharactersPossible.push(")");
        this.additionalCharactersPossible.push("(");
        this.additionalCharactersPossible.push("}");
        this.additionalCharactersPossible.push("{");
        this.additionalCharactersPossible.push("@");
        this.additionalCharactersPossible.push(">");
        this.additionalCharactersPossible.push("^");
    };

    TheCave.prototype.createWay = function (moveType) {
        if (typeof moveType === "undefined") { moveType = null; }
        // A variable used in the loop choosing the new pattern
        var cont;

        // Reset the additional characters array
        this.additionalCharacters = [];

        switch (moveType) {
            case TheCaveMoveType.STRAIGHT:
                this.firstSentence = "theCaveFirstSentenceWentStraight";
                break;
            case TheCaveMoveType.LEFT:
                this.firstSentence = "theCaveFirstSentenceWentLeft";
                break;
            case TheCaveMoveType.RIGHT:
                this.firstSentence = "theCaveFirstSentenceWentRight";
                break;
            case null:
                this.firstSentence = "theCaveFirstSentenceYouAre";
                break;
        }

        if (this.pattern != null) {
            if (this.pattern.ended()) {
                this.pattern = null;
            }
        }

        if (this.pattern == null && this.lastMoves.length > 0) {
            if (Random.flipACoin()) {
                cont = 10;
                while (cont > 0 && this.pattern == null) {
                    cont -= 1;
                    switch (Random.upTo(4)) {
                        case 0:
                            if (Saving.loadBool("gridItemPossessedHeartPlug") == false)
                                this.pattern = new TheCavePattern_ArrowsToHeartPlug(this);
                            break;
                        case 1:
                            if (Saving.loadBool("TheCavePattern_ChocolateBarNowGotTheBar") == false)
                                this.pattern = new TheCavePattern_ChocolateBarNow(this);
                            break;
                        case 2:
                            if (Saving.loadBool("TheCavePattern_TreasureMapFoundTreasure") == false)
                                this.pattern = new TheCavePattern_TreasureMap(this);
                            break;
                        case 3:
                            this.pattern = new TheCavePattern_MonkeyWizard(this);
                            break;
                        case 4:
                            this.pattern = new TheCavePattern_OctopusKing(this);
                            break;
                    }
                }
            }
        }

        for (var i = 0; i < 10; i++) {
            this.additionalCharacters.push(new TheCaveAdditionalCharacter(this));
        }
    };

    TheCave.prototype.drawWays = function (x, y) {
        if (typeof x === "undefined") { x = 0; }
        if (typeof y === "undefined") { y = 3; }
        // Draw the background
        this.renderArea.drawArray(Database.getAscii("places/theCave/ways"), x + 21, y);

        for (var i = 0; i < this.additionalCharacters.length; i++) {
            this.renderArea.drawString(this.additionalCharacters[i].getString(), x + this.additionalCharacters[i].getPosition().x, y + this.additionalCharacters[i].getPosition().y);
        }

        if (this.firstSentence != null) {
            this.renderArea.drawString(Database.getText(this.firstSentence), x + 23, y + 32);
            this.renderArea.drawString(Database.getTranslatedText(this.firstSentence), x + 23, y + 33, true);
        }
        if (this.pattern != null && this.pattern.getSentence() != null) {
            this.renderArea.drawString(Database.getText(this.pattern.getSentence()), x + 23, y + 34);
            this.renderArea.drawString(Database.getTranslatedText(this.pattern.getSentence()), x + 23, y + 35, true);
        }

        if (this.pattern != null)
            this.pattern.draw(this.renderArea, x, y);

        for (var i = 0; i <= 4; i++) {
            this.renderArea.addBackgroundColor(x + 46, x + 54, y + 1 + i, new Color(ColorType.THECAVE_BACKGROUND_COLOR));
        }

        // Add the button to go left
        this.renderArea.addMultipleAsciiButtons("theCaveGoLeftButton", x + 30, x + 32, y + 5, x + 29, x + 33, y + 6, x + 27, x + 33, y + 7, x + 26, x + 32, y + 8, x + 26, x + 32, y + 9, x + 26, x + 32, y + 10, x + 25, x + 32, y + 11, x + 24, x + 32, y + 12, x + 25, x + 31, y + 13, x + 25, x + 31, y + 14, x + 25, x + 32, y + 15, x + 25, x + 32, y + 16, x + 25, x + 32, y + 17, x + 25, x + 32, y + 18, x + 24, x + 32, y + 19, x + 24, x + 31, y + 20, x + 25, x + 30, y + 21, x + 26, x + 29, y + 22, x + 26, x + 28, y + 23, x + 25, x + 27, y + 24, x + 25, x + 26, y + 25);
        this.renderArea.addLinkCall(".theCaveGoLeftButton", new CallbackCollection(this.move.bind(this, TheCaveMoveType.LEFT)));

        // Add the button to go right
        this.renderArea.addMultipleAsciiButtons("theCaveGoRightButton", x + 68, x + 70, y + 6, x + 68, x + 72, y + 7, x + 68, x + 73, y + 8, x + 68, x + 73, y + 9, x + 69, x + 74, y + 10, x + 69, x + 74, y + 11, x + 69, x + 74, y + 12, x + 69, x + 75, y + 13, x + 69, x + 75, y + 14, x + 68, x + 74, y + 15, x + 68, x + 74, y + 16, x + 68, x + 74, y + 17, x + 68, x + 74, y + 18, x + 68, x + 74, y + 19, x + 69, x + 74, y + 20, x + 70, x + 74, y + 21, x + 71, x + 74, y + 22, x + 72, x + 73, y + 23);
        this.renderArea.addLinkCall(".theCaveGoRightButton", new CallbackCollection(this.move.bind(this, TheCaveMoveType.RIGHT)));

        // Add the button to go straight
        this.renderArea.addMultipleAsciiButtons("theCaveGoStraightButton", x + 46, x + 54, y + 1, x + 46, x + 54, y + 2, x + 46, x + 54, y + 3, x + 46, x + 54, y + 4, x + 46, x + 54, y + 5);
        this.renderArea.addLinkCall(".theCaveGoStraightButton", new CallbackCollection(this.move.bind(this, TheCaveMoveType.STRAIGHT)));
    };

    TheCave.prototype.goToTheCaveExit = function () {
        Saving.saveBool("mainMapDoneCaveEntrance", true);
        this.getGame().setPlace(new TheCaveExit(this.getGame()));
    };

    TheCave.prototype.move = function (type) {
        if (this.lastMoves.length > 12 && this.pattern == null) {
            this.goToTheCaveExit();
        }

        if (this.pattern != null)
            this.pattern.move(type);

        // Add this move to the last moves
        this.lastMoves.push(type);

        // Create the new way
        this.createWay(type);

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    TheCave.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "theCaveBackToTheMapButton");

        // Draw the ways
        this.drawWays();
    };
    return TheCave;
})(Place);
var TheComputerLine = (function () {
    // Constructor
    function TheComputerLine(type, text) {
        // Set the type
        this.type = type;

        // Set the lines of text depending on the text given in parameter
        this.setLinesFromText(text);
    }
    // Public methods
    TheComputerLine.prototype.draw = function (renderArea, pos, minY) {
        for (var i = this.linesOfText.length - 1; i >= 0; i--) {
            if (pos.y - (this.linesOfText.length - 1 - i) >= minY) {
                if (this.type != TheComputerLineType.CENTER) {
                    // We draw it
                    renderArea.drawString(this.linesOfText[i], pos.x, pos.y - (this.linesOfText.length - 1 - i));
                } else {
                    // We draw it centered
                    renderArea.drawString(this.linesOfText[i], pos.x + 16 - Math.floor(this.linesOfText[i].length / 2), pos.y - (this.linesOfText.length - 1 - i));
                }
            }
        }

        // We return the extra lines we took to draw
        return this.linesOfText.length - 1;
    };

    TheComputerLine.prototype.setLinesFromText = function (text) {
        // Set the first line, empty
        this.linesOfText = [""];

        switch (this.type) {
            case TheComputerLineType.COMMAND:
                text = " > " + text;
                break;
        }

        // Create the array of words
        var words = text.split(" ");

        for (var i = 0; i < words.length; i++) {
            if (words[i].length + this.linesOfText[this.linesOfText.length - 1].length < 32 || words[i].length > 30) {
                // We add the word
                this.linesOfText[this.linesOfText.length - 1] = this.linesOfText[this.linesOfText.length - 1] + words[i] + " ";
            } else {
                // We add a new line
                this.linesOfText.push(words[i] + " ");
            }
        }
    };

    // Public getters
    TheComputerLine.prototype.getType = function () {
        return this.type;
    };
    return TheComputerLine;
})();
var TheComputerLineType;
(function (TheComputerLineType) {
    TheComputerLineType[TheComputerLineType["TEXT"] = 0] = "TEXT";
    TheComputerLineType[TheComputerLineType["COMMAND"] = 1] = "COMMAND";
    TheComputerLineType[TheComputerLineType["CENTER"] = 2] = "CENTER";
})(TheComputerLineType || (TheComputerLineType = {}));
var TheComputerState;
(function (TheComputerState) {
    TheComputerState[TheComputerState["WAITING_FOR_RETURN"] = 0] = "WAITING_FOR_RETURN";
    TheComputerState[TheComputerState["WAITING_FOR_COMMAND"] = 1] = "WAITING_FOR_COMMAND";
})(TheComputerState || (TheComputerState = {}));
///<reference path="Place.ts"/>
var TheComputer = (function (_super) {
    __extends(TheComputer, _super);
    // Constructor
    function TheComputer(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The lines
        this.lines = [];
        // The current command text
        this.currentCommandText = "";
        // Did we already add hotkeys?
        this.hotkeysAdded = false;

        // Resize and update
        this.renderArea.resize(100, 40);
        this.update();
    }
    // getRenderArea()
    TheComputer.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // willStopBeingDisplayed()
    TheComputer.prototype.willStopBeingDisplayed = function () {
        this.getGame().setIsStatusBarAllowedToUseTheNKey(true);
    };

    // Private methods
    TheComputer.prototype.addHotkeys = function () {
        // Hotkeys are added now
        this.hotkeysAdded = true;

        // Add the enter hotkey
        this.getGame().addHotkey(new Hotkey("enter", new CallbackCollection(this.pressedEnter.bind(this))));

        for (var i = 97; i <= 122; i++) {
            this.getGame().addHotkey(new Hotkey(String.fromCharCode(i), new CallbackCollection(this.pressedKey.bind(this, String.fromCharCode(i)))));
        }

        for (var i = 48; i <= 57; i++) {
            this.getGame().addHotkey(new Hotkey(String.fromCharCode(i), new CallbackCollection(this.pressedKey.bind(this, String.fromCharCode(i)))));
            this.getGame().addHotkey(new Hotkey("numpad" + String.fromCharCode(i), new CallbackCollection(this.pressedKey.bind(this, String.fromCharCode(i)))));
        }

        // Add the hotkey for the space key
        this.getGame().addHotkey(new Hotkey("space", new CallbackCollection(this.pressedKey.bind(this, " "))));

        // Add the hotkey for the delete key
        this.getGame().addHotkey(new Hotkey("delete", new CallbackCollection(this.pressedDelete.bind(this))));
    };

    TheComputer.prototype.addLine = function (line) {
        this.lines.push(line);
    };

    TheComputer.prototype.addMisunderstood = function () {
        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "This command was misunderstood. Try \"help\" for a list of available commands."));
    };

    TheComputer.prototype.draw = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Draw the computer
        this.renderArea.drawArray(Database.getAscii("general/theComputer/computer"), 19, 0);

        // Draw the on button
        this.drawOnButton(69, 14);

        // Draw the lines
        this.drawLines(22, 16, 6);
    };

    TheComputer.prototype.drawOnButton = function (x, y) {
        // Draw the button
        this.renderArea.addMultipleAsciiButtons("theComputerOnButton", x + 1, x + 4, y, x, x + 5, y + 1, x + 1, x + 4, y + 2);

        // Add the link
        this.renderArea.addLinkCall(".theComputerOnButton", new CallbackCollection(this.switchOnOff.bind(this)));
    };

    TheComputer.prototype.drawLines = function (x, y, minY) {
        for (var i = this.lines.length - 1; i >= 0; i--) {
            // We add the return value to our y var because it returns the extra lines it used
            y -= this.lines[i].draw(this.renderArea, new Pos(x, y - (this.lines.length - 1 - i)), minY);
        }
    };

    TheComputer.prototype.executeCommand = function (commandText) {
        // Create an array from the command words
        var words = commandText.split(" ");

        if (commandText.length > 0 && words.length > 0) {
            switch (words[0]) {
                case "no":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Yes!"));
                    break;
                case "yes":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No!"));
                    break;
                case "aniwey":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "He made this game :)"));
                    break;
                case "cedric":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A nice guy who made the online saving system of the first Candy Box."));
                    break;
                case "17":
                case "dixsept":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A beta tester and ascii artist. Some people say that he has a big nose. Don't listen to them."));
                    break;
                case "soinou":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A beta tester. He also made the tab system of the first Candy Box."));
                    break;
                case "42":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The answer to the ultimate question of life, the universe, and everything."));
                    break;
                case "cp":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No, you can't copy anything, sorry."));
                    break;
                case "rm":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No, you can't remove anything, sorry."));
                    break;
                case "cd":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Where would you like to go anyway?"));
                    break;
                case "ls":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ". .."));
                    break;
                case "emacs":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The best text editor ever after vim."));
                    break;
                case "vim":
                case "vi":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The best text editor ever after emacs."));
                    break;
                case "nano":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Come on, do you seriously want to use this?"));
                    break;
                case "startx":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Fatal server error: Cannot establish any listening sockets - Make sure an X server isn't already running"));
                    break;
                case "mkdir":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Cannot create directory. No, you won't be given any precision."));
                    break;
                case "sudo":
                case "su":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "To gain root access, please use \"su -\". (hint : you can't type the \"-\")"));
                    break;
                case "lol":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Haha. That's funny."));
                    break;
                case "pwd":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "/home/player"));
                    break;
                case "mv":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "What would you like to move anyway?"));
                    break;
                case "man":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Nah. Use help instead."));
                    break;
                case "pacman":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The best package manager ever."));
                    break;
                case "whoami":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "player"));
                    break;
                case "tobias":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Tobias Nordqvist, an ascii artist. From sweden. Thanks to him!"));
                    break;
                case "deinol":
                case "dani":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Dani \"Deinol\" GГіmez, an ascii artist. Thanks to him!"));
                    break;
                case "godsturf":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "GodsTurf, an ascii artist. Thanks to him!"));
                    break;
                case "mlp":
                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "PONIES PONIES PONIES PONIES PONIES PONIES PONIES PONIES PONIES PONIES"));
                    break;

                case "help":
                    if (words.length > 1) {
                        if (words.length > 2) {
                            this.addMisunderstood();
                        } else {
                            switch (words[1]) {
                                case "help":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The help command displays informations about other system commands."));
                                    break;
                                case "add":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The add command allows you to add a given quantity of a given resource. Usage : \"add quantity resource\"."));
                                    break;
                                case "quantity":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "A quantity is expressed by a number, which is composed of multiple figures."));
                                    break;
                                case "resource":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "List of available resources : candies, lollipops, chocolatebars, painsauchocolat."));
                                    break;
                                case "bug":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug command allows you to configure the bugs generated by the computer. Usage : \"bug type level\"."));
                                    break;
                                case "type":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug type is the kind of bug you want to configure. Allowed types are \"graphical\", \"quest\" and \"ultimate\". Use \"help graphical\", \"help quest\" or \"help ultimate\" for more information."));
                                    break;
                                case "graphical":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Graphical bugs only affect how the game display informations. They won't be kept after reloading your game."));
                                    break;
                                case "quest":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Quest bugs affect the quests gameplay. Results are unexpected. They probably won't be kept after reloading your game."));
                                    break;
                                case "ultimate":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Ultimate bugs can affect a lot of things. They will probably be kept after reloading your game, and they basically could destroy your save. Your browser may even crash. Be careful with them."));
                                    break;
                                case "level":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug level describes how much the bugs will impact the game. Allowed values are 0, 1, 2, 3 and 4. 0 means no bug and 4 is the most powerful bug."));
                                    break;
                                case "command":
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "No, you're not supposed to type \"help command\", you should type \"help bug\" or \"help add\" for example."));
                                    break;

                                default:
                                    this.addMisunderstood();
                                    break;
                            }
                        }
                    } else {
                        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "List of available commands : add, bug, help. Use \"help command\" to get more informations about a specific command. There are probably no hidden commands. I guess."));
                    }
                    break;

                case "add":
                    if (words.length > 1) {
                        if (words.length > 2) {
                            if (words.length > 3) {
                                // Misunderstood
                                this.addMisunderstood();
                            } else {
                                if (isNaN(parseFloat(words[1])))
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The quantity must be a number. See \"help quantity\" for more informations."));
else if (words[2] != "candies" && words[2] != "lollipops" && words[2] != "chocolatebars" && words[2] != "painsauchocolat")
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The resource is invalid. See \"help resource\" for more informations."));
else {
                                    switch (words[2]) {
                                        case "candies":
                                            this.getGame().getCandies().add(parseFloat(words[1]));
                                            break;
                                        case "lollipops":
                                            this.getGame().getLollipops().add(parseFloat(words[1]));
                                            break;
                                        case "chocolatebars":
                                            this.getGame().getChocolateBars().add(parseFloat(words[1]));
                                            break;
                                        case "painsauchocolat":
                                            this.getGame().getPainsAuChocolat().add(parseFloat(words[1]));
                                            break;
                                    }

                                    // Write the result
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, words[1] + " " + words[2] + " added successfully."));
                                }
                            }
                        } else {
                            this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a resource. See \"help add\" for more informations."));
                        }
                    } else {
                        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a quantity. See \"help add\" for more informations."));
                    }
                    break;

                case "bug":
                    if (words.length > 1) {
                        if (words.length > 2) {
                            if (words.length > 3) {
                                // Misunderstood
                                this.addMisunderstood();
                            } else {
                                if (words[1] != "graphical" && words[1] != "quest" && words[1] != "ultimate")
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug type is incorrect. See \"help type\" for more informations."));
else if (words[2] != "0" && words[2] != "1" && words[2] != "2" && words[2] != "3" && words[2] != "4")
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "The bug level is invalid. See \"help level\" for more informations."));
else {
                                    switch (words[1]) {
                                        case "graphical":
                                            Bugs.setGraphicalBugLevel(parseInt(words[2]));
                                            break;
                                        case "quest":
                                            Bugs.setQuestBugLevel(parseInt(words[2]));
                                            break;
                                        case "ultimate":
                                            Bugs.setUltimateBugLevel(parseInt(words[2]));
                                            break;
                                    }

                                    // Write the result
                                    this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "Bug type " + words[1] + " set successfully at level " + words[2] + "."));
                                }
                            }
                        } else {
                            this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a bug level. See \"help level\" for more informations."));
                        }
                    } else {
                        this.addLine(new TheComputerLine(TheComputerLineType.TEXT, "You must give a bug type. See \"help type\" for more informations."));
                    }
                    break;

                default:
                    this.addMisunderstood();
                    break;
            }
        }
    };

    TheComputer.prototype.pressedDelete = function () {
        if (this.state == TheComputerState.WAITING_FOR_COMMAND) {
            if (this.currentCommandText.length > 0) {
                // We delete the last character
                this.currentCommandText = this.currentCommandText.slice(0, this.currentCommandText.length - 1);

                // We update
                this.update();
                this.getGame().updatePlace();
            }
        }
    };

    TheComputer.prototype.pressedEnter = function () {
        switch (this.state) {
            case TheComputerState.WAITING_FOR_RETURN:
                // We change our state
                this.state = TheComputerState.WAITING_FOR_COMMAND;

                // We add an empty text line
                this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ""));

                // We add an empty command line
                this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, ""));

                // We update
                this.update();
                this.getGame().updatePlace();
                break;

            case TheComputerState.WAITING_FOR_COMMAND:
                // We try to execute the command
                this.executeCommand(this.currentCommandText);

                // We empty the current command text
                this.currentCommandText = "";

                // We add an empty text line
                this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ""));

                // We add an empty command line
                this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, ""));

                // We update
                this.update();
                this.getGame().updatePlace();
                break;
        }
    };

    TheComputer.prototype.pressedKey = function (key) {
        if (this.state == TheComputerState.WAITING_FOR_COMMAND) {
            // Create an array of words from the current command text (for checking purposes)
            var words = this.currentCommandText.split(" ");

            if ((words.length == 0 || words[words.length - 1].length < 25 || key == " ") && this.currentCommandText.length < 100) {
                // We add the letter to the command
                this.currentCommandText = this.currentCommandText + key;

                // We update
                this.update();
                this.getGame().updatePlace();
            }
        }
    };

    TheComputer.prototype.switchOnOff = function () {
        if (this.on) {
            this.on = false;
            this.lines = [];
            this.getGame().setIsStatusBarAllowedToUseTheNKey(true);
        } else {
            this.on = true;

            // Add the first lines
            this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, "Booting GNU/Candies system version 4.2... OK"));
            this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, "Initializing the memory stack... OK"));
            this.addLine(new TheComputerLine(TheComputerLineType.COMMAND, "Checking every piece of the system is free software... OK"));
            this.addLine(new TheComputerLine(TheComputerLineType.TEXT, ""));
            this.addLine(new TheComputerLine(TheComputerLineType.CENTER, "Press return to continue"));

            // Set the current computer state
            this.state = TheComputerState.WAITING_FOR_RETURN;

            // The status bar isn't allowed to use the n key anymore
            this.getGame().setIsStatusBarAllowedToUseTheNKey(false);

            if (this.hotkeysAdded == false)
                this.addHotkeys();
        }

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    TheComputer.prototype.update = function () {
        if (this.lines.length > 12) {
            this.lines.splice(0, this.lines.length - 12);
        }

        if (this.lines.length > 0 && this.lines[this.lines.length - 1].getType() == TheComputerLineType.COMMAND) {
            this.lines[this.lines.length - 1].setLinesFromText(this.currentCommandText);
        }

        // Draw
        this.draw();
    };
    return TheComputer;
})(Place);
///<reference path="Quest.ts"/>
// To know if the player found the chests
Saving.registerBool("theHoleFirstChestFound", false);
Saving.registerBool("theHoleSecondChestFound", false);
Saving.registerBool("theHoleThirdChestFound", false);
Saving.registerBool("theHoleFourthChestFound", false);

var TheHole = (function (_super) {
    __extends(TheHole, _super);
    // Constructor
    function TheHole(game) {
        _super.call(this, game, "You can move with the left and right arrow keys!");
        // Variables which store the open states of the chests for the current quest
        this.firstChestOpened = false;
        this.secondChestOpened = false;
        this.thirdChestOpened = false;
        this.fourthChestOpened = false;
        // A bool to know if the player is going left or right (useful to choose the fireball spell direction)
        // By default we're going right because in most quests the fireball is launched to the right, so it just seems more logical
        // But anyway as soon as the player will press the left key this can change
        this.isGoingRight = true;

        // Resize the quest
        this.resizeQuest(100, 35, new Pos(100, 136));

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(48, 0));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the walls
        this.createWalls();

        // Add the spikes
        this.addSpikes(new Spikes(this, new Pos(44, 42), 20));
        this.addSpikes(new Spikes(this, new Pos(23, 59), 22));
        this.addSpikes(new Spikes(this, new Pos(90, 62), 8));
        this.addSpikes(new Spikes(this, new Pos(87, 69), 4));
        this.addSpikes(new Spikes(this, new Pos(94, 69), 4));
        this.addSpikes(new Spikes(this, new Pos(93, 74), 2));
        this.addSpikes(new Spikes(this, new Pos(66, 74), 14));
        this.addSpikes(new Spikes(this, new Pos(66, 82), 4));
        this.addSpikes(new Spikes(this, new Pos(76, 83), 6));
        this.addSpikes(new Spikes(this, new Pos(3, 95), 8));
        this.addSpikes(new Spikes(this, new Pos(13, 97), 10));
        this.addSpikes(new Spikes(this, new Pos(24, 96), 2));
        this.addSpikes(new Spikes(this, new Pos(29, 96), 2));
        this.addSpikes(new Spikes(this, new Pos(33, 95), 12));
        this.addSpikes(new Spikes(this, new Pos(64, 64), 4));

        // Add the chests
        this.addChest(new Chest(this, new Pos(27, 67), true, new CallbackCollection(this.openFirstChest.bind(this)), Saving.loadBool("theHoleFirstChestFound")));
        this.addChest(new Chest(this, new Pos(59, 74), true, new CallbackCollection(this.openSecondChest.bind(this)), Saving.loadBool("theHoleSecondChestFound")));
        this.addChest(new Chest(this, new Pos(37, 107), false, new CallbackCollection(this.openThirdChest.bind(this)), Saving.loadBool("theHoleThirdChestFound")));
        this.addChest(new Chest(this, new Pos(4, 129), true, new CallbackCollection(this.openFourthChest.bind(this)), Saving.loadBool("theHoleFourthChestFound")));

        // Add the lost tribe warrior alone in its room
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(68, 89), new Pos(63, 85), new Pos(93, 95)));

        // Add the lost tribe warriors in the big room
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(14, 126), new Pos(2, 112), new Pos(79, 129)));
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(21, 126), new Pos(2, 112), new Pos(79, 129)));
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(31, 125), new Pos(2, 112), new Pos(79, 129)));
        this.addLostTribeWarrior(new LostTribeWarrior(this, new Pos(51, 123), new Pos(2, 112), new Pos(79, 129)));

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You jumped into the big hole! You're falling quickly, try to stay alive!"));
    }
    // willBeDisplayed()
    TheHole.prototype.willBeDisplayed = function () {
        // We call the mother willBeDisplayed()
        _super.prototype.willBeDisplayed.call(this);

        // Register hotkeys so that they can't be used by the player's browser
        this.getGame().addHotkey(new Hotkey("left", null));
        this.getGame().addHotkey(new Hotkey("right", null));
    };

    // Public methods
    TheHole.prototype.castPlayerFireball = function () {
        if (this.isGoingRight)
            _super.prototype.castPlayerFireball.call(this, new Pos(2, 0));
else
            _super.prototype.castPlayerFireball.call(this, new Pos(-2, 0));
    };

    TheHole.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(48, 0), new Pos(1, 1));
    };

    TheHole.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement());
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    TheHole.prototype.endQuest = function (win) {
        if (win) {
            // We add the message
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to reach the bottom of the hole!"));
        } else {
            // We add the message
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died while falling in the hole. No one will probably ever find your body down there."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);

        if (win) {
            if (this.firstChestOpened)
                Saving.saveBool("theHoleFirstChestFound", true);
            if (this.secondChestOpened)
                Saving.saveBool("theHoleSecondChestFound", true);
            if (this.thirdChestOpened)
                Saving.saveBool("theHoleThirdChestFound", true);
            if (this.fourthChestOpened)
                Saving.saveBool("theHoleFourthChestFound", true);
        }
    };

    TheHole.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            // Move the player horizontally
            this.moveHorizontally();

            // Update entities
            this.updateEntities();

            // Calculate the new global drawing offset
            this.calcNewGlobalDrawingOffset();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getPartOfAscii("places/quests/theHole/background", -this.getGlobalDrawingOffset().y, -this.getGlobalDrawingOffset().y + 35), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    TheHole.prototype.addChest = function (chest) {
        this.addEntity(chest);
    };

    TheHole.prototype.addLostTribeWarrior = function (lostTribeWarrior) {
        lostTribeWarrior.setHealthBar(new QuestEntityHealthBar(lostTribeWarrior, new Pos(4, 1)));
        this.addEntity(lostTribeWarrior);
    };

    TheHole.prototype.addSpikes = function (spikes) {
        this.addEntity(spikes);
    };

    TheHole.prototype.addWalls = function () {
        var positions = [];
        for (var _i = 0; _i < (arguments.length - 0); _i++) {
            positions[_i] = arguments[_i + 0];
        }
        // Create the wall entity
        this.addEntity(new Wall(this, new Pos(0, 0)));
        var wall = (this.getLastEntity());

        for (var i = 0; i < positions.length / 4; i++) {
            wall.addBox(new Pos(positions[i * 4], positions[i * 4 + 1]), new Pos(positions[i * 4 + 2] - positions[i * 4] + 1, positions[i * 4 + 3] - positions[i * 4 + 1] + 1));
        }
    };

    TheHole.prototype.calcNewGlobalDrawingOffset = function () {
        if (this.getGame().getPlayer().getGlobalPosition().y + this.getGlobalDrawingOffset().y > 10)
            this.setGlobalDrawingOffset(new Pos(0, -this.getGame().getPlayer().getGlobalPosition().y + 10));
else if (this.getGame().getPlayer().getGlobalPosition().y + this.getGlobalDrawingOffset().y < 5) {
            if (this.getGame().getPlayer().getGlobalPosition().y > 5)
                this.setGlobalDrawingOffset(new Pos(0, -this.getGame().getPlayer().getGlobalPosition().y + 5));
else
                this.setGlobalDrawingOffset(new Pos(0, 0));
        }
    };

    TheHole.prototype.createWalls = function () {
        // Yes, I know that the code below is quite ugly
        // But I had two choices : either write the bounding boxes manually (this is what I chose)
        // Or write a specific level editor to do the work for me (it could work with something like the height maps in 3d games - there would be a second "ascii art" composed of 0 and 1 for example, 0 would mean no collision and 1 would mean collision)
        // But this is the only level which requires such complicated bounding boxes, so really, writing a level editor for one level isn't worth it
        this.addWalls(0, 0, 40, 22, 0, 23, 39, 23, 0, 24, 38, 24, 0, 25, 37, 25, 0, 26, 36, 26, 0, 27, 33, 27, 0, 28, 32, 28, 0, 29, 31, 29, 0, 30, 30, 30, 0, 31, 29, 31, 0, 32, 28, 32, 0, 33, 27, 33, 0, 34, 26, 34, 0, 35, 25, 35, 0, 36, 24, 36, 0, 37, 23, 37, 0, 38, 22, 59, 0, 60, 44, 60, 0, 61, 43, 61, 0, 62, 27, 62, 34, 62, 38, 62, 0, 63, 26, 63, 0, 64, 25, 66, 0, 67, 26, 67, 0, 68, 33, 68, 0, 69, 32, 69, 0, 70, 31, 70, 0, 71, 27, 71, 0, 72, 26, 72, 0, 73, 25, 73, 0, 74, 24, 74, 0, 75, 16, 75, 0, 76, 15, 76, 0, 77, 4, 77, 0, 78, 3, 80, 0, 81, 2, 81, 0, 82, 1, 95, 36, 73, 39, 73, 35, 74, 40, 74, 34, 75, 41, 75, 33, 76, 49, 76, 32, 77, 49, 77, 32, 78, 49, 78, 33, 79, 49, 79, 34, 80, 49, 80, 35, 81, 49, 81, 36, 82, 49, 82, 37, 83, 49, 85, 37, 86, 49, 86, 38, 87, 50, 87, 39, 88, 51, 88, 45, 89, 52, 89, 46, 90, 54, 90, 47, 91, 54, 94, 46, 95, 54, 95, 0, 96, 11, 96, 32, 96, 54, 96, 0, 97, 12, 97, 23, 97, 26, 97, 28, 97, 54, 97, 0, 98, 26, 101, 28, 98, 54, 101, 0, 102, 26, 102, 28, 102, 57, 102, 0, 103, 23, 103, 35, 103, 65, 103, 0, 104, 20, 104, 36, 104, 69, 104, 0, 105, 19, 105, 41, 105, 74, 105, 0, 106, 18, 106, 41, 106, 87, 106, 0, 107, 17, 109, 40, 107, 87, 107, 29, 108, 87, 108, 28, 109, 87, 109, 0, 110, 18, 110, 27, 110, 68, 110, 0, 111, 57, 111, 0, 112, 39, 112, 0, 113, 30, 113, 0, 114, 8, 114, 0, 115, 7, 115, 0, 116, 6, 116, 0, 117, 5, 119, 0, 120, 4, 120, 0, 121, 3, 121, 0, 122, 2, 128, 0, 129, 3, 129, 79, 112, 87, 112, 78, 113, 87, 113, 77, 114, 87, 114, 76, 115, 87, 115, 75, 116, 87, 116, 74, 117, 87, 117, 73, 118, 87, 118, 71, 119, 87, 119, 70, 120, 87, 120, 69, 121, 87, 121, 68, 122, 87, 122, 66, 123, 87, 123, 64, 124, 87, 124, 61, 125, 87, 125, 56, 126, 87, 126, 50, 127, 86, 127, 41, 128, 85, 128, 27, 129, 84, 129, 0, 130, 79, 130, 0, 131, 72, 131, 0, 132, 71, 132, 0, 133, 70, 134, 0, 135, 100, 135, 59, 0, 100, 24, 60, 25, 100, 25, 61, 26, 100, 26, 62, 27, 100, 27, 63, 28, 100, 28, 64, 29, 100, 42, 44, 43, 100, 43, 45, 44, 100, 44, 46, 45, 100, 45, 50, 46, 100, 46, 57, 47, 100, 47, 69, 48, 100, 48, 70, 49, 100, 49, 75, 50, 100, 50, 84, 51, 100, 51, 85, 52, 100, 52, 92, 53, 100, 53, 93, 54, 100, 54, 83, 55, 89, 55, 94, 55, 100, 55, 82, 56, 88, 56, 94, 56, 100, 56, 81, 57, 87, 57, 94, 57, 100, 57, 77, 58, 86, 58, 95, 58, 100, 58, 76, 59, 86, 59, 96, 59, 100, 59, 75, 60, 86, 60, 97, 60, 100, 60, 71, 61, 86, 61, 98, 61, 100, 69, 90, 63, 98, 63, 70, 62, 86, 62, 69, 63, 86, 63, 59, 64, 63, 64, 68, 64, 86, 64, 58, 65, 86, 65, 53, 66, 86, 66, 52, 67, 86, 67, 51, 68, 86, 68, 46, 69, 86, 69, 45, 70, 90, 70, 94, 70, 100, 70, 45, 71, 60, 71, 82, 71, 89, 71, 95, 71, 100, 74, 51, 72, 58, 72, 52, 73, 57, 73, 53, 74, 58, 74, 54, 75, 100, 75, 55, 76, 100, 77, 55, 78, 62, 78, 75, 78, 100, 78, 55, 79, 59, 79, 87, 79, 100, 79, 88, 80, 100, 80, 89, 81, 100, 81, 90, 82, 100, 82, 53, 83, 75, 83, 91, 83, 100, 83, 54, 84, 87, 84, 92, 84, 100, 84, 55, 85, 87, 85, 93, 85, 100, 95, 59, 86, 86, 86, 60, 87, 78, 87, 60, 88, 66, 88, 59, 89, 64, 89, 58, 90, 63, 91, 58, 92, 64, 92, 58, 93, 73, 93, 58, 94, 78, 94, 58, 95, 83, 95, 58, 96, 100, 97, 59, 98, 100, 98, 60, 99, 100, 99, 71, 100, 100, 100, 82, 101, 100, 101, 92, 102, 100, 103, 91, 104, 100, 129, 90, 130, 100, 130, 89, 131, 100, 131, 88, 132, 100, 132, 85, 133, 100, 133, 78, 134, 100, 134);
    };

    TheHole.prototype.openFirstChest = function () {
        this.firstChestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedHeartPendant", "You opened a chest and found a heart pendant!", "You gain a heart pendant."));
    };

    TheHole.prototype.openFourthChest = function () {
        this.fourthChestOpened = true;
        this.foundChocolateBars(4);
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You opened a chest and found four chocolate bars!", null, true));
    };

    TheHole.prototype.openSecondChest = function () {
        this.secondChestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedFortressKey", "You opened a chest and found the desert fortress key!", "You gain the desert fortress key."));
    };

    TheHole.prototype.openThirdChest = function () {
        this.thirdChestOpened = true;
        this.foundGridOrEqItem(new QuestItemFound(this, "gridItemPossessedBlackMagicGrimoire", "You opened a chest and found a grimoire!", "You gain a black magic grimoire."));
    };

    TheHole.prototype.moveHorizontally = function () {
        var leftPressed = Keyboard.isKeyPressed("left");
        var rightPressed = Keyboard.isKeyPressed("right");

        if (leftPressed && !rightPressed) {
            this.getGame().getPlayer().move(new Pos(-1, 0));
            this.isGoingRight = false;
        } else if (rightPressed && !leftPressed) {
            this.getGame().getPlayer().move(new Pos(1, 0));
            this.isGoingRight = true;
        }
    };

    TheHole.prototype.thePlayerWon = function () {
        if (this.getGame().getPlayer().getGlobalPosition().y >= 134)
            return true;

        return false;
    };
    return TheHole;
})(Quest);
var TheSeaFloor = (function () {
    // Constructor
    function TheSeaFloor(type, height, previousFloor) {
        if (typeof previousFloor === "undefined") { previousFloor = null; }
        // Does this floor have a plant on it ?
        this.hasAPlant = false;
        this.type = type;
        this.height = height;

        if (previousFloor == null || previousFloor.getType() != this.type) {
            // There's no floor of the same type before
            this.howManyFloorsOfTheSameTypeBefore = 0;
        } else {
            // We take the howManyFloorsOfTheSameTypeBefore of the previous floor and we add one
            this.howManyFloorsOfTheSameTypeBefore = previousFloor.howManyFloorsOfTheSameTypeBefore + 1;
        }

        if (Random.oneChanceOutOf(3) && (previousFloor == null || previousFloor.getHasSpecialCharacter() == false)) {
            // We will have a special character
            this.hasSpecialCharacter = true;

            // Set the height
            this.specialCharacterHeight = Random.between(0, this.height - 1);

            if (Random.oneChanceOutOf(4)) {
                this.specialCharacter = "^";
            } else {
                this.specialCharacter = "-";
            }
        } else {
            // We won't have a special character
            this.hasSpecialCharacter = false;
        }
    }
    // Public methods
    TheSeaFloor.prototype.draw = function (renderArea, floorPosition, xPosition) {
        switch (this.type) {
            case TheSeaFloorType.NORMAL:
                renderArea.drawString("_", xPosition, floorPosition - this.height);
                break;
            case TheSeaFloorType.GOING_DOWN:
                renderArea.drawString("\\", xPosition, floorPosition - this.height);
                break;
            case TheSeaFloorType.GOING_UP:
                renderArea.drawString("/", xPosition, floorPosition - this.height);
                break;
        }

        if (this.hasSpecialCharacter) {
            // We draw it
            renderArea.drawString(this.specialCharacter, xPosition, floorPosition - this.specialCharacterHeight);
        }
    };

    // Pubic getters
    TheSeaFloor.prototype.getHasAPlant = function () {
        return this.hasAPlant;
    };

    TheSeaFloor.prototype.getHasSpecialCharacter = function () {
        return this.hasSpecialCharacter;
    };

    TheSeaFloor.prototype.getHeight = function () {
        return this.height;
    };

    TheSeaFloor.prototype.getHowManyFloorsOfTheSameTypeBefore = function () {
        return this.howManyFloorsOfTheSameTypeBefore;
    };

    TheSeaFloor.prototype.getType = function () {
        return this.type;
    };

    // Public setters
    TheSeaFloor.prototype.setHasAPlant = function (hasAPlant) {
        this.hasAPlant = hasAPlant;
    };
    return TheSeaFloor;
})();
var TheSeaFloorType;
(function (TheSeaFloorType) {
    TheSeaFloorType[TheSeaFloorType["NORMAL"] = 0] = "NORMAL";
    TheSeaFloorType[TheSeaFloorType["GOING_DOWN"] = 1] = "GOING_DOWN";
    TheSeaFloorType[TheSeaFloorType["GOING_UP"] = 2] = "GOING_UP";
})(TheSeaFloorType || (TheSeaFloorType = {}));
var TheSeaPattern = (function () {
    // Constructor
    function TheSeaPattern(theSea, initialDistance) {
        this.theSea = theSea;
        this.initialDistance = initialDistance;
    }
    // Public methods
    TheSeaPattern.prototype.isPatternDone = function () {
        return false;
    };

    TheSeaPattern.prototype.run = function (x1, x2) {
    };

    // Public getters
    TheSeaPattern.prototype.getInitialDistance = function () {
        return this.initialDistance;
    };

    TheSeaPattern.prototype.getTheSea = function () {
        return this.theSea;
    };
    return TheSeaPattern;
})();
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_BigSharks = (function (_super) {
    __extends(TheSeaPattern_BigSharks, _super);
    // Constructor
    function TheSeaPattern_BigSharks(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_BigSharks.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 125)
            return true;

        return false;
    };

    TheSeaPattern_BigSharks.prototype.run = function (x1, x2) {
        if (this.getTheSea().getDistance() % 60 == 0)
            this.getTheSea().addBigShark(new Pos(x2, Random.fromArray([2, 6])));
    };
    return TheSeaPattern_BigSharks;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_Boss0_Shapes = (function (_super) {
    __extends(TheSeaPattern_Boss0_Shapes, _super);
    // Constructor
    function TheSeaPattern_Boss0_Shapes(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Fishes of the squares
        this.fishes = [];
        // Did we add the fishes already ?
        this.fishesAdded = false;
        // Are fishes moving right now ?
        this.fishesAreMoving = true;

        // Set the shape type
        this.shapeType = Random.upTo(2);
    }
    // Public methods
    TheSeaPattern_Boss0_Shapes.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 50)
            return true;
        return false;
    };

    TheSeaPattern_Boss0_Shapes.prototype.run = function (x1, x2) {
        if (this.fishesAdded == false && this.getTheSea().getDistance() > this.getInitialDistance() + 30) {
            this.fishesAdded = true;
            this.addShape(x1, 1);
            this.addShape(x1, 8);
            this.addShape(x1, 15);
            this.addShape(x1 + 15, 0);
            this.addShape(x1 + 15, 7);
            this.addShape(x1 + 15, 14);
            this.addShape(x1 + 30, 1);
            this.addShape(x1 + 30, 8);
            this.addShape(x1 + 30, 15);
        }

        // Handle fishes movement (to make them stop if the player stop moving)
        this.handleFishesMovement();
    };

    // Private methods
    TheSeaPattern_Boss0_Shapes.prototype.addFish = function (smallestFish) {
        if (smallestFish != null)
            this.fishes.push(smallestFish);
    };

    TheSeaPattern_Boss0_Shapes.prototype.addCross = function (x, y) {
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x, y + 1)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 3, y + 2)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 6, y + 3)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 9, y + 4)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x, y + 4)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 3, y + 3)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 6, y + 2)));
        this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 9, y + 1)));
    };

    TheSeaPattern_Boss0_Shapes.prototype.addLines = function (x, y) {
        for (var i = x; i <= x + 9; i += 3) {
            for (var j = y; j <= y + 4; j += 2) {
                this.addFish(this.getTheSea().addSmallestFish(new Pos(i, j)));
            }
        }
    };

    TheSeaPattern_Boss0_Shapes.prototype.addShape = function (x, y) {
        switch (this.shapeType) {
            case 0:
                this.addSquare(x, y);
                break;
            case 1:
                this.addLines(x, y);
                break;
            case 2:
                this.addCross(x, y);
                break;
        }
    };

    TheSeaPattern_Boss0_Shapes.prototype.addSquare = function (x, y) {
        for (var i = x; i <= x + 9; i += 3) {
            // Top of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(i, y)));

            // Bottom of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(i, y + 5)));
        }

        for (var j = y; j <= y + 4; j++) {
            // Left of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(x, j)));

            // Right of the square
            this.addFish(this.getTheSea().addSmallestFish(new Pos(x + 9, j)));
        }
    };

    TheSeaPattern_Boss0_Shapes.prototype.handleFishesMovement = function () {
        if (this.fishesAreMoving == true && this.getTheSea().getLastPlayerMovement().x == 0 && this.getTheSea().getGame().getPlayer().getGlobalPosition().y >= 20) {
            // Fishes are not moving any more
            this.fishesAreMoving = false;
            for (var i = 0; i < this.fishes.length; i++) {
                this.fishes[i].setQuestEntityMovement(new QuestEntityMovement(new Pos(0, 0)));
            }
        } else if (this.fishesAreMoving == false && (this.getTheSea().getLastPlayerMovement().x > 0 || this.getTheSea().getGame().getPlayer().getGlobalPosition().y < 20)) {
            // Fishes are now moving
            this.fishesAreMoving = true;
            for (var i = 0; i < this.fishes.length; i++) {
                this.fishes[i].setQuestEntityMovement(new QuestEntityMovement(new Pos(-1, 0)));
            }
        }
    };
    return TheSeaPattern_Boss0_Shapes;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_Boss1_Seahorses = (function (_super) {
    __extends(TheSeaPattern_Boss1_Seahorses, _super);
    // Constructor
    function TheSeaPattern_Boss1_Seahorses(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Variables
        this.seahorses = [];
        this.seahorsesAdded = false;
        this.seaHorsesStopped = false;
        // The special seahorse wandering
        this.seahorseWandering = null;
        this.seahorseWanderingIsGoingUp = false;
        // The special seahorse following player
        this.seahorseFollowingPlayer = null;
    }
    // Public methods
    TheSeaPattern_Boss1_Seahorses.prototype.addSeahorse = function (seahorse) {
        if (seahorse != null) {
            this.seahorses.push(seahorse);
            return seahorse;
        }
        return null;
    };

    TheSeaPattern_Boss1_Seahorses.prototype.isPatternDone = function () {
        if (this.seahorsesAdded == false)
            return false;

        for (var i = 0; i < this.seahorses.length; i++) {
            if (this.seahorses[i].getDead() == false)
                return false;
        }

        return true;
    };

    TheSeaPattern_Boss1_Seahorses.prototype.run = function (x1, x2) {
        if (this.seahorsesAdded == false && this.getTheSea().getDistance() > this.getInitialDistance() + 30) {
            this.seahorsesAdded = true;

            // First column
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1, 2), 75));
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1, 12), 75));

            // Second column
            this.seahorseWandering = this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 7, 10), 81));

            // Third Column
            this.seahorseFollowingPlayer = this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 14, 10), 87));

            // Fourth column
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 21, 7), 93));
            this.addSeahorse(this.getTheSea().addSeahorse(new Pos(x1 + 21, 17), 93));
        }

        if (this.seahorsesAdded == true && this.seaHorsesStopped == false) {
            // Find the seahorse which is the most on the left and store its x position
            var mostLeftX = 500;
            for (var i = 0; i < this.seahorses.length; i++) {
                if (this.seahorses[i].getGlobalPosition().x < mostLeftX)
                    mostLeftX = this.seahorses[i].getGlobalPosition().x;
            }

            if (mostLeftX - this.getTheSea().getGame().getPlayer().getGlobalPosition().x <= 75) {
                // We stop the seahorses
                this.seaHorsesStopped = true;
                for (var i = 0; i < this.seahorses.length; i++) {
                    this.seahorses[i].getQuestEntityMovement().setOffset(new Pos(0, 0));
                }
            }
        }

        if (this.seaHorsesStopped) {
            for (var i = 0; i < this.seahorses.length; i++) {
                this.seahorses[i].tryToGoToIntendedXPosition(this.getTheSea().getGame().getPlayer().getGlobalPosition().x);
            }
        }

        if (this.seahorseWandering != null) {
            if (this.seahorseWanderingIsGoingUp) {
                this.seahorseWandering.getQuestEntityMovement().getOffset().y = -1;
                if (this.seahorseWandering.getGlobalPosition().y <= 0)
                    this.seahorseWanderingIsGoingUp = false;
            } else {
                this.seahorseWandering.getQuestEntityMovement().getOffset().y = 1;
                if (this.seahorseWandering.getGlobalPosition().y >= 16)
                    this.seahorseWanderingIsGoingUp = true;
            }
        }

        if (this.seahorseFollowingPlayer != null) {
            // By default we don't move
            this.seahorseFollowingPlayer.getQuestEntityMovement().getOffset().y = 0;

            if (this.getTheSea().getGame().getPlayer().getGlobalPosition().y < this.seahorseFollowingPlayer.getGlobalPosition().y - 1) {
                if (this.seahorseFollowingPlayer.getGlobalPosition().y > 0)
                    // We go up
                    this.seahorseFollowingPlayer.getQuestEntityMovement().getOffset().y = -1;
            } else if (this.getTheSea().getGame().getPlayer().getGlobalPosition().y > this.seahorseFollowingPlayer.getGlobalPosition().y - 1) {
                if (this.seahorseFollowingPlayer.getGlobalPosition().y < 17)
                    // We go down
                    this.seahorseFollowingPlayer.getQuestEntityMovement().getOffset().y = +1;
            }
        }
    };
    return TheSeaPattern_Boss1_Seahorses;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_JellyFishStorm = (function (_super) {
    __extends(TheSeaPattern_JellyFishStorm, _super);
    // Constructor
    function TheSeaPattern_JellyFishStorm(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_JellyFishStorm.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };

    TheSeaPattern_JellyFishStorm.prototype.run = function (x1, x2) {
        if (Random.oneChanceOutOf(10))
            this.getTheSea().addJellyFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 6)));
    };
    return TheSeaPattern_JellyFishStorm;
})(TheSeaPattern);
var TheSeaPatternLevel = (function () {
    // Constructor
    function TheSeaPatternLevel(theSea) {
        // How many patterns launched already ?
        this.howManyPatterns = 0;
        this.theSea = theSea;
    }
    // Public methods
    TheSeaPatternLevel.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel(this.theSea);
    };

    TheSeaPatternLevel.prototype.getPattern = function (initialDistance) {
        return new TheSeaPattern(this.theSea, initialDistance);
    };

    TheSeaPatternLevel.prototype.increaseHowManyPatterns = function () {
        this.howManyPatterns += 1;
    };

    TheSeaPatternLevel.prototype.isLevelDone = function () {
        return false;
    };

    // Public getters
    TheSeaPatternLevel.prototype.getHowManyPatterns = function () {
        return this.howManyPatterns;
    };

    TheSeaPatternLevel.prototype.getTheSea = function () {
        return this.theSea;
    };
    return TheSeaPatternLevel;
})();
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Boss0 = (function (_super) {
    __extends(TheSeaPatternLevel_Boss0, _super);
    // Constructor
    function TheSeaPatternLevel_Boss0(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Boss0.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Level1(this.getTheSea());
    };

    TheSeaPatternLevel_Boss0.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();

        return new TheSeaPattern_Boss0_Shapes(this.getTheSea(), initialDistance);
    };

    TheSeaPatternLevel_Boss0.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 1)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Boss0;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Boss1 = (function (_super) {
    __extends(TheSeaPatternLevel_Boss1, _super);
    // Constructor
    function TheSeaPatternLevel_Boss1(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Boss1.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Level2(this.getTheSea());
    };

    TheSeaPatternLevel_Boss1.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();

        return new TheSeaPattern_Boss1_Seahorses(this.getTheSea(), initialDistance);
    };

    TheSeaPatternLevel_Boss1.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 1)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Boss1;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Level0 = (function (_super) {
    __extends(TheSeaPatternLevel_Level0, _super);
    // Constructor
    function TheSeaPatternLevel_Level0(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Level0.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Boss0(this.getTheSea());
    };

    TheSeaPatternLevel_Level0.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();

        switch (Random.upTo(2)) {
            case 0:
                return new TheSeaPattern_MaybeOneSmallestFish(this.getTheSea(), initialDistance);
                break;
            case 1:
                return new TheSeaPattern_OneSmallestFish(this.getTheSea(), initialDistance);
                break;
            case 2:
                return new TheSeaPattern_MaybeOneMediumFish(this.getTheSea(), initialDistance);
                break;
        }
    };

    TheSeaPatternLevel_Level0.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 2)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Level0;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Level1 = (function (_super) {
    __extends(TheSeaPatternLevel_Level1, _super);
    // Constructor
    function TheSeaPatternLevel_Level1(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Level1.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Boss1(this.getTheSea());
    };

    TheSeaPatternLevel_Level1.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();

        switch (Random.upTo(1)) {
            case 0:
                return new TheSeaPattern_LotOfMiniSharks(this.getTheSea(), initialDistance);
                break;
            case 1:
                return new TheSeaPattern_JellyFishStorm(this.getTheSea(), initialDistance);
                break;
        }
    };

    TheSeaPatternLevel_Level1.prototype.isLevelDone = function () {
        if (this.getHowManyPatterns() >= 2)
            return true;
        return false;
    };
    return TheSeaPatternLevel_Level1;
})(TheSeaPatternLevel);
///<reference path="TheSeaPatternLevel.ts"/>
var TheSeaPatternLevel_Level2 = (function (_super) {
    __extends(TheSeaPatternLevel_Level2, _super);
    // Constructor
    function TheSeaPatternLevel_Level2(theSea) {
        _super.call(this, theSea);
    }
    // Public methods
    TheSeaPatternLevel_Level2.prototype.getNextLevel = function () {
        return new TheSeaPatternLevel_Level2(this.getTheSea());
    };

    TheSeaPatternLevel_Level2.prototype.getPattern = function (initialDistance) {
        this.increaseHowManyPatterns();

        if (this.getHowManyPatterns() == 1)
            return new TheSeaPattern_BigSharks(this.getTheSea(), initialDistance);
else
            return new TheSeaPattern_SeaSnakesForever(this.getTheSea(), initialDistance);
    };

    TheSeaPatternLevel_Level2.prototype.isLevelDone = function () {
        return false;
    };
    return TheSeaPatternLevel_Level2;
})(TheSeaPatternLevel);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_LotOfMiniSharks = (function (_super) {
    __extends(TheSeaPattern_LotOfMiniSharks, _super);
    // Constructor
    function TheSeaPattern_LotOfMiniSharks(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Variables
        this.sharksAdded = false;
    }
    // Public methods
    TheSeaPattern_LotOfMiniSharks.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 60)
            return true;
        return false;
    };

    TheSeaPattern_LotOfMiniSharks.prototype.run = function (x1, x2) {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 30 && this.sharksAdded == false) {
            this.sharksAdded = true;
            this.getTheSea().addMiniShark(new Pos(x1 + Random.upTo(6), 2));
            this.getTheSea().addMiniShark(new Pos(x1 + Random.upTo(6), 8));
            this.getTheSea().addMiniShark(new Pos(x1 + Random.upTo(6), 14));
        }
    };
    return TheSeaPattern_LotOfMiniSharks;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_MaybeOneMediumFish = (function (_super) {
    __extends(TheSeaPattern_MaybeOneMediumFish, _super);
    // Constructor
    function TheSeaPattern_MaybeOneMediumFish(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_MaybeOneMediumFish.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };

    TheSeaPattern_MaybeOneMediumFish.prototype.run = function (x1, x2) {
        if (Random.oneChanceOutOf(5)) {
            this.getTheSea().addMediumFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 4)));
        }
    };
    return TheSeaPattern_MaybeOneMediumFish;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_MaybeOneSmallestFish = (function (_super) {
    __extends(TheSeaPattern_MaybeOneSmallestFish, _super);
    // Constructor
    function TheSeaPattern_MaybeOneSmallestFish(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_MaybeOneSmallestFish.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };

    TheSeaPattern_MaybeOneSmallestFish.prototype.run = function (x1, x2) {
        if (Random.flipACoin()) {
            this.getTheSea().addSmallestFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 2)));
        }
    };
    return TheSeaPattern_MaybeOneSmallestFish;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_OneSmallestFish = (function (_super) {
    __extends(TheSeaPattern_OneSmallestFish, _super);
    // Constructor
    function TheSeaPattern_OneSmallestFish(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
    }
    // Public methods
    TheSeaPattern_OneSmallestFish.prototype.isPatternDone = function () {
        if (this.getTheSea().getDistance() > this.getInitialDistance() + 100)
            return true;
        return false;
    };

    TheSeaPattern_OneSmallestFish.prototype.run = function (x1, x2) {
        this.getTheSea().addSmallestFish(new Pos(Random.between(x1, x2), Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 2)));
    };
    return TheSeaPattern_OneSmallestFish;
})(TheSeaPattern);
///<reference path="TheSeaPattern.ts"/>
var TheSeaPattern_SeaSnakesForever = (function (_super) {
    __extends(TheSeaPattern_SeaSnakesForever, _super);
    // Constructor
    function TheSeaPattern_SeaSnakesForever(theSea, initialDistance) {
        _super.call(this, theSea, initialDistance);
        // Variables
        this.addedRedSharkFin = false;
        this.addedGreenSharkFin = false;
        this.addedPurpleSharkFin = false;

        this.nextSnakeIn = 0;
        this.nextSharkIn = Random.between(0, 50);
    }
    // Public methods
    TheSeaPattern_SeaSnakesForever.prototype.isPatternDone = function () {
        return false;
    };

    TheSeaPattern_SeaSnakesForever.prototype.run = function (x1, x2) {
        // Possibly add a snake
        this.nextSnakeIn -= 1;
        if (this.nextSnakeIn <= 0) {
            this.getTheSea().addSeaSnake(new Pos(x2, Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 12)));
            this.nextSnakeIn = 85 - Math.ceil((1 - Math.exp(-(this.getTheSea().getDistance() - this.getInitialDistance()) / 1500)) * 83);
        }

        // Possibly add a shark
        this.nextSharkIn -= 1;
        if (this.nextSharkIn <= 0) {
            // Store the shark
            var shark = this.getTheSea().addBigShark(new Pos(x2, Random.between(0, this.getTheSea().getRealQuestSize().y - this.getTheSea().getFloorMaxHeight() - 10)));

            if (shark != null) {
                if (Saving.loadBool("gridItemPossessedRedSharkFin") == false && this.addedRedSharkFin == false && this.getTheSea().getDistance() - this.getInitialDistance() > 150) {
                    shark.hasFin(BigSharkFinType.RED);
                    this.addedRedSharkFin = true;
                } else if (Saving.loadBool("gridItemPossessedGreenSharkFin") == false && this.addedGreenSharkFin == false && this.getTheSea().getDistance() - this.getInitialDistance() > 700) {
                    shark.hasFin(BigSharkFinType.GREEN);
                    this.addedGreenSharkFin = true;
                } else if (Saving.loadBool("gridItemPossessedPurpleSharkFin") == false && this.addedPurpleSharkFin == false && this.getTheSea().getDistance() - this.getInitialDistance() > 2500) {
                    shark.hasFin(BigSharkFinType.PURPLE);
                    this.addedPurpleSharkFin = true;
                }
            }

            // Set the next shark in
            this.nextSharkIn = 60 - Math.ceil((1 - Math.exp(-(this.getTheSea().getDistance() - this.getInitialDistance()) / 1500)) * 55);
        }
    };
    return TheSeaPattern_SeaSnakesForever;
})(TheSeaPattern);
///<reference path="Quest.ts"/>
var TheSea = (function (_super) {
    __extends(TheSea, _super);
    // Constructor
    function TheSea(game) {
        _super.call(this, game, "You can move with the down and up arrow keys!");
        // Floors
        this.floors = [];
        // Generation projection (how many characters the player doesn't already see should we generate)
        this.generationProjection = 10;
        // The distance we've swimed so far
        this.distance = 0;
        // Min and max floor height
        this.floorMinHeight = 3;
        this.floorMaxHeight = 8;
        // Patterns stuff
        this.currentPattern = null;
        this.currentPatternLevel = null;
        // Last player movement
        this.lastPlayerMovement = new Pos(0, 0);
        // Did we already generate a sponge? Shell powder?
        this.spongeGenerated = false;
        this.shellPowderGenerated = false;

        // Resize the quest
        this.resizeQuest(100, 30);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);

        // Gravity is disabled
        this.setGravityDisabled(true);
        this.setWormsLikeDisabled(true);

        // Add the player
        this.getGame().getPlayer().loadMediumCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 5));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        for (var i = 0; i <= 99 + this.generationProjection; i++) {
            this.floors.push(null);
        }

        // Generate for the first time
        this.generate(0, 99 + this.generationProjection);

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You jump into the sea! You know you could find precious hidden treasures in the depths..."));
    }
    // willBeDisplayed()
    TheSea.prototype.willBeDisplayed = function () {
        // We call the mother willBeDisplayed()
        _super.prototype.willBeDisplayed.call(this);

        // Register hotkeys so that they can't be used by the player's browser
        this.getGame().addHotkey(new Hotkey("up", null));
        this.getGame().addHotkey(new Hotkey("down", null));
    };

    // Public methods
    TheSea.prototype.addBigShark = function (pos) {
        var bigShark = new BigShark(this, pos);
        bigShark.setHealthBar(new QuestEntityHealthBar(bigShark, new Pos(47, 1)));
        if (this.addEntity(bigShark))
            return bigShark;
        return null;
    };

    TheSea.prototype.addJellyFish = function (pos) {
        var jellyFish = new JellyFish(this, pos);
        jellyFish.setHealthBar(new QuestEntityHealthBar(jellyFish, new Pos(6, 1), new Pos(0, 0)));
        if (this.addEntity(jellyFish))
            return jellyFish;
        return null;
    };

    TheSea.prototype.addMediumFish = function (pos) {
        var mediumFish = new MediumFish(this, pos);
        mediumFish.setHealthBar(new QuestEntityHealthBar(mediumFish, new Pos(8, 1), new Pos(0, 0)));
        if (this.addEntity(mediumFish))
            return mediumFish;
        return null;
    };

    TheSea.prototype.addMiniShark = function (pos) {
        var miniShark = new MiniShark(this, pos);
        miniShark.setHealthBar(new QuestEntityHealthBar(miniShark, new Pos(19, 1)));
        if (this.addEntity(miniShark))
            return miniShark;
        return null;
    };

    TheSea.prototype.addSeahorse = function (pos, intendedXPosition) {
        var seahorse = new Seahorse(this, pos, intendedXPosition);
        seahorse.setHealthBar(new QuestEntityHealthBar(seahorse, new Pos(4, 1)));
        if (this.addEntity(seahorse))
            return seahorse;
        return null;
    };

    TheSea.prototype.addSeaSnake = function (pos) {
        var seaSnake = new SeaSnake(this, pos);
        if (this.addEntity(seaSnake))
            return seaSnake;
        return null;
    };

    TheSea.prototype.addSmallestFish = function (pos) {
        var smallestFish = new SmallestFish(this, pos);
        smallestFish.setHealthBar(new QuestEntityHealthBar(smallestFish, new Pos(3, 1)));
        if (this.addEntity(smallestFish))
            return smallestFish;
        return null;
    };

    TheSea.prototype.castJump = function () {
    };

    TheSea.prototype.castPlayerAcidRain = function () {
        // We cast from 0 to 100, not strictly around the player as usual
        _super.prototype.castPlayerAcidRain.call(this, null, null, 0, 100);
    };

    TheSea.prototype.castPlayerTeleport = function () {
        // We teleport, be we stay on the left side of the quest
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 0), new Pos(0, this.getRealQuestSize().y - 1));
    };

    TheSea.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(false);
        entity.getQuestEntityMovement().setWormsLike(false);
    };

    TheSea.prototype.endQuest = function (win) {
        // Variable used to generate the winning message
        var comment;

        if (win) {
            switch (Random.between(0, 8)) {
                case 0:
                    comment = "by jumping on a jellyfish";
                    break;
                case 1:
                    comment = "by hanging onto a sea turtle";
                    break;
                case 2:
                    comment = "by following a dolphin";
                    break;
                case 3:
                    comment = "(you don't know how)";
                    break;
                case 4:
                    comment = "by hanging onto a shark's fin";
                    break;
                case 5:
                    comment = "by following a whale";
                    break;
                case 6:
                    comment = "by following a squid";
                    break;
                case 7:
                    comment = "by asking your way to a shrimp";
                    break;
                case 8:
                    comment = "thanks to some updrafts";
                    break;
            }
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You almost died in the sea but managed to get to the surface in time " + comment + "."));
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the sea."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    // getLeftLimit()
    TheSea.prototype.getLeftLimit = function () {
        return 100;
    };

    TheSea.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(true);
                return;
            }

            // Add some enemies
            this.handlePatterns(100, 115);

            // Move the player vertically
            this.moveVertically();

            // Update entities
            this.updateEntities();

            // Force scrolling of everything
            this.globalScrolling();
        }

        // Draw
        this.preDraw();
        this.drawSea();
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, true), this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Public getters
    TheSea.prototype.getDistance = function () {
        return this.distance;
    };

    TheSea.prototype.getFloorMaxHeight = function () {
        return this.floorMaxHeight;
    };

    TheSea.prototype.getFloorMinHeight = function () {
        return this.floorMinHeight;
    };

    TheSea.prototype.getLastPlayerMovement = function () {
        return this.lastPlayerMovement;
    };

    TheSea.prototype.getRightLimit = function () {
        return 70;
    };

    // Private methods
    TheSea.prototype.addFloor = function (index, type, height, previousFloor) {
        if (typeof previousFloor === "undefined") { previousFloor = null; }
        // Add the floor
        this.floors[index] = new TheSeaFloor(type, height, previousFloor);

        if (type == TheSeaFloorType.NORMAL)
            this.addFloorCollisionBox(new Pos(index, this.getRealQuestSize().y - (height - 1)), new Pos(1, height - 1));
else
            this.addFloorCollisionBox(new Pos(index, this.getRealQuestSize().y - height), new Pos(1, height));
    };

    TheSea.prototype.addFloorCollisionBox = function (pos, size) {
        var wall = new Wall(this, pos);
        wall.addBox(new Pos(0, 0), size);
        this.addEntity(wall);
    };

    TheSea.prototype.drawFloors = function () {
        for (var i = 0; i <= 99; i++) {
            if (this.floors[i] != null) {
                this.floors[i].draw(this.getRenderArea(), this.getRealQuestPosition().y + this.getRealQuestSize().y, i);
            }
        }
    };

    TheSea.prototype.drawSea = function () {
        this.drawFloors();
    };

    TheSea.prototype.generate = function (x1, x2) {
        this.generateFloors(x1, x2);
        this.generateShellPowder(x1, x2);
        this.generateSponge(x1, x2);
        this.generatePlants(x1, x2);
    };

    TheSea.prototype.generateFloors = function (x1, x2) {
        // Create variables which will be useful
        var type;

        for (var i = x1; i <= x2; i++) {
            if (i == 0) {
                // We place it at a random height and with the normal type
                this.addFloor(i, TheSeaFloorType.NORMAL, Random.between(this.floorMinHeight, this.floorMaxHeight));
            } else {
                // Init the variables
                type = null;

                if (Random.oneChanceOutOf(15 - this.floors[i - 1].getHowManyFloorsOfTheSameTypeBefore()) == false && ((this.floors[i - 1].getType() == TheSeaFloorType.NORMAL) || (this.floors[i - 1].getType() == TheSeaFloorType.GOING_DOWN && this.floors[i - 1].getHeight() > this.floorMinHeight) || (this.floors[i - 1].getType() == TheSeaFloorType.GOING_UP && this.floors[i - 1].getHeight() < this.floorMaxHeight))) {
                    // We will keep the same type as the previous floor
                    type = this.floors[i - 1].getType();
                } else {
                    if (this.floors[i - 1].getType() == TheSeaFloorType.NORMAL) {
                        if (this.floors[i - 1].getHeight() == this.floorMinHeight)
                            type = TheSeaFloorType.GOING_UP;
else if (this.floors[i - 1].getHeight() >= this.floorMaxHeight - 1)
                            type = TheSeaFloorType.GOING_DOWN;
else {
                            if (Random.flipACoin())
                                type = TheSeaFloorType.GOING_UP;
else
                                type = TheSeaFloorType.GOING_DOWN;
                        }
                    } else {
                        type = TheSeaFloorType.NORMAL;
                    }
                }

                switch (type) {
                    case TheSeaFloorType.NORMAL:
                        if (this.floors[i - 1].getType() == TheSeaFloorType.GOING_UP)
                            this.addFloor(i, TheSeaFloorType.NORMAL, this.floors[i - 1].getHeight() + 1, this.floors[i - 1]);
else
                            this.addFloor(i, TheSeaFloorType.NORMAL, this.floors[i - 1].getHeight(), this.floors[i - 1]);
                        break;
                    case TheSeaFloorType.GOING_DOWN:
                        this.addFloor(i, TheSeaFloorType.GOING_DOWN, this.floors[i - 1].getHeight() - 1, this.floors[i - 1]);
                        break;
                    case TheSeaFloorType.GOING_UP:
                        if (this.floors[i - 1].getType() == TheSeaFloorType.NORMAL)
                            this.addFloor(i, TheSeaFloorType.GOING_UP, this.floors[i - 1].getHeight(), this.floors[i - 1]);
else
                            this.addFloor(i, TheSeaFloorType.GOING_UP, this.floors[i - 1].getHeight() + 1, this.floors[i - 1]);
                        break;
                }
            }
        }
    };

    TheSea.prototype.generatePlants = function (x1, x2) {
        // Set some parameters important for the generation
        var minPlantNumber = 0;
        var maxPlantNumber = 10;

        // Create some variables which will be useful
        var thereIsAlreadyAPlant;

        for (var i = x1; i <= x2; i++) {
            if (Random.oneChanceOutOf(3) && i >= 4 && this.floors[i].getType() == TheSeaFloorType.NORMAL && this.floors[i].getHowManyFloorsOfTheSameTypeBefore() >= 4) {
                // Init the variable
                thereIsAlreadyAPlant = false;

                for (var j = i - 4; j <= i; j++) {
                    if (this.floors[j].getHasAPlant() == true) {
                        thereIsAlreadyAPlant = true;
                        break;
                    }
                }

                if (thereIsAlreadyAPlant == false) {
                    // We add the plant
                    this.addEntity(new Plant(this, new Pos(i - 4, this.getRealQuestSize().y - this.floors[i].getHeight()), minPlantNumber, maxPlantNumber));

                    for (var j = i - 4; j <= i; j++) {
                        this.floors[j].setHasAPlant(true);
                    }
                }
            }
        }
    };

    TheSea.prototype.generateShellPowder = function (x1, x2) {
        if (Saving.loadBool("gridItemPossessedShellPowder") == false && this.shellPowderGenerated == false && this.distance >= 500) {
            for (var i = x1; i <= x2; i++) {
                if (i >= 6 && this.floors[i].getType() == TheSeaFloorType.NORMAL && this.floors[i].getHowManyFloorsOfTheSameTypeBefore() >= 6) {
                    for (var j = i - 6; j <= i; j++) {
                        if (this.floors[j].getHasAPlant() == true)
                            return;
                    }

                    // Add the powder and change the shellPowderGenerated bool
                    this.shellPowderGenerated = true;
                    this.addEntity(new ShellPowder(this, new Pos(i - 6, this.getRealQuestSize().y - this.floors[i].getHeight())));
                    this.getLastEntity().setHealthBar(new QuestEntityHealthBar(this.getLastEntity(), new Pos(6, 1)));

                    for (var j = i - 6; j <= i; j++) {
                        this.floors[j].setHasAPlant(true);
                    }
                }
            }
        }
    };

    TheSea.prototype.generateSponge = function (x1, x2) {
        if (Saving.loadBool("gridItemPossessedSponge") == false && this.spongeGenerated == false && this.distance >= 793) {
            for (var i = x1; i <= x2; i++) {
                if (i >= 6 && this.floors[i].getType() == TheSeaFloorType.NORMAL && this.floors[i].getHowManyFloorsOfTheSameTypeBefore() >= 6) {
                    for (var j = i - 6; j <= i; j++) {
                        if (this.floors[j].getHasAPlant() == true)
                            return;
                    }

                    // Add the sponge and change the spongeGenerated bool
                    this.spongeGenerated = true;
                    this.addEntity(new Sponge(this, new Pos(i - 6, this.getRealQuestSize().y - this.floors[i].getHeight())));
                    this.getLastEntity().setHealthBar(new QuestEntityHealthBar(this.getLastEntity(), new Pos(6, 1)));

                    for (var j = i - 6; j <= i; j++) {
                        this.floors[j].setHasAPlant(true);
                    }
                }
            }
        }
    };

    TheSea.prototype.globalScrolling = function () {
        // How much do we have to scroll ?
        var scrollingXOffset = -(this.getGame().getPlayer().getCharacterType() == PlayerCharacterType.MEDIUM ? this.getGame().getPlayer().getGlobalPosition().x : this.getGame().getPlayer().getGlobalPosition().x - 2);

        if (scrollingXOffset < 0) {
            // Set the x last player movement
            this.lastPlayerMovement.x = -scrollingXOffset;

            // Increase the distance
            this.distance += -scrollingXOffset;

            // Scroll entities
            this.forceMovingAllEntities(new Pos(scrollingXOffset, 0));

            // Scroll the floor
            this.scrollFloor(-scrollingXOffset);

            // Generate new things to fill the new area
            this.generate(100 + scrollingXOffset + this.generationProjection, 99 + this.generationProjection);
        } else {
            // Set the x last player movement
            this.lastPlayerMovement.x = 0;
        }
    };

    TheSea.prototype.handlePatterns = function (x1, x2) {
        if (this.currentPattern == null || this.currentPattern.isPatternDone()) {
            if (this.currentPatternLevel == null)
                this.currentPatternLevel = new TheSeaPatternLevel_Level0(this);
else if (this.currentPatternLevel.isLevelDone())
                this.currentPatternLevel = this.currentPatternLevel.getNextLevel();

            // We get the new pattern from the current level
            this.currentPattern = this.currentPatternLevel.getPattern(this.distance);
        }

        // We run the pattern
        this.currentPattern.run(x1, x2);
    };

    TheSea.prototype.moveVertically = function () {
        var upPressed = Keyboard.isKeyPressed("up");
        var downPressed = Keyboard.isKeyPressed("down");

        if (upPressed && !downPressed) {
            this.getGame().getPlayer().move(new Pos(0, -1));
            this.lastPlayerMovement.y = -1;
        } else if (downPressed && !upPressed) {
            this.getGame().getPlayer().move(new Pos(0, 1));
            this.lastPlayerMovement.y = 1;
        }
    };

    TheSea.prototype.scrollFloor = function (howMany) {
        for (var i = howMany; i <= 99 + this.generationProjection; i++) {
            this.floors[i - howMany] = this.floors[i];
        }
    };
    return TheSea;
})(Quest);
///<reference path="House.ts"/>
var ThirdHouse = (function (_super) {
    __extends(ThirdHouse, _super);
    // Constructor
    function ThirdHouse(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // The game running
        this.gameRunning = null;

        this.renderArea.resizeFromArray(Database.getAscii("places/village/thirdHouse"), 0, 3);
        this.update();
    }
    // getRenderArea()
    ThirdHouse.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // willBeDisplayed()
    ThirdHouse.prototype.willBeDisplayed = function () {
        this.getGame().getQuestCallbackCollection().addCallback(this.runGame.bind(this));

        // Add some hotkeys
        this.getGame().addHotkey(new Hotkey("up", new CallbackCollection(this.pressedUpButton.bind(this))));
        this.getGame().addHotkey(new Hotkey("down", new CallbackCollection(this.pressedDownButton.bind(this))));
        this.getGame().addHotkey(new Hotkey("space", new CallbackCollection(this.pressedSpaceButton.bind(this))));
    };

    // Private methods
    ThirdHouse.prototype.addControls = function (x, y) {
        if (this.gameRunning != null) {
            // UP button
            this.renderArea.addAsciiButton(x, x + 4, y, "thirdHouseUpButton");
            this.renderArea.addLinkCall(".thirdHouseUpButton", new CallbackCollection(this.pressedUpButton.bind(this)));

            // Space button
            this.renderArea.addAsciiButton(x + 7, x + 25, y + 1, "thirdHouseSpaceButton");
            this.renderArea.addLinkCall(".thirdHouseSpaceButton", new CallbackCollection(this.pressedSpaceButton.bind(this)));

            // DOWN button
            this.renderArea.addAsciiButton(x + 28, x + 34, y, "thirdHouseDownButton");
            this.renderArea.addLinkCall(".thirdHouseDownButton", new CallbackCollection(this.pressedDownButton.bind(this)));
        }
    };

    ThirdHouse.prototype.addInsertCandiesButtons = function (x, y) {
        // First button (10 candies)
        this.renderArea.addAsciiButton(x, x + 4, y, "thirdHouseInsert10CandiesButton");
        this.renderArea.addLinkCall(".thirdHouseInsert10CandiesButton", new CallbackCollection(this.insert10Candies.bind(this)));

        // Second button (1000 candies)
        this.renderArea.addAsciiButton(x, x + 4, y + 2, "thirdHouseInsert1000CandiesButton");
        this.renderArea.addLinkCall(".thirdHouseInsert1000CandiesButton", new CallbackCollection(this.insert1000Candies.bind(this)));
    };

    ThirdHouse.prototype.insert10Candies = function () {
        if (this.getGame().getCandies().getCurrent() >= 10) {
            // We pay the price
            this.getGame().getCandies().add(-10);

            // We launch the game
            this.gameRunning = new SuperRPG(this);
        }
    };

    ThirdHouse.prototype.insert1000Candies = function () {
        if (this.getGame().getCandies().getCurrent() >= 1000) {
            // We pay the price
            this.getGame().getCandies().add(-1000);

            // We launch the game
            this.gameRunning = new GalacticWars(this);
        }
    };

    ThirdHouse.prototype.pressedDownButton = function () {
        if (this.gameRunning != null)
            this.gameRunning.pressedDownButton();
    };

    ThirdHouse.prototype.pressedSpaceButton = function () {
        if (this.gameRunning != null)
            this.gameRunning.pressedSpaceButton();
    };

    ThirdHouse.prototype.pressedUpButton = function () {
        if (this.gameRunning != null)
            this.gameRunning.pressedUpButton();
    };

    ThirdHouse.prototype.runGame = function () {
        if (this.gameRunning != null) {
            if (this.gameRunning.run() == true) {
                this.gameRunning = null;

                // We update
                this.update();
                this.getGame().updatePlace();
            } else {
                // We update
                this.update();

                // We draw the game on the screen
                this.renderArea.drawArea(this.gameRunning.getRenderArea(), 19, 10);

                // We update at the game level
                this.getGame().updatePlace();
            }
        }
    };

    ThirdHouse.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the village button
        this.addBackToTheVillageButton(this.renderArea, "thirdHouseBackToTheVillageButton");

        // Draw the house
        this.renderArea.drawArray(Database.getAscii("places/village/thirdHouse"), 0, 3);

        // Add the buttons to insert candies
        this.addInsertCandiesButtons(25, 28);

        // Add the buttons to control the game
        this.addControls(29, 24);
    };
    return ThirdHouse;
})(House);
///<reference path="Place.ts"/>
var Treasure = (function (_super) {
    __extends(Treasure, _super);
    // Constructor
    function Treasure(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();

        this.renderArea.resizeFromArray(Database.getAscii("places/treasure"), 57, 3);
        this.update();
    }
    // getRenderArea()
    Treasure.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    Treasure.prototype.dig = function () {
        // We found the treasure
        Saving.saveBool("TheCavePattern_TreasureMapFoundTreasure", true);

        // Get it
        this.getGame().getChocolateBars().add(3);

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    Treasure.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "treasureBackToTheMapButton");

        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/treasure"), 28, 3);

        if (Saving.loadBool("TheCavePattern_TreasureMapFoundTreasure") == false) {
            // Add the button to get the treasure
            this.renderArea.addAsciiRealButton(Database.getText("treasureButtonDig"), 49, 14, "treasureButton", Database.getTranslatedText("treasureButtonDig"), true, -1, null, false);
            this.renderArea.addLinkCall(".treasureButton", new CallbackCollection(this.dig.bind(this)));
        } else {
            // Add the text
            this.renderArea.drawString(Database.getText("treasureButtonYouFound"), 49, 14);
            this.renderArea.drawString(Database.getTranslatedText("treasureButtonYouFound"), 49, 15, true);
        }
    };
    return Treasure;
})(Place);
///<reference path="QuestEntity.ts"/>
var TreeSpirit = (function (_super) {
    __extends(TreeSpirit, _super);
    // Constructor
    function TreeSpirit(quest, pos, groundYPosition) {
        _super.call(this, quest, pos, new Naming("A tree spirit", "a tree spirit"), new RenderArea(5, 5), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(5, 2)), new CollisionBox(this, new Pos(1, 3), new Pos(3, 2))), new QuestEntityMovement());

        // Set the ground y position from the value given in parameter
        this.groundYPosition = groundYPosition;

        // Set the default values for ammunition related variables
        this.maxAmmunition = 5;
        this.ammunition = 5;
        this.ammunitionTimer = 0;

        // Set the default values for magic spines related variables
        this.magicSpineTimer = 0;

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/treeSpirit"));
        this.setTransparency(new RenderTransparency(" "));

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(100);
        this.setHp(100);

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Spines", "spines"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(7, 6))), 2));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(1);
    }
    // update()
    TreeSpirit.prototype.update = function () {
        // Calculate the distance from the player
        var distanceFromPlayer = this.getGlobalPosition().plus(new Pos(2, 0)).getDistance(this.getQuest().getGame().getPlayer().getGlobalPosition());

        if (this.ammunitionTimer <= 0) {
            if (this.ammunition < this.maxAmmunition)
                this.ammunition += 1;
            this.ammunitionTimer = 20;
        } else
            this.ammunitionTimer -= 1;

        if (this.magicSpineTimer > 0)
            this.magicSpineTimer -= 1;

        // Set the movement depending on the distance from the player
        this.getQuestEntityMovement().setOffset(new Pos((distanceFromPlayer.x > 0 ? -1 : 1), 0));

        if (this.getQuest().getGame().getPlayer().getGlobalPosition().y < this.groundYPosition) {
            if (this.magicSpineTimer <= 0) {
                if (this.shootMagicSpine((distanceFromPlayer.x > 0 ? true : false))) {
                    this.ammunition -= 1;
                    this.magicSpineTimer = 12;
                }
            }
        }

        // Call the mother class update
        _super.prototype.update.call(this);
    };

    // willDie()
    TreeSpirit.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(100 + 50 * Random.upTo(10)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };

    // Private methods
    TreeSpirit.prototype.shootMagicSpine = function (onTheLeft) {
        // Create the magic spine
        var magicSpine = new Fireball(this.getQuest(), this.getGlobalPosition().plus(new Pos((onTheLeft ? -3 : 5), 2)), new Naming("A magical spine", "a magical spine"), new Color(ColorType.TREE_SPIRIT_MAGIC_SPINE), new Pos(3, 1), 150, this.getAndPossiblyCreateSpellCastingDamageReason(new Naming("A magical spine", "a magical spine")));

        // No target
        magicSpine.setTargetTypeNoTarget(new Pos((onTheLeft ? -2 : 2), 0));

        // Add the entity
        return this.getQuest().addEntity(magicSpine);
    };
    return TreeSpirit;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var TribalSpear = (function (_super) {
    __extends(TribalSpear, _super);
    // Constructor
    function TribalSpear() {
        _super.call(this, "eqItemWeaponTribalSpear", "eqItemWeaponTribalSpearName", "eqItemWeaponTribalSpearDescription", "eqItems/weapons/tribalSpear");
    }
    // Public getters
    TribalSpear.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A tribal spear", "a tribal spear"), player.getClassicCollisionBoxCollection(), 8);
        qew.getCloseCombatDelay().setFixedDelay(2);
        return qew;
    };
    return TribalSpear;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var TripodCamel = (function (_super) {
    __extends(TripodCamel, _super);
    // Constructor
    function TripodCamel(quest, pos) {
        _super.call(this, quest, pos, new Naming("A tripod camel", "a tripod camel"), new RenderArea(7, 2), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(6, 1)), new CollisionBox(this, new Pos(2, 1), new Pos(5, 1))), new QuestEntityMovement());

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(7);
        this.setHp(7);

        if (Random.flipACoin())
            this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/tripodCamel1"));
else
            this.getRenderArea().drawArray(Database.getAscii("places/quests/desert/tripodCamel2"));
        this.setTransparency(new RenderTransparency(" "));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its long neck", "its long neck"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(3, 3))), 5));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setBetweenDelay(6, 8);
    }
    // Public methods
    TripodCamel.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(20 + Random.upTo(12)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };
    return TripodCamel;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var TrollBludgeon = (function (_super) {
    __extends(TrollBludgeon, _super);
    // Constructor
    function TrollBludgeon() {
        _super.call(this, "eqItemWeaponTrollBludgeon", "eqItemWeaponTrollBludgeonName", "eqItemWeaponTrollBludgeonDescription", "eqItems/weapons/trollBludgeon");
    }
    // Public getters
    TrollBludgeon.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new PlayerBludgeon(quest, player, new Naming("The troll's bludgeon", "the troll's bludgeon"), player.getClassicCollisionBoxCollection());
        qew.getCloseCombatDelay().setFixedDelay(6);
        return qew;
    };
    return TrollBludgeon;
})(EqItem);
///<reference path="QuestEntity.ts"/>
var Troll = (function (_super) {
    __extends(Troll, _super);
    // Constructor
    function Troll(quest, pos) {
        _super.call(this, quest, pos, new Naming("A troll", "a troll"), new RenderArea(15, 10), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(11, 0), new Pos(2, 1)), new CollisionBox(this, new Pos(4, 1), new Pos(3, 3)), new CollisionBox(this, new Pos(9, 1), new Pos(6, 2)), new CollisionBox(this, new Pos(0, 4), new Pos(8, 4)), new CollisionBox(this, new Pos(2, 8), new Pos(5, 2)), new CollisionBox(this, new Pos(8, 4), new Pos(4, 2)), new CollisionBox(this, new Pos(11, 3), new Pos(2, 4))), new QuestEntityMovement());

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(80);
        this.setHp(80);

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/bridge/troll"));
        this.setTransparency(new RenderTransparency(" "));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new Bludgeon(this.getQuest(), this, new Naming("Its bludgeon", "its bludgeon"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(17, 11))), 15));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(6);
    }
    // Public methods
    Troll.prototype.draw = function (renderArea) {
        _super.prototype.draw.call(this, renderArea);

        // We add the missing "<" on the troll's bludgeon as a tag
        renderArea.addTag(new RenderTagLt(this.getQuest().getRealQuestPosition().x + this.getGlobalPosition().x + this.getRenderAreaPosition().x + 9), this.getQuest().getRealQuestPosition().y + this.getGlobalPosition().y + this.getRenderAreaPosition().y + 1);
    };

    Troll.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(500), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemWeaponTrollBludgeon", "You picked up the troll's bludgeon from the floor", "You gain the troll's bludgeon"));
    };
    return Troll;
})(QuestEntity);
///<reference path="GridItem.ts"/>
var UnicornHorn = (function (_super) {
    __extends(UnicornHorn, _super);
    function UnicornHorn() {
        _super.apply(this, arguments);
    }
    UnicornHorn.prototype.update = function (player, quest) {
        player.heal(3);
    };
    return UnicornHorn;
})(GridItem);
///<reference path="Place.ts"/>
var Village = (function (_super) {
    __extends(Village, _super);
    // Constructor
    function Village(game) {
        _super.call(this, game);
        // Render areas
        this.renderArea = new RenderArea();
        // Smoke
        this.smokes = [
            new Smoke(8, 26, 1, 3, 1, 3),
            new Smoke(64, 26, 2, 4, 0, 0),
            new Smoke(80, 26, 1, 3, 1, 3),
            new Smoke(59, 42, 1, 3, 1, 3)
        ];

        // Resize the area
        this.renderArea.resizeFromArray(Database.getAscii("places/village/village"), 0, 3);

        // Update
        this.update();
    }
    // Public methods
    Village.prototype.willBeDisplayed = function () {
        this.getGame().getOneSecondCallbackCollection().addCallback(this.actionSmokes.bind(this));
        this.update();
    };

    // getRenderArea()
    Village.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    Village.prototype.actionSmokes = function () {
        for (var i = 0; i < this.smokes.length; i++) {
            this.smokes[i].move();
        }

        // We update on the page
        this.update();
        this.getGame().updatePlace();
    };

    Village.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        if (Saving.loadBool("gridItemPossessedMainMap"))
            this.addBackToMainMapButton(this.renderArea, "villageBackToTheMapButton");

        // Draw the ascii
        this.renderArea.drawArray(Database.getAscii("places/village/village"), 0, 3);

        for (var i = 0; i < this.smokes.length; i++) {
            this.smokes[i].draw(this.renderArea);
        }

        // Load various things
        this.loadFirstHouse(2, 3 + 24);
        this.loadSecondHouse(18, 3 + 21);
        this.loadThirdHouse(32, 3 + 25);
        this.loadForge(61, 3 + 24);
        this.loadFourthHouse(77, 3 + 24);
        this.loadFifthHouse(91, 3 + 25);
    };

    // Private "go to" methods
    Village.prototype.goToFirstHouse = function () {
        alert("yay");
    };

    Village.prototype.goToSecondHouse = function () {
        this.getGame().setPlace(new SecondHouse(this.getGame()));
    };

    Village.prototype.goToThirdHouse = function () {
        this.getGame().setPlace(new ThirdHouse(this.getGame()));
    };

    Village.prototype.goToForge = function () {
        this.getGame().setPlace(new Forge(this.getGame()));
    };

    Village.prototype.goToFourthHouse = function () {
        this.getGame().setPlace(new FourthHouse(this.getGame()));
    };

    Village.prototype.goToFifthHouse = function () {
        this.getGame().setPlace(new FifthHouse(this.getGame()));
    };

    // Private "load" methods
    Village.prototype.loadFirstHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiNinjaButtons("mapVillageFirstHouseButton", x + 6, x + 8, y, x + 1, x + 10, y + 1, x, x + 11, y + 2, x - 1, x + 12, y + 3, x, x + 11, y + 4, x, x + 11, y + 5);

        // Comments
        this.renderArea.addFullComment(x + 6, y + 6, Database.getText("mapVillageLockedHouseComment"), Database.getTranslatedText("mapVillageLockedHouseComment"), "mapVillageFirstHouseComment");

        // Interactions
        this.renderArea.addLinkOver(".mapVillageFirstHouseButton, .mapVillageFirstHouseComment", ".mapVillageFirstHouseComment");
    };

    Village.prototype.loadSecondHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageSecondHouseButton", x + 1, x + 9, y, x, x + 10, y + 1, x - 1, x + 11, y + 2, x, x + 10, y + 3, x, x + 10, y + 4, x, x + 10, y + 5, x, x + 10, y + 6, x, x + 10, y + 7, x, x + 10, y + 8);

        // Comments
        this.renderArea.addFullComment(x + 5, y + 9, Database.getText("mapVillageTheShopComment"), Database.getTranslatedText("mapVillageTheShopComment"), "mapVillageSecondHouseComment");

        // Interactions
        this.renderArea.addLinkOver(".mapVillageSecondHouseButton, .mapVillageSecondHouseComment", ".mapVillageSecondHouseComment");
        this.renderArea.addLinkCall(".mapVillageSecondHouseButton, .mapVillageSecondHouseComment", new CallbackCollection(this.goToSecondHouse.bind(this)));
    };

    Village.prototype.loadThirdHouse = function (x, y) {
        if (Saving.loadBool("gridItemPossessedThirdHouseKey")) {
            // Buttons
            this.renderArea.addMultipleAsciiButtons("mapVillageThirdHouseButton", x + 1, x + 7, y, x, x + 8, y + 1, x - 1, x + 9, y + 2, x, x + 8, y + 3, x, x + 8, y + 4);

            // Comments
            this.renderArea.addFullComment(x + 4, y + 5, Database.getText("mapVillageAHouseComment"), Database.getTranslatedText("mapVillageAHouseComment"), "mapVillageThirdHouseComment");

            // Interactions
            this.renderArea.addLinkOver(".mapVillageThirdHouseButton, .mapVillageThirdHouseComment", ".mapVillageThirdHouseComment");
            this.renderArea.addLinkCall(".mapVillageThirdHouseButton, .mapVillageThirdHouseComment", new CallbackCollection(this.goToThirdHouse.bind(this)));
        } else {
            // Buttons
            this.renderArea.addMultipleAsciiNinjaButtons("mapVillageThirdHouseButton", x + 1, x + 7, y, x, x + 8, y + 1, x - 1, x + 9, y + 2, x, x + 8, y + 3, x, x + 8, y + 4);

            // Comments
            this.renderArea.addFullComment(x + 4, y + 5, Database.getText("mapVillageLockedHouseComment"), Database.getTranslatedText("mapVillageLockedHouseComment"), "mapVillageThirdHouseComment");

            // Interactions
            this.renderArea.addLinkOver(".mapVillageThirdHouseButton, .mapVillageThirdHouseComment", ".mapVillageThirdHouseComment");
        }
    };

    Village.prototype.loadForge = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageForgeButton", x + 3, x + 6, y, x + 1, x + 10, y + 1, x, x + 11, y + 2, x - 1, x + 12, y + 3, x, x + 11, y + 4, x, x + 11, y + 5);

        // Comments
        this.renderArea.addFullComment(x + 6, y + 6, Database.getText("mapVillageForgeComment"), Database.getTranslatedText("mapVillageForgeComment"), "mapVillageForgeComment");

        // Interactions
        this.renderArea.addLinkOver(".mapVillageForgeButton, .mapVillageForgeComment", ".mapVillageForgeComment");
        this.renderArea.addLinkCall(".mapVillageForgeButton, .mapVillageForgeComment", new CallbackCollection(this.goToForge.bind(this)));
    };

    Village.prototype.loadFourthHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageFourthHouseButton", x + 3, x + 5, y, x + 1, x + 10, y + 1, x, x + 11, y + 2, x - 1, x + 12, y + 3, x, x + 11, y + 4, x, x + 11, y + 5);

        // Comments
        this.renderArea.addFullComment(x + 6, y + 6, Database.getText("mapVillageAHouseComment"), Database.getTranslatedText("mapVillageAHouseComment"), "mapVillageFourthHouseComment");

        // Interactions
        this.renderArea.addLinkOver(".mapVillageFourthHouseButton, .mapVillageFourthHouseComment", ".mapVillageFourthHouseComment");
        this.renderArea.addLinkCall(".mapVillageFourthHouseButton, .mapVillageFourthHouseComment", new CallbackCollection(this.goToFourthHouse.bind(this)));
    };

    Village.prototype.loadFifthHouse = function (x, y) {
        // Buttons
        this.renderArea.addMultipleAsciiButtons("mapVillageFifthHouseButton", x + 1, x + 9, y, x, x + 10, y + 1, x - 1, x + 11, y + 2, x, x + 10, y + 3, x, x + 10, y + 4);

        // Comments
        this.renderArea.addFullComment(x + 5, y + 5, Database.getText("mapVillageAHouseComment"), Database.getTranslatedText("mapVillageAHouseComment"), "mapVillageFifthHouseComment");

        // Interactions
        this.renderArea.addLinkOver(".mapVillageFifthHouseButton, .mapVillageFifthHouseComment", ".mapVillageFifthHouseComment");
        this.renderArea.addLinkCall(".mapVillageFifthHouseButton, .mapVillageFifthHouseComment", new CallbackCollection(this.goToFifthHouse.bind(this)));
    };
    return Village;
})(Place);
///<reference path="QuestEntity.ts"/>
var Wall = (function (_super) {
    __extends(Wall, _super);
    // Constructor
    function Wall(quest, pos) {
        _super.call(this, quest, pos, new Naming("A wall", "a wall"), null, new Pos(0, 0), new CollisionBoxCollection());
    }
    // Public method
    Wall.prototype.addBox = function (pos, size) {
        this.getCbc().addCollisionBox(new CollisionBox(this, pos, size));
    };

    Wall.prototype.removeBoxes = function () {
        this.getCbc().removeBoxes();
    };
    return Wall;
})(QuestEntity);
///<reference path="Place.ts"/>
// Candies stuff
Saving.registerBool("wishingWellFirstCandyThrown", false);
Saving.registerNumber("wishingWellPreviousCandyWishPrice", 1);
Saving.registerNumber("wishingWellCurrentCandyWishPrice", 1);

// Lollipops stuff
Saving.registerBool("wishingWellFirstLollipopThrown", false);
Saving.registerNumber("wishingWellCurrentLollipopWishPrice", 1);

// How many chocolate bars did we threw?
Saving.registerBool("wishingWellWeAreEnchanting", false);
Saving.registerNumber("wishingWellHowManyChocolateBarsThrown", 0);

// How many pains au chocolat did we threw?
Saving.registerBool("wishingWellWeArePainAuChocolating", false);
Saving.registerNumber("wishingWellHowManyPainsAuChocolatThrown", 0);

// Chocolate bars stuff
Saving.registerBool;

var WishingWell = (function (_super) {
    __extends(WishingWell, _super);
    // Constructor
    function WishingWell(game) {
        _super.call(this, game);
        // The render area
        this.renderArea = new RenderArea();
        // Current speech
        this.currentSpeech = null;
        this.selectedEnchantmentId = "wishingWellPossibleEnchantment0";
        // Gifts
        this.selectedGiftId = "wishingWellGiftPower";

        this.createPossibleEnchantments();

        this.renderArea.resizeFromArray(Database.getAscii("places/wishingWell"), 62, 3);
        this.update();
    }
    // getRenderArea()
    WishingWell.prototype.getRenderArea = function () {
        return this.renderArea;
    };

    // Private methods
    WishingWell.prototype.addEnchantmentIfPossible = function (enchantment) {
        if (enchantment.isPossible())
            this.possibleEnchantments.push(enchantment);
    };

    WishingWell.prototype.chooseGift = function () {
        switch (this.selectedGiftId) {
            case "wishingWellGiftPower":
                Saving.saveNumber("gameGiftPower", Saving.loadNumber("gameGiftPower") + 1);
                break;
            case "wishingWellGiftHealth":
                Saving.saveNumber("gameGiftHealth", Saving.loadNumber("gameGiftHealth") + 1);
                break;
            case "wishingWellGiftMagic":
                Saving.saveNumber("gameGiftMagic", Saving.loadNumber("gameGiftMagic") + 1);
                break;
        }

        // We're not pain au chocolating anymore
        Saving.saveBool("wishingWellWeArePainAuChocolating", false);

        // Set the speech
        this.currentSpeech = "wishingWellGiftDoneSpeech";

        // Re calc max hp
        this.getGame().getPlayer().reCalcMaxHp();

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    WishingWell.prototype.createPossibleEnchantments = function () {
        // We empty the array
        this.possibleEnchantments = [];

        // We add the echantments
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemGlovesLeatherGloves", EqItemType.GLOVES), new EnchantmentItem(this.getGame(), "eqItemGlovesRedEnchantedGloves", EqItemType.GLOVES)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemGlovesLeatherGloves", EqItemType.GLOVES), new EnchantmentItem(this.getGame(), "eqItemGlovesPinkEnchantedGloves", EqItemType.GLOVES)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemWeaponTribalSpear", EqItemType.WEAPON), new EnchantmentItem(this.getGame(), "eqItemWeaponSummoningTribalSpear", EqItemType.WEAPON)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemWeaponMonkeyWizardStaff", EqItemType.WEAPON), new EnchantmentItem(this.getGame(), "eqItemWeaponEnchantedMonkeyWizardStaff", EqItemType.WEAPON)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemBodyArmoursKnightBodyArmour", EqItemType.BODYARMOUR), new EnchantmentItem(this.getGame(), "eqItemBodyArmoursEnchantedKnightBodyArmour", EqItemType.BODYARMOUR)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrown", EqItemType.HAT), new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrownWithJaspers", EqItemType.HAT)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrown", EqItemType.HAT), new EnchantmentItem(this.getGame(), "eqItemHatOctopusKingCrownWithObsidian", EqItemType.HAT)));
        this.addEnchantmentIfPossible(new Enchantment(new EnchantmentItem(this.getGame(), "eqItemWeaponGiantSpoon", EqItemType.WEAPON), new EnchantmentItem(this.getGame(), "eqItemWeaponGiantSpoonOfDoom", EqItemType.WEAPON)));

        // We create the list array
        this.createPossibleEnchantmentsArrayForTheList();
    };

    WishingWell.prototype.createPossibleEnchantmentsArrayForTheList = function () {
        this.possibleEnchantmentsArrayForTheList = [];

        for (var i = 0; i < this.possibleEnchantments.length; i++) {
            this.possibleEnchantmentsArrayForTheList.push("wishingWellPossibleEnchantment" + i, this.possibleEnchantments[i].getBeforeItem().getText() + " -> " + this.possibleEnchantments[i].getAfterItem().getText());
        }
    };

    WishingWell.prototype.drawCandiesStuff = function (x, y) {
        if (Saving.loadBool("wishingWellFirstCandyThrown") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowFirstCandyButton"), x, y, "wishingWellThrowFirstCandyButton", Database.getTranslatedText("wishingWellThrowFirstCandyButton"), true);
            this.renderArea.addLinkCall(".wishingWellThrowFirstCandyButton", new CallbackCollection(this.throwFirstCandy.bind(this)));
        } else {
            // The button
            this.renderArea.addAsciiRealButton("Throw " + Algo.pluralFormatNicely(Saving.loadNumber("wishingWellCurrentCandyWishPrice"), " candy", " candies") + " in the well", x, y, "wishingWellThrowCandiesButton");
            this.renderArea.addLinkCall(".wishingWellThrowCandiesButton", new CallbackCollection(this.throwCandies.bind(this)));
        }
    };

    WishingWell.prototype.drawChocolateBarsStuff = function (x, y) {
        if (Saving.loadBool("wishingWellWeAreEnchanting") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowChocolateBarButton"), x, y, "wishingWellThrowChocolateBarButton", Database.getTranslatedText("wishingWellThrowChocolateBarButton"), true);

            // The link
            this.renderArea.addLinkCall(".wishingWellThrowChocolateBarButton", new CallbackCollection(this.throwChocolateBar.bind(this)));
        } else {
            if (this.possibleEnchantments.length >= 1) {
                // "Choose the enchantment"
                this.renderArea.drawString(Database.getText("wishingWellChooseEnchantment"), x, y);
                this.renderArea.drawString(Database.getTranslatedText("wishingWellChooseEnchantment"), x, y + 1, true);

                // The list
                this.renderArea.addList(x, x + 30, y + 3, "wishingWellEnchantmentList", new CallbackCollection(this.enchantmentSelected.bind(this)), this.possibleEnchantmentsArrayForTheList);

                // Enchant button
                this.renderArea.addAsciiRealButton(Database.getText("wishingWellEnchantButton"), x, y + 6, "wishingWellEnchantButton", Database.getTranslatedText("wishingWellEnchantButton"));
                this.renderArea.addLinkCall(".wishingWellEnchantButton", new CallbackCollection(this.enchant.bind(this)));

                // Add the link which will call the selectRightEnchantment method after the html dom is created
                this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.selectRightEnchantment.bind(this)));
            } else {
                // We tell the player that there's nothing to enchant
                this.renderArea.drawString(Database.getText("wishingWellNoPossibleEnchantment"), x, y);
                this.renderArea.drawString(Database.getTranslatedText("wishingWellNoPossibleEnchantment"), x, y + 1, true);
            }
        }
    };

    WishingWell.prototype.drawLollipopsStuff = function (x, y) {
        if (Saving.loadBool("wishingWellFirstLollipopThrown") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowFirstLollipopButton"), x, y, "wishingWellThrowFirstLollipopButton", Database.getTranslatedText("wishingWellThrowFirstLollipopButton"), true);
            this.renderArea.addLinkCall(".wishingWellThrowFirstLollipopButton", new CallbackCollection(this.throwFirstLollipop.bind(this)));
        } else {
            // The button
            this.renderArea.addAsciiRealButton("Throw " + Algo.pluralFormatNicely(Saving.loadNumber("wishingWellCurrentLollipopWishPrice"), " lollipop", " lollipops") + " in the well", x, y, "wishingWellThrowLollipopsButton");
            this.renderArea.addLinkCall(".wishingWellThrowLollipopsButton", new CallbackCollection(this.throwLollipops.bind(this)));
        }
    };

    WishingWell.prototype.drawPainsAuChocolatStuff = function (x, y) {
        if (Saving.loadBool("wishingWellWeArePainAuChocolating") == false) {
            // The button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellThrowPainAuChocolatButton"), x, y, "wishingWellThrowPainAuChocolatButton", Database.getTranslatedText("wishingWellThrowPainAuChocolatButton"), true);

            // The link
            this.renderArea.addLinkCall(".wishingWellThrowPainAuChocolatButton", new CallbackCollection(this.throwPainAuChocolat.bind(this)));
        } else {
            // "Choose your gift"
            this.renderArea.drawString(Database.getText("wishingWellChooseGift"), x, y);
            this.renderArea.drawString(Database.getTranslatedText("wishingWellChooseGift"), x, y + 1, true);

            // The list
            this.renderArea.addList(x, x + 30, y + 3, "wishingWellGiftList", new CallbackCollection(this.giftSelected.bind(this)), this.getGiftsArray());

            // Choose gift button
            this.renderArea.addAsciiRealButton(Database.getText("wishingWellChooseGiftButton"), x, y + 6, "wishingWellChooseGiftButton", Database.getTranslatedText("wishingWellChooseGiftButton"));
            this.renderArea.addLinkCall(".wishingWellChooseGiftButton", new CallbackCollection(this.chooseGift.bind(this)));

            // Add the link which will call the selectRightEnchantment method after the html dom is created
            this.renderArea.addLinkCallbackCollection(new CallbackCollection(this.giftSelected.bind(this), this.selectRightGift.bind(this)));
        }
    };

    WishingWell.prototype.enchant = function () {
        // Get the index of the selected echantment
        var index = parseInt(this.selectedEnchantmentId.substr(30));

        // Enchant (lose the before item and gain the after item)
        this.possibleEnchantments[index].enchant();

        // We're not enchanting anymore
        Saving.saveBool("wishingWellWeAreEnchanting", false);

        // We re-create the lists
        this.createPossibleEnchantments();

        // Set the speech
        this.currentSpeech = "wishingWellEnchantmentDoneSpeech";

        // Update
        this.update();
        this.getGame().updatePlace();
    };

    WishingWell.prototype.enchantmentSelected = function () {
        // Get the selected language id
        this.selectedEnchantmentId = $("#wishingWellEnchantmentList").find(":selected").attr("id");
    };

    WishingWell.prototype.getGiftsArray = function () {
        // Crate the array
        var arr = [];

        // Add the power gift
        arr.push("wishingWellGiftPower");
        arr.push("More power");

        // Add the health gift
        arr.push("wishingWellGiftHealth");
        arr.push("More health");

        if (Saving.loadNumber("gameGiftMagic") < 6) {
            arr.push("wishingWellGiftMagic");
            arr.push("More magic");
        }

        // Return the array
        return arr;
    };

    WishingWell.prototype.giftSelected = function () {
        // Get the selected language id
        this.selectedGiftId = $("#wishingWellGiftList").find(":selected").attr("id");
    };

    WishingWell.prototype.selectRightEnchantment = function () {
        // We select the right question
        $("#" + this.selectedEnchantmentId).prop('selected', true);
    };

    WishingWell.prototype.selectRightGift = function () {
        // We select the right question
        $("#" + this.selectedGiftId).prop('selected', true);
    };

    WishingWell.prototype.throwCandies = function () {
        // We save the old price
        var oldPrice = Saving.loadNumber("wishingWellCurrentCandyWishPrice");

        if (this.getGame().getCandies().getCurrent() >= Saving.loadNumber("wishingWellCurrentCandyWishPrice")) {
            if (this.getGame().getPlayer().getHp() < this.getGame().getPlayer().getMaxHp()) {
                // Pay the price
                this.getGame().getCandies().add(-Saving.loadNumber("wishingWellCurrentCandyWishPrice"));

                // Heal the player
                this.getGame().getPlayer().setHp(this.getGame().getPlayer().getMaxHp());

                // Set the speech
                this.currentSpeech = "wishingWellThrewCandiesSpeech";

                // Set the next price
                Saving.saveNumber("wishingWellCurrentCandyWishPrice", Saving.loadNumber("wishingWellPreviousCandyWishPrice") * 2 + Saving.loadNumber("wishingWellCurrentCandyWishPrice") * 2);
                Saving.saveNumber("wishingWellPreviousCandyWishPrice", oldPrice);
            } else {
                // Set the speech
                this.currentSpeech = "wishingWellNoWoundSpeech";
            }

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    WishingWell.prototype.throwChocolateBar = function () {
        if (this.getGame().getChocolateBars().getCurrent() >= 1) {
            // Pay the price
            this.getGame().getChocolateBars().add(-1);

            if (Saving.loadNumber("wishingWellHowManyChocolateBarsThrown") == 0)
                this.currentSpeech = "wishingWellChocolateBarIntroductionSpeech";
else
                this.currentSpeech = "wishingWellThrewChocolateBarSpeech";

            // Increase the number of chocolate bars thrown
            Saving.saveNumber("wishingWellHowManyChocolateBarsThrown", Saving.loadNumber("wishingWellHowManyChocolateBarsThrown") + 1);

            // We are now enchanting
            Saving.saveBool("wishingWellWeAreEnchanting", true);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    WishingWell.prototype.throwFirstCandy = function () {
        if (this.getGame().getCandies().getCurrent() >= 1) {
            this.getGame().getCandies().add(-1);
            this.currentSpeech = "wishingWellCandyIntroductionSpeech";
            Saving.saveBool("wishingWellFirstCandyThrown", true);
            this.update();
            this.getGame().updatePlace();
        }
    };

    WishingWell.prototype.throwFirstLollipop = function () {
        if (this.getGame().getLollipops().getCurrent() >= 1) {
            this.getGame().getLollipops().add(-1);
            this.currentSpeech = "wishingWellLollipopIntroductionSpeech";
            Saving.saveBool("wishingWellFirstLollipopThrown", true);
            this.update();
            this.getGame().updatePlace();
        }
    };

    WishingWell.prototype.throwLollipops = function () {
        if (this.getGame().getLollipops().getCurrent() >= Saving.loadNumber("wishingWellCurrentLollipopWishPrice")) {
            // Pay the price
            this.getGame().getLollipops().add(-Saving.loadNumber("wishingWellCurrentLollipopWishPrice"));

            // Add the same amount of candies
            this.getGame().getCandies().add(Math.ceil(Saving.loadNumber("wishingWellCurrentLollipopWishPrice") / 2));

            // Set the speech
            this.currentSpeech = "wishingWellThrewLollipopsSpeech";

            // Set the next price
            Saving.saveNumber("wishingWellCurrentLollipopWishPrice", Saving.loadNumber("wishingWellCurrentLollipopWishPrice") * 10);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    WishingWell.prototype.throwPainAuChocolat = function () {
        if (this.getGame().getPainsAuChocolat().getCurrent() >= 1) {
            // Pay the price
            this.getGame().getPainsAuChocolat().add(-1);

            if (Saving.loadNumber("wishingWellHowManyPainsAuChocolatThrown") == 0)
                this.currentSpeech = "wishingWellPainAuChocolatIntroductionSpeech";
else
                this.currentSpeech = "wishingWellThrewPainAuChocolatSpeech";

            // Increase the number of pains au chocolat thrown
            Saving.saveNumber("wishingWellHowManyPainsAuChocolatThrown", Saving.loadNumber("wishingWellHowManyPainsAuChocolatThrown") + 1);

            // We are now pain au chocolating
            Saving.saveBool("wishingWellWeArePainAuChocolating", true);

            // Update
            this.update();
            this.getGame().updatePlace();
        }
    };

    WishingWell.prototype.update = function () {
        // Erase everything
        this.renderArea.resetAllButSize();

        // Back to the map button
        this.addBackToMainMapButton(this.renderArea, "wishingWellBackToTheMapButton");

        // Draw the well
        this.renderArea.drawArray(Database.getAscii("places/wishingWell"), 38, 3);

        if (this.currentSpeech != null) {
            this.renderArea.drawSpeech(Database.getText(this.currentSpeech), 3, 75, 95, "wishingWellSpeech", Database.getTranslatedText(this.currentSpeech));
        }

        // Draw various stuff around it
        this.drawCandiesStuff(0, 4);
        if (this.getGame().getLollipops().getMax() >= 1)
            this.drawLollipopsStuff(0, 9);
        if (this.getGame().getChocolateBars().getMax() >= 1)
            this.drawChocolateBarsStuff(0, 14);
        if (this.getGame().getPainsAuChocolat().getMax() >= 1)
            this.drawPainsAuChocolatStuff(0, 24);
    };
    return WishingWell;
})(Place);
///<reference path="QuestEntity.ts"/>
var Wolf = (function (_super) {
    __extends(Wolf, _super);
    // Constructor
    function Wolf(quest, pos) {
        _super.call(this, quest, pos, new Naming("A wolf", "a wolf"), new RenderArea(7, 3), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(7, 2))), new QuestEntityMovement());

        // At first, we're not taking the decision to begin running
        this.takeTheDecisionToRunTimer = null;

        // Set the area transparency
        this.setTransparency(new RenderTransparency(" "));

        // At first we're looking left and standing
        this.setIsLookingLeft(true);
        this.setIsStanding(true);

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(45);
        this.setHp(45);

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its fangs", "its fangs"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, 0), new Pos(9, 3))), 10));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(2);
    }
    // update()
    Wolf.prototype.update = function () {
        // Calculate the distance from the player
        var distanceFromPlayer = this.getGlobalPosition().plus(new Pos(3, 0)).getDistance(this.getQuest().getGame().getPlayer().getGlobalPosition());

        if (distanceFromPlayer.x > 0) {
            // We're looking left
            this.setIsLookingLeft(true);
        } else {
            // We're looking right
            this.setIsLookingLeft(false);
        }

        if (this.isStanding) {
            if (this.takeTheDecisionToRunTimer == null && this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(this.getRunningSpeed(), 0)))) {
                // We take the decision to run by setting the timer
                this.takeTheDecisionToRunTimer = Random.between(2, 6);
            } else if (this.takeTheDecisionToRunTimer != null) {
                // We decrease the timer
                this.takeTheDecisionToRunTimer -= 1;

                if (this.takeTheDecisionToRunTimer <= 0 && this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(this.getRunningSpeed(), 0)))) {
                    this.setIsStanding(false);
                    this.takeTheDecisionToRunTimer = null;
                }
            }
        } else {
            if (this.testNewGlobalPosition(this.getGlobalPosition().plus(new Pos(this.getRunningSpeed(), 0))) == false) {
                // We stand
                this.setIsStanding(true);
            }
        }

        // Call the mother class update
        _super.prototype.update.call(this);
    };

    // willDie()
    Wolf.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(100 + 50 * Random.upTo(10)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
    };

    // Private methods
    Wolf.prototype.getRunningSpeed = function () {
        return (this.isLookingLeft ? -1 : 1);
    };

    Wolf.prototype.reDrawArea = function () {
        this.getRenderArea().drawArray(Database.getAscii("places/quests/forest/wolf/" + (this.isLookingLeft ? "left" : "right") + (this.isStanding ? "Standing" : "Running")));
    };

    Wolf.prototype.setIsLookingLeft = function (isLookingLeft) {
        if (isLookingLeft != this.isLookingLeft) {
            this.isLookingLeft = isLookingLeft;
            this.updateQuestEntityMovementOffset();
            this.reDrawArea();
        }
    };

    Wolf.prototype.setIsStanding = function (isStanding) {
        if (isStanding != this.isStanding) {
            this.isStanding = isStanding;
            this.updateQuestEntityMovementOffset();
            this.reDrawArea();
        }
    };

    Wolf.prototype.updateQuestEntityMovementOffset = function () {
        if (this.isStanding) {
            // No movement
            this.getQuestEntityMovement().setOffset(new Pos(0, 0));
        } else {
            // Set the movement depending on our orientation
            this.getQuestEntityMovement().setOffset(new Pos(this.getRunningSpeed(), 0));
        }
    };
    return Wolf;
})(QuestEntity);
///<reference path="EqItem.ts"/>
var WoodenSword = (function (_super) {
    __extends(WoodenSword, _super);
    // Constructor
    function WoodenSword() {
        _super.call(this, "eqItemWeaponWoodenSword", "eqItemWeaponWoodenSwordName", "eqItemWeaponWoodenSwordDescription", "eqItems/weapons/woodenSword");
    }
    // Public getters
    WoodenSword.prototype.getQuestEntityWeapon = function (quest, player) {
        var qew = new QuestEntityWeapon(quest, player, new Naming("A wooden sword", "a wooden sword"), player.getClassicCollisionBoxCollection(), 1);
        qew.getCloseCombatDelay().setFixedDelay(4, 0);
        return qew;
    };
    return WoodenSword;
})(EqItem);
///<reference path="GridItem.ts"/>
var XinopherydonClaw = (function (_super) {
    __extends(XinopherydonClaw, _super);
    function XinopherydonClaw() {
        _super.apply(this, arguments);
    }
    XinopherydonClaw.prototype.hit = function (player, quest, questEntity, damage, reason) {
        return damage * 2;
    };
    return XinopherydonClaw;
})(GridItem);
///<reference path="QuestEntity.ts"/>
var Xinopherydon = (function (_super) {
    __extends(Xinopherydon, _super);
    // Constructor
    function Xinopherydon(quest, pos) {
        _super.call(this, quest, pos, new Naming("A xinopherydon", "a xinopherydon"), new RenderArea(17, 6), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 1), new Pos(5, 1)), new CollisionBox(this, new Pos(0, 2), new Pos(9, 1)), new CollisionBox(this, new Pos(12, 2), new Pos(5, 1)), new CollisionBox(this, new Pos(3, 3), new Pos(14, 1)), new CollisionBox(this, new Pos(4, 4), new Pos(5, 1)), new CollisionBox(this, new Pos(10, 4), new Pos(5, 1)), new CollisionBox(this, new Pos(5, 5), new Pos(3, 1)), new CollisionBox(this, new Pos(11, 5), new Pos(3, 1))), new QuestEntityMovement());

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);
        this.getQuestEntityMovement().setWormsLike(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(5000);
        this.setHp(5000);

        // Set the ascii art and the transparent character
        this.getRenderArea().drawArray(Database.getAscii("places/quests/fortress/xinopherydon"));
        this.setTransparency(new RenderTransparency(" "));

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its huge body", "its huge body"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(19, 8))), 800));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(20);
    }
    // update()
    Xinopherydon.prototype.update = function () {
        _super.prototype.update.call(this);

        console.log(this.getHp());

        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x < this.getGlobalPosition().x - 50)
            this.heal(50);
    };

    // willDie()
    Xinopherydon.prototype.willDie = function () {
        // Candies
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(30000), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));

        // The claw
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "gridItemPossessedXinopherydonClaw", "You found a strange claw on the xinopherydon's corpse.", "You gain a strange claw."));
    };
    return Xinopherydon;
})(QuestEntity);
///<reference path="QuestEntity.ts"/>
var YourselfEntity = (function (_super) {
    __extends(YourselfEntity, _super);
    // Constructor
    function YourselfEntity(quest, pos) {
        _super.call(this, quest, pos, new Naming("Yourself", "yourself"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement(new Pos(-1, 0)));

        // Set gravity
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(this.getQuest().getGame().getPlayer().getMaxHp());
        this.setHp(this.getQuest().getGame().getPlayer().getHp());

        // Set the ascii art
        this.getRenderArea().drawString("\\o/");

        // Set the weapon and its delay
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("The same weapon as yours", "the same weapon as yours"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 3))), 0));
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay();
    }
    // setHp()
    YourselfEntity.prototype.setHp = function (hp) {
        if (this.getQuest().getGame().isEquipped("hat", "eqItemHatOctopusKingCrown") == false) {
            // When anyone want to change our hp, we change the player's hp first :)
            this.getQuest().getGame().getPlayer().setHp(hp);
        } else {
            if (hp > 0)
                this.getQuest().getGame().getPlayer().setHp(hp);
else
                this.getQuest().getGame().getPlayer().setHp(1);
        }

        _super.prototype.setHp.call(this, hp);
    };

    // willDie()
    YourselfEntity.prototype.willDie = function () {
        this.getQuest().getGame().getQuestLog().addMessage(new QuestLogMessage(this.getDeathMessage() + " (and found " + Algo.pluralFormat(this.getQuest().foundCandies(Math.floor(this.getQuest().getGame().getCandies().getCurrent() / 10)), " candy", " candies") + ")", this.getQuest().getCandiesFoundMessage()));
        this.getQuest().foundGridOrEqItem(new QuestItemFound(this.getQuest(), "eqItemBootsBootsOfIntrospection", "You found the boots of introspection", "You gain the boots of introspection"));
    };
    return YourselfEntity;
})(QuestEntity);
var YourselfSentence = (function () {
    // Constructor
    function YourselfSentence(quest, text, isGoingRight, y) {
        // Set from parameters
        this.quest = quest;
        this.text = text;
        this.isGoingRight = isGoingRight;

        if (this.isGoingRight)
            this.position = new Pos(-this.text.length, y);
else
            this.position = new Pos(100, y);
    }
    // Public methods
    YourselfSentence.prototype.draw = function (renderArea) {
        renderArea.drawString(this.text, this.quest.getRealQuestPosition().x + this.quest.getGlobalDrawingOffset().x + this.position.x, this.quest.getRealQuestPosition().y + this.quest.getGlobalDrawingOffset().y + this.position.y);
    };

    YourselfSentence.prototype.update = function () {
        if (this.isGoingRight) {
            this.position.x += 1;
            if (this.position.x > 100)
                return true;
        } else {
            this.position.x -= 1;
            if (this.position.x < -this.text.length)
                return true;
        }

        // We don't delete the sentence : we return false
        return false;
    };
    return YourselfSentence;
})();
///<reference path="Quest.ts"/>
var Yourself = (function (_super) {
    __extends(Yourself, _super);
    // Constructor
    function Yourself(game) {
        _super.call(this, game);
        // Sentences flying across the screen
        this.sentences = [];
        // Sentences timer (to avoid having sentences at the very beginning of the quest)
        this.sentencesTimer = 30;

        // Resize the quest
        this.resizeQuest(100, 20);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, true, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 19));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add yourself
        this.addYourself();

        // Add the walls
        this.addWalls();

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You are now fighting yourself."));
    }
    // Public methods
    Yourself.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
    };

    Yourself.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You managed to beat yourself!"));
            Saving.saveBool("mainMapDoneDesert", true);
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died trying to beat yourself."));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    Yourself.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            // Handle sentences
            this.handleSentences();

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.drawEntities();
        this.drawSentences();
        this.drawAroundQuest();
        if (this.getQuestEnded() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeeping");
else if (this.getQuestEndedAndWeWon() == false)
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestNoKeepingBecauseLose");
else
            this.addExitQuestButton(new CallbackCollection(this.getGame().goToMainMap.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    Yourself.prototype.addYourself = function () {
        this.yourself = new YourselfEntity(this, new Pos(96, 19));
        this.yourself.setHealthBar(new QuestEntityHealthBar(this.yourself, new Pos(100, 1), new Pos(0, 0), QuestEntityHealthBarPositionType.FIXED_ON_PAGE, true, true, BarType.HEALTH));
        this.addEntity(this.yourself);
    };

    Yourself.prototype.addWalls = function () {
        // Create the wall entity
        this.addEntity(new Wall(this, new Pos(0, 0)));
        var wall = (this.getLastEntity());

        // Add the boxes
        wall.addBox(new Pos(-1, -1), new Pos(102, 1));
        wall.addBox(new Pos(-1, 0), new Pos(1, 21));
        wall.addBox(new Pos(0, 20), new Pos(101, 1));
        wall.addBox(new Pos(101, 0), new Pos(1, 20));
    };

    Yourself.prototype.drawSentences = function () {
        for (var i = 0; i < this.sentences.length; i++) {
            this.sentences[i].draw(this.getRenderArea());
        }
    };

    Yourself.prototype.handleSentences = function () {
        if (this.sentencesTimer <= 0) {
            if (this.getGame().isEquipped("hat", "eqItemHatOctopusKingCrown") == false) {
                if (this.sentences.length == 0 || Random.oneChanceOutOf(10))
                    this.sentences.push(new YourselfSentence(this, Random.fromArray([
                        "You need to be more self-confident",
                        "You need more confidence!",
                        "My crown is called content, a crown that seldom kings enjoy",
                        "Self-confidence is having confidence in oneself",
                        "The Octopus King helps those who help themselves",
                        "It's hard to beat yourself",
                        "If my head looks like an \"o\", what does my belly look like?",
                        "What does the squirrel do all the day?",
                        "I wonder what is inside the first house",
                        "I guess it's time for me to become a King",
                        "With a crown on your head, you just feel they will never hurt you",
                        "Look at all these flying sentences",
                        "Am I talking to myself?",
                        "There are three shark fins",
                        "Did you look under the carpet?",
                        "Look at this bar above",
                        "Maybe you could change its corners",
                        "Nonsense",
                        "Confidence confidence confidence",
                        "If there be no enemy there's no fight. If no fight, no victory and if no victory there is no crown",
                        "A crown is merely a hat that lets the rain in",
                        "I spent a lot of time with a crown on my head",
                        "Sometime I wish the aliens would abduct me and crown me as their leader",
                        "The crown of life is neither happiness nor annihilation; it is understanding",
                        "Tentacles tentacles tentacles"
                    ]), Random.flipACoin(), Random.between(1, 12)));
            } else {
                if (this.sentences.length == 0 || Random.oneChanceOutOf(20))
                    this.sentences.push(new YourselfSentence(this, Random.fromArray(["You are very self-confident."]), Random.flipACoin(), Random.between(1, 12)));
            }
        } else {
            this.sentencesTimer -= 1;
        }

        for (var i = 0; i < this.sentences.length; i++) {
            if (this.sentences[i].update()) {
                this.sentences.splice(i, 1);
                i--;
            }
        }
    };

    Yourself.prototype.thePlayerWon = function () {
        if (this.yourself.shouldDie())
            return true;

        // Else we return false
        return false;
    };
    return Yourself;
})(Quest);
Database.addAscii("maps/map", 208, 88, [
    "                                                                                    ~                                                                                                           ~",
    "              ~                                                                                                                                       ~",
    "                                                                       ~",
    "                                                  ~",
    "                         ~                                                                                                                                            ~",
    "                                                                                                          ~",
    "",
    "                                         ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨                                ~       ~                                ~                                                                   ~",
    "                                         ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨      ~                                                 ~",
    "                                        |¨ ¨ ¨ ¨ ¨ ¨ ¨ /                     ~                                                                      ~                              ~",
    "                             ~          |¨ ¨ ¨ ¨ ¨ ¨ /                                                  ___                             ~                      ~",
    "      ~                                 |¨ ¨ ¨ ¨ ¨ /         ~                       ~     ~          /^_ \\        ~",
    "                                        |¨ ¨ ¨ ¨ /                 ~                                /^( \\/              ~                                ~              ~",
    "                                        |¨ ¨ ¨ /                                           ______ / ^/______                                 ~",
    "                          ~             |¨ ¨ /                                        ___/      | ^ |      \\_____                     ~",
    "                                       ___/      ~                    ~        ____/    ______| ^ |______    \\_\\________    ~                                   ~",
    "                                 ~     |8|                                    / _/  ___/     /  ^  \\     \\___  \\_       \\",
    "              ~                       /___\\                                  / /  _/     I>  |, ^ ,|    I>   \\_  \\       \\___                    ~                                 ~",
    "                                      |   |                          ~      / / _/      /\\   /|\\_/|\\   /\\      \\_ \\          \\                       ~",
    "                                      |III|               ~              __/ | /       /__\\ | (Q P) | /__\\       \\ |          \\____      ~                               ~",
    "                            ~         |   |    ~                        /    |/        |**| // \\_/ \\\\ |**|        \\|   ¨            \\",
    "                                      |III|                        ____/     |         |[]|\"VV\"\"\"\"\"VV\"|[]|         |                \\          ~       ______________                              ~",
    "                                      |   |                       /          |\\        |[]|--{}-_-{}--|[]|        /|                 |                (         _    ´'\\",
    "                                 ~    |III|                 _____/           | \\_      |__|----| |----|__|      _/ |           ¨       ´'\\ ~    _______| 888    / \\      ´'\\",
    "                                     _|___|        ~       (                  \\  \\_    '  '    ___    '  '    _/  /            ____     |     /        88888   |-| 888    :    ~",
    "                         ~          ( /|||\\\\               |       ¨            \\_  \\___       (:::)       ___/  _/            /   /     |    |    ¨    8888888     88888   |",
    "                                    /       \\________      |                     \\_    \\______|:::|______/    _/      ¨        \\__/      |    |   888    | |      8888888  |",
    "   ~                               /                 \\_    |               ¨        \\___       |   |       ___/                          |  ~ |  88888   | |  888   | |    |               ~",
    "                                  /                    \\   |                           \\______|   |______/                   ___        :    : 8888888      88888  | | ¨   |",
    "                                 (_       ____          |  |   ¨               ¨                                  ¨          __/   \\_______)   /    | |   ¨    8888888         ´'\\     ~",
    "              ~               ~    \\_   __)  (__   _    |  |       88                                                   _/    ~             ) ¨   | |       _ | |      888     :                                ~",
    "                                     \\_/        |#| \\__/   | 88   8888              ¨                 ¨                 _/                 ~ /              / \\| |     88888    |",
    "                                                           |8888   ||  88   88   88                           ¨       /  ~            ~    /   888      ¨   |+|       8888888   |",
    "                                             <|       ~    : || 88    8888 8888 8888         88    88               |        ~           /   88888        |_|         | |     |   ~",
    "                                         ~  __|_ _        /88  8888    || 88||   || 88   88 8888  8888          88  |              ,----'   8888888      /| |\\        | |     |",
    "                           ~                \\__/|#|      /8888  ||  88   8888  88  8888 8888 || 88 ||  88      8888 |             (           | |        ||0||    _    _      |",
    "                                         .______|#|_____/  ||88    8888   ||  8888  ||   ||    8888   8888  88  ||  :   ~          |          | |    ¨         _  / \\  / \\  ¨   |      ~               ~",
    "                      ~            ~    /                   8888    ||     88  ||  88   88   88 ||  88 ||  8888   ^/           ~   |   ¨                    _ / \\ |-| _|-|_    |",
    "                                       /  ¨                   ||   88   88 8888    8888 8888 8888   8888 88  ||   /_\\               )                   _  / \\|-| / \\/ \\ / \\   |",
    "                                      /                          8888 8888 ||   88 ||   ||   ||  88 || 8888  ^  /^  \\ ^^  ~    ^^ /        ¨      ¨     / \\ |-| / \\|-||-| |-|   :",
    "      ~                     ~        /            ¨                ||   ||      8888     88   88 8888 88 ||  / \\^/ \\  ^^^^_____^^^^   ¨                 |-| / \\ |-|/ \\ / \\     /",
    "                                    /                     ¨                 88   ||  88 8888 8888 || 8888   ^  /_\\  \\ |  |_____|  |                        |-| / \\|-| |-|    /              ~",
    "                   ~               /        ¨                              8888 88  8888 ||   ||    ^ ||^  /_\\/   \\  \\|  |_____|  |    //^\\\\    (\\     ¨        |-|          /",
    "                                  :                                        || 8888  ||    88     ^/ \\ ^ \\/   \\    \\  |__|_|=|_|__|      #      | \\        ¨           ¨     /",
    "                                  |                 ¨                 ¨          || 88     8888 ^ / \\ ^/ \\ \\    \\                         #      |  '----------------------'     ~",
    "                                  |                                              8888   ^ || / \\   /_\\  \\ \\       //^\\\\                 #      |",
    "                               ~  |      ¨                     ¨                    || ^ / \\^ / ^ \\ /   \\  \\          #                          |",
    "                  ~               |                                      ¨           /_\\  /_\\ / \\ /     \\      ¨      #   /\\/\\_P                 |   ~",
    "                                  |  ¨         ^     ^  ^                        ^  /   ^/   \\   \\                   #  `||||          Q_/\\/\\   |",
    "                          ~       |          /_\\   /_\\/_\\ ^  ^  ^      ^    ^  /_\\/   /_\\    \\   \\                                      ||||`  :          ~        ~                           ~",
    "                                  |      ¨   /   \\^/   ^  /_\\/_\\/_\\ ^  /_\\  /_\\/   \\  /   \\                 ¨                     //^\\\\         /",
    "                                  :        / ^  / ^  /_\\/ ^/   ^  /_\\/   ^/   \\    \\/     \\         ¨                Q_/\\/\\        #          /",
    "    ~                             \\         /_\\/ ^ \\/ ^ \\/ ^  /_\\/   \\  /_\\    \\                                      ||||`       #         /     ~",
    "                      ~            :______ / ^ \\/ ^ \\/_\\/ ^ \\/ ^ \\    \\/   \\              ¨                                        #        /",
    "                                ~         ) /_\\/ /_\\/ ^ \\/_\\ \\/_\\ \\   /     \\                    ¨             ¨            ,---------------'    ~                ~                   ~",
    "                                          :/   \\/   \\/_\\/   \\/   \\               ¨                                        (_______",
    "                                          \\    /    /   \\    \\    \\                                                      ________´'\\",
    "                           ~               \\       /|[O]|\\                               ¨                        ¨       /________\\  :   ~",
    "                                            \\                    ¨                                                       |__[ ]___|   \\             ~",
    "             ~                      ~        \\                              ¨         __________        ¨                  .________.   ´'\\                     ~",
    "                                              :                             ________/          ´'\\________              :'´'´'´'´:      :   ~",
    "                                ~             |                            /                       !-! ~  ´'\\       \\ /  :'´'´'´'´:      |                                                 ~",
    "                          ~                   |     ¨                     _/  ~                    !-!     \\     --O-- :'´'´'´'´:      |              ~",
    "   ~                                          |                  ¨      _/                         !-!        \\   / \\  :'´'´'´'´:      |",
    "                                              :                     __/          ~         ~       !-!           |  |_|  :'´'´'´'´:      :      ~                      ~",
    "                                        ~     \\         _          (                               !-!      ~    |  |_|  :'´'´'´'´:   __/          ~",
    "                              ~                \\       (O)         |                        _______!-!           |  / \\  :'´'´'´'´:  /   ~",
    "                                                \\       ¨           |    ~                  |    _    |   ~       |       :________: /                                        ~",
    "                                                 \\                /                ~      /    /&\\    \\           ´'\\              /",
    "      ~                                 ~         '--------------'                       '--.  |В¤|    .'             '------------'         ~",
    "                          ~                                               ~                  \\_______/",
    "                                                         ~                                                   ~                    ~                    ~",
    "                                               ~                                        ~                                 ~                                        ~",
    "                                   ~",
    "                                                                    ~                                                                 ~",
    "                                                                                                           ~                                                                             ~",
    "                                                                                     ~                                                             ~        ~",
    "        ~                   ~               ~             ~",
    "                                                                                                                             ~",
    "",
    "",
    "                                                                                    ~",
    "                                  ~",
    "                                                                                                                                                     ~",
    "                ~                                          ~                                                       ~",
    "",
    "                                          ~",
    ""
]);
Database.addAscii("arena/peacefulForest/logo", 16, 4, [
    " ||| \\o/|||  |||",
    "",
    "   The peaceful",
    "      forest"
]);
Database.addAscii("arena/hardcorePlatformer/logo", 18, 4, [
    " HARDCORE",
    "     PLATFORMER",
    "",
    "_/\\/\\__\\o/____/\\/\\"
]);
Database.addAscii("arena/hardcorePlatformer/background", 240, 12, [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________",
    "",
    " Good luck!                                                                     That wasn't so hard, was it?                                      Wow. Good job. But now it's going to be serious.                                       Yay!!",
    "________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________"
]);
Database.addAscii("players/mediumSqueezedBerserk", 6, 3, [
    "  ..",
    "\\(OO)/",
    "  \"\""
]);
Database.addAscii("players/mediumTurtleBerserk", 11, 4, [
    "",
    "  .---.  _",
    " /     \\/O)",
    "'uu---uu'¨ "
]);
Database.addAscii("players/mediumTurtle", 11, 4, [
    "",
    "  .---.  _",
    " /     \\/_)",
    "'uu---uu'"
]);
Database.addAscii("players/mediumSqueezedTurtle", 6, 3, [
    " ..",
    "/  \\/)",
    "uuuu'"
]);
Database.addAscii("players/mediumSqueezedTurtleBerserk", 6, 3, [
    " ..",
    "/  \\/O",
    "uuuu'"
]);
Database.addAscii("players/medium", 11, 4, [
    "\\         /",
    " \\  .-.  /",
    "  \\(%%%)/",
    "    '-'"
]);
Database.addAscii("players/mediumBerserk", 11, 4, [
    "\\         /",
    " \\  .-.  /",
    "  \\(O%O)/",
    "    '-'"
]);
Database.addAscii("players/mediumSqueezed", 6, 3, [
    "  ..",
    "\\(%%)/",
    "  \"\""
]);
Database.addAscii("places/pier", 75, 23, [
    "                   ___                             ~",
    "  ~               /   \\                                                   ~",
    "          ~       |   |   ~",
    "                 /|   |                   ~                          ~",
    "                / |   |                               ~",
    "               /  |   |         ~",
    "    ~         /   |   |                                      ~",
    "             /    |   |",
    "            /     |   |  ~                  ~       ________________",
    " ~       ~ /      |   |             ~              /---------------/|",
    "          /       |   |      ~                    /---------------/||  ~",
    "    ~    /        |   | ~              ~      ~  /---------------/|/",
    "~       /_________|   |          ~              /---------------/|/|~",
    "     ~    _.------|   |------._                /---------------/|/||",
    "  ~   _.-'_.------|   |------._'-._     ~     /---------------/|/|||    ~",
    "   .-'.-'         |   |         '-.'-.       /---------------/|/~|||",
    "~  '-.__          |   |          __.-'   ~  /---------------/|/  ||/",
    "    \\   '---.__   |   |   __.---'   /~     /---------------/|/       ~",
    " ~   \\         '---------'         /  ~   /---------------/|/  ~",
    "      \\                           /      /---------------/|/            ~",
    "    ~  '----._______________.----' ~    /---------------/|/        ~",
    "          ~     ~      ~    ~          /---------------/|/  ~",
    "______________________________________/---------------/_/__________________"
]);
Database.addAscii("places/dragonFoot", 161, 25, [
    "                                                                                                                         .'                          '.",
    "                                                                                                                         '                            '",
    "                                                                                                                        .'                            '.",
    "                                                                                                                        '                              '",
    "                                                                                                                       .'                              '.",
    "                                                                                                                       '                                '",
    "                                                                                                                      .'                                '.",
    "                                                                                                                      /                                  \\",
    "                                                                                                                     /                                    \\",
    "                                                                                                                    .'                                    '.",
    "                                                                                                                   .'                                      '.",
    "                                                                                                                 _-'                                        '.",
    "                                                                                                ____....----''_''              __.-'                          '.",
    "                                                                                   ___...---''''    __..--''''          _..--''                                 '",
    "                                                                          __..--'''       ___...---'              _..--'                                        \\",
    "                                                                   _..--''         _..--''                    _.-'                                              |",
    "                                                                 .'              .'                         .'                                                  |",
    "___                                                             '               '                          '                                                    |",
    "  |___                                                         /               /                          /                                                  __/",
    "     |___                                                      '               '                          '                         _____.....------'''''''''",
    "         |___                                                 /               /                          /                 __...--''",
    "            |___                                              '               '                ___...---''          _..--''",
    "               |___                                           |          ___..|       __..--'''          |    _..--'",
    "__________________|___                                         \\_..---'''     \\_..--''                   \\_.-'",
    ""
]);
Database.addAscii("places/lonelyHouse", 97, 35, [
    "  /        |                                                                         |        \\",
    " /         |                                                                         |         \\",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |_________________________________________________________________________|          |",
    "|         /                                                                           \\         |",
    "|        /                                                                             \\        |",
    "|       /                                                                               \\       |",
    "|      /                                                                                 \\      |",
    "|     /                                                                                   \\     |",
    "|    /                                                                                     \\    |",
    "|   /                                                                                       \\   |",
    "|  /                                                                                         \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/outsideTheHole", 100, 21, [
    "                                           ¨                            ¨ ",
    "                  ¨                ¨                             ¨                      ¨          ¨ ",
    "        ¨                  ¨                           ¨                       ¨ ",
    "                                           ________        _______                          ¨ ",
    "  ¨                                        /|       \\______/      /                ¨ ",
    "               ¨                 ¨         / |       |      |    _/     ¨ ",
    "                        ¨                /  |       |      |   /                                  ¨ ",
    "                                       /   |       |      |   \\   ¨                        ¨ ",
    "      ¨                         ¨       /    |       |      |   /          ¨ ",
    "                                     /     |       |      |  /                      ¨ ",
    "                           ¨          \\     |       |      | /  ¨                                    ¨ ",
    "                  ¨                    \\    |       |      |/",
    "         ¨                              \\__ |       |      /            ¨                   ¨ ",
    "                             ¨             \\|       |     /         ¨ ",
    "                                   ¨        \\       |    /                     ¨ ",
    "    ¨              ¨                          \\______|___/    ¨                                 ¨ ",
    "                             ¨ ",
    "           ¨                                          ¨                                 ¨ ",
    "                                          ¨                       ¨ ",
    "                     ¨                             ¨                                             ¨ ",
    "    ¨                           ¨                                             ¨ "
]);
Database.addAscii("places/wishingWell", 37, 30, [
    "       _______________________",
    "     /|                       |\\",
    "    //|_______________________|\\\\",
    "   ///                         \\\\\\",
    "  ///                           \\\\\\",
    " ///                             \\\\\\",
    "///                               \\\\\\",
    "|/_________________________________\\|",
    "    ||                         ||",
    "    ||                         ||",
    "    ||                         ||",
    "    ||                         ||",
    "    ||                         ||",
    "    ||    _________________    ||",
    "    || .-' _______________ '-. ||",
    "    ||' .-'  |    |    |  '-. '||",
    "    || /|    |    |    |    |\\ ||",
    "   (||( |    |    |    |    | )||)",
    "   |\\  \\|    |    |    |    |/  /|",
    "   | \\  '-.  |    |    |  .-'  / |",
    "   | |'.   '-------------'   .'| |",
    "   |\\| |'-._______________.-'| |/|",
    "   | \\ | | | | | | | | | | | | / |",
    "   | |'. | | | | | | | | | | .'| |",
    "   |\\| |'-._______________.-'| |/|",
    "   | \\ | | | | | | | | | | | | / |",
    "    \\|'. | | | | | | | | | | .'|/",
    "     \\ |'-._______________.-'| /",
    "      '. | | | | | | | | | | .'",
    "        '-._______________.-'"
]);
Database.addAscii("places/treasure", 43, 25, [
    "                    888888        |",
    "    ¨                888888        |",
    "                  8888888888   ¨   |",
    "                  8888888888      |",
    "                88888888888888    |",
    "         ¨       88888888888888    |",
    "                    |    |        |",
    "        888888      |    |        |",
    "        888888      |    |    ¨    |",
    "   ¨   8888888888    |    |        |",
    "      8888888888    |    |        |_",
    "    88888888888888                  '-.__",
    "    88888888888888                       \\",
    "        |    |            888888          |",
    "        |    |    ¨        888888          |",
    "     ¨   |    |          8888888888        |",
    "        |    |          8888888888      ¨  |",
    "        |    |        88888888888888      |",
    "                      88888888888888      |",
    "                          |    |          |",
    "                  ¨        |    |          |",
    "                          |    |          |",
    "                          |    |          |",
    "                          |    |          |",
    ""
]);
Database.addAscii("places/mountains", 138, 19, [
    "                                    /\\                                              /\\",
    "                                   // \\     _      /\\                              /  \\     _      /\\",
    "                      /\\_        _//   \\   / \\/\\ _/  \\    /\\         /\\_        __/   \\\\   / \\/\\ _/  \\    /\\",
    "                    _/   \\/\\_  _/ /   \\ \\_/   \\_/     \\__/ _\\      _/   \\/\\_  _/ /      \\_/   \\_/     \\__/ _\\",
    "                   /        `\\/   \\_   \\ \\_    / //    /    \\\\    /        `\\/   \\_   \\  \\_    / //    /    \\\\",
    "                  //     \\    \\_  / \\      \\  / _     /  /    \\  //     \\    \\_  / \\      \\   / _     /  /    \\",
    "                 //       \\     |/                             \\//       \\     |/                              \\",
    "       /\\       /                          \\             _      \\                                    /\\         \\",
    "    __/ -\\     /                                        /¨ \\      \\_             _                   // \\     _   \\  /\\",
    "___//    \\\\   /     /         /                    ____/   \\_____/¨ \\__         /¨ \\     /\\_        _//  \\\\   / \\/\\\\\\/  \\    /\\",
    "/     /    \\ /     /         /                    /¨ ¨ ¨ ¨      ¨ ¨ ¨ ¨ ¨    ¨ ¨ \\       /   \\  _/   \\/\\_  _/ /     \\_/   \\_//    \\__/ _\\",
    "            /               /               _____/                     \\_____/     \\/        `\\/   \\_  \\  \\_    / //    /    \\\\",
    "           /                         ______/¨ ¨ ¨ ¨ ¨                        ¨ ¨ ¨ ¨ ¨        \\                                          \\",
    "          /                         /¨ ¨ ¨ ¨ ¨ ¨                                           \\_____                                     \\",
    "         /                        _/                                                  ¨ ¨ ¨ ¨ ¨ \\                                     \\",
    "        /        _____           /¨                                                          \\                            ______   \\",
    "       /   _____/¨ ¨ ¨ ¨ ¨ \\_________/                                                            \\_________              ___/¨ ¨ ¨ ¨ ¨ ¨ \\___\\______",
    "______/___/¨ ¨ ¨ ¨ ¨        ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨                                                               ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ \\____    ____/¨ ¨ ¨         ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨                                                                                               ¨ ¨ ¨ ¨ \\__/¨ ¨ ¨ ¨ "
]);
Database.addAscii("places/theCave/exit", 58, 31, [
    "",
    "",
    "",
    "",
    "",
    "",
    "       ____________________________________________",
    "     /|                                            |\\",
    "    / |                                            | \\",
    "   /  |                                            |  \\",
    "  /   |                     __/\\_                  |   \\",
    " /    |                 ___/     \\                 |    \\",
    "/     |                /      ¨    \\                |     \\",
    "      |              _/            \\               |",
    "      |             /     ¨         /               |",
    "      |            /            ¨  /                |",
    "      |           /  ¨             |                |",
    "      |          /                |                |",
    "      |          \\                |                |",
    "      |           \\        ¨       \\                |",
    "      |           /   ¨             \\               |",
    "      |       ___/                  \\__            |",
    "      |      /                         \\___        |",
    "      |   __/                              \\____   |",
    "      |__/                                      \\__|",
    "     /                                              \\",
    "    /                                                \\",
    "   /                                                  \\",
    "  /                                                    \\",
    " /                                                      \\",
    "/                                                        \\"
]);
Database.addAscii("places/theCave/octopusKing", 37, 19, [
    "                                /\\",
    "             |\\/\\_/\\/|         :%%:",
    " /\\          |%.%:%.%|         |%%|",
    "//\\\\      _.-'ВЇВЇВЇВЇВЇВЇВЇ'-._      |%%|",
    "\\\\//    /ВЇ%%%%%%%%%%%%%%%ВЇ\\    |%%|",
    " XX    /%%%%%._%%%%%_.%%%%%\\   |%%|",
    " ||   |%%%%%/-_'%%%'_-\\%%%%%|  |%%|",
    " ||   |%%%%%\\_/%%%%%\\_/%%%%%|  |%%|",
    " ||   |%%%%%%%%%%%%%%%%%%%%%|  |/\\|",
    " ||    \\%%%%%%WWWWWWW%%%%%%/   ||||",
    " ||     \\%%%%%%%%%%%%%%%%%/  ()=TT=()",
    "(ВЇВЇВЇ\\    |%%%%%%%_%%%%%%%|    /ВЇВЇВЇ)",
    " TT\\%\\  /%/%/%/%/ \\%\\%\\%\\%\\  /%/TT",
    " || \\%\\/%/%/%/%/   \\%\\%\\%\\%\\/%/ ||",
    " ||  \\__/%/%/%(     )%\\%\\%\\__/ (oo)",
    " ||     (%(%(%(     )%)%)%)",
    " ||     (%(%(%(     )%)%)%)",
    " ||     (%(%(%(     )%)%)%)",
    " ||     (o(o(o(     )o)o)o)"
]);
Database.addAscii("places/theCave/heartPlug", 7, 2, [
    "|__|__|",
    "|_____|"
]);
Database.addAscii("places/theCave/monkeyWizard", 38, 20, [
    "                              .  .  .",
    "              v              /%\\/%\\/%\\",
    "          _ .~В°~. _          \\_%%%%%_/",
    "         \\_(%u%u%)_/           \\_%_/",
    "        _.-%\\%v%/%-._           |%|",
    "    .'В°В°%%%_(%_%)_%%%В°В°'.       |%|",
    "   {_____%/._\\v/_.\\%_____}      |%|",
    "  .'%%%%%%%%%%В°%%%%%%%%%%'   _-o|%|o",
    " .'%%%.~%%_o%)%(%o_%%~.%%%'~'%%.|%|O",
    ".'%%'   \\%%%%%%%%%%%/  '-%_.-' '|%|o",
    "(%%(    |%%%%%%%%%%%|           |%|",
    "\\%%\\    /%%%%%~%%%%%\\           |%|",
    " \\%'.  .%%%%%%_%%%%%%.          |%|",
    "  \\%.В°'%%%%_-' '-_%%%%'         |%|",
    "  (_o/%%%/         \\%%%\\        |%|",
    "     (%%(           )%%)        |_|",
    "      \\%%\\         /%%/         (%)",
    "      _-'%|       |%'-_        _/%\\_",
    "     (oOo.)       (.oOo)      /_____\\",
    ""
]);
Database.addAscii("places/theCave/chocolateBar", 17, 3, [
    " _______________",
    "/__/__/__/__/__/|",
    "|__|__|__|__|__|/"
]);
Database.addAscii("places/theCave/treasureMap", 20, 8, [
    "        ooo    o",
    "       ooooo   o",
    "      ooooooo  o",
    "  ooo   o o    o",
    " ooooo  o o    o",
    "ooooooo  X      ooo",
    "  o o              o",
    "  o o"
]);
Database.addAscii("places/theCave/ways", 58, 32, [
    "                        \\        /",
    "",
    "",
    "",
    "         _/|",
    "        /  |                                   /\\",
    "      _/____\\           /        \\            /__\\_",
    "     /______/          /          \\           |    \\",
    "    /      |          /            \\          |     |",
    "    \\      |         /              \\         \\     \\",
    "    /______/        /                \\         \\_____\\",
    "   /_______\\       /                  \\        /     /",
    "  |        /      /                    \\       |     \\",
    "   \\______/      /                      \\      \\______\\",
    "   /      \\     /                        \\     /      /",
    "   \\       \\   /                          \\   /______/",
    "   /       |  /                            \\  \\______\\",
    "   \\       | /                              \\ /      /",
    "   /_______|/                                \\|______|",
    "  /                                                  |",
    "  \\                                                  |",
    "   \\                                                 \\",
    "    \\                                                /",
    "    /                                               /",
    "   /                                                \\",
    "   \\                                                 |",
    "    |                                                /",
    "   /                                                  \\",
    "  /                                                    \\",
    " /                                                      \\",
    "/                                                        \\",
    ""
]);
Database.addAscii("places/lighthouse/lighthouse", 100, 48, [
    "",
    "",
    "                                                                ___",
    "                                                               {=0=}",
    "                                                               /---\\",
    "                                                           ___/_____\\___",
    "                                                           |[         ]|",
    "                                                           |[         ]|",
    "                                                        :  |+++++++++++|  :",
    "                                                        :__|+++++++++++|__:",
    "                                                             |#######|",
    "                                                             |#######|",
    "                                                             |#######|",
    "                                                            |         |",
    "                                                            |         |",
    "                                                            |         |",
    "                                                           |###########|",
    "                                                           |###########|",
    "                                                           |###########|",
    "                                                          |             |",
    "                                                          |             |",
    "                                                          |             |",
    "                                                         |###############|",
    "                                                         |###############|",
    "                                                         |###############|",
    "                                                        |                 |",
    "                                                        |                 |   __",
    "                                                        |                 |  ( o)",
    "                                                       |###################| /||",
    "                                                       |###################|( ||",
    "                                                  _____|###################|_\\_m\\",
    "                                                 /                             |\\\\_",
    "                                   _____________/                    --        | '-'",
    "                       ___________/                                            |",
    "                     _|                                                        |",
    "                   _|     ----                      -----                      |",
    "                 _|                                                             \\",
    "               _|                                                  ---           |",
    "             _|                                                                  |",
    "           _|                       ---                                          |",
    "__________|                                                                       \\",
    "                                                                                   |",
    " ---                                                          --                   |",
    "                                                                                   |",
    "                                       ----                                        |",
    "                   --                                                       ---    |",
    "                                                                                   | _      _      _",
    "                                                                                   \\)`'-.,_)`'-.,_)`"
]);
Database.addAscii("places/lighthouse/puzzle/showBelow", 7, 5, [
    "_______",
    "\\     /",
    "/  V  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/stonePart", 7, 5, [
    "_______",
    "\\ ___ /",
    "// P \\\\",
    "\\\\___//",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/moveBelowLineToTheRight", 7, 5, [
    "_______",
    "\\     /",
    "/  V  \\",
    "\\ --> /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showLeft", 7, 5, [
    "_______",
    "\\     /",
    "/  <  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/nothingHerePart", 7, 5, [
    "_______",
    "\\ no  /",
    "/thing\\",
    "\\here!/",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showRight", 7, 5, [
    "_______",
    "\\     /",
    "/  >  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/blankPart", 7, 5, [
    "_______",
    "\\     /",
    "/     \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/whatPart", 7, 5, [
    "_______",
    "\\     /",
    "/ ? ? \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/livesPart", 7, 5, [
    "_______",
    "\\     /",
    "/ <3  \\",
    "\\  <3 /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showAbove", 7, 5, [
    "_______",
    "\\     /",
    "/  T  \\",
    "\\     /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showAroundPart", 7, 5, [
    "_______",
    "\\     /",
    "/ T > \\",
    "\\ V < /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/showLeftRight", 7, 5, [
    "_______",
    "\\     /",
    "/  >  \\",
    "\\  <  /",
    "/_____\\"
]);
Database.addAscii("places/lighthouse/puzzle/moveLeftLineAbove", 7, 5, [
    "_______",
    "\\     /",
    "/ < T \\",
    "\\   | /",
    "/_____\\"
]);
Database.addAscii("places/village/fifthHouse", 97, 35, [
    "  /        |      _______________________                                            |        \\",
    " /         |     (______________________ )                                           |         \\",
    "|          |     ||            _^_      ||                                           |          |",
    "|          |     ||         .-'|_|'-.   ||                                           |          |",
    "|          |     ||        /   ___   \\  ||                                           |          |",
    "|          |     ||       /|  |=|=|  |\\ ||                                           |          |",
    "|          |     ||--|--|--|  |-|-|  |  ||                                           |          |",
    "|          |     ||--|--|--|  |=|=|  |  ||                                           |          |",
    "|          |     ||^^^^^^^^^^^^^^^^^^^^^||                   __  _          _   _    | |\\       |",
    "|          |     ||_____________________||                  /   |_ |   |   |_| |_)   | | \\      |",
    "|          |     (_______________________)                  \\__ |_ |__ |__ | | | \\   | |  \\     |",
    "|          |                                      ####      _______________________  | |  |\\    |",
    "|          |                                    ########    |  _________________  |  | |  ||\\   |",
    "|          |                                    ##I  I##    | /                 \\ |  | |\\ || \\  |",
    "|          |                                    ##\\ S/##    | |                 | |  | |\\\\|| |  |",
    "|          |                                     #|  |#     | |                 | |  | | \\ | |  |",
    "|          |                                   .-'\\__/'-.   | |                /| |  | |  | \\|  |",
    "|          |    ()         ()                 |          |  | |               / | |  | |  ||\\|  |",
    "|          |    ||         ||                 | ||    || |  | |              /  | |  | \\  || |  |",
    "|          |    ||_________||                 | ||    || |  | |             /   | |  |  \\ || |  |",
    "|          |    |  ______   |   ____          | ||    || |  | |____________/    | |  |   \\|| |  |",
    "|          |    |_(      )__|  /    \\         |_||____||_|  | |            |    | |  |    \\| |  |",
    "|          |    /  '----'  /| /______\\        | ||_[]_|| |  | |            |    | |  |     \\ |  |",
    "|          |   /          / | | ____ |        MM |    | MM  | |            |    | |  |      \\|  |",
    "|          |__/          /  |_||  o ||___________| || |_____| |            |    | |__|          |",
    "|         () /      ()  /  /  ||____||           | || |      \\|            |    | |\\  \\         |",
    "|        /||/       || /  /   |______|           | || |       \\            |   /| | \\  \\        |",
    "|       / ||________||/  /                       |_||_|        \\           |  / | |  \\  \\       |",
    "|      /  |          |  /                       _| || |_        \\---------------------\\  \\      |",
    "|     /   |          | /                       (___||___)                                 \\     |",
    "|    /    |__________|/                                                                    \\    |",
    "|   /                                                                                       \\   |",
    "|  /                                                                                         \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/thirdHouse", 91, 35, [
    "  /        |                                                                   |        \\",
    " /         |                                                                   |         \\",
    "|          |                                                                   |          |",
    "|          |                                                                   |          |",
    "|          |                                                                   |          |",
    "|          |       _____________________________________________________       |          |",
    "|          |      /_____________________________________________________\\      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |                                                     |      |          |",
    "|          |      |_____________________________________________________|      |          |",
    "|          |     /            __                          ____           \\     |          |",
    "|          |    /            |UP|   __________________   |DOWN|           \\    |          |",
    "|          |   /             ¨ ¨ ¨ ¨   (__________________)  ¨ ¨ ¨ ¨ ¨ ¨             \\   |          |",
    "|          |  /_____________________________________________________________\\  |          |",
    "|          |__|          ____       ____ _____ _____ ___  (_)___  ____ _    |__|          |",
    "|         /   |   10 -> (____)     / __ `/ __ `/ __ `__ \\/ / __ \\/ __ `/    |   \\         |",
    "|        /    |          ____     / /_/ / /_/ / / / / / / / / / / /_/ /     |    \\        |",
    "|       /     | 1000 -> (____)    \\__, /\\__,_/_/ /_/ /_/_/_/ /_/\\__, /      |     \\       |",
    "|      /      |                  /____/                        /____/       |      \\      |",
    "|     /       |_____________________________________________________________|       \\     |",
    "|    /                                                                               \\    |",
    "|   /                                                                                 \\   |",
    "|  /                                                                                   \\  |",
    "| /                                                                                     \\ |",
    "|/_______________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/fourthHouseNoLollipopOnCupboard", 17, 3, [
    "  ______________",
    " /             /|",
    "/____________ / |"
]);
Database.addAscii("places/village/fourthHouseLollipopUnderCarpet", 4, 1, [
    "---o"
]);
Database.addAscii("places/village/village", 102, 47, [
    "                                                 /\\",
    "                                                /\"\"\\",
    "                                               /\"\"\"\"\\",
    "         888888                               /______\\                    8888",
    "      88888888888                            /|| /\\ ||\\                 88888888",
    "    888888888888888                           ||/__\\||                888888888888",
    " 888888888888888888888                        ||  ' ||                    | ||",
    "         |   |                                ||____||                    |  |",
    "         | | |                               /\"\"\"\"\"\"\"\"\\                   || |",
    "         |  ||                              /\"\"\"\"\"\"\"\"\"\"\\                  || |",
    "         ||  |                             /\"\"\"\"(__)\"\"\"\"\\                '    '",
    "         ||  |               ¨             /\"\"\"\"\"\"||\"\"\"\"\"\"\\",
    "         |  ||                       ¨     |      ||      |",
    "        /     \\                           |______________|    ¨           ¨                ¨ ",
    "                      ¨                   /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\\",
    "                                        /|                |\\                       ¨ ",
    "     ¨                         ¨         / |  /\\        /\\  | \\    ¨                       ¨ ",
    "              ¨                           | |::|      |::| |               ¨ ",
    "                                         | |::| ____ |::| |   ¨ ",
    "                       ¨          ¨        | |__||    ||__| |           ¨            ¨        ¨ ",
    "                    ______               |     | .. |     |",
    "              ¨     /------\\              |_____|____|_____|",
    "                  /________\\           ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ||¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "                 /|        |\\                    ||",
    "    ____||_       | []  [] |      ____          |  |           _| |___         _||____       ______",
    "   /-------\\      |        |     /----\\         |  |          /-| |---\\       /-------\\     /------\\",
    "  /_________\\     |  SHOP  |    /  []  \\       |    |        /_________\\     /_________\\   /________\\",
    " /| []  ___ |\\    |  ___   |   /|  ___ |\\   ___|    |___    /|-|-|-|-|-|\\   /|     ___ |\\ /|  ___   |\\",
    "  |     |,| |     |  |,|   |    |  |,| |   /            \\    |-|-|-[,]-|     | []  |,| |   |  |,|[] |",
    "__|_____|_|_|_____|__|_|___|____|__| |_|__/              \\___|_|_|_[_]_|_____|_____|_|_|___|__| |___|_",
    "                                                .--.",
    "                                               ( ~  )",
    "      _________       _||____      ____         '--'       _________       ___||__       _____",
    "_____/---------\\_____/-||----\\____/----\\____            __/---------\\_____/---||--\\_____/-----\\_______",
    "    /___________\\   /_________\\  /______\\   \\__      __/ /___________\\   /_________\\   /_______\\",
    "   /|           |\\ /|         |\\/|      |\\     |    |   /|           |\\ /|         |\\ /|       |\\",
    "    |           |   |         |  |      |      |    |    |           |   |         |   |       |",
    "    |___________|   |_________|  |______|      |    |    |___________|   |_________|   |_______|",
    "                                               |    |",
    "                                               |    |",
    "     _________        _______       ____       |    |     _||______       _______         _||__",
    "    /---------\\      /-------\\     /----\\      |    |    /-||------\\     /-------\\       /-||--\\",
    "   /___________\\    /_________\\   /______\\     |    |   /___________\\   /_________\\     /_______\\",
    "  /|           |\\  /|         |\\ /|      |\\    |    |  /|           |\\ /|         |\\   /|       |\\",
    "   |           |    |         |   |      |     |    |   |           |   |         |     |       |",
    "   |___________|    |_________|   |______|     |    |   |___________|   |_________|     |_______|",
    "                                               |    |"
]);
Database.addAscii("places/village/secondHouse", 97, 35, [
    "  /        |                                                                         |        \\",
    " /         |                                                                         |         \\",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                                         |          |",
    "|          |                                                ___                      |          |",
    "|          |                                               /   \\                     |          |",
    "|          |                                              |a  a |                    |          |",
    "|          |                                              |  L  |                    |          |",
    "|          |                                              _\\'-'/_                    |          |",
    "|          |                                          _.-'\\_____/'-._                |          |",
    "|          |                                         /  _         _  \\               |          |",
    "|          |_______________                          | | |       | | |               |          |",
    "|         /               /|                         | | |       | | |               |          |",
    "|        /               / |                         | \\ |       | | |               |          |",
    "|       /               /  |                          \\ \\|_______| | |               |          |",
    "|      /               /   |                           \\_|__[x]__| |_|               |          |",
    "|     /               /    |             ________________|_______|_|_|_______________|____      |",
    "|    /               /     |____________/                                                 \\     |",
    "|   /               /      /           /                                                   \\    |",
    "|  /               /      /           /                                                     \\   |",
    "| /               /      /           /                                                       \\  |",
    "|/_______________/      /           /_________________________________________________________\\ |",
    "||               |     /            |                                                          ||",
    "||               |    /             |                                                          ||",
    "||               |   /              |                                                          ||",
    "||               |  /               |                                                          ||",
    "||               | /                |                                                          ||",
    "||_______________|/_________________|__________________________________________________________||"
]);
Database.addAscii("places/village/fourthHouseCupboardOpenedWithoutLollipop", 19, 15, [
    " / | |  |      |  |",
    "/  | |__|      |  |",
    "|  | /  |      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |  |      |  |",
    "|  | |__|()    |  |",
    "|  | /  |      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |__|      |  |",
    "|  | /  |      | /",
    "|  |/___|______|/",
    "| /||_________||",
    "|/ ||         ||"
]);
Database.addAscii("places/village/fourthHouse", 97, 35, [
    "  /        |       |--_--_||                                                         |        \\",
    " /         |       |_--_--||                              _______________________    |         \\",
    "|          |       |--_--_||                             (______________________ )   |          |",
    "|          |       |_--_--||                             ||            _^_      ||   |          |",
    "|          |       |--_--_||                             ||         .-'|_|'-.   ||   |          |",
    "|          |       |_--_--||                             ||        /   ___   \\  ||   |          |",
    "|          |       |--_--_||                             ||       /|  |=|=|  |\\ ||   |          |",
    "|          |       |_--_--||                             ||--|--|--|  |-|-|  |  ||   |          |",
    "|          |       |--_--_||         ______________      ||--|--|--|  |=|=|  |  ||   | |\\       |",
    "|          |       |_--_--||        /      ----o  /|     ||^^^^^^^^^^^^^^^^^^^^^||   | | \\      |",
    "|          |       |--_--_||       /____________ / |     ||_____________________||   | |  \\     |",
    "|          |       |_--_--||       |     |      |  |     (_______________________)   | |  |\\    |",
    "|          |       |--_--_|/       |     |      |  |                                 | |  ||\\   |",
    "|          |     ============      |     |      |  |                                 | |\\ || \\  |",
    "|          |      |        ||      |     |      |  |                                 | |\\\\|| |  |",
    "|          |      |        ||      |     |      |  |                                 | | \\ | |  |",
    "|          |      |        ||      |     |      |  |                                 | |  | \\|  |",
    "|          |      |________|/      |   ()|()    |  |                ()         ()    | |  ||\\|  |",
    "|          |   ================    |     |      |  |         @      ||         ||    | \\  || |  |",
    "|          |    | __________ ||    |     |      |  |         _\\/    ||_________||    |  \\ || |  |",
    "|          |    |/    (())  \\||    |     |      |  |       ___)(__  |   ______  |    |   \\|| |  |",
    "|          |    ||  __)))(__|||    |     |      |  |      |\\ (__) \\ |__(      )_|    |    \\| |  |",
    "|          |    || /#(( ))@@|||    |     |      | /       | \\______\\|\\  '----'   \\   |     \\ |  |",
    "|          |    ||/##@@@@@@#|||    |_____|______|/        | | ____ || \\           \\  |      \\|  |",
    "|          |____||##@@@@@@##||/_____||_________||_________| ||  o |||  \\           \\_|          |",
    "|         /    ================     ||         ||         \\ ||____|| \\  \\  ()       \\ ()        |",
    "|        /    _____________________________                \\|______|  \\  \\ ||        \\||        |",
    "|       /   ~/¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ /~                           \\  \\||_________||\\       |",
    "|      /   ~/¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ /~                             \\  |           | \\      |",
    "|     /   ~/¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ /~                               \\ |           |  \\     |",
    "|    /   ~/¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ /~                                 \\|___________|   \\    |",
    "|   /   ~/¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ /~                                                    \\   |",
    "|  /   ~/____________________________/~                                                      \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/fourthHouseCupboardOpenedWithLollipop", 19, 15, [
    " / | |  |      |  |",
    "/  | |__|      |  |",
    "|  | /  |      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |  |      |  |",
    "|  | |__|()    |  |",
    "|  | /o-|      |  |",
    "|  |/___|      |  |",
    "|  | |  |      |  |",
    "|  | |__|      |  |",
    "|  | /  |      | /",
    "|  |/___|______|/",
    "| /||_________||",
    "|/ ||         ||"
]);
Database.addAscii("places/village/forge", 97, 35, [
    "  /        |          |         | |       ||_|_________|____                         |        \\",
    " /         |          |         | |      /||_|_________|___ \\                        |         \\",
    "|          |          |         | |      \\||_|_________|____/                        |          |",
    "|          |          |         | |       || '         '                             |          |",
    "|          |          |         | |                                   ______         |          |",
    "|          |          |         | |                                .-' ____ '-.      |          |",
    "|          |          |         | |                                \\.-'    '-./      |          |",
    "|          |          |         | |                 __|_________|___\\        /       |          |",
    "|          |          |         | |                |__|_________|___/        \\       |          |",
    "|          |          |         | |                   '         '  /'-.____.-'\\      |          |",
    "|          |    ______|         | |_______                         '-.______.-'      |          |",
    "|          |   /      |_________|/       /\\                                          |          |",
    "|          |  /   o----                 / /                            ||            |          |",
    "|          | /_________________________/ /                            /  \\           |          |",
    "|          |/__________________________\\/                             \\  /     ____  |          |",
    "|          |                                                          .\\/.    |____| |          |",
    "|          |                                    _____                  /\\      :||:  |          |",
    "|          |              )                    / ~~~ \\                /  \\      ||   |          |",
    "|          |             (                     \\ `Вї´ /               /    \\     ||   |          |",
    "|          |    _____)_________________      _.-\\ - /-._            /      \\         |          |",
    "|          |   /  __(__________)____  /|  /ВЇВЇВЇВЇ/ВЇ|ВЇ|ВЇ\\ВЇВЇВЇВЇ\\     _________________    |          |",
    "|          |  /  :@@@@@@@@@@@@(@@@@: / | (  ´)|´  ВЇ  `|(´  )    \\________________\\   |          |",
    "|          |  :. '-.@@@@@@@@@@@@.-' .: | |   ||       ||   |     \\               /   |          |",
    "|          |  : '.  '-.______.-'  .' : |  \\   )|     |(   /       '-._________.-'    |          |",
    "|          |__:   '-.__________.-'   : |___\\==||_____||==/____|ВЇВЇ|_____||  |_________|          |",
    "|         /   :     |----------|     : |---/  |+-----++:0+----|  |    .'|  |_         \\         |",
    "|        /    :     |----------|     :/'---UUUU+--+--+0000----|  |   |\\.'__'.\\         \\        |",
    "|       /     '-.   |----------|   .-'         |  |  |        |__|   \\|______|          \\       |",
    "|      /         '-.|__________|.-'            |  |  |                                   \\      |",
    "|     /                                        |  |  |                                    \\     |",
    "|    /                                         |__|__|                                     \\    |",
    "|   /                                          (__|__)                                      \\   |",
    "|  /                                                                                         \\  |",
    "| /                                                                                           \\ |",
    "|/_____________________________________________________________________________________________\\|"
]);
Database.addAscii("places/village/candyMerchantItems/timeRing", 1, 1, [
    "O"
]);
Database.addAscii("places/village/candyMerchantItems/leatherGloves", 5, 4, [
    " ...",
    " ||||",
    "\\||||",
    " \\__/"
]);
Database.addAscii("places/village/candyMerchantItems/hat", 17, 3, [
    "      .---.",
    "     |%%%%%|",
    "'-.__|_____|__.-'"
]);
Database.addAscii("places/village/candyMerchantItems/lollipopLeft", 5, 1, [
    "o----"
]);
Database.addAscii("places/village/candyMerchantItems/lollipopRight", 5, 1, [
    "----o"
]);
Database.addAscii("places/village/candyMerchantItems/chocolateBar", 17, 3, [
    " _______________",
    "/__/__/__/__/__/|",
    "|__|__|__|__|__|/"
]);
Database.addAscii("places/village/candyMerchantItems/boots", 14, 5, [
    "   ___",
    "  \\   | ____",
    " __)  ||   /",
    "(_____)|  (__",
    "       (_____)"
]);
Database.addAscii("places/village/thirdHouseGames/GalacticWars/splashScreen", 87, 5, [
    "_________      ______            __________           ___       __",
    "__  ____/_____ ___  /_____ ________  /___(_)______    __ |     / /_____ _______________",
    "_  / __ _  __ `/_  /_  __ `/  ___/  __/_  /_  ___/    __ | /| / /_  __ `/_  ___/_  ___/",
    "/ /_/ / / /_/ /_  / / /_/ // /__ / /_ _  / / /__      __ |/ |/ / / /_/ /_  /   _(__  )",
    "\\____/  \\__,_/ /_/  \\__,_/ \\___/ \\__/ /_/  \\___/      ____/|__/  \\__,_/ /_/    /____/"
]);
Database.addAscii("places/village/thirdHouseGames/GalacticWars/ship", 11, 2, [
    "/\\_.-'\"'-._",
    "\\_______.-'"
]);
Database.addAscii("places/village/thirdHouseGames/GalacticWars/youLose", 37, 5, [
    "__  __               __",
    "\\ \\/ /___  __  __   / /___  ________",
    " \\  / __ \\/ / / /  / / __ \\/ ___/ _ \\",
    " / / /_/ / /_/ /  / / /_/ (__  )  __/",
    "/_/\\____/\\__,_/  /_/\\____/____/\\___/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/blob", 19, 7, [
    "      .-'-'-.",
    "     '       '",
    "    '  ^   ^  '",
    "  .'           '.",
    " '    '-._.-'     '",
    "'                 '",
    " '-._.-'`'`'-._.-'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/bomb", 14, 9, [
    "        ,--.!,",
    "       /   -*-",
    "      /    '|`",
    "   .-\"\"-.",
    " /`      `\\",
    ";          ;",
    ";          ;",
    " \\        /",
    "  `'-..-'`"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/circle", 17, 9, [
    "      *   *",
    "  *           *",
    "",
    "*               *",
    "",
    "*               *",
    "",
    "  *           *",
    "      *   *"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/splashScreen", 64, 6, [
    "________                               _________________________",
    "__  ___/___  ______________________    ___  __ \\__  __ \\_  ____/",
    "_____ \\_  / / /__  __ \\  _ \\_  ___/    __  /_/ /_  /_/ /  / __",
    "____/ // /_/ /__  /_/ /  __/  /        _  _, _/_  ____// /_/ /",
    "/____/ \\__,_/ _  .___/\\___//_/         /_/ |_| /_/     \\____/",
    "              /_/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/spiders", 21, 8, [
    " /\\.--./\\",
    "/\\( В°В° )/\\",
    "   '--'     /\\.--./\\",
    "           /\\( В°В° )/\\",
    "              '--'",
    "     /\\.--./\\",
    "    /\\( В°В° )/\\",
    "       '--'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/corpse2", 16, 5, [
    "Another one here",
    "",
    "   0/",
    "   /\\_/",
    "     \\_"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/spider", 22, 6, [
    "  /\\              /\\",
    " /  \\   .-\"\"-.   /  \\",
    "/ /\\ \\/` .  . `\\/ /\\ \\",
    " /  \\;          ;/  \\",
    "/     \\        /     \\",
    "       `'-..-'`"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/mobius", 15, 9, [
    "    _______",
    "   /    \\  \\",
    "  /  /\\  \\  \\",
    " /  /  \\  \\  \\",
    "/  /  / \\  \\  \\",
    "\\  \\  \\ /  /  /",
    " \\  \\  \\  /  /",
    "  \\  \\  \\/  /",
    "   \\__\\____/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/goblin", 16, 8, [
    " ,     ..     ,",
    "(`._.\"`  `\"._.')",
    " '.          .'",
    "  | ()    () |",
    "  |          |",
    "   \\ 'VvvV' /",
    "    '.    .'",
    "      '--'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/thing", 20, 9, [
    "      _.-''-._",
    "     /        \\",
    "    (   o    o )",
    "    /          \\",
    "   /      __    \\",
    "  (   _      _   )",
    "  |_ ( '-..-' ) _|",
    " _)   \\      /   (_",
    "(,(,(,/      \\,),),)"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/youLose", 37, 5, [
    "__  __               __",
    "\\ \\/ /___  __  __   / /___  ________",
    " \\  / __ \\/ / / /  / / __ \\/ ___/ _ \\",
    " / / /_/ / /_/ /  / / /_/ (__  )  __/",
    "/_/\\____/\\__,_/  /_/\\____/____/\\___/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/babyVampire", 24, 8, [
    "  /\\_____/\\",
    " /         \\   I want to",
    ";  o     o  ;    be a",
    ";           ;   vampire",
    " \\  \\/ \\/  /",
    " .'-.....-'.      ^.^",
    "'           '",
    "'           '"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/billGatesSkeleton", 11, 8, [
    "  _.---._",
    ".'       '.",
    ";         ;",
    "\\ ($) ($) /",
    " \\   A   /",
    "  )     (",
    "  \\\"\"\"\"\"/",
    "   '._.'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/corpse1", 16, 6, [
    "A charred corpse",
    " is lying here",
    "",
    "     _0",
    "     /\\",
    "    /\\"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/skeleton", 11, 8, [
    "  _.---._",
    ".'       '.",
    ";         ;",
    "\\ (O) (O) /",
    " \\   A   /",
    "  )     (",
    "  \\\"\"\"\"\"/",
    "   '._.'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/dna", 8, 9, [
    "  \\/ /",
    "  / /\\",
    " / /\\ \\",
    "( (  ) )",
    " \\ \\/ /",
    "  \\/ /",
    "  / /\\",
    " / /\\ \\",
    "( (  ) )"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/ferociousBlob", 19, 7, [
    "      .-'-'-.",
    "     '       '",
    "    '  \\   /  '",
    "  .'           '.",
    " '     .---.     '",
    "'                 '",
    " '-._.-'`'`'-._.-'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/randomShape", 12, 6, [
    "    _______",
    " __/  _____)",
    "(___  \\____",
    "    \\   ___)",
    "    /   \\",
    "    \\___/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/triforce", 12, 6, [
    "     /\\",
    "    /  \\",
    "   /____\\",
    "  /\\    /\\",
    " /  \\  /  \\",
    "/____\\/____\\"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/shop", 23, 10, [
    "         __",
    "        /..\\   Please",
    "        \\__/   buy my",
    "       /|  |\\  stuff",
    "    __/_|__|_\\_______",
    "   /                 \\",
    "  /___________________\\",
    "  |                   |",
    "  |                   |",
    "  |___________________|"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/star", 9, 4, [
    " __.'.__",
    "'-.   .-'",
    "  /.-.\\",
    "  '   '"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/chest", 14, 8, [
    "  __________",
    " /\\____;;___\\",
    "| /         /",
    "\\.---------.",
    " |\\         \\",
    " | |---------|",
    " \\ |         |",
    "  \\|_________|"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/dragon", 20, 9, [
    "      __\\\\\\__",
    "    <' _     \\",
    "  <'_\\ __ 'o o",
    " <'/__(  \\_   \\",
    " <_/\\_\\    \\_  \\",
    "<_/ _\\_\\     (\\\\)",
    "<_\\_  \\_\\    (\\\\\\)",
    "               (\\\\\\)",
    "                (\\\\)"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/mainMenu", 24, 9, [
    " _____     _",
    "|     |___|_|___",
    "| | | | .'| |   |",
    "|_|_|_|__,|_|_|_|",
    "",
    "      _____ ___ ___ _ _",
    "     |     | -_|   | | |",
    "     |_|_|_|___|_|_|___|",
    ""
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/ferociousGoblin", 16, 8, [
    " ,     ..     ,",
    "(`._.\"`  `\"._.')",
    " '.          .'",
    "  | (W)  (W) |",
    "  |          |",
    "   \\ 'VvvV' /",
    "    '.    .'",
    "      '--'"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/cross", 17, 8, [
    "        |",
    "   \\         /",
    "       .-.",
    "     __| |__",
    "-=  |__   __|  =-",
    "       | |",
    "       | |",
    "       |_|"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/hive", 26, 9, [
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/",
    "\\__/  \\__/  \\__/  \\__/  \\_",
    "/  \\__/  \\__/  \\__/  \\__/"
]);
Database.addAscii("places/village/thirdHouseGames/SuperRPG/ferociousSkeleton", 13, 8, [
    "  _.-----._",
    ".'         '.",
    ";           ;",
    "\\  (W) (W)  /",
    " \\    A    /",
    "  )       (",
    "  \\ \"\"\"\"\" /",
    "   '.___.'"
]);
Database.addAscii("places/quests/theSea/seahorse", 4, 4, [
    ":=@",
    " {|<",
    "  |",
    "  J"
]);
Database.addAscii("places/quests/theSea/bigShark", 47, 10, [
    "              .´",
    "             /(",
    "            /%%\\                       __..--._",
    "        ___/%%%%`._               _.-´ВЇ%_.-´ВЇВЇ",
    " _..--´'ВЇ%%%%%%%%%%%%ВЇ`---..___.-´ВЇ%%%%_-´",
    "(%%%%%O%%%)))%%%%%%%%%%%%%%%%%%%%%%%%%%(_",
    " `vvvvv%%%%%%\\%%%%%/%%%%%%_.------._%%%%%ВЇ`-._",
    "   `----------\\%%%/----´ВЇВЇ          ВЇ`------´ВЇ",
    "               \\%/",
    "                V"
]);
Database.addAscii("places/quests/theSea/plant7", 4, 4, [
    "  )-",
    "-(",
    "  )",
    " ("
]);
Database.addAscii("places/quests/theSea/miniShark", 19, 5, [
    "         ,        .",
    "        /(.._,,_./|",
    "   _.-\"\"%%%%%%%%%%|",
    " .´В¤%}}}%%%%.-'-'\\|",
    "´v-----\\|--'      '"
]);
Database.addAscii("places/quests/theSea/plant2", 3, 6, [
    "  )",
    "-(-",
    "  )",
    "-(-",
    "  )",
    " ("
]);
Database.addAscii("places/quests/theSea/plant5", 4, 4, [
    "  )",
    "-(",
    "  )-",
    " ("
]);
Database.addAscii("places/quests/theSea/plant4", 4, 6, [
    "  )",
    "-(",
    "  )",
    "-(",
    "  )-",
    " ("
]);
Database.addAscii("places/quests/theSea/plant0", 4, 4, [
    "\\##/",
    " )%)",
    "(%(",
    " )_)"
]);
Database.addAscii("places/quests/theSea/smallestFish", 3, 1, [
    "()("
]);
Database.addAscii("places/quests/theSea/plant1", 3, 4, [
    " )-",
    "(",
    "-)-",
    "("
]);
Database.addAscii("places/quests/theSea/shellPowder", 6, 3, [
    " z.-);",
    "})]`s",
    ";h;-+-"
]);
Database.addAscii("places/quests/theSea/plant3", 4, 4, [
    "  )",
    " (",
    "  )-",
    "-("
]);
Database.addAscii("places/quests/theSea/plant10", 4, 4, [
    "\\@@/",
    "(%(",
    " )%)",
    "(_("
]);
Database.addAscii("places/quests/theSea/sponge", 6, 3, [
    " *~**",
    "****-*",
    " *****"
]);
Database.addAscii("places/quests/theSea/plant6", 4, 9, [
    "  )-",
    " (",
    "  )",
    "-(",
    "  )-",
    " (",
    "  )",
    "-(",
    "  )"
]);
Database.addAscii("places/quests/theSea/mediumFish", 8, 4, [
    "  __",
    " /.%\\ /|",
    "(%%%%X%|",
    " \\_V/ \\|"
]);
Database.addAscii("places/quests/theSea/plant9", 4, 4, [
    "\\##/",
    "(%(",
    " )%)",
    "(_("
]);
Database.addAscii("places/quests/theSea/plant8", 4, 4, [
    "\\MM/",
    " )%)",
    "(%(",
    " )_)"
]);
Database.addAscii("places/quests/theSea/jellyFish", 6, 5, [
    " ____",
    "(o%%o)",
    " ))))",
    "((((",
    " ))))"
]);
Database.addAscii("places/quests/theSea/seaSnake/10", 103, 10, [
    "",
    "",
    "                                                 _  .  -  -  -  .",
    "                                             .-' ('( ( ( ( ( ( ( ( (-.",
    "    ___//_                              _. '( ( ( (_( . . ----- . ( ( ('.",
    " _.c    )(' -. _                     _.( ( ( (_. '                '. ( ( (.",
    "/__  _ /( ( ( ( (-._             _.-( ( ( (.-'                        '-( (\\",
    "  /.'    ' -.(_( ( ( ( - .....- '( ( (_-'                                '.(\\",
    "               '-.( ( ( ( ( ( ( ( ( -'                                     \\('",
    "                    ' -(.(_(_( - '                                          \\|"
]);
Database.addAscii("places/quests/theSea/seaSnake/3", 78, 11, [
    "",
    "",
    "             __..__",
    "    ___//_.-( ( ( ( ' -.",
    " _.c    )( ( (_(_( (.( (' -_",
    "/__  _ / _(.('     ' -(_( ( ( -._                                _ .  _",
    "  /.'                   '-.( ( ( ( -._                      _.-( ( ( ( (' -_",
    "                            ' (_( ( ( '- ._             _.-'( ( ( (-(- ' '- .\\",
    "                                '(.( ( ( ( '- . _ _ .-'( ( (_(.-'",
    "                                    '-(_( ( ( ( ( ( ( ( (_('",
    "                                         '--(.(_( ( ( -'"
]);
Database.addAscii("places/quests/theSea/seaSnake/4", 78, 11, [
    "",
    "",
    "              _. -'('('- ._",
    "           . '( ( ( ( ( ( (-( . _",
    "    ___//('( ( (.(-'''.(_( (.( ( (-_",
    " _.c    ) ( ( '            '(_( ( ( -._                                  ____",
    "/__  _ /. '                    '(.( ( ( ( -._                      _. - ( (.-'",
    "  /.'                              ' (_( ( ( '- ._             _.-'( ( (.'",
    "                                       '(.( ( ( ( '- . _ _ .-'( ( ( (.'",
    "                                           '-(_( ( ( ( ( ( ( ( (_(-'",
    "                                                '--(.(_( ( ( -'"
]);
Database.addAscii("places/quests/theSea/seaSnake/2", 79, 11, [
    "",
    "",
    "    ___//_.__",
    " _.c    )( ( (-( . _",
    "/__  _ /(_(_( (.( ( (-_",
    "  /.'        ' '(_( ( ( -._                                _ .- - . _",
    "                  '(.( ( ( ( -._                      _.-' ( ( ( ( ( (-_",
    "                      ' (_( ( ( '- _              _.-'( ( ( ( (-'-(.(_( '-.",
    "                          '(.( ( ( ( '- . _ _ .-'( ( ( (.-'           '-(_('.",
    "                              '-(_( ( ( ( ( ( ( ( (_(-'                   '(.\\",
    "                                  '--(.(_( ( ( -'"
]);
Database.addAscii("places/quests/theSea/seaSnake/8", 96, 10, [
    "",
    "",
    "                                     _ . - '( ( (' - . _",
    "                                 .-' ('( ( ( ( ( ( ( ( ( -",
    "                            _. '( ( ( (.(- - ''' - -  ( ( ( (",
    "                         _.( ( ( (_. '                  '( ( ( -",
    "    ___//            _.-( ( ( (.-'                         '( ( ( -",
    " _.c    )( - .._..-' ( ( (_-'                                 -( ( (._",
    "/__  _ /( ( ( ( ( ( ( ( -'                                      '(.( ('- . __",
    "  /.'     ' -(_(_( - '                                              '-( ( ( .'"
]);
Database.addAscii("places/quests/theSea/seaSnake/7", 89, 11, [
    "",
    "                                    _ _ . _",
    "                              _.- '( ( ( ( ( ('-.",
    "                          .-(.('( ( ( ( ( ( ( ( ('.",
    "                     _. '( ( ( (.( -'''''''''-(_( (.(-",
    "                  _.( ( ( (_. '                 '( ( ( (_",
    "              _.-( ( ( (.-'                       ' ( ( ( '",
    "    ___//__.-'( ( (_(-'                               -( ( ( (._            _.",
    " _.c    )( ( ( (.('                                     ' (.( ( '- . _ _ .-( /",
    "/__  _ /__( (-'                                             ' ( ( ( ( ( ( (.'",
    "  /.'                                                            ' ( ( (-'"
]);
Database.addAscii("places/quests/theSea/seaSnake/5", 78, 11, [
    "",
    "                          _ _",
    "                   _.-('( ( ( ('-.",
    "               _.-'( ( ( ( ( ( ( ( ' .",
    "           _-'( ( ( (.(- '  '-(_( (.( ( -",
    "    ___//('( ( (_(-'            ' -( ( ( ( '._",
    " _.c    ) (_(.-'                    ' ( ( ( ( ( -._                       _.-/",
    "/__  _ /.-'                               -( ( ( ( '- ._             _.-'( .'",
    "  /.'                                         ' (.( ( ( '- . _ _ .-'( ( (.'",
    "                                                   ' ( ( ( ( ( ( (_(_( '",
    "                                                       '- ( (_(.(-'"
]);
Database.addAscii("places/quests/theSea/seaSnake/12", 101, 11, [
    "",
    "",
    "    ___//",
    " _.c    )_                                               _ _ _",
    "/__  _ /_ ( - _                                   _.- '( ( ( ( ('-._",
    "  /.'   _( ( ( (' -. _                     _. _-( ( ( ( (_(_(_( ( ( (-_",
    "         ' -(_( ( ( ( (-._             _.-( (( ( ( (_.- '     '  -.( ( (.",
    "               ' -.(_( ( ( ( - .....- '( ( (_ ( (.-'                '-( ('.",
    "                     '-.( ( ( ( ( ( ( ( ( -' -'                        '-( (.",
    "                          ' -(.(_(_( - '                                  '.(\\",
    "                                                                            '-"
]);
Database.addAscii("places/quests/theSea/seaSnake/11", 111, 10, [
    "",
    "",
    "                                                         _ _ _",
    "    ___//_                                        _.- '( ( ( ( ('-._",
    " _.c    ) ( - _                               _-( ( ( ( (_(_(_( ( ( (-_",
    "/__  _ /_( ( ( (' -. _                     _.( ( ( (_.- '     '  -.( ( (.",
    "  /.'    ' -(_( ( ( ( (-._             _.-( ( ( (.-'                '-( ('.",
    "               ' -.(_( ( ( ( - .....- '( ( (_-'                        '-( (.",
    "                     '-.( ( ( ( ( ( ( ( ( -'                              '.(\\",
    "                          ' -(.(_(_( - '                                    '-"
]);
Database.addAscii("places/quests/theSea/seaSnake/1", 78, 11, [
    "",
    "    ___//",
    " _.c    )_",
    "/__  _ /( (-_",
    "  /.' '(.( ( (-_",
    "         '(_( ( ( -._                                _ .- ( -._",
    "            '(.( ( ( ( -._                      _.-( ( ( ( ( ( (-._",
    "                ' (_( ( ( '- ._             _.-'( ( ( ( (-(-(.(_( ('-._",
    "                    '(.( ( ( ( '- . _ _ .-'( ( ( (.-'          '-(_( ('-_",
    "                        '-(_( ( ( ( ( ( ( ( (_(-'                   '-(_('-_",
    "                            '--(.(_( ( ( -'                            ' - ('>"
]);
Database.addAscii("places/quests/theSea/seaSnake/9", 101, 10, [
    "",
    "",
    "                                           _  .  -  -  -  .",
    "                                       .-' ('( ( ( ( ( ( ( ( '-.",
    "                                  _. '( ( ( (_( . . ----- . ( ( ('.",
    "    ___//_                     _.( ( ( (_. '                   -( ( (",
    " _.c    ) (-._             _.-( ( ( (.-'                          '(_( '",
    "/__  _ /_( ( ( ( - .....- '( ( (_-'                                  '( ( -",
    "  /.'    '-.( ( ( ( ( ( ( ( ( -'                                         ( (\\",
    "              ' -(.(_(_( - '                                                '|"
]);
Database.addAscii("places/quests/theSea/seaSnake/6", 84, 11, [
    "",
    "                              _ _ . _",
    "                        _.- '( ( ( ( ( ('-.",
    "                    .-(.('( ( ( ( ( ( ( ( ('.",
    "               _. '( ( ( (.( -'''''''''-(_( (.(-",
    "            _.( ( ( (_. '                 '( ( ( (-_",
    "    ___//.-( ( ( (.-'                       ' ( ( ( (-                     /|",
    " _.c    ) ( (_(-'                               -( ( ( (- ._            _.( /",
    "/__  _ /_(.('                                     ' (.( ( ( '- . _ _ .-( (.'",
    "  /.'                                                 ' ( ( ( ( ( ( ( (_-'",
    "                                                           ' - ( ( ( '"
]);
Database.addAscii("places/quests/developer/hello", 38, 5, [
    "B    B   BBBBB   B       B       BBBBB",
    "B    B   B       B       B       B   B",
    "BBBBBB   BBBBB   B       B       B   B",
    "B    B   B       B       B       B   B",
    "B    B   BBBBB   BBBBB   BBBBB   BBBBB"
]);
Database.addAscii("places/quests/developer/me", 43, 34, [
    "                    ######",
    "                ############",
    "               ##############",
    "            ##################",
    "           ####################",
    "          #######XxxxxxxX#######",
    "         ######x++===--=++x######",
    "         #####X+=--------=+x#####",
    "         #####x+==-------==xX#####",
    "         ####X++==--------=+x######",
    "         ####X++=---------==x######",
    "         ####x+=----;-----==xX######",
    "         ####x==----------==xX######",
    "         ####XXxxx==---=++xx+X######",
    "         ####XxxXxxx+++XXXXxXX#######",
    "        #####XX#XXx+-++xXXxxxX#######",
    "        #####X###xx+;=xxx#xXxx#######",
    "        ####Xxxxxx+=;==+xxxxxx#######",
    "       #####x++===+=;======++xX######",
    "       #####x+==-=+=-=+--====+X######",
    "       #####x+=--=+=-=+=--===x#######",
    "       #####x+=--=xx=++=--==++#######",
    "       #####X+==-=xxxxx=--==+x########",
    "       ######x+===x#+xx==-=+xX########",
    "      #######xx++x#XxX#x+=++xX########",
    "      #######xxXXXXx+xXxXxx+x#########",
    "      #######XxxxXxx+++xXxXxx#########",
    "      ########xx+xx++++x++xxX#########",
    "     #########XxxxxxXXxx++xx##########",
    "     ##########Xxxxxxxx++xxX###########",
    "    ###########Xxx++++++xxX############",
    "  ##############Xx++x++xxx##############",
    " ################XXxxxxxx################",
    "######################X####################"
]);
Database.addAscii("places/quests/developer/imgladyoumadeitsofar", 94, 12, [
    "YYYYY  Y  YY YY      YYYYY   Y       YYYYY   YYY        O   O   OOOOO   O   O",
    "  Y       Y Y Y      Y       Y       Y   Y   Y  YY       O O    O   O   O   O",
    "  Y       Y   Y      Y  YY   Y       YYYYY   Y   Y        O     O   O   O   O",
    "  Y       Y   Y      Y   Y   Y       Y   Y   Y  YY        O     O   O   O   O",
    "YYYYY     Y   Y      YYYYY   YYYYY   Y   Y   YYY          O     OOOOO   OOOOO",
    "",
    "",
    "YY YY   YYYYY   YYY     YYYYY      YYYYY   YYYYY      YYYYY   YYYYY      YYYYY   YYYYY   YYYYY",
    "Y Y Y   Y   Y   Y  YY   Y            Y       Y        Y       Y   Y      Y       Y   Y   Y   Y",
    "Y   Y   YYYYY   Y   Y   YYYYY        Y       Y        YYYYY   Y   Y      YYYYY   YYYYY   YYYYY",
    "Y   Y   Y   Y   Y  YY   Y            Y       Y            Y   Y   Y      Y       Y   Y   Y  Y",
    "Y   Y   Y   Y   YYY     YYYYY      YYYYY     Y        YYYYY   YYYYY      Y       Y   Y   Y   Y"
]);
Database.addAscii("places/quests/developer/love", 16, 5, [
    "    Y      BBBBB",
    "  Y            B",
    "Y          BBBBB",
    "  Y            B",
    "    Y      BBBBB"
]);
Database.addAscii("places/quests/castleEntrance/knight1", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'В°%\\_//|__",
    " ¨ \\%%%%||%%\\'-.",
    "   `..---..'",
    "    ||   ||"
]);
Database.addAscii("places/quests/castleEntrance/front", 18, 30, [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|",
    "||___|___|___||",
    "|__|___|___|__|  /",
    "||___|___|___||  |",
    "|__|___|___|__|  |",
    "||___|___|___||  |",
    "|__|___|___|__|  |",
    "||___|___|___||  |",
    "|__|___|___|__|  |",
    "||___|___|___||  /",
    "|__|___|___|__| /",
    "||___|___|___||/"
]);
Database.addAscii("places/quests/castleEntrance/background", 149, 31, [
    "                                                                                                              |   |    |   |/                       /",
    "                                                                                                            _/__     ____  /                       /",
    "                                                                                                           /___/|   /___/|/                       /",
    "                                                                                                           |   |    |   |/                       /",
    "                                                                                                         _/__     ____  /                       /",
    "                                                                                                        /___/|   /___/|/                       /",
    "                                                                                                        |___|/___|___|/                       /",
    "                                                                                                                                             /",
    "                                                                                                                                            /",
    "                                                                                                                                           /",
    "                                                                                                                                          /",
    "                                                                                                                                         /",
    "                                                                                                                                        /",
    "                                                                                                                                       /",
    "                                                                                                                                      /",
    "                               ¨                                                                                                      /",
    "                                                                                                                                    /",
    "                                                                                                                            /|     /",
    "                   ¨                                                                                                        / |    /",
    "                                                                                                                          /  |   /",
    "                                                 ¨                                                                            |  /",
    "                                                                                                                             | /",
    "    ¨                                                           ¨                                                           ___|/",
    "                                   ¨                                          ¨         ¨ ",
    "                       ¨                            ¨                                              ¨ ",
    "            ¨                   ¨ ",
    "      ¨                                                          ¨ ",
    "                       ¨                                                    ¨                        ¨ ",
    "                                                                                        ¨ ",
    "                                                        ¨ ",
    ""
]);
Database.addAscii("places/quests/castleEntrance/knight2", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'В°%\\_//|__",
    " ¨ \\%%%%||%%\\'-.",
    "   `..---..'",
    "    /|   ||"
]);
Database.addAscii("places/quests/castleEntrance/knight3", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'В°%\\_//|__",
    " ¨ \\%%%%||%%\\'-.",
    "   `..---..'",
    "    |\\   |\\"
]);
Database.addAscii("places/quests/castleEntrance/knight5", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'В°%\\_//|__",
    " ¨ \\%%%%||%%\\'-.",
    "   `..---..'",
    "    |\\   \\\\"
]);
Database.addAscii("places/quests/castleEntrance/knight4", 15, 6, [
    "       _",
    "  _:  {_)",
    "-'В°%\\_//|__",
    " ¨ \\%%%%||%%\\'-.",
    "   `..---..'",
    "    \\\\   \\\\"
]);
Database.addAscii("places/quests/hell/demonBubbles6", 5, 3, [
    "oOoO",
    "  oOo",
    "OooOo"
]);
Database.addAscii("places/quests/hell/demonBubbles5", 5, 3, [
    "oOoo",
    " Ooo",
    "OoOOo"
]);
Database.addAscii("places/quests/hell/demonBubbles3", 5, 3, [
    " oO",
    "OooO",
    "ooOoO"
]);
Database.addAscii("places/quests/hell/demonEyes", 5, 4, [
    "_____",
    "\\ГЁ%Г©/",
    " )%(",
    "/___\\"
]);
Database.addAscii("places/quests/hell/demonBubbles1", 5, 3, [
    " oOo",
    "OooOo",
    " oOoO"
]);
Database.addAscii("places/quests/hell/camazotz", 22, 8, [
    "         ____",
    "        /%%%%\\",
    "   _    \\`%ЛЉ /    _",
    "  /%`'-._)%%(_.-'`%\\",
    " /%%%%%%/%%%%\\%%%%%%\\",
    "/.-.-.-.\\%%%%/.-.-.-.\\",
    "         '..'",
    "          WW"
]);
Database.addAscii("places/quests/hell/background", 150, 10, [
    "_______________________________________________________                _______________________            ____________________________________________",
    "                                                      /|              |\\                     /|          |\\",
    "                                                     / |              | \\                   / |          | \\",
    "                                                    /  |              |  \\                 /  |          |  \\",
    "___________________________________________________/   |              |   \\_______________/   |          |   \\________________________________________",
    "                                                   |   |              |   |               |   |          |   |",
    "                                                   |   /              \\   |               |   /          \\   |",
    "                                                   |  /                \\  |               |  /            \\  |",
    "                                                   | /                  \\ |               | /              \\ |",
    "___________________________________________________|/                    \\|_______________|/                \\|________________________________________"
]);
Database.addAscii("places/quests/hell/devil", 8, 6, [
    "/(    )\\",
    "\\%\\__/%/",
    "(%%%%%%)",
    " \\%%%%/",
    "  \\%%/",
    "   ¨ ¨ "
]);
Database.addAscii("places/quests/hell/demonBubbles4", 5, 3, [
    "  Oo",
    " OooO",
    "ooOoO"
]);
Database.addAscii("places/quests/hell/demonBubbles2", 5, 3, [
    "oOoo",
    " OooO",
    "Ooo"
]);
Database.addAscii("places/quests/hell/demonBubbles0", 5, 3, [
    "OooO",
    " ooOo",
    "oOo"
]);
Database.addAscii("places/quests/hell/demonCube", 5, 3, [
    ".-'-.",
    ";В°%В°;",
    "'-.-'"
]);
Database.addAscii("places/quests/octopusKing/octopusKing", 6, 4, [
    "  WW",
    " /..\\",
    " \\  /",
    "///\\\\\\"
]);
Database.addAscii("places/quests/octopusKing/roof", 100, 5, [
    "       .               .            .            .                  .             .            .",
    "   .   ___________              .                        .          ___  .                  .",
    "  ____/           \\_____  .                . ______________________/   \\___________   .          .",
    " /                      \\___________________/                                      \\_______________",
    "/                                                                                                  \\"
]);
Database.addAscii("places/quests/forest/treeSpirit", 5, 5, [
    "_____",
    "В°|||В°",
    "=|||=",
    " |||",
    " |||"
]);
Database.addAscii("places/quests/forest/background", 98, 17, [
    "  |   \\\\|.'    |  |    \\\\|.'   |  |     \\\\|.'  |  |   \\\\|.'    |  |    \\\\|.'   |  |     \\\\|.'  |",
    " ||   \\` /   _.| ||,!  \\` /   _| ||\\,!  \\` /   | ||   \\` /   _.| ||,!  \\` /   _| ||\\,!  \\` /   | |",
    "|||`. | |_.-'.'||||\\`. | |_.-'.|||| \\`. | |_.-'||||`\\ |||_.-'.'||||\\`. | |_.-'.|||| \\`. | |_.-'|||",
    " ||\\ \\|! ,-'   | || \\ \\|! ,-'  | ||  \\ \\|! ,-' | ||\\ \\|  ,-'   | || \\ \\|! ,-'  | ||  \\ \\|! ,-' | |",
    "| | \\  ||      || |  \\  ||     |  |   \\  ||    || | \\  ||      || |  \\  ||     || |   \\  ||    ||",
    "|||  \\  |      ||||   `. |     ||||    `. |    ||||  `. |      || |   `. |     ||||    `. |    | |",
    "| |   | |      || |    | |     || |     | |    || |   | |      || |    | |     || |     | |    ||",
    " ||   |||      | ||    |||     | ||     |||    | ||   |||      | ||    |||     | ||     |||    | |",
    "|||   | |      || |    | | ¨    ||||     | |    |||| ¨  | |      ||||    | | ¨    || |     | |    |||",
    "| |   | |  ¨    || | ¨   | |     || | ¨    | | ¨   |  |   | |      || |¨    | |     || | ¨    | |  ¨  ||",
    "  | , !|| ,    | ||   ,! |  , \\| ||   / ! |    | || , !|| ,    | ||   ,! |  , \\| ||   / ! |    | |",
    "| |   '-`      || |    '-`     || |     '-`    || |   '-`      || |    '-`     || |     '-`    ||",
    "'| \\ ¨         / '| \\  ¨        / '| \\    ¨      / '| \\      ¨    / '| \\       ¨   / '| \\      ¨    / '|",
    "",
    "          ¨       ¨            ¨           ¨               ¨       ¨              ¨            ¨ ¨      ¨ ",
    "  ¨                   ¨                        ¨                   ¨                    ¨        ¨ ",
    "      ¨                  ¨            ¨                      ¨               ¨                ¨       ¨ "
]);
Database.addAscii("places/quests/forest/wolf/leftStanding", 7, 3, [
    " _",
    "''(___",
    " || ||`"
]);
Database.addAscii("places/quests/forest/wolf/rightRunning", 7, 3, [
    "     _",
    " ___)''",
    "`// //"
]);
Database.addAscii("places/quests/forest/wolf/leftRunning", 7, 3, [
    " _",
    "''(___",
    " \\\\ \\\\`"
]);
Database.addAscii("places/quests/forest/wolf/rightStanding", 7, 3, [
    "     _",
    " ___)''",
    "`|| ||"
]);
Database.addAscii("places/quests/theHole/lostTribeWarrior", 4, 4, [
    "в–І",
    "|_O/",
    "| |",
    "|/ \\"
]);
Database.addAscii("places/quests/theHole/background", 100, 136, [
    "                                        |                  |",
    "                                        |                  |",
    "                          -             |                  |                                       ^",
    "                                        |                  |",
    "        ^                               |                  |",
    "                                        |                  |               ^",
    "                                        |                  |      -                      -",
    "            -                           |                  |",
    "                        ^               |                  |",
    "                                        |                  |",
    "                                        |                  |                        -",
    "                                -       |                  |                                      ^",
    "    -                                   |                  |          ^",
    "                                        |                  |",
    "                                        |                  |",
    "             ^                          |                  |          -",
    "                                        |                  |                     ^             -",
    "                              ^         |                  |",
    "                                        |                  |",
    "                                        |                  |",
    "             -                          |                  |                                ^",
    "                                        |                  |      -",
    "                        ^               |                  |",
    "                                       /                   |              ^",
    "                                      /                    |                             -",
    "  ^                                  /                      \\",
    "                          -       __/                        \\",
    "                                 /                            \\",
    "                                /                              \\      -",
    "      -                        /                                |",
    "                              /                                 |                ^",
    "                ^            /                                  |",
    "                            /                                   |                           -",
    "                           /                                    |",
    "                          /                                     |",
    "                         /                                      |               -",
    "                 -      /                                       |",
    "        ^              /                                        |     ^",
    "                      /                                         |",
    "                      |                                         |                          ^",
    "    -                 |                                         |",
    "                      |                                         |",
    "                ^     |                     ____________________|             -",
    "                      |                     \\",
    "             -        |                      \\          ^",
    "                      |                       \\___",
    "                   ^  |                           \\______          -           ^",
    "                      |                                  \\___________                         -",
    "    ^                 |                                              \\",
    "                      |                                               \\____",
    "                      |                                                    \\________         ^",
    "                      |                                                             \\",
    "    -            -    |                                                              \\______",
    "                      |                                                                     \\",
    "          ^           |                                                             _____    \\   -",
    "                      |                                                            /     |    |",
    "                      |                                                           /     /     |",
    "                      |                                                       ___/     /      \\",
    "                      |                                                      /        /        \\",
    "    -                 |______________________                               /         |         \\",
    "                                            /                           ___/    ^     |          \\",
    "                            ______     ____/                           /              |           |",
    "                     ^     /      \\___/                               /         -     |   ________|",
    "                          /                                 ___      /                |   \\_______|",
    "                 -       |                                 /   \\____/             ^   |           |",
    "                         |                            ____/             ^             |           |",
    "                         |                           /                                |           |",
    "     ^                    \\_______                  /     ^      -                    |           |",
    "                                 /             ____/                              -   |           |",
    "                                /             /                          ^            |____   ____|",
    "                            ___/             /     -         _____________________        /   \\",
    "                  ^     -  /                 \\_____        _/                     \\______/     |",
    "     -                    /          __            \\     _/                                    |",
    "        ^                /          /  \\            \\ -  \\                                     |",
    "                 _______/          /    \\            \\    \\____________________________________/",
    "                /                 / -    \\_______     \\                                         ^",
    "     __________/                 /               |     |      ^                -",
    " -  /                           /     ^        - |     |       ____________",
    "   |                            \\                |     |    __/            \\___________    ^",
    "   |                             \\    -      ^   |     |___/                           \\       -",
    "   |                              \\              |                                      \\",
    "  /                                \\             |                                       \\     ^",
    " |                                  \\            |   ______________________               \\",
    " |                                   |        -  |   \\                     \\___________    \\",
    " |                                   |  ^        |    \\   -    ^                       |    \\",
    " |                                   |           |     \\___               ^        -   |     |",
    " |                                   \\           \\         \\     -             _______/      |",
    " |                                    \\     -     \\         |      ___________/              |",
    " |                                     \\_____      \\        |    _/                          |",
    " |                                           \\      \\_     /    /                            |   -",
    " |                                            \\  -    |   |    |                             |",
    " |                                             |      |   |    |                             |",
    " |                                             |    ^ |   |     \\________                    |",
    " |                                             |      |   |              \\____               |",
    " |                                             |      |   |      ^            \\____          | -",
    " \\_________                      _____________/       |   |   -                    \\_________/",
    "           \\            __   ___/                  -  |   |              -                         ^",
    "            \\__________/  | |                         |   |                            ^",
    "     ^                    | |         -               |    \\",
    "               -        ^ | |                   ^     |     \\__________     ^               -",
    "                          | |-                        |                \\__________",
    "     -                    | |                         |__                         \\_________",
    "              ^         __| |______                      \\_______                           \\    ^",
    "                     __/           \\          -                  \\___                       /",
    "                    /               \\____                            \\____                 |",
    "            -      /                     \\               ^                \\____________    |",
    "                  /                      /                                             |   |",
    "     ^           |            __________/                  -         ^          -      |   |   -",
    "                 |           /                  ^                                      |   |",
    "                 |          /         -                              __________________/   |",
    "                  \\________/                              __________/                      |",
    "    -         ^                         _________________/                      _______    |  ^",
    "                           -   ________/                                       /       |   |",
    "         _____________________/                                               /    -   |   |",
    "   ^    /                                                                    /         |   |",
    "       /                                                                    /          |   |",
    "      /                                                                    /    -   ^  |   |     -",
    "  -  |                                                                    /            |   |",
    "     |                                                                  _/             |   |",
    "     |                                                                 /             - |   |       ^",
    " ^  /                                                                 /                |   |",
    "   /                                                                 /   -             |   |",
    "  |                                                                _/                  |   |",
    "  |                                                              _/                    |   |",
    "  |                                                           __/      ^               |   |   ^",
    "- |                                                      ____/                     ^   |   |",
    "  |                                                _____/                -             |   |",
    "  |                                       ________/                                   /    |",
    "  |                         _____________/                                           /     |  -",
    "   \\_______________________/                                                    ____/      |",
    "                                     ^                -                  ______/          /",
    " -                            -                                         /                /",
    "       ^                                                      ^        /              __/",
    "                      ^                                               /        ______/",
    "                -                             -                       |_______/           -",
    ""
]);
Database.addAscii("places/quests/common/chestOpenedRight", 3, 2, [
    "(",
    "|_|"
]);
Database.addAscii("places/quests/common/chestClosed", 3, 2, [
    " _",
    "|_|"
]);
Database.addAscii("places/quests/common/chestOpenedLeft", 3, 2, [
    "  )",
    "|_|"
]);
Database.addAscii("places/quests/fortress/room3", 100, 31, [
    "                         ~                                 ~                               ~",
    "     ~          __________________________________________________________________________",
    "               /                                                                          \\        ~",
    "               |                                                                           |",
    "           ~   |                                                                           |",
    "               |                                                                           |  ~",
    "   ~           |                                                                   _______/",
    "               |                                                                  /",
    "               |                                                                  |",
    "          ~    |                                                                  |   ~",
    "               |                                                                  |             ~",
    "  ~            |                                                                  |",
    "               |                                                                  |          ~",
    "               |                                                                  |",
    "               |                                                                  |",
    "    ~          |                                                                  |  ~",
    "               |                                                                  |",
    "               |                                                                  |             ~",
    "            ~  |                                                                  |",
    "               |                                                                  |    ~",
    "     ~         |                                                                  |          ~",
    "               |                                                                  |",
    "               |                                                                  |",
    "               |                                                                  |   ~",
    "_______________/                                                                  |                ~",
    "                                                                                  |",
    "                                                                                  |",
    "                                                                                  |       ~",
    "                                                                                  |",
    "                                                                                  |          ~",
    "__________________________________________________________________________________|  ~"
]);
Database.addAscii("places/quests/fortress/xinopherydon", 17, 6, [
    " ___",
    "/o  \\___     ___",
    "\\__     \\___/  o\\",
    "   \\     _     _/",
    "    \\   / \\   /",
    "     \\_/   \\_/"
]);
Database.addAscii("places/quests/fortress/room2", 100, 17, [
    "                           ~                         ~                        ~",
    "                ~                              ~                                             ~",
    "    ~                                                       ~         ~",
    "________________________________________________________________________________________________ ~",
    "                                                                                                \\",
    "                                                                                                 |",
    "                                                                                                 | ~",
    "                                                                                                 |",
    "                                                                                                 |",
    "                                                                                                 |",
    "                                                                                                 |",
    "                                                                                                 | ~",
    "                                                                                                 |",
    "____________________                                                            ________________/",
    "        ~           \\________________                       ___________________/           ~      ~",
    "                ~              ~     \\_____________________/           ~",
    "    ~                                           ~                                  ~            ~"
]);
Database.addAscii("places/quests/fortress/room1", 208, 31, [
    "        ~                ~                                 ~                               ~                                  ~                                                           ~                    ~",
    "________________________________________________________________________________________________________________________________________________________________________________________________________",
    "                                  |   |                                                                                                                                                                 \\",
    "                                  |   |                                                                                                                                                                  |",
    "                                  | ~ |                                                                                                                                                                  | ~",
    "                                  |   |                                                                                                                                                                  |",
    "                                  |   |                                                                                                                                                                  |",
    "______________                    |  ~|                                                                                                                       __________________________________________/",
    "              \\                   |   |                                                                                                                      /                                               ~",
    "          ~    |                  |   |                                                   ____________     ___________________________________               |                      ~",
    "               |                  |   |                   ____     __      _     ___     /            |   /          ~                   ~    \\              |       ~",
    "  ~            |                  |~  |                  /    \\   /  \\    / \\   /   \\    |    ~       |   \\___________________________________/              |                                         ~",
    "               |                  \\___/         ____     |   ~|   |  |    | |   |   |    |            |                                                      |                              ~",
    "               |                               /    \\    |    |   | ~|    | |   |~  |    |            |                                                      |          ~",
    "               |                   _______     |    |    |    |   |  |    | |   |   |    |            |_____     _____________________________               |                       ~                        ~",
    "    ~          |                  /       \\    |    |    |    |   |  |    |~|   |   |    |        ~         |   /         ~          ~        \\              |                                    ~",
    "               |                  |       |    | ~  |    | ~  |   |  |    | |   | ~ |    |                  |   \\_____________________________/              |",
    "               |                  |     ~ |    |    |    |    |   \\__/    \\_/   \\___/    |               ~  |                                                |                        _________________________",
    "            ~  |                  | ~     |    |    |    |    \\_____________________     | ~                |                                                |    ~                  /                         |",
    "               |                  |       |    |    |    |                          |    |                  |_____     _______________________               |               ~      /                          |",
    "     ~         |                  |       |    |    |    |                          |    |                        |   /  ~       ~          ~ \\              |                     /                           |",
    "               |                  |       |    |    |    |           ~              |    |       ~                |   \\_______________________/              \\____________________/                            |",
    "               |                  |    ~  |    |  ~ |    |                       ~  |    |                        |                                                                      _                     |",
    "               |                  |       |    |    |    |     ~                    |    |                  ~     |                                                                     | |                    |",
    "          ~    |                  |       |    |    |    |                          |    |                        |_____________________________________________              _____     | |___________________/",
    "               |                  | ~     |    |    |    |                          |    |  ~                                                                 ~ \\            /     \\    |",
    "  ~            |                  |       |    |    |    |                ~         |    |          ~                     ~               ~                     |            |  ~  |    |    ~          ~",
    "               |                  |       |    |~   |    |                          |    |                                                      ~               |            |     |    |",
    "               |                  |       |    |    |    |   ~                      |    |                                                                      |            |     |    |                     ~",
    "            ~  |                  |   ~   |    |    |    |          ~           ~   |    |      ~              ~               ~                      ~         |            | ~   |    |          ~",
    "   ~           |__________________|_______|____|    |____|__________________________|____|______________________________________________________________________|____________|_____|____|_______________________"
]);
Database.addAscii("places/quests/fortress/teapot", 19, 6, [
    "",
    ". -   .-'¨ ¨ '-.",
    " \\%\\./`¨ ¨ ¨ ¨ ¨ ¨ `\\/'\".",
    "  \\%;%%%%%%%%%%;%%\"",
    "   \\;%%%%%%%%%%;%.\"",
    "     \\________/ \""
]);
Database.addAscii("places/quests/cellar/rat", 3, 1, [
    "rat"
]);
Database.addAscii("places/quests/castle/room1/background", 100, 24, [
    "",
    "",
    "       ________________________________________________________________________________________",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |____",
    "      |",
    "      |",
    "      |                                                                                         ____",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |________________________________________________________________________________________|"
]);
Database.addAscii("places/quests/castle/room3/monster", 13, 4, [
    "\\  _______  /",
    " \\/%%%%%%%\\/",
    "  \\%В°%.%В°%/",
    "   \\_____/"
]);
Database.addAscii("places/quests/castle/room3/background", 100, 24, [
    "",
    "",
    "       ________________________________________________________________________________________",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |",
    "      |                                                                                        |____",
    "      |",
    "      |",
    "      |_____________________________________________________________________________________________"
]);
Database.addAscii("places/quests/castle/room3/egg", 2, 1, [
    "()"
]);
Database.addAscii("places/quests/desert/tripodCamel2", 7, 2, [
    "Q_/\\/\\",
    "  | ||`"
]);
Database.addAscii("places/quests/desert/birdLeftUp", 9, 3, [
    "     //",
    "<>__//_",
    "  \\___/-<"
]);
Database.addAscii("places/quests/desert/birdRightDown", 9, 4, [
    "",
    "  _____<>",
    ">-\\//_/",
    "  //"
]);
Database.addAscii("places/quests/desert/camel", 7, 2, [
    "Q_/\\/\\",
    "  ||||`"
]);
Database.addAscii("places/quests/desert/tripodCamel1", 7, 2, [
    "Q_/\\/\\",
    "  || |`"
]);
Database.addAscii("places/quests/desert/birdLeftDown", 9, 4, [
    "",
    "<>_____",
    "  \\_\\\\/-<",
    "     \\\\"
]);
Database.addAscii("places/quests/desert/background", 149, 9, [
    "      //^\\\\                            //^\\\\                                                     //^\\\\",
    "       '#'                              '#'                                                       '#'                                //^\\\\",
    "       #                                 #                                                        #                                   '#'",
    "      #                                  #                                                       #                                      #",
    "      #                                  #                                                       #                                      #",
    " _.,--#---~--,._                        _#,--~---~--,._                         _.,--~---~---._   #                  _.,--~---~--,._     #",
    "'               '*-,._            _.,-*'               '*-,._            _.,-~*'      ~        '*-#.           ._,-*'         ~     '*-,.#",
    "   ~                  '*-,.__.,-*'      ~     ~              '-,.__.,--*'                  ~       '*-,.__.,-*'       ~                   '-,.__.,-*'",
    "         ~       ~             ~                     ~                      ~                           ~                        ~"
]);
Database.addAscii("places/quests/desert/birdRightUp", 9, 3, [
    "  \\\\",
    "  _\\\\__<>",
    ">-\\___/"
]);
Database.addAscii("places/quests/giantNougatMonster/monster", 15, 4, [
    " .-'¨ ¨ ¨ ¨ ¨ ¨ ¨ '.",
    "/-%%%%%%%%%%%'.",
    "\\%%%%%%%%%%%%.'",
    " '-._._._._-'"
]);
Database.addAscii("places/quests/giantNougatMonster/monsterAwake", 15, 4, [
    " .-'¨ ¨ ¨ ¨ ¨ ¨ ¨ '.",
    "/o%%%%%%%%%%%'.",
    "\\%%%%%%%%%%%%.'",
    " '-._._._._-'"
]);
Database.addAscii("places/quests/giantNougatMonster/monsterAngry", 15, 4, [
    " .-'¨ ¨ ¨ ¨ ¨ ¨ ¨ '.",
    "/O%%%%%%%%%%%'.",
    "\\%%%%%%%%%%%%.'",
    " '-._._._._-'"
]);
Database.addAscii("places/quests/monkeyWizard/monkeyWizard", 4, 4, [
    "   W",
    " O_|",
    "/| |",
    "( )|"
]);
Database.addAscii("places/quests/monkeyWizard/roof", 100, 5, [
    "     .         .               .               .                    .         .               .",
    "       ___________ .               .                        .       ___              .",
    "  ____/           \\_____    .                ______________________/   \\___________              .",
    " /                      \\___________________/                                      \\_______________",
    "/                                                                                                  \\"
]);
Database.addAscii("places/quests/bridge/troll", 15, 10, [
    "           /\\",
    "    (_)   /< \\>",
    "    /в€ћ\\  <\\ >/>",
    "  __\\Г¶/_   ||",
    " /  O-O \\_/|3",
    "| /|:::|\\_/||",
    "| ||~~~|   ()",
    "mm |\\_/|",
    "   || ||",
    "  /_|/_|"
]);
Database.addAscii("places/quests/bridge/bridge", 138, 15, [
    "__________________________________________________________________________________________________________________________________________",
    "¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "__________________________________________________________________________________________________________________________________________",
    "   \\__    __/                                                   \\__    __/                                                    \\__    __/",
    "      |  |                                                         |  |                                                          |  |",
    "      |  |                                                         |  |                                                          |  |",
    "      |  |                                                         |  |                                                          |  |",
    "      |  |                                          -._       \\    |  |,    /       _.-                                          |  |",
    "      |  |                                             '-._      .d|  | b.      _.-'                                             |  |",
    "      |  |                                                      d  |  |   b    '                                                 |  |",
    "      |  |                                                     d   |  |    b                                                     |  |",
    "В°ВєВ¤Гё,¨ |  |ВєВ°`В°ВєВ¤Гё,¨ ,ГёВ¤В°ВєВ¤Гё,¨ ¨ ,ГёВ¤ВєВ°`В°ВєВ¤Гё,¨ ,ГёВ¤ВєВ°`В°ВєВ¤Гё,¨ ,ГёВ¤В°ВєВ¤Гё,¨ ¨ ,ГёВ¤Вє|  |В¤Гё,¨ ,ГёВ¤ВєВ°`В°ВєВ¤Гё,¨ ,ГёВ¤В°ВєВ¤Гё,¨ ¨ ,ГёВ¤ВєВ°`В°ВєВ¤Гё,¨ ,ГёВ¤ВєВ°`В°ВєВ¤Гё,¨ ,ГёВ¤В°ВєВ¤Гё,|  |В¤ВєВ°`В°",
    " ~ ~ ~|  | ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |  |~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ |  |~ ~ ~",
    "~~~~~~|~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~|~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|~~|~~~~~",
    "~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~"
]);
Database.addAscii("places/cauldron/bookPage1", 38, 18, [
    "                                     1",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "              ~ Summary ~",
    "                ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "",
    " Page 2 : Health potion",
    " Page 3 : Turtle potion",
    " Pages 4-5 : Anti-gravity potion",
    " Pages 6-7 : Berserk potion",
    " Pages 8-9 : The P potion",
    " Pages 10-11 : The X potion",
    ""
]);
Database.addAscii("places/cauldron/bookPage8", 40, 26, [
    "8",
    "              The P potion",
    "              ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "  The P potion is a strange one. You",
    "cannot predict what it is going to do.",
    "It could heal you or damage you, make",
    "you stronger or weaker, or even turn you",
    "into someone (something?) else.",
    "",
    "  And it's also hard to brew!",
    "",
    "  Instructions :",
    "   - Put 500 candies in your cauldron",
    "   - Mix for a few seconds",
    "   - Stop mixing",
    "   - Add 100 times more candies than the",
    "number of seconds you mixed. For example",
    "if you mixed during 4 seconds, you'll",
    "need to add 400 candies. Do not multiply",
    "this quantity, even if you want to make",
    "more than one potion.",
    "   - Heat up until the water is lukewarm",
    "   - Stop heating up",
    "   - Add some lollipops",
    "   - Mix",
    "   - Put into bottles!"
]);
Database.addAscii("places/cauldron/bookPage6", 40, 23, [
    "6",
    "",
    "",
    "",
    "             Berserk potion",
    "             ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "  The berserk potion transforms you into",
    "a berserker.",
    "",
    "  The drawback is that it consumes half",
    "of your life.",
    "",
    "  The benefit is that it doubles your",
    "damage for a few seconds!",
    "",
    "  Brewing this potions is very simple,",
    "but you will need a lot of lollipops.",
    "Here are the instructions :",
    "   - Put 20 000 lollipops in your",
    "     cauldron",
    "   - Mix them until your arms are",
    "     hurting",
    "   - Put into bottles"
]);
Database.addAscii("places/cauldron/bookPage5", 39, 23, [
    "                                     5",
    "",
    "",
    "     Anti-gravity potion : use case",
    "     ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "           \"Fly above a gap\"",
    "",
    "",
    "_____\\o/_______            ____________",
    "              /            \\",
    "",
    "",
    "   *drinks the potion*",
    "__________\\o/__            ____________",
    "              /            \\",
    "",
    "",
    "_______________     \\o/    ____________",
    "              /            \\",
    "",
    "",
    "_______________            __\\o/_______",
    "              /            \\"
]);
Database.addAscii("places/cauldron/bookPage2", 39, 22, [
    "2",
    "",
    "",
    "",
    "              Health potion",
    "              ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "",
    "  The health potion is one of the",
    "easiest to brew, really. It only",
    "requires candies. Used in quests, it",
    "will heal you by giving you back 100",
    "health points.",
    "",
    "  Instructions :",
    "   - Put 100 candies in your cauldron",
    "   - Mix for a few seconds",
    "   - Put into bottles",
    "",
    "  Just like for any potion, you can of",
    "course multiply the quantities. For",
    "example, if you use 300 candies instead",
    "of 100, you will get 3 health potions."
]);
Database.addAscii("places/cauldron/bookPage11", 39, 26, [
    "                                    11",
    "",
    " - Finally, the following poem is often",
    "quoted when it comes to the X potion :",
    "",
    "          On the first day,",
    "it gave birth to the very first Sweet.",
    "       But it was cold outside.",
    "",
    "          On the second day,",
    "      it gave the Sweet a father.",
    "       But it was cold outside.",
    "",
    "          On the third day,",
    "      it gave the Sweet a brother.",
    "       But it was cold outside.",
    "",
    "          On the fourth day,",
    "      it gave the Sweet a friend.",
    "       But it was cold outside.",
    "",
    "          On the fifth day,",
    "      it gave the Sweet a lover,",
    "   and it may sound simple or silly,",
    "     but now the Sweet was happy,",
    "       and it was hot outside."
]);
Database.addAscii("places/cauldron/bookPage7", 38, 20, [
    "                                     7",
    "",
    "",
    "",
    "",
    "",
    "",
    "           Important notice",
    "           ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "     concerning the berserk potion",
    "     ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "",
    "  Do NOT add any candy when brewing",
    "this potion.",
    "",
    "  I mean, not a single one.",
    "",
    "  Really.",
    "",
    "  Results would be unexpected."
]);
Database.addAscii("places/cauldron/cauldron", 42, 18, [
    "            _________________",
    "           (_________________)",
    "          .-'               '-.",
    "        .'                     '.",
    "       /                         \\",
    "      '                           '",
    "     '                             '",
    "    '                               '",
    "    '                               '",
    "    '                               '",
    "     \\                             /",
    "      '.                         .'",
    "        '-.___________________.-'",
    "            / /           \\ \\",
    "           / /             \\ \\",
    "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW",
    "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
    "¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ "
]);
Database.addAscii("places/cauldron/bookPage3", 39, 26, [
    "                                     3",
    "",
    "             Turtle potion",
    "             ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "  The turtle potion is a bit harder to",
    "brew than the health potion. You will",
    "need both candies and lollipops.",
    "",
    "  If you drink this potion in a quest,",
    "it will turn you into a turtle. You",
    "will move slower, but you will also be",
    "more resistant to you enemies attacks.",
    "",
    "  Instructions :",
    "   - Put 50 candies in your cauldron",
    "   - Add 500 lollipops in your cauldron",
    "   - Mix during more or less 10 seconds",
    "   - Stop mixing",
    "   - Add 50 candies",
    "   - Mix again for a few seconds",
    "   - Put into bottles",
    "",
    "  And now the most important thing you",
    "should never forget : once you will be",
    "a turtle, do NOT turn over. You",
    "wouldn't be able to get up."
]);
Database.addAscii("places/cauldron/bookPage9", 40, 21, [
    "                                     9",
    "",
    "",
    "",
    "",
    "    Make a good use of the P potion",
    "    ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "  There are some rules which you can",
    "follow in order to get better results",
    "when drinking the P potion. Although",
    "these rules were defined empirically,",
    "they seem to work pretty well.",
    "",
    "  - The more you use P potions, the more",
    "they seem to have strange effects.",
    "",
    "  - If your health is very low, you",
    "should probably drink a P potion.",
    "",
    "  - Animals drinking P potions seem to",
    "react in a very bad way."
]);
Database.addAscii("places/cauldron/bookPage10", 40, 26, [
    "10",
    "              The X potion",
    "              ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "  The X potion is a legend. It is said",
    "that whoever manage to brew it and drink",
    "it would travel to a place where no one",
    "have been before.",
    "",
    "  I don't know if this potion is just a",
    "legend or not, but I will write in this",
    "book everything I know about it.",
    "",
    "  The X potion is mentioned in many old",
    "legends and alchemy books. Here's a",
    "summary of the informations which may",
    "help you to brew it. Good luck!",
    "",
    " - It is said that 5 steps are necessary",
    "to brew the X potion.",
    "",
    " - It is said that no lollipops are",
    "required, except for one of the steps.",
    "",
    " - It is said that, unlike for other",
    "potions, you can't brew multiple X",
    "potions at once."
]);
Database.addAscii("places/cauldron/bookPage0", 39, 22, [
    "0",
    "",
    "",
    "______                   _",
    "| ___ \\                 (_)",
    "| |_/ /_ __ _____      ___ _ __   __ _",
    "| ___ \\ '__/ _ \\ \\ /\\ / / | '_ \\ / _` |",
    "| |_/ / | |  __/\\ V  V /| | | | | (_| |",
    "\\____/|_|  \\___| \\_/\\_/ |_|_| |_|\\__, |",
    "                                  __/ |",
    "                                 |___/",
    "                   _",
    "      ___         (_)         __",
    "    \\/   \\/   +    |   -->    )(",
    "    /\\___/\\        |         /  \\",
    "                   |        (____)",
    "                                    _",
    "                                   | |",
    "  _ __ ___   __ _ _ __  _   _  __ _| |",
    " | '_ ` _ \\ / _` | '_ \\| | | |/ _` | |",
    " | | | | | | (_| | | | | |_| | (_| | |",
    " |_| |_| |_|\\__,_|_| |_|\\__,_|\\__,_|_|"
]);
Database.addAscii("places/cauldron/book", 96, 30, [
    "      _________________________________________   ________________________________________",
    " _.-' |                                        \\ /                                       | '-._",
    "| | | |                                         v                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |                                         |                                        | | | |",
    "| | | |_________________________________________|________________________________________| | | |",
    "| | |'__________________________________________^________________________________________'.| | |",
    "|_|'___________________________________________/ \\_________________________________________'.|_|"
]);
Database.addAscii("places/cauldron/bookPage4", 40, 25, [
    "4",
    "",
    "",
    "           Anti-gravity potion",
    "           ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "  This potion, which was invented by the",
    "well-known sorcerer Isaac, allows you to",
    "resist to the earth's gravitation force",
    "for a few seconds.",
    "",
    "  It is especially useful after jumping",
    "(if you can't jump, you should seriously",
    "consider obtaining a pogo stick).",
    "",
    "  It isn't very easy to brew, you will",
    "need to heat up your cauldron and watch",
    "the temperature carefully.",
    "",
    "  Instructions :",
    "   - Put 1000 candies in your cauldron",
    "   - Heat up until the water is lukewarm",
    "   - Stop heating up",
    "   - Add 1000 candies",
    "   - Heat up until the water is boiling",
    "   - Put into bottles"
]);
Database.addAscii("places/sorceressHut/broom", 9, 27, [
    "    v",
    "    v",
    "   (*)",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   |_|",
    " .'   '.",
    "/_______\\",
    "|||||||||",
    "|||||||||",
    "|||||||||",
    " \\|||||/",
    "  ^^^^^"
]);
Database.addAscii("places/sorceressHut/hat", 28, 7, [
    "                   _.-.",
    "                .-'%%~%'.",
    "             _.'%%¨ _.'-._\\",
    "           .'%%%%~|      '",
    "          '%¨ %%%%%-",
    ".________/_________\\_______.",
    " ¨ ¨ В°¨ В°¨ ¨             ¨ В°¨ ¨ ¨ В°¨ "
]);
Database.addAscii("places/sorceressHut/shelves", 56, 18, [
    "                      _____",
    "        __          _|=====|       ___ _",
    "  _    |==|      __|F|     |__    |TSN|P|   __ _",
    " |S|___|  |_ _ _|xx| |MAGIC|  |   |   | |__|CO|T|__ __",
    " | |   |17| | | |__| |CAKES|->|   |   | |JV|  |A|H2|G2|",
    " | |W:A|  |M|L|P|  | |     |->|   |   | |  |42|O|  |  |",
    "_|_|___|==|_|_|_|xx|_|=====|__|___|666|_|__|__|G|__|__|_",
    "¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ _¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ _¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "   __          |P|   _  __                _____\\ \\",
    "  |XX|_ _ _ _ _| |  |K|\\  \\     .---.    (_____|\\ \\",
    "  |  |1|2|3|4|5| |  | | \\  \\   ( X X )   (_____| \\ \\",
    "__|XX|_|_|_|_|_|_|__|_|__\\__\\___|_V_|____(_____|__\\_\\___",
    "¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "        ._.      __      |__|         {w} {v}      ..",
    "  O     | |      )(     //00\\\\        _|___|_      ||",
    " .o.  .'=B='.   /  \\    ||  ||        \\     /    .'IP'.",
    "_/_\\__'.___.'__(____)___\\\\__//_________\\___/_____'.__.'_",
    "¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ "
]);
Database.addAscii("places/sorceressHut/cauldron", 42, 18, [
    "            _________________",
    "           (_________________)",
    "          .-'%%%%%%%%%%%%%%%'-.",
    "        .'%%%%%%%%%%%%%%%%%%%%%'.",
    "       /%%%%%%%%%%%%%%%%%%%%%%%%%\\",
    "      '%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "     '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'",
    "     \\%%%%%%%%%%%%%%%%%%%%%%%%%%%%%/",
    "      '.%%%%%%%%%%%%%%%%%%%%%%%%%.'",
    "        '-.___________________.-'",
    "            /%/           \\%\\",
    "           /%/             \\%\\",
    "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW",
    "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM",
    "¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ "
]);
Database.addAscii("places/sorceressHut/background", 286, 45, [
    "             |                                                                                                                    |",
    "             |                                                                                                                    |",
    "             |                                                                                                                    |",
    "             |             ___                                                                                                    |",
    "             |          .-'   '-.                                                                                                 |",
    "             |         /         \\                                                                                                |",
    "             |         |  ~   ~  |                                                                                                |",
    "             |         \\ (.) (.) /                                                                                                |",
    "             |          |   /   |                                                                                                 |",
    "             |          \\   0.  /                                                                                                 |",
    "             |          (   _   )                                                                                                 |",
    "             |        __.\\     /._                                                                                                |",
    "             |    _.-'  (|'._.'|)  '-._                                                                                           |",
    "             |  .'       '-___-'       '.                                                                                         |",
    "             |.'    ~              ¨      '.                                                                                       |",
    "             .'                           '.                                                                                      |",
    "            /                               \\                                                                                     |",
    "           .'                ¨               '.                                                                                    |",
    "           /                                 \\.                                                                                   |",
    "          .'     ¨                            '.                                                                                   |",
    "          '                       ~           '                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |              ¨                     |                                                                                   |",
    "          |                               ¨    |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |           ~                       |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |    ¨                               |                                                                                   |",
    "          |                        ¨           |                                                                                   |",
    "          |             ¨                      |                                                                                   |",
    "          |                     ~             |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |        ¨                           |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          |                            ¨       |                                                                                   |",
    "          |                                   |                                                                                   |",
    "          \\            ~                      /                                                                                   |",
    "           '._~                 ~        ~_ .'____________________________________________________________________________________|",
    "            .''-.--._.-' -. _. -'-._ _ .-'                                                                                        '.",
    "          .'       |В°-В°|       |В°-В°|                                                                                                '.",
    "        .'        .'~  )       (  ~'.                                                                                                 '.",
    "      .'        .' - .'         '. - '.                                                                                                 '.",
    "    .'         / - .'             '. - \\                                                                                                  '.",
    "  .'          |_.-'                 '-._|                                                                                                   '.",
    ".'                                                                                                                                            '.                                                                                                                                            '."
]);
Database.addAscii("places/sorceressHut/grimoire", 2, 4, [
    "__",
    "ar",
    "fb",
    "tp"
]);
Database.addAscii("places/sorceressHut/lollipop", 5, 1, [
    "o----"
]);
Database.addAscii("places/sorceressHut/grimoire2", 4, 5, [
    " ___",
    "|",
    "|era",
    "|tho",
    "|shi"
]);
Database.addAscii("places/fortress/inside", 100, 32, [
    "                              |                                      |",
    "                              |                                      |",
    "                              |                                      |",
    "                              |                                      |",
    "                              |           _______________            |",
    "                              |          |               |           |",
    "                              |          |               |           |",
    "                  _.-'|       |          |               |           |       |'-._",
    "              _.-'    |       |          |              /|           |       |    '-._",
    "          _.-'        |       |          |             / |           |       |        '-._",
    "       .-'            |       |          |            /  |           |       |            '-.",
    "       |              |       |          |           /   |           |       |              |",
    "       |              |       |          |          /    |           |       |              |",
    "       |              |       |          |         /     |           |       |              |",
    "       |              |       |          |        /      |           |       |              |",
    "       |              |       |          |       /       |           |       |              |",
    "       |              |       |          |      /        |           |       |              |",
    "       |              |       |          |     /         |           |       |              |",
    "       |              |       |          |    /          |           |       |              |",
    "       |              |       |          |   /           |           |       |              |",
    "       |              |       |          |  /            |           |       |              |",
    "       |-._           |       |          | /             |           |       |           _.-|",
    "       |   '-._       |       |__________|/              |___________|       |       _.-'   |",
    "       |       '-._   |    _.-'                                      '-._    |   _.-'       |",
    "       |           '-.|_.-'                                              '-._|.-'           |",
    "       |                                                                                    |",
    "       |                                                                                    |",
    "       |                                                                                    |",
    "       |                                                                                    |",
    "    _.-'                                                                                     '-._",
    "_.-'                                                                                             '-.",
    ""
]);
Database.addAscii("places/castle/map", 106, 34, [
    "                               |____|",
    "                               |____|",
    "                               |____|",
    "                               |____|",
    " ______________________________|    |_____________________________",
    "|                                   ¨                              |",
    "|  ¨                 ¨                               ¨      ¨         |",
    "|                            ¨            ¨                       ¨  |",
    "|        ¨        ¨                  ¨              ¨                 |                          _____",
    "|______________          ________________________________ ¨        |                      _.-'     '-._",
    "|              |        |                                |        |_____________       .'             '.",
    "|              |     ¨   |                                | ¨           ¨          |     /                 \\",
    "|              #        |                                |      ¨     .-'-'-. ¨   |____;                   ;",
    "|              #  ¨      |                                |          /o      '.      #                    |",
    "|              |        |                                |   ¨       \\o      .'   ___#                    |",
    "|______________|        |                                |       ¨    '-.-.-'   ¨ |    ;                   ;",
    "|              |      ¨  |                                #         _____________|     \\                 /",
    "|              |        |                                #     ¨   |                    '._           _.'",
    "|              #        |                                |        |                       '-._____.-'",
    "|              #        |                                | ¨       |",
    "|              | ¨       |                                |      ¨  |",
    "|______________|    ¨    |                                |        |",
    "|              |        |________________________________|        |",
    "|              |                          ¨                  ¨      |",
    "|              #    ¨         ¨                        ¨             |",
    "|              #                   ¨           ¨                    |",
    "|              | ¨          ¨            ¨            ¨          ¨     |",
    "|______________|_______________________          _________________|",
    "                                       |  ¨      |",
    "                                       |        |",
    "                                       |      ¨  |",
    "                                       | ¨       |",
    "                                       |___  ___|",
    "                                           ##"
]);
Database.addAscii("places/castle/bigRoom/background", 160, 27, [
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                                                                                                               |",
    "        |                                                  _.- - - - -._                                                                                |",
    "        |                                              _.-'             '-._                                                                            |",
    "        |                                           .-'     _.- - - -._     '-.                                                                         |",
    "        |                                          /     .-'           '-.     \\                                                                        |",
    "        |                                         /     / |  o       o  | \\     \\                                                                       |",
    "        |                                         |    /  |      _      |  \\    |                                                                       |",
    "        |                                         |    |  |    .' '.    |  |    |                                                                       |",
    "        |                                         |    |  |_____________|  |    |                                                                       |",
    "        |                                         |    | /               \\ |    |                                                                       |",
    "        |                                         |____|/_________________\\|____|                                                                       |",
    "        |                                         |                             |                                                                       |",
    "        |                                         |         ___________         |                                                                       |",
    "        |                                         |        | |       | |        |                                                                       |",
    "        |_________________________________________|        | |_______| |        |_______________________________________________________________________|",
    "       /                                          |        | /       \\ |        |                                                                       \\",
    "      /                                           |________|/         \\|________|                                                                        \\",
    "     /                                                                                                                                                    \\",
    "    /                                                                                                                                                      \\",
    "   /                                                                                                                                                        \\",
    "  /                                                                                                                                                          \\",
    " /                                                                                                                                                            \\",
    "/                                                                                                                                                              \\"
]);
Database.addAscii("places/castle/room2/pitchfork", 12, 8, [
    "      /    /",
    "     /    /",
    "    /    /",
    "   /    /",
    "  /    /",
    " /    /",
    " ////",
    "////"
]);
Database.addAscii("places/castle/room2/fire", 16, 6, [
    "     _ /\\ _",
    "  .-' // \\ '-.",
    " (_; /_/ \\\\ ;_)",
    "(_; // | \\ \\\\ .)",
    "( `.__ _  ___,')",
    " `'(_ )_)(_)_)'"
]);
Database.addAscii("places/castle/tower/talkingCandy", 5, 2, [
    "\\.-./",
    "/'-'\\"
]);
Database.addAscii("places/castle/tower/castleTower", 90, 95, [
    "       /                                                                          \\",
    "      /                ¨                          ¨            ¨         ¨             \\",
    "     /                             ¨                 ¨                                \\",
    "    /        ¨                              ¨                                          \\",
    "   /                                                         ¨                    ¨     \\",
    "  /                       ¨      ¨                                                       \\",
    " /    ¨    ¨        ¨                             ¨                                         \\",
    "/                                                                     ¨          ¨         \\",
    "|'_                    ¨             ¨                                                   _'|",
    "|  ''--..___                                 ¨        ¨         ¨                ___..--''  |",
    "|           '''---....____                                      ____....---'''           |",
    "|                         '''''-----.....________.....-----'''''                         |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                                                                        |",
    "|                                        ________                                        |",
    "|                     ____.....-----'''''        '''''-----.....____                     |",
    "|                    /                                              \\                    |",
    "|                   /                                                \\                   |",
    "|                  /__________________________________________________\\                  |",
    "|                  |   _____        _____        _____        _____   |                  |",
    "|                  |  /     \\      /     \\      /     \\      /     \\  |                  |",
    "|                  | /       \\    /       \\    /       \\    /       \\ |                  |",
    "|                  ||         |  |         |  |         |  |         ||                  |",
    "|        ___...---'| \\       /    \\       /    \\       /    \\       / |'---...___        |",
    "| _..--''  ____ _  |  \\_____/      \\_____/      \\_____/      \\_____/  |          ''--.._ |",
    "|'_      .'____.'  |__________________________________________________|                _'|",
    "|  ''--..___                                                                  ___..--''  |",
    "|       |   '''---....____                                      ____....---'''   |       |",
    "|__     |         |       '''''-----.....________.....-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "|  ''--.|___      |           |              |             |           |      ___|.--''  |",
    "|   |       '''---|...____    |              |             |    ____...|---'''       |   |",
    "|__ |        |          | '''''-----.....____|___.....-----''''' |          |        | __|",
    "|  ''--..___ |          |            |              |            |          | ___..--''  |",
    "|       |   '''---....__|_           |              |           _|__....---'''   |       |",
    "|__     |         |       '''''-----.|...________...|.-----'''''       |         |     __|",
    "   ''--.|___      |           |              |             |           |      ___|.--''",
    "            '''---|...____    |              |             |    ____...|---'''",
    "                          '''''-----.....____|___.....-----'''''"
]);
Database.addAscii("places/aTree/ticTacToeX", 2, 2, [
    "\\/",
    "/\\"
]);
Database.addAscii("places/aTree/background", 70, 52, [
    "            |   |",
    "            |   |",
    "  |             |",
    "  |             |",
    "  |             |",
    "                |",
    "                |        _.-'''-,",
    "                |      .'        `\\",
    "                |     /           /",
    "       |        |    /      .--^_^",
    "       |        |    |     /  C ,,\\",
    "                |    |    |   \\  _.)                           ___",
    "                |     \\   |   /  \\                   ____.----'.-'",
    "                |      '-, \\./ \\)\\)               .-' --  __.-'",
    "    |            \\        `-/   );/           ___/  - _.-'",
    "    |             \\_________''--'-'________.-' --    /",
    "    |              -   --        -  -     -     __.-'",
    "                     -    --    -     --   --  /",
    "                   _________________________.-'",
    "                  /",
    "                 /",
    "                |",
    "          |     |",
    "          |     |",
    "          |     |",
    "          |     |",
    "                |",
    "                |",
    "                |",
    "                |",
    "      |         |",
    "      |         |",
    "      |         |",
    "                |",
    "                |",
    "                |",
    "                |",
    "  |             |",
    "  |             |",
    "             |  |",
    "             |  |",
    "                |",
    "                |",
    "                |",
    "                |",
    "  |             |",
    "  |             |",
    "  |             |",
    "  |             |",
    "            |   |",
    "            |   |",
    "                |^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
]);
Database.addAscii("places/aTree/ticTacToeO", 4, 3, [
    " __",
    "|  |",
    "|__|"
]);
Database.addAscii("places/aTree/ticTacToeBoard", 22, 13, [
    " _____________________",
    "|      |      |      |",
    "|      |      |      |",
    "|      |      |      |",
    "|______|______|______|",
    "|      |      |      |",
    "|      |      |      |",
    "|      |      |      |",
    "|______|______|______|",
    "|      |      |      |",
    "|      |      |      |",
    "|      |      |      |",
    "|______|______|______|"
]);
Database.addAscii("places/lollipopFarm/lolligatorRightFull", 13, 2, [
    ".-.__.^^^^^o/",
    "'-'  ¨ ¨ ¨ ¨ ¨ ¨  \\"
]);
Database.addAscii("places/lollipopFarm/lolligatorLeftFull", 12, 2, [
    "\\o^^^^.__.-.",
    "/ ¨ ¨ ¨ ¨ ¨   '-'"
]);
Database.addAscii("places/lollipopFarm/lolligatorLeftTop", 12, 1, [
    "_o^^^^.__.-."
]);
Database.addAscii("places/lollipopFarm/pond", 52, 15, [
    "                    _____",
    "            _____.-'     \\____         |",
    "       ____/        ~        (_______  !|",
    "      (       ~                      '-.!||",
    "       \\                 ~            (_ !!|||",
    "        :                       ~       '-.!!!|",
    "       /            ~                      '-.!",
    " ______)     ~                     ~          \\",
    "(_                                             \\",
    "  \\  ~             ~                    ~       '-.",
    "   \\                        ~                  ~   )",
    "    \\____                                    ___.-'",
    "         '-.     ~                ~         /",
    "            '-.________           _________/",
    "                       '-._____.-'"
]);
Database.addAscii("places/lollipopFarm/lollipopFarm", 102, 28, [
    "                                     _______________________________________________",
    "                                    /-----------------------------------------------\\",
    "                                   /-------------------------------------------------\\",
    "                                  /___________________________________________________\\",
    "                                 /|  __________           _____            _________  |\\",
    "                                  | [__________]         |  |  |          [_________] |",
    "                                  |                      | .|. |                      |",
    "                                  |                      |  |  |                      |",
    "¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ",
    "                  :---:---:---:---:---:---:---:---:---:",
    "                 /  ______________________________   /",
    "                :  /                             /  :",
    "               /  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  /",
    "              :  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  :",
    "             /  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  /",
    "            :  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  :",
    "           /  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  /",
    "          :  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  :",
    "         /  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  /",
    "        :  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  :",
    "       /  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  /",
    "      :  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  :",
    "     /  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  /",
    "    :  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  :",
    "   /  /  #.#/#!#/#&#   #*#/#ВЈ#/#В§#  /  /",
    "  :  /_____________________________/  :",
    " /                                   /",
    ":---:---:---:---:---:---:---:---:---:"
]);
Database.addAscii("places/lollipopFarm/mill", 19, 15, [
    "        __",
    " /'.   /**\\   .'\\",
    "/   './    \\.'   \\",
    "'-._  '.__.'  _.-'",
    "   |'-.(==).-'|",
    "   |_.-;||;-._|",
    "_.-'  .'--'.  '-._",
    "\\   .'------'.    /",
    " \\.'|--------|'._/",
    "    |--------|",
    "    |---()---|",
    "    |________|",
    "     /      \\",
    "",
    ""
]);
Database.addAscii("places/lollipopFarm/lolligatorRightTop", 13, 1, [
    ".-.__.^^^^^o_"
]);
Database.addAscii("general/inventoryTop", 99, 55, [
    "               ______                                 __",
    "              /\\__  _\\                               /\\ \\__",
    "              \\/_/\\ \\/     ___   __  __     __    ___\\ \\ ,_\\   ___   _ __   __  __",
    "                 \\ \\ \\   /. _ `\\/\\ \\/\\ \\  /.__`\\/. _ `\\ \\ \\/  / __`\\/\\`.__\\/\\ \\/\\ \\",
    "                  \\_\\ \\__/\\ \\/\\ \\ \\ \\_/ |/\\  __//\\ \\/\\ \\ \\ \\_/\\ \\L\\ \\ \\ \\/ \\ \\ \\_\\ \\",
    "                  /\\_____\\ \\_\\ \\_\\ \\___/ \\ \\____\\ \\_\\ \\_\\ \\__\\ \\____/\\ \\_\\  \\/`____ \\",
    "                  \\/_____/\\/_/\\/_/\\/__/   \\/____/\\/_/\\/_/\\/__/\\/___/  \\/_/   `/___/> \\",
    "                                                                                /\\___/",
    "                                                                                \\/__/",
    "",
    " _________________________________________________________________________________________________",
    "(                                                                                                ()",
    " |                                                                                               |",
    " |  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}                                                       |",
    " |  {(              WEAPON              )}          \\                                            |",
    " |  { )                                ( }       / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ / \\ \\                                           |",
    " |  {(                                  )}      / / ) )                                          |",
    " |  { )                                ( }     / / \\ /                                           |",
    " |  {(                                  )}    ( ( \\ \\                                            |",
    " |  { )                                ( }     \\ \\ \\ \\                                           |",
    " |  {(                                  )}      \\ \\ ) )                                          |",
    " |  {~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~}                                                       |",
    " |                                                                                               |",
    " |   /=======================================================================================\\   |",
    " |   | Max HP :          - Weapon damage :            - Weapon speed :                       |   |",
    " |   |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|   |",
    " |   |                                                                                       |   |"
]);
Database.addAscii("general/openBox", 29, 25, [
    "            _____",
    "       ____/|   |\\____",
    "      |\\_____________/|",
    "      ||             ||",
    "      ||             ||",
    "      ||             ||",
    "      ||             ||",
    "      ||_____________||",
    "      |/_____________\\|",
    "     /I               I\\",
    "    / I               I \\",
    "   /  I               I  \\",
    "  /   I               I   \\",
    " /    I               I    \\",
    "|:¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ \\_______/¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ :|",
    "|:                         :|",
    "|:                         :|",
    "|:  ___    .-\"\"\"-.    ___  :|",
    "|:  \\  \\  /\\ \\ \\ \\\\  /  /  :|",
    "|:   }  \\/\\ \\ \\ \\ \\\\/  {   :|",
    "|:   }  /\\ \\ \\ \\ \\ /\\  {   :|",
    "|:  /__/  \\ \\ \\ \\ /  \\__\\  :|",
    "|:         '-...-'         :|",
    "|:.........................:|",
    "|___________________________|"
]);
Database.addAscii("general/candyRoom", 50, 7, [
    "                 ___                        ____",
    "               \\/   \\/                    \\/    \\/",
    "       _____   /\\___/\\ _   ____     _     /\\____/\\",
    "     \\/     \\/   (_)  (_)\\/    \\/  (_)       (_)",
    "     /\\_____/\\    |    | /\\____/\\   |   ___   |",
    "     \\/     \\/    |    | \\/    \\/   | \\/   \\/ |",
    "     /\\_____/\\    |    | /\\____/\\   | /\\___/\\ |"
]);
Database.addAscii("general/inventoryBodyArmour", 21, 12, [
    ".....................",
    ".    BODY ARMOUR    .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    ".                   .",
    "....................."
]);
Database.addAscii("general/inventoryGloves", 13, 12, [
    ".............",
    ".  GLOVES   .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    ".           .",
    "............."
]);
Database.addAscii("general/inventoryHat", 36, 12, [
    "....................................",
    ".                HAT               .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    "...................................."
]);
Database.addAscii("general/inventoryBottom", 99, 75, [
    " |   \\=======================================================================================/   |",
    " |   _________________________________________________________________________________________   |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [---------------------][---------------------][---------------------][--------------------]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [                     ][                     ][                     ][                    ]  |",
    " |  [_____________________][_____________________][_____________________][____________________]  |",
    " |                                                                                               |",
    " (_______________________________________________________________________________________________()"
]);
Database.addAscii("general/inventoryBoots", 36, 12, [
    "....................................",
    ".              BOOTS               .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    ".                                  .",
    "...................................."
]);
Database.addAscii("general/box", 29, 25, [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    " ___________________________",
    "|:''''''''''''''''''''''''':|",
    "|:          _____          :|",
    "|:         /     \\         :|",
    "|_________(_[   ]_)_________|",
    "|:¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ \\_____/¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ ¨ :|",
    "|:                         :|",
    "|:                         :|",
    "|:  ___    .-\"\"\"-.    ___  :|",
    "|:  \\  \\  /\\ \\ \\ \\\\  /  /  :|",
    "|:   }  \\/\\ \\ \\ \\ \\\\/  {   :|",
    "|:   }  /\\ \\ \\ \\ \\ /\\  {   :|",
    "|:  /__/  \\ \\ \\ \\ /  \\__\\  :|",
    "|:         '-...-'         :|",
    "|:.........................:|",
    "|___________________________|"
]);
Database.addAscii("general/specialAbilityBackground", 98, 1, [
    " |   |                                                                                       |   |"
]);
Database.addAscii("general/translaCAT", 19, 16, [
    "   |\\___/|",
    "  /       \\",
    " / <*> <*> \\",
    "/___  V  ___\\",
    "    |   |",
    "    |    \\______",
    "    /           \\",
    "   |             |",
    " __/              \\",
    "|_______        __/",
    "        |      /",
    "         \\  __/",
    "        _/ /  __",
    "       / /    \\ \\",
    "      | |_____/ /",
    "       \\_______/"
]);
Database.addAscii("general/theComputer/computer", 62, 24, [
    "                                            _________________",
    "                                           |                 |",
    "                                           |   ___________   |",
    "                                           |  |   .....   |  |",
    " ______________________________________    |  |___________|  |",
    "|  __________________________________  |   |   ___________   |",
    "| |                                  | |   |  |   .....   |  |",
    "| |                                  | |   |  |___________|  |",
    "| |                                  | |   |   __   __   _   |",
    "| |                                  | |   |  |__| |__| |_|  |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |                 |",
    "| |                                  | |   |       .|.       |",
    "| |                                  | |   |      (   )      |",
    "| |                                  | |   |       '-'       |",
    "| |__________________________________| |   |                 |",
    "|______________________________________|   |                 |",
    "                 |    |      '.            |                 |",
    "                 |    |        '-.-'-.-'-.-|                 |",
    "                 )    (                    |                 |",
    "                /      \\                   |                 |",
    "               /________\\                  |_________________|"
]);
Database.addAscii("general/insideYourBox/10", 14, 3, [
    " ____________",
    "/__/__/__/__/|",
    "|__|__|__|__|/"
]);
Database.addAscii("general/insideYourBox/3", 5, 1, [
    "o----"
]);
Database.addAscii("general/insideYourBox/4", 1, 3, [
    "o",
    "|",
    "|"
]);
Database.addAscii("general/insideYourBox/text", 90, 12, [
    "                                __   __                          _",
    "                                \\%\\ /%/__ _  _  __ __ _____ _ _ |%|",
    "                                 \\%V%/%_%\\%||%| \\%V%%V%/%_%\\%'%\\|_|",
    "                                  |_|\\___/\\_,_|  \\_/\\_/\\___/_||_(_)",
    "           __   __                            _                        _ _   _   _",
    "           \\%\\ /%/__ _  _   _ _  _____ __ __ |%|_  __ ___ _____   __ _|%|%| |%|_|%|_  ___",
    "            \\%V%/%_%\\%||%| |%'%\\/%_%\\%V%%V%/ |%'%\\/%_`%\\%V%/%-_) /%_`%|%|%| |%%_|%'%\\/%-_)",
    "             |_|\\___/\\_,_| |_||_\\___/\\_/\\_/  |_||_\\__,_|\\_/\\___| \\__,_|_|_|  \\__|_||_\\___|",
    "                                _        _        _   _                         _    _ _",
    "              ____ __ _____ ___|%|_ ___ (_)_ _   |%|_|%|_  ___  __ __ _____ _ _|%|__|%|%|",
    "             (_-<%V%%V%/%-_)%-_)%%_(_-< |%|%'%\\  |%%_|%'%\\/%-_) \\%V%%V%/%_%\\%'_|%/%_`%|_|",
    "             /__/\\_/\\_/\\___\\___|\\__/__/ |_|_||_|  \\__|_||_\\___|  \\_/\\_/\\___/_| |_\\__,_(_)"
]);
Database.addAscii("general/insideYourBox/2", 5, 1, [
    "----o"
]);
Database.addAscii("general/insideYourBox/8", 3, 9, [
    " _",
    "| |",
    "|\\|",
    "|\\|",
    "| |",
    "| |",
    "|\\|",
    "|\\|",
    "|_|"
]);
Database.addAscii("general/insideYourBox/7", 3, 9, [
    " _",
    "| |",
    "|/|",
    "|/|",
    "| |",
    "| |",
    "|/|",
    "|/|",
    "|_|"
]);
Database.addAscii("general/insideYourBox/5", 8, 2, [
    "/\\.--./\\",
    "\\/'--'\\/"
]);
Database.addAscii("general/insideYourBox/0", 5, 2, [
    "\\.-./",
    "/'-'\\"
]);
Database.addAscii("general/insideYourBox/1", 1, 3, [
    "o",
    "|",
    "|"
]);
Database.addAscii("general/insideYourBox/9", 17, 3, [
    " _______________",
    "/__/__/__/__/__/|",
    "|__|__|__|__|__|/"
]);
Database.addAscii("general/insideYourBox/6", 3, 5, [
    " _",
    "(_)",
    " |",
    " |",
    " |"
]);
Database.addAscii("eqItems/weapons/tribalSpear", 14, 27, [
    "    /\\",
    "   //\\\\",
    "  //¨ ¨ \\\\",
    " //¨ ¨ ¨ ¨ \\\\",
    "//¨ ¨ ¨ ¨ ¨ ¨ \\\\",
    "\\\\¨ ¨ ¨ ¨ ¨ ¨ //",
    " \\\\¨ ¨ ¨ ¨ //",
    "  \\____/",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||",
    "    ||   ____",
    "    ||__/////\\",
    "    ||\\_\\\\\\\\\\/",
    "    |||-\\",
    "    ||\\|-\\",
    "    || \\|-\\",
    "    ||  \\_|",
    "    ||",
    "    ||",
    "   ([])"
]);
Database.addAscii("eqItems/weapons/monkeyWizardStaff", 9, 19, [
    " .  .  .",
    "/ \\/ \\/ \\",
    "\\_     _/",
    "  \\_ _/",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   | |",
    "   |_|",
    "   ( )",
    "  _/ \\_",
    " /_____\\"
]);
Database.addAscii("eqItems/weapons/polishedSilverSword", 12, 21, [
    "     ^",
    "    / \\",
    "    ) (",
    "   <   >",
    "    ) (",
    "    | |",
    "    ) (",
    "   <   >",
    "    ) (",
    "    | |",
    "    ) (",
    "   <   >",
    " .  ) (  .",
    " |\\_| |_/|",
    "< В¤_ В¤ _В¤ >",
    " |/ \\_/ \\|",
    " '  [-]  '",
    "    [-]",
    "    [-]",
    "    [-]",
    "   (___)"
]);
Database.addAscii("eqItems/weapons/scythe", 30, 32, [
    " /\\",
    " )(",
    " ||",
    "| (|______",
    "|) |      '---____",
    "| (|              '--__",
    "|) |______              '-.",
    "| (|______'----.___        \\",
    " ||      '----.___'---._    \\",
    " ||               '--- ._\\_  |",
    " ||                      \\_\\ |",
    " ||                        \\\\|",
    " ||                         \\|",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " ||",
    " /\\",
    " \\/"
]);
Database.addAscii("eqItems/weapons/giantSpoonOfDoom", 13, 31, [
    "     .-.",
    "   .: # :.",
    "  :     # :",
    " :  #      :",
    ":       #   :",
    ":  #        :",
    ":     #     :",
    " : #     # :",
    "  :.   # .:",
    "    :___:",
    "    |   |",
    "    |#  |",
    "    |  #|",
    "    |   |",
    "    |  #|",
    "    |   |",
    "    | # |",
    "    |   |",
    "    |   |",
    "    | # |",
    "    |   |",
    "    |#  |",
    "    |   |",
    "    | # |",
    "    |   |",
    "    |  #|",
    "    |  #|",
    "    |   |",
    "    |#  |",
    "    |   |",
    "    '-.-'"
]);
Database.addAscii("eqItems/weapons/giantSpoon", 13, 31, [
    "     .-.",
    "   .:   :.",
    "  :       :",
    " :         :",
    ":           :",
    ":           :",
    ":           :",
    " :         :",
    "  :.     .:",
    "    :___:",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    |   |",
    "    '-.-'"
]);
Database.addAscii("eqItems/weapons/ironAxe", 11, 12, [
    "   /\\  |\\",
    " __)(__) \\",
    "(__{}__   >",
    "   ||  ) /",
    "   ||  |/",
    "   ||",
    "   ||",
    "   ||",
    "   ||",
    "   ||",
    "   /\\",
    "  '--'"
]);
Database.addAscii("eqItems/weapons/enchantedMonkeyWizardStaff", 11, 21, [
    " .   *   .",
    "{*}\\/o\\/{*}",
    " '.o O o.'",
    "  \\  o  /",
    "   {_O_}",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    | |",
    "    (*)",
    "    (*)",
    "    (*)"
]);
Database.addAscii("eqItems/weapons/woodenSword", 9, 18, [
    "    ^",
    "   / \\",
    "   | |",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "   |||",
    "_  |||  _",
    "\\\\_|_|_//",
    " \\_____/",
    "   (x)",
    "   (x)",
    "   (x)"
]);
Database.addAscii("eqItems/weapons/summoningTribalSpear", 18, 29, [
    "        /\\",
    "       //\\\\",
    "      //в–Ів–І\\\\",
    "     //в–Ів–Ів–Ів–І\\\\",
    "    //в–Ів–Ів–Ів–Ів–Ів–І\\\\",
    "    \\\\в–Ів–Ів–Ів–Ів–Ів–І//",
    "     \\\\в–Ів–Ів–Ів–І//",
    "      \\____/",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    "        ||",
    " ____   ||   ____",
    "/\\\\\\\\\\__||__/////\\",
    "\\/////_/||\\_\\\\\\\\\\/",
    "     /-||||-\\",
    "    /-|/||\\|-\\",
    "   /-|/ || \\|-\\",
    "   |_/  ||  \\_|",
    "        ||",
    "        ||",
    "       ([])"
]);
Database.addAscii("eqItems/weapons/trollBludgeon", 12, 18, [
    "    _/\\_",
    "   /____\\",
    " <)    > (>",
    " /  <     \\",
    "<)        (>",
    " \\ <   >  /",
    " <) ____ (>",
    "   \\____/",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "    |  |",
    "   (____)"
]);
Database.addAscii("eqItems/boots/leatherBoots", 16, 5, [
    "  ____",
    "  \\   |   ____",
    " __)  |  |   /",
    "(_____)  |  (__",
    "         (_____)"
]);
Database.addAscii("eqItems/boots/rocketBoots", 33, 8, [
    "                  _______",
    " _______         (____/ <|",
    "(____/ <|        (___/  <|",
    "(___/  <|        (__/   <\\______",
    "(__/   <\\______  /.-._.-.-'-._.-\\",
    "/.-._.-.-'-._.-\\ \\___ ______ ___/",
    "\\___ ______ ___/    /\"\\    /\"\\",
    "   /\"\\    /\"\\"
]);
Database.addAscii("eqItems/boots/bootsOfIntrospection", 29, 8, [
    "  ?                         ?",
    "        ____    ?",
    "    ?   \\   |   ____   ?",
    "       __)  |  |   /",
    "      (_____)  |  (__",
    "               (_____)  ?",
    "  ?",
    "           ?        ?"
]);
Database.addAscii("eqItems/gloves/leatherGloves", 11, 8, [
    "  .~.~.~.",
    "  | | | |~.",
    "  | | | | |",
    "  | | | | |",
    "~ |       |",
    "\\`\\       |",
    " \\        |",
    "  \\______/"
]);
Database.addAscii("eqItems/gloves/pinkEnchantedGloves", 11, 8, [
    "  .~.~.~.",
    "  | | | |~.",
    "  | | | | |",
    "  | | | | |",
    "~ |       |",
    "\\`\\ (\\/)  |",
    " \\   \\/   |",
    "  \\______/"
]);
Database.addAscii("eqItems/gloves/redEnchantedGloves", 11, 8, [
    "  .~.~.~.",
    "  | | | |~.",
    "  | | | | |",
    "  | | | | |",
    "~ |       |",
    "\\`\\ # # # |",
    " \\  ##### |",
    "  \\______/"
]);
Database.addAscii("eqItems/hats/merchantHat", 17, 3, [
    "      .---.",
    "     |     |",
    "'-.__|_____|__.-'"
]);
Database.addAscii("eqItems/hats/octopusKingCrownWithJaspers", 9, 3, [
    "|\\/\\_/\\/|",
    "| o O o |",
    "ВЇВЇВЇВЇВЇВЇВЇВЇВЇ"
]);
Database.addAscii("eqItems/hats/sorceressHat", 28, 7, [
    "                   _.-.",
    "                .-'  ~ '.",
    "             _.'  ¨ _.'-._\\",
    "           .'    ~|      '",
    "          ' ¨      -",
    ".________/_________\\_______.",
    " ¨ ¨ В°¨ В°¨ ¨             ¨ В°¨ ¨ ¨ В°¨ "
]);
Database.addAscii("eqItems/hats/octopusKingCrownWithObsidian", 9, 3, [
    "|\\/\\_/\\/|",
    "| w W w |",
    "ВЇВЇВЇВЇВЇВЇВЇВЇВЇ"
]);
Database.addAscii("eqItems/hats/octopusKingCrown", 9, 3, [
    "|\\/\\_/\\/|",
    "| . : . |",
    "ВЇВЇВЇВЇВЇВЇВЇВЇВЇ"
]);
Database.addAscii("eqItems/bodyArmours/lightweightBodyArmour", 11, 7, [
    " \\       /",
    " |'-._.-'|",
    " |       |",
    "/         \\",
    "\\         /",
    " '.     .'",
    "   '-.-'"
]);
Database.addAscii("eqItems/bodyArmours/knightBodyArmour", 13, 8, [
    " \\\\       //",
    " | '-._.-' |",
    " |         |",
    "/  :::::::  \\",
    "|  ::KNI::  |",
    "\\  :::::::  /",
    " '.       .'",
    "   '-._.-'"
]);
Database.addAscii("eqItems/bodyArmours/enchantedKnightBodyArmour", 13, 8, [
    " \\\\       //",
    " |*'-._.-' |",
    " |     *  *|",
    "/   *       \\",
    "|*     *  * |",
    "\\           /",
    " '. *  *  .'",
    "   '-._.-'"
]);
Database.addAscii("text/Saving", 34, 6, [
    "  ____              _",
    " / ___|  __ ___   _(_)_ __   __ _",
    " \\___ \\ / _` \\ \\ / / | '_ \\ / _` |",
    "  ___) | (_| |\\ V /| | | | | (_| |",
    " |____/ \\__,_| \\_/ |_|_| |_|\\__, |",
    "                            |___/"
]);
Database.addAscii("text/Configuration", 65, 6, [
    "   ____             __ _                       _   _",
    "  / ___|___  _ __  / _(_) __ _ _   _ _ __ __ _| |_(_) ___  _ __",
    " | |   / _ \\| '_ \\| |_| |/ _` | | | | '__/ _` | __| |/ _ \\| '_ \\",
    " | |__| (_) | | | |  _| | (_| | |_| | | | (_| | |_| | (_) | | | |",
    "  \\____\\___/|_| |_|_| |_|\\__, |\\__,_|_|  \\__,_|\\__|_|\\___/|_| |_|",
    "                         |___/"
]);
Database.addAscii("text/About", 32, 5, [
    "     _    _                 _",
    "    / \\  | |__   ___  _   _| |_",
    "   / _ \\ | '_ \\ / _ \\| | | | __|",
    "  / ___ \\| |_) | (_) | |_| | |_",
    " /_/   \\_\\_.__/ \\___/ \\__,_|\\__|"
]);
Database.addAscii("text/Loading", 39, 6, [
    "  _                    _ _",
    " | |    ___   __ _  __| (_)_ __   __ _",
    " | |   / _ \\ / _` |/ _` | | '_ \\ / _` |",
    " | |__| (_) | (_| | (_| | | | | | (_| |",
    " |_____\\___/ \\__,_|\\__,_|_|_| |_|\\__, |",
    "                                 |___/"
]);
Database.addAscii("gridItems/timeRing", 11, 9, [
    "    ___",
    "   / | \\",
    "  (  o- )",
    "   \\   /",
    "  .-'-'-.",
    " //     \\\\",
    "((       ))",
    " \\\\     //",
    "  '-._.-'"
]);
Database.addAscii("gridItems/beginnersGrimoire", 7, 11, [
    "   .  .",
    "  ////|",
    " //// |",
    "|==|  |",
    "|  |  |",
    "|ar|  |",
    "|fb|  |",
    "|tp|  |",
    "|  | /",
    "|==|/",
    "'--'"
]);
Database.addAscii("gridItems/purpleSharkFin", 15, 5, [
    "   .´",
    "  /(",
    " /  \\  (purple)",
    "/    `.",
    "ВЇВЇВЇВЇВЇВЇВЇ"
]);
Database.addAscii("gridItems/p", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    P    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("gridItems/talkingCandy", 5, 2, [
    "\\.-./",
    "/'-'\\"
]);
Database.addAscii("gridItems/l", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    L    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("gridItems/fortressKey", 8, 10, [
    "   _",
    "  |:|_|\\",
    "  |: _ (",
    "  |:| |/",
    "  |:|",
    "  |:|",
    "  |:|",
    " /\\ /\\",
    "( -O- )",
    " \\/_\\/"
]);
Database.addAscii("gridItems/pitchfork", 12, 8, [
    "      /    /",
    "     /    /",
    "    /    /",
    "   /    /",
    "  /    /",
    " /    /",
    " ////",
    "////"
]);
Database.addAscii("gridItems/feather", 5, 6, [
    " _",
    "| \\",
    "\\-|\\",
    " \\-|\\",
    "  \\-|",
    "    \\"
]);
Database.addAscii("gridItems/mainMap", 17, 10, [
    " _______________",
    "/  8            \\",
    "| 888     .-'   |",
    "|  |  _.-'      |",
    "|    (          |",
    "|     )       ^ |",
    "|    /    ^  | ||",
    "|   /    | |    |",
    "| -'            |",
    "\\_______________/"
]);
Database.addAscii("gridItems/unicornHorn", 7, 4, [
    "\\.",
    " \\'.",
    "  \\ '.",
    "   \\,-'"
]);
Database.addAscii("gridItems/pogoStick", 13, 11, [
    " ___________",
    "(_____ _____)",
    "     | |",
    "     | |",
    "     | |",
    "     | |",
    "   __| |__",
    "  (_______)",
    "     | |",
    "     | |",
    "     |_|"
]);
Database.addAscii("gridItems/heartPlug", 17, 7, [
    "  /    /    /",
    " /____/____/",
    "/____/____/\\  /",
    "\\         \\ \\/",
    " \\   ***   \\/\\  /",
    "  \\   ***   \\ \\/",
    "   \\_________\\/"
]);
Database.addAscii("gridItems/shellPowder", 13, 5, [
    "   |z.-+);",
    "  -+|)='`%:",
    " })]`]}s)'.;",
    " -+{!%^;_\\'\".",
    "%;=)h;-+--(-]"
]);
Database.addAscii("gridItems/greenSharkFin", 14, 5, [
    "   .´",
    "  /(",
    " /  \\  (green)",
    "/    `.",
    "ВЇВЇВЇВЇВЇВЇВЇ"
]);
Database.addAscii("gridItems/heartPendant", 12, 11, [
    "\\          /",
    " \\        /",
    "  \\      /",
    "   \\    /",
    "    \\  /",
    "     \\/",
    "     ::",
    "   _ :: _",
    "  ( `\\/' )",
    "  `\\    /'",
    "    `\\/'"
]);
Database.addAscii("gridItems/sponge", 15, 7, [
    "      ___",
    "   .-'***'.",
    "  /~*****~ \\",
    " /*****~****'.",
    "(***~*********)",
    " '.*****~**__/",
    "  '-:::::-'"
]);
Database.addAscii("gridItems/redSharkFin", 12, 5, [
    "   .´",
    "  /(",
    " /  \\  (red)",
    "/    `.",
    "ВЇВЇВЇВЇВЇВЇВЇ"
]);
Database.addAscii("gridItems/thirdHouseKey", 8, 10, [
    "   _",
    "  | |_|\\",
    "  |  _ (",
    "  | | |/",
    "  | |",
    "  | |",
    "  | |",
    " /\\ /\\",
    "( -3- )",
    " \\/_\\/"
]);
Database.addAscii("gridItems/y", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    Y    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("gridItems/a", 11, 6, [
    "   _____",
    "  /     \\",
    " /       \\",
    "|    A    |",
    " \\       /",
    "  \\_____/"
]);
Database.addAscii("gridItems/blackMagicGrimoire", 9, 11, [
    "   .   .",
    "  //////|",
    " ////// |",
    "|====|  |",
    "| BM |  |",
    "|_/\\_|  |",
    "|\\  /|  |",
    "| \\/ |  |",
    "| OD | /",
    "|====|/",
    "'----'"
]);
Database.addAscii("gridItems/xinopherydonClaw", 12, 5, [
    "    _.---.",
    "  .'      '.",
    " '  .-'-.  |",
    "/ .'     '-'",
    "|/"
]);
Database.addAscii("gridItems/advancedGrimoire", 8, 11, [
    "   .  .",
    "  /////|",
    " ///// |",
    "|===|  |",
    "|   |  |",
    "|era|  |",
    "|tho|  |",
    "|shi|  |",
    "|   | /",
    "|===|/",
    "'---'"
]);
Database.addText("cz.mapVillageComment", "Vesnice");
Database.addText("cz.mapFortressComment", "PouЕЎtnГ­ chrГЎm");
Database.addText("cz.mapATreeComment", "Strom");
Database.addText("cz.mapTheDesertComment", "PouЕЎЕҐ");
Database.addText("cz.mapWishingWellComment", "Studna");
Database.addText("cz.mapLonelyHouseComment", "OsamД›lГЅ barГЎk");
Database.addText("cz.mapForestComment", "Les");
Database.addText("cz.mapCastleEntranceComment", "Vstup do hradu");
Database.addText("cz.mapCastleComment", "Hrad");
Database.addText("cz.mapDragonComment", "Drak");
Database.addText("cz.candyBoxEatCandiesButton", "SnГ­st vЕЎechny bonbГіnky");
Database.addText("cz.candyBoxThrowCandiesButton", "Hodit 10 bonbГіnЕЇ na zem");
Database.addText("cz.mapVillageAHouseComment", "DЕЇm");
Database.addText("cz.mapVillageForgeComment", "KovГЎrna");
Database.addText("cz.buttonBackToTheMap", "ZpД›t na mapu");
Database.addText("cz.mapSorceressHutComment", "PernГ­kovГЎ chaloupka");
Database.addText("cz.buttonBackToTheVillage", "ZpГЎtky do vesnice");
Database.addText("cz.mapATreeIntroductionSpeech", "Ahoj, jГЎ jsem veverka. VГ­m, Еѕe milujeЕЎ sladkosti, a mЕЇЕѕu ti jich dГЎt spoustu! Ale v tomhle lese se cГ­tГ­m straЕЎnД› sama...");
Database.addText("cz.mapATreeIntroductionButton", "MЕЇЕѕu ti pomoct?");
Database.addText("cz.mapATreeFirstQuestion", "Budu ti dГЎvat hГЎdanky. Pokud odpovГ­ЕЎ sprГЎvnД›, dostaneЕЎ slaДЏouДЌkou odmД›nu! PrvnГ­ otГЎzka: MГЎЕЎ opravdu, ale opravdu rГЎd bonbГіnky? (OdpovГ­dej v angliДЌtinД›)");
Database.addText("cz.mapATreeSecondQuestion", "SprГЎvnД›! Tady mГЎЕЎ 20 bonbГіnЕЇ. A teДЏ schvГЎlnД›, jak pokraДЌuje sГ©rie pГ­smen: S, E, I, D, N, A?");
Database.addText("cz.mapATreeThirdQuestion", "C jako CukrovГ­! Tady mГЎЕЎ 100 bonbГіnЕЇ. DalЕЎГ­ otГЎzka: Kolik bonbГіnЕЇ mГЎ nejbonbГіnovatД›jЕЎГ­ ДЌlovД›k na svД›tД›?");
Database.addText("cz.mapATreeFourthQuestion", "Ano! Tady mГЎЕЎ 500 bonbГіnЕЇ! DalЕЎГ­ odmД›na bude jeЕЎtД› zajГ­mavД›jЕЎГ­. A teДЏ hГЎdanka: Ve starobylГ©m lese roste velmi starГЅ strom, na kterГ©m ЕѕijГ­ nejchytЕ™ejЕЎГ­ zvГ­Е™ata na svД›tД›. ЕГ­kГЎ se, Еѕe onen strom mГЎ 60 koЕ™enЕЇ, 360 vД›tvГ­ a 2160 listЕЇ. Kolik mГЎ jizev na kmeni?");
Database.addText("cz.mapATreeFifthQuestion", "Gratuluji! Ano, mluvila jsem o svГ©m stromД›. Tady mГЎЕЎ 3 lГ­zГЎtka. Dobrou chuЕҐ! DalЕЎГ­ hГЎdanka, poslouchej pozornД›: Za ГєplЕ€ku hodГ­m ЕѕlutГЅ klobouk do rudГ©ho moЕ™e. Co se stane se ЕѕlutГЅm kloboukem?");
Database.addText("cz.mapATreeTicTacToeIntro", "SprГЎvnД›! To nebylo tak tД›ЕѕkГ©, Еѕe? Tady mГЎЕЎ tЕ™i tabulky ДЌokolГЎdy. Ale teДЏ trochu zmД›na. Zahrajeme si hru, co Е™Г­kГЎЕЎ?");
Database.addText("cz.mapATreeTicTacToeIntroButton", "JasnД›, proДЌ ne!");
Database.addText("cz.mapATreeTicTacToeLetsPlay", "Zahrajeme si piЕЎkvorky. HrГЎt budeme na mЕ™Г­Еѕce o velikosti 3x3. Ty si vezmeЕЎ kЕ™Г­Еѕky, jГЎ koleДЌka. Budeme se stЕ™Г­dat v tazГ­ch a cГ­lem je mГ­t tЕ™i znaДЌky v Е™adД›. NechГЎm tД› tГЎhnout prvnГ­ho!");
Database.addText("cz.mapATreeTicTacToeNobodyWins", "Tak jsme zaplnili celou hernГ­ plochu a nikomu z nГЎs se nepovedlo vyhrГЎt! ChceЕЎ to zkusit znova?");
Database.addText("cz.mapATreeTicTacToeYouLose", "MГЎm tЕ™i, vyhrГЎla jsem! ChceЕЎ to zkusit znova?");
Database.addText("cz.mapATreeTicTacToeTryAgainButton", "Ano, chci!");
Database.addText("cz.mapATreeTicTacToeYouWin", "Ups, takovГЅ tah jsem teda neДЌekala. Ale mГЎЕЎ tЕ™i v Е™adД›, to nemЕЇЕѕu popЕ™Г­t. VyhrГЎl jsi! Tady mГЎЕЎ odmД›nu; OtevЕ™e ti dveЕ™e od jednoho z domЕЇ ve vesnici.");
Database.addText("cz.mapATreeTicTacToeAnymoreSweet", "DД›kuji, veverko! ZnГЎЕЎ jeЕЎtД› nД›jakГ© hГЎdanky?");
Database.addText("cz.mapATreeNoMoreChallenge", "BohuЕѕel ne, uЕѕ jsem vyДЌerpala celou svoji zГЎsobu... Ale byla s tebou sranda, dД›kuju moc!");
Database.addText("cz.buttonExitQuestKeeping", "UkonДЌit vГЅpravu (a nechat si, cos naЕЎel)");
Database.addText("cz.buttonExitQuestNoKeeping", "UkonДЌit vГЅpravu (ale nic nedostaneЕЎ)");
Database.addText("cz.buttonExitQuestNoKeepingBecauseLose", "UkonДЌit vГЅpravu (umЕ™el jsi, takЕѕe nic nedostaneЕЎ)");
Database.addText("cz.mapVillageLockedHouseComment", "ZamДЌenГЅ dЕЇm");
Database.addText("cz.mapVillageForgeIntroductionSpeech", "Ahoj! JГЎ jsem kovГЎЕ™. MЕЇЕѕu ti prodat vЕЎemoЕѕnГ© druhy zbranГ­ a vГЅzbroje.");
Database.addText("cz.mapVillageForgeIntroductionSpeechNoMoreToSell", "Ahoj! JГЎ jsem kovГЎЕ™. BohuЕѕel uЕѕ nemГЎm nic na prodej. Ale kdyЕѕ se vrГЎtГ­ЕЎ pozdД›ji, moЕѕnГЎ za tu dobu nД›co vyrobГ­m.");
Database.addText("cz.mapVillageFifthHouseNoWeaponSpeech", "Ahoj. MЕЇj sklep je plnГЅ krys, potЕ™ebuju se jich zbavit... Kdyby tu tak byl nД›kdo, kdo by se o to mohl postarat...");
Database.addText("cz.mapVillageFifthHouseWeaponSpeech", "Hej, ty! VidГ­m, Еѕe u sebe mГЎЕЎ zbraЕ€! Mohl bys mД› zbavit krys ve sklepД›? OdmД›nГ­m se ti!");
Database.addText("cz.mapVillageFifthHouseAgree", "Tak jdeme na to!");
Database.addText("cz.mapVillageFifthHouseCellarDone", "DД›kuju, Еѕe jsi mД› zbavil tД›ch krys! Za odmД›nu ti dГЎm nД›co velmi cennГ©ho: Mapu svД›ta. MyslГ­m, Еѕe ji vyuЕѕijeЕЎ vГ­c, neЕѕ jГЎ.");
Database.addText("cz.mapVillageTheShopComment", "Obchod");
Database.addText("cz.mapBridgeComment", "Most");
Database.addText("cz.mapFarmComment", "Farma na lГ­zГЎtka");
Database.addText("cz.mapCaveEntranceComment", "Vstup do jeskynД›");
Database.addText("cz.mapLighthouseComment", "MajГЎk");
Database.addText("cz.mapPierComment", "Molo");
Database.addText("cz.mapTheHoleComment", "DГ­ra v zemi");
Database.addText("cz.candyBoxRequestStatusBarUnlocked", "PoЕѕГЎdat vГЅvojГЎЕ™e o novou funkci (30 bonbГіnЕЇ)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedCfg", "PoЕѕГЎdat o dalЕЎГ­ (5 bonbГіnЕЇ)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedSave", "PoЕѕГЎdat jeЕЎtД› o dalЕЎГ­ (5 bonbГіnЕЇ)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedHealthBar", "PoЕѕГЎdat o nД›co zajГ­mavД›jЕЎГ­ho (5 bonbГіnЕЇ)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedMap", "PoslednГ­ ЕѕГЎdost! Snad to tentokrГЎt bude stГЎt za to. (10 bonbГіnЕЇ)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedComment", "Odemknul jsi stavovГЅ Е™ГЎdek! (NahoЕ™e)");
Database.addText("cz.candyBoxRequestStatusBarUnlockedCfgComment1", "TeДЏ mГЎЕЎ pЕ™Г­stup k nastavenГ­.");
Database.addText("cz.candyBoxRequestStatusBarUnlockedCfgComment2", "Jestli chceЕЎ, mЕЇЕѕeЕЎ zmД›nit jazyk.");
Database.addText("cz.candyBoxRequestStatusBarUnlockedSaveComment", "A teДЏ dokonce mЕЇЕѕeЕЎ uloЕѕit!");
Database.addText("cz.candyBoxRequestStatusBarUnlockedHealthBarComment", "Tady mГЎЕЎ 100 bodЕЇ zdravГ­. Budou se ti hodit.");
Database.addText("cz.cfgChooseLanguage", "VГЅbД›r jazyka:");
Database.addText("cz.cfgInvertColors", "Invertovat barvy?");
Database.addText("cz.gridItemMainMapName", "Mapa");
Database.addText("cz.gridItemMainMapDescription", "Mapa svД›ta");
Database.addText("cz.gridItemPogoStickName", "SkГЎkacГ­ tyДЌ");
Database.addText("cz.gridItemPogoStickDescription", "Tahle tyДЌ ti umoЕѕnГ­ skГЎkat bД›hem vГЅprav!");
Database.addText("cz.gridItemTimeRingName", "Prsten ДЌasu");
Database.addText("cz.gridItemTimeRingDescription", "DГ­ky tomuhle mЕЇЕѕeЕЎ bД›hem vГЅprav zpomalit ДЌas. Pokud je toho na tebe moc, pouЕѕij prsten ДЌasu!");
Database.addText("cz.gridItemThirdHouseKeyName", "KlГ­ДЌ od tЕ™etГ­ho domu");
Database.addText("cz.gridItemThirdHouseKeyDescription", "Tento klГ­ДЌ ti umoЕѕnГ­ vstoupit do tЕ™etГ­ho domu ve vesnici. Jak neДЌekanГ©!");
Database.addText("cz.gridItemFeatherName", "SupГ­ pГ­rko");
Database.addText("cz.gridItemFeatherDescription", "Tohle kouzelnГ© pГ­rko ti umoЕѕnГ­ skГЎkat vГЅЕЎ, neЕѕ normГЎlnД›.");
Database.addText("cz.gridItemFeatherDescriptionNoPogoStick", "NevГ­ЕЎ proДЌ, ale mГЎЕЎ pocit, Еѕe by se ti tohle pГ­rko k nД›ДЌemu hodilo, kdybys mД›l skГЎkacГ­ tyДЌ...");
Database.addText("cz.gridItemSpongeName", "KouzelnГЎ houba");
Database.addText("cz.gridItemSpongeDescription", "DГ­ky tomuhle se mЕЇЕѕeЕЎ zmГЎДЌknout jako houba, takЕѕe budeЕЎ menЕЎГ­.");
Database.addText("cz.gridItemFortressKeyName", "KlГ­ДЌ od pouЕЎtnГ­ho chrГЎmu");
Database.addText("cz.gridItemFortressKeyDescription", "OdemykГЎ brГЎny starobylГ© pevnosti na severnГ­m kraji pouЕЎtД›. Kdo vГ­, co tam najdeЕЎ?");
Database.addText("cz.gridItemHeartPendantName", "SrdcovГЅ nГЎhrdelnГ­k");
Database.addText("cz.gridItemHeartPendantDescription", "Tento nГЎhrdelnГ­k zvГЅЕЎГ­ tvГ© zdravГ­, pokud ho nosГ­ЕЎ na krku.");
Database.addText("cz.gridItemHeartPlugName", "SrdeДЌnГ­ ДЌip");
Database.addText("cz.gridItemHeartPlugDescription", "Tento ДЌip byl vyroben ze Еѕeleza, pavouДЌГ­ch nohou a speciГЎlnГ­ zГЎhadnГ© tekutiny zapeДЌetД›nГ© uvnitЕ™. TvГ© zdravГ­ je zvГЅЕЎenГ© o 20 procent!");
Database.addText("cz.gridItemBeginnersGrimoireName", "Kniha kouzel pro zaДЌГЎteДЌnГ­ky");
Database.addText("cz.gridItemBeginnersGrimoireDescription", "Tato kniha tД› nauДЌГ­ tЕ™i pomД›rnД› jednoduchГЎ kouzla. PrvnГ­ je kyselГЅ dГ©ЕЎЕҐ, kterГЅ ti umoЕѕnГ­ vyvolat obrovskГ© mnoЕѕstvГ­ kyselinovГЅch kapek. DruhГ© kouzlo je ohnivГЎ koule, kterou mЕЇЕѕeЕЎ vypustit pЕ™ed sebe a vГЎЕѕnД› zranit jednoho nepЕ™Г­tele. A tЕ™etГ­ je kouzlo teleportace. DГЎvej pozor, nedГЎ se odhadnout, kde skonДЌГ­ЕЎ.");
Database.addText("cz.gridItemAdvancedGrimoireName", "Kniha kouzel pro pokroДЌilГ©");
Database.addText("cz.gridItemAdvancedGrimoireDescription", "Tato kniha tД› nauДЌГ­ dvД› pokroДЌilГЎ kouzla: ZniДЌenГ­ magie a ostnatГЅ ЕЎtГ­t. PrvnГ­ kouzlo vymaЕѕe ostatnГ­ kouzla, aЕҐ uЕѕ jsi je vyДЌaroval ty, nebo tvГ­ nepЕ™ГЎtelГ©. DruhГ© kouzlo kolem tebe vyvolГЎ ЕЎtГ­t z lГ©tajГ­cГ­ch ostnЕЇ, kterГ© ublГ­ЕѕГ­ kaЕѕdГ©mu, kdo se k tobД› pЕ™iblГ­ЕѕГ­.");
Database.addText("cz.gridItemBlackMagicGrimoireName", "Kniha ДЌernГ© magie");
Database.addText("cz.gridItemBlackMagicGrimoireDescription", "V jeskyni jsi naЕЎel knihu ДЌernГ© magie. Bylo hodnД› tД›ЕѕkГ© ji zГ­skat, a to z dobrГ©ho dЕЇvodu. Obsahuje totiЕѕ dvД› nebezpeДЌnГЎ temnГЎ kouzla. PrvnГ­ pЕ™ed tebou vytvoЕ™Г­ obЕ™Г­ zeДЏ z obsidiГЎnovГЅch kostek, coЕѕ mЕЇЕѕe bГЅt uЕѕiteДЌnГ© pro zpomalenГ­ nepЕ™ГЎtel. DruhГ© vyvolГЎ dГ©mony, kteЕ™Г­ se pokusГ­ zabГ­t vЕЎechno, co se hГЅbe (vДЌetnД› tebe). BuДЏ s nГ­m opatrnГЅ.");
Database.addText("cz.gridItemUnicornHornName", "Roh jednoroЕѕce");
Database.addText("cz.gridItemUnicornHornDescription", "Tento kouzelnГЅ roh ti pomЕЇЕѕe svou lГ©ДЌivou magiГ­. Ten jednoroЕѕec se prГЅ jmenoval Charlie.");
Database.addText("cz.gridItemXinopherydonClawName", "DrГЎp xinopherydona");
Database.addText("cz.gridItemXinopherydonClawDescription", "Tento hrozivГЅ drГЎp patЕ™il xinopherydonovi, prastarГ©mu dvouhlavГ©mu zvГ­Е™eti, kterГ© vЕЎichni mД›li za vyhynulГ©. TvГЎ zbraЕ€ bude dvakrГЎt niДЌivД›jЕЎГ­.");
Database.addText("cz.gridItemPitchforkName", "Vidle");
Database.addText("cz.gridItemPitchforkDescription", "Tyto speciГЎlnГ­ vidle ti umoЕѕnГ­ prohrГЎbnout hlГ­nu, aniЕѕ bys naruЕЎil podzemnГ­ ekosystГ©my. Produkce lГ­zГЎtek na tvГ© farmД› je tЕ™ikrГЎt vД›tЕЎГ­.");
Database.addText("cz.gridItemShellPowderName", "PrГЎЕЎek ze ЕЎkeble");
Database.addText("cz.gridItemShellPowderDescription", "Tento prГЎЕЎek je ДЌasto pouЕѕГ­vГЎn lГ­zГЎtkovГЅmi farmГЎЕ™i jako hnojivo. Produkce tvГ© lГ­zГЎtkovГ© farmy se dГ­ky nД›mu ztrojnГЎsobГ­!");
Database.addText("cz.gridItemPName", "KГЎmen P");
Database.addText("cz.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DВ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSВ°-J (`  /R`yM}  T$`` В°+-|U(\\OL&Y_)T|");
Database.addText("cz.gridItemLName", "KГЎmen L");
Database.addText("cz.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OВ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    В°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#В° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("cz.gridItemAName", "KГЎmen A");
Database.addText("cz.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITВ°#{  Oa$ GM T{Q \"S A-\\ F KmВ°& C #В° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("cz.gridItemYName", "KГЎmen Y");
Database.addText("cz.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  В°-  AX Y ` В° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_В°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EВ° I &L- /    K");
Database.addText("cz.gridItemRedSharkFinName", "ДЊervenГЎ ЕѕraloДЌГ­ ploutev");
Database.addText("cz.gridItemRedSharkFinDescription", "Tato kouzelnГЎ ploutev velmi posГ­lГ­ ohnivГ© koule, kterГ© sesГ­lГЎЕЎ. KoneДЌnД› to kouzlo k nД›ДЌemu bude.");
Database.addText("cz.gridItemGreenSharkFinName", "ZelenГЎ ЕѕraloДЌГ­ ploutev");
Database.addText("cz.gridItemGreenSharkFinDescription", "Tato kouzelnГЎ ploutev seЕЎle na tvou farmu poЕѕehnanГ­ samotnГ© Matky PЕ™Г­rody! TvГЎ produkce lГ­zГЎtek je pД›tkrГЎt vД›tЕЎГ­.");
Database.addText("cz.gridItemPurpleSharkFinName", "FialovГЎ ЕѕraloДЌГ­ ploutev");
Database.addText("cz.gridItemPurpleSharkFinDescription", "Tato kouzelnГЎ ploutev ti umoЕѕnГ­ sesГ­lat novГ© temnГ© kouzlo, kterГ© mЕЇЕѕeЕЎ pouЕѕГ­t pouze jedenkrГЎt za vГЅpravu. BuДЏ s nГ­m sakra opatrnГЅ!");
Database.addText("cz.gridItemTalkingCandyName", "MluvГ­cГ­ bonbГіnek");
Database.addText("cz.gridItemTalkingCandyDescription", "Tento bonbГіnek se objevil potГ©, co jsi na vrchol vД›Еѕe donesl vЕЎechny ДЌtyЕ™i kameny. MoЕѕnГЎ ti pomЕЇЕѕe otevЕ™Г­t truhlu se sladkostmi...");
Database.addText("cz.inventorySpecialNothingEqItem", "Nic");
Database.addText("cz.eqItemWeaponWoodenSwordName", "DЕ™evД›nГЅ meДЌ");
Database.addText("cz.eqItemWeaponWoodenSwordDescription", "JednoduchГЅ meДЌ vyrobenГЅ ze dЕ™eva");
Database.addText("cz.eqItemWeaponIronAxeName", "ЕЅeleznГЎ sekera");
Database.addText("cz.eqItemWeaponIronAxeDescription", "ProstГЎ ЕѕeleznГЎ sekera, je ale dobЕ™e nabrouЕЎenГЎ. Je samozЕ™ejmД› ГєДЌinnД›jЕЎГ­, neЕѕ dЕ™evД›nГЅ meДЌ.");
Database.addText("cz.eqItemWeaponPolishedSilverSwordName", "NaleЕЎtД›nГЅ stЕ™Г­brnГЅ meДЌ");
Database.addText("cz.eqItemWeaponPolishedSilverSwordDescription", "Velmi mocnГЅ meДЌ. Na ДЌepeli mГЎ vГЅhruЕѕnД› vypadajГ­cГ­ ostny.");
Database.addText("cz.eqItemWeaponTrollBludgeonName", "TrollЕЇv kyj");
Database.addText("cz.eqItemWeaponTrollBludgeonDescription", "Tenhle kyj jsi sebral z rukou trolla, kterГЅ hlГ­dal most. Je to pomalГЎ zbraЕ€, ale dГЎvГЎ sluЕЎnГ© rГЎny.");
Database.addText("cz.eqItemWeaponTribalSpearName", "DivoЕЎskГ© kopГ­");
Database.addText("cz.eqItemWeaponTribalSpearDescription", "Tohle kopГ­ jsi sebral mrtvole domorodГ©ho vГЎleДЌnГ­ka, ztracenГ©ho v hlubinГЎch obЕ™Г­ dГ­ry. Je to skvД›lГЎ zbraЕ€, kdyЕѕ si na ni zvykneЕЎ.");
Database.addText("cz.eqItemWeaponSummoningTribalSpearName", "VyvolГЎvaДЌovo divoЕЎskГ© kopГ­");
Database.addText("cz.eqItemWeaponSummoningTribalSpearDescription", "Tohle kopГ­ bylo oДЌarovГЎno. Je o trochu mocnД›jЕЎГ­, a taky v pravidelnГЅch intervalech pЕ™ivolГЎvГЎ domorodГ© vГЎleДЌnГ­ky, kteЕ™Г­ ti pomЕЇЕѕou na vГЅpravГЎch.");
Database.addText("cz.eqItemWeaponMonkeyWizardStaffName", "HЕЇl opiДЌГ­ho mГЎga");
Database.addText("cz.eqItemWeaponMonkeyWizardStaffDescription", "Tato hЕЇl patЕ™ila nahatГ©mu opiДЌГ­mu mГЎgovi. UmГ­ sama kouzlit, vyrГЎbГ­ navГЎdД›nГ© fialovГ© vГЅboje.");
Database.addText("cz.eqItemWeaponEnchantedMonkeyWizardStaffName", "OДЌarovanГЎ hЕЇl opiДЌГ­ho mГЎga");
Database.addText("cz.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "S touto holГ­ mЕЇЕѕeЕЎ mГЎvat o nД›co rychleji, a taky zvlГЎdne vyДЌarovat daleko vГ­ce vГЅbojЕЇ.");
Database.addText("cz.eqItemWeaponGiantSpoonName", "ObЕ™Г­ lЕѕГ­ce");
Database.addText("cz.eqItemWeaponGiantSpoonDescription", "Tuto obЕ™Г­ lЕѕГ­ci jsi naЕЎel v obЕ™Г­m ДЌajnГ­ku v pouЕЎtnГ­m chrГЎmu. NenГ­ jistГ©, jestli ji nД›kdo vЕЇbec nД›kdy pouЕѕil jako lЕѕГ­ci, ale jestli jo, tak musel bГЅt zatracenД› velkГЅ. NД›koho takovГ©ho bys nechtД›l potkat.");
Database.addText("cz.eqItemWeaponGiantSpoonOfDoomName", "ObЕ™Г­ LЕѕГ­ce ZkГЎzy");
Database.addText("cz.eqItemWeaponGiantSpoonOfDoomDescription", "Tato obЕ™Г­ lЕѕГ­ce je jeЕЎtД› mocnД›jЕЎГ­, neЕѕ obyДЌejnГЎ obЕ™Г­ lЕѕГ­ce, kterou jde najГ­t napЕ™Г­klad v obЕ™Г­m ДЌajnГ­ku. Je ale docela pomalГЎ.");
Database.addText("cz.eqItemWeaponScytheName", "Kosa");
Database.addText("cz.eqItemWeaponScytheDescription", "ЕГ­kГЎ se, Еѕe tato kosa patЕ™ila samotnГ©mu SmrЕҐovi. DГЎ se s nГ­ sekat extrГ©mnД› rychle.");
Database.addText("cz.eqItemHatMerchantHatName", "ObchodnГ­kЕЇv klobouk");
Database.addText("cz.eqItemHatMerchantHatDescription", "Tento klobouk jsi koupil od obchodnГ­ka se sladkostmi. ObchodnГ­k miluje bonbГіnky. Pokud mГЎЕЎ na sobД› tento klobouk, mnoЕѕstvГ­ bonbГіnЕЇ nalezenГЅch na vГЅpravГЎch bude vynГЎsobeno sedmi!");
Database.addText("cz.eqItemHatSorceressHatName", "Е piДЌatГЅ klobouk");
Database.addText("cz.eqItemHatSorceressHatDescription", "Tento klobouk pЕЇvodnД› patЕ™il ДЌarodД›jce. VГЅraznД› posГ­lГ­ tvГЎ kouzla a lektvary.");
Database.addText("cz.eqItemHatOctopusKingCrownName", "Koruna krГЎle chobotnic");
Database.addText("cz.eqItemHatOctopusKingCrownDescription", "PЕ™i noЕЎenГ­ tГ©to koruny jsi daleko sebejistД›jЕЎГ­. PЕ™i vГЅpravГЎch ti to moc nepomЕЇЕѕe, ale sebedЕЇvД›ra je pЕ™ece dЕЇleЕѕitГЎ!");
Database.addText("cz.eqItemHatOctopusKingCrownWithJaspersName", "Koruna krГЎle chobotnic, zdobenГЎ jaspisy");
Database.addText("cz.eqItemHatOctopusKingCrownWithJaspersDescription", "Tato oДЌarovanГЎ koruna je vyrobena ze zlata a ДЌervenГЅch jaspisЕЇ. PЕ™i vГЅpravГЎch bude kolem sebe metat mocnГ© ohnivГ© koule. A navГ­c se nГЎdhernД› leskne!");
Database.addText("cz.eqItemHatOctopusKingCrownWithObsidianName", "Koruna krГЎle chobotnic, zdobenГЎ obsidiГЎnem");
Database.addText("cz.eqItemHatOctopusKingCrownWithObsidianDescription", "Tato oДЌarovanГЎ koruna je vyrobena ze zlata a obsidiГЎnu. Je to pЕ™Г­mo skvostnГЅ umД›leckГЅ vГЅtvor. PЕ™i vГЅpravГЎch bude pravidelnД› vyvolГЎvat KrГЎle chobotnic, kterГЅ ti pomЕЇЕѕe v boji.");
Database.addText("cz.eqItemGlovesLeatherGlovesName", "KoЕѕenГ© rukavice");
Database.addText("cz.eqItemGlovesLeatherGlovesDescription", "Tyhle rukavice v podstatД› nic nedД›lajГ­. Ale aspoЕ€ jsou pohodlnГ© a mД›kkГ©!");
Database.addText("cz.eqItemGlovesRedEnchantedGlovesName", "ДЊervenГ© oДЌarovanГ© rukavice");
Database.addText("cz.eqItemGlovesRedEnchantedGlovesDescription", "Tyto oДЌarovanГ© rukavice rudД› svГ­tГ­ ve tmД›. PЕ™i vГЅpravГЎch budou nГЎhodnД› vypouЕЎtД›t malГ© ohnivГ© koule, coЕѕ se mЕЇЕѕe hodit, pokud se na tebe sГЎpe nД›jakГЎ obluda.");
Database.addText("cz.eqItemGlovesPinkEnchantedGlovesName", "RЕЇЕѕovГ© oДЌarovanГ© rukavice");
Database.addText("cz.eqItemGlovesPinkEnchantedGlovesDescription", "Tyto oДЌarovanГ© rukavice nechajГ­ rЕЇЕѕovou stopu na ДЌemkoliv, ДЌeho se dotkneЕЎ. Na vГЅpravГЎch tД› budou prЕЇbД›ЕѕnД› uzdravovat.");
Database.addText("cz.eqItemBootsRocketBootsName", "RaketovГ© boty");
Database.addText("cz.eqItemBootsRocketBootsDescription", "Tyto ГєЕѕasnГ© raketovГ© boty ti umoЕѕnГ­ skГЎkat ve vzduchu, takЕѕe v podstatД› lГ­tГЎЕЎ!");
Database.addText("cz.eqItemBootsLeatherBootsName", "KoЕѕenГ© boty");
Database.addText("cz.eqItemBootsLeatherBootsDescription", "JednoduchГ© koЕѕenГ© boty. NenГ­ na nich nic zvlГЎЕЎtnГ­ho.");
Database.addText("cz.eqItemBootsBootsOfIntrospectionName", "Boty meditace");
Database.addText("cz.eqItemBootsBootsOfIntrospectionDescription", "Uvolni se a zhluboka se nadechni. Pokud nosГ­ЕЎ tyto boty, tak se nikdy nebudeЕЎ hГЅbat, pokud stojГ­ЕЎ na zemi.");
Database.addText("cz.eqItemBodyArmoursLightweightBodyArmourName", "LehkГЅ hrudnГ­ plГЎt");
Database.addText("cz.eqItemBodyArmoursLightweightBodyArmourDescription", "Tato zbroj ti nabГ­dne zГЎkladnГ­ ochranu pЕ™ed nepЕ™ГЎtelskГЅmi Гєtoky. BudeЕЎ o troЕЎku odolnД›jЕЎГ­.");
Database.addText("cz.eqItemBodyArmoursKnightBodyArmourName", "RytГ­Е™skГЎ zbroj");
Database.addText("cz.eqItemBodyArmoursKnightBodyArmourDescription", "Tato silnГЎ zbroj tД› spolehlivД› ochrГЎnГ­ pЕ™ed vЕЎemi druhy zbranГ­. TvГЎ odolnost proti nepЕ™ГЎtelskГЅm ГєtokЕЇm bude velmi vysokГЎ.");
Database.addText("cz.eqItemBodyArmoursEnchantedKnightBodyArmourName", "OДЌarovanГЎ rytГ­Е™skГЎ zbroj");
Database.addText("cz.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Tohle je velmi zvlГЎЕЎtnГ­ druh zbroje. BudeЕЎ VELMI odolnГЅ proti nepЕ™ГЎtelskГЅm ГєtokЕЇm, ale tvГЎ zbraЕ€ bude mГ­t poloviДЌnГ­ ГєДЌinek.");
Database.addText("cz.mapVillageForgeBuyWoodenSwordButton", "Koupit dЕ™evД›nГЅ meДЌ (150 bonbГіnЕЇ)");
Database.addText("cz.mapVillageForgeBuyWoodenSwordSpeech", "DД›kuji za koupi! Tenhle meДЌ je sice pomД›rnД› slabГЅ, ale je to zaДЌГЎtek.");
Database.addText("cz.mapVillageForgeBuyIronAxeButton", "Koupit Еѕeleznou sekyru (400 bonbГіnЕЇ)");
Database.addText("cz.mapVillageForgeBuyIronAxeSpeech", "DoufГЎm, Еѕe se ti tahle sekyra bude lГ­bit. Zrovna jsem ji pro tebe nabrousil!");
Database.addText("cz.mapVillageForgeBuyPolishedSilverSwordButton", "Koupit naleЕЎtД›nГЅ stЕ™Г­brnГЅ meДЌ (2 000 bonbГіnЕЇ)");
Database.addText("cz.mapVillageForgeBuyPolishedSilverSwordSpeech", "VГЅroba tohohle meДЌe mi zabrala docela sluЕЎnou dobu. UjiЕЎЕҐuji tД›, Еѕe to za tu cenu stojГ­.");
Database.addText("cz.mapVillageForgeBuyLightweightBodyArmourButton", "Koupit lehkГЅ hrudnГ­ plГЎt (15 000 bonbГіnЕЇ)");
Database.addText("cz.mapVillageForgeBuyLightweightBodyArmourSpeech", "DГ­ky tГ©to zbroji budeЕЎ odolnД›jЕЎГ­ proti nepЕ™ГЎtelskГЅm ГєtokЕЇm.");
Database.addText("cz.mapVillageForgeBuyScytheButton", "Koupit kosu (5 000 000 bonbГіnЕЇ)");
Database.addText("cz.mapVillageForgeBuyScytheSpeech", "Trvalo mi to nД›kolik mД›sГ­cЕЇ, neЕѕ jsem vyrobil tuhle kosu. Tomuhle Е™Г­kГЎm umД›nГ­! Je to asi nejrychlejЕЎГ­ zbraЕ€, kterou kdy najdeЕЎ. HodnД› ЕЎtД›stГ­!");
Database.addText("cz.wishingWellThrowFirstCandyButton", "Hodit do studny bonbГіn");
Database.addText("cz.wishingWellCandyIntroductionSpeech", "VГ­tej, poutnГ­ku! Jsem kouzelnГЎ studna. VГЅmД›nou za sladkosti ti splnГ­m tvГЎ pЕ™ГЎnГ­! KdyЕѕ do mД› hodГ­ЕЎ bonbГіny, vylГ©ДЌГ­m tvГЎ zranД›nГ­.");
Database.addText("cz.wishingWellThrewCandiesSpeech", "TvГЎ zranД›nГ­ byla vylГ©ДЌena!");
Database.addText("cz.wishingWellNoWoundSpeech", "Ale vЕѕdyЕҐ jsi ГєplnД› zdravГЅ!");
Database.addText("cz.wishingWellThrowFirstLollipopButton", "Hodit do studny lГ­zГЎtko");
Database.addText("cz.wishingWellLollipopIntroductionSpeech", "VГ­tej, poutnГ­ku! Jsem kouzelnГЎ studna. VГЅmД›nou za sladkosti ti splnГ­m tvГЎ pЕ™ГЎnГ­! KdyЕѕ do mД› hodГ­ЕЎ lГ­zГЎtka, pЕ™emД›nГ­m je na bonbГіny.");
Database.addText("cz.wishingWellThrewLollipopsSpeech", "TvГЎ lГ­zГЎtka byla pЕ™emД›nД›na na bonbГіny! DvД› lГ­zГЎtka za jeden bonbГіn.");
Database.addText("cz.wishingWellThrowChocolateBarButton", "Hodit do studny tabulku ДЌokolГЎdy");
Database.addText("cz.wishingWellChocolateBarIntroductionSpeech", "VГ­tej, poutnГ­ku! Jsem kouzelnГЎ studna. VГЅmД›nou za sladkosti ti splnГ­m tvГЎ pЕ™ГЎnГ­! Miluju ДЌokolГЎdu. Ne, pЕ™Г­mo ji zboЕѕЕ€uju! Za kaЕѕdou tabulku, kterou do mД› hodГ­ЕЎ, ti oДЌaruju jednu vД›c. A ta prvnГ­ se taky poДЌГ­tГЎ!");
Database.addText("cz.wishingWellThrewChocolateBarSpeech", "Co bys rГЎd oДЌaroval?");
Database.addText("cz.wishingWellThrowPainAuChocolatButton", "Hodit do studny pain au chocolat");
Database.addText("cz.wishingWellPainAuChocolatIntroductionSpeech", "VГ­tej, poutnГ­ku! Jsem kouzelnГЎ studna. VГЅmД›nou za sladkosti ti splnГ­m tvГЎ pЕ™ГЎnГ­! MЕ€am, co je tohle? Pain au chocolat? Kde jsi to sehnal? ChutnГЎ to skvД›le! Hmm, za tyhle dobroty ti dГЎm jedno ze tЕ™Г­ velmi unikГЎtnГ­ch poЕѕehnГЎnГ­. Vol rozvГЎЕѕnД›.");
Database.addText("cz.wishingWellThrewPainAuChocolatSpeech", "DД›kuju ti za pain au chocolat! TeДЏ si mЕЇЕѕeЕЎ vybrat poЕѕehnГЎnГ­.");
Database.addText("cz.wishingWellChooseGift", "Zvol si poЕѕehnГЎnГ­!");
Database.addText("cz.wishingWellChooseGiftButton", "Zvolit");
Database.addText("cz.wishingWellGiftDoneSpeech", "Hotovo! TeДЏ jsi zase o nД›co mocnД›jЕЎГ­. MГ© poЕѕehnГЎnГ­ se ti zobrazГ­ v panelu statistik ve tvГ©m inventГЎЕ™i.");
Database.addText("cz.wishingWellNoPossibleEnchantment", "ЕЅГЎdnГ© moЕѕnГ© oДЌarovГЎnГ­");
Database.addText("cz.wishingWellChooseEnchantment", "Vyber si oДЌarovГЎnГ­");
Database.addText("cz.wishingWellEnchantButton", "OДЌarovat");
Database.addText("cz.wishingWellEnchantmentDoneSpeech", "A je to! TvЕЇj pЕ™edmД›t byl oДЌarovГЎn.");
Database.addText("cz.pierLighthouseButton", "Doplout k majГЎku na lodi");
Database.addText("cz.pierTheSeaButton", "SkoДЌit do moЕ™e");
Database.addText("cz.lonelyHouseOpenBox", "OtevЕ™Г­t truhlu");
Database.addText("cz.lonelyHouseShakeBox", "ZatЕ™ГЎst truhlou");
Database.addText("cz.lonelyHouseBreakLock", "VypГЎДЌit zГЎmek");
Database.addText("cz.lonelyHouseKickBox", "Kopnout do truhly");
Database.addText("cz.lonelyHouseAskTheBoxToOpenItself", "Poprosit ji, zda by se neotevЕ™ela sama");
Database.addText("cz.lonelyHouseLureTheBoxWithACandy", "NalГЎkat truhlu bonbГіnem");
Database.addText("cz.lonelyHouseTakeTheBox", "VzГ­t truhlu s sebou, k jejГ­mu otevЕ™enГ­ asi bude potЕ™eba klГ­ДЌ");
Database.addText("cz.lonelyHouseOpenBoxResult", "Truhla je zamДЌenГЎ");
Database.addText("cz.lonelyHouseShakeBoxResult", "Nic se nestane");
Database.addText("cz.lonelyHouseBreakLockResult", "ZГЎmek nejde vypГЎДЌit");
Database.addText("cz.lonelyHouseKickBoxResult", "Nic se nestane, akorГЎt tД› teДЏ trochu bolГ­ noha");
Database.addText("cz.lonelyHouseAskTheBoxToOpenItselfResult", "... mluvГ­ЕЎ na blbou krabici, uvД›domujeЕЎ si to?");
Database.addText("cz.lonelyHouseLureTheBoxWithACandyResult", "Truhlu zЕ™ejmД› bonbГіny nezajГ­majГ­");
Database.addText("cz.lonelyHouseTakeTheBoxResult", "V tГ©hle... v tГ©hle... Candy Box bude urДЌitД› nД›co zajГ­mavГ©ho.");
Database.addText("cz.lollipopFarmConstructMill", "Postavit mlГЅn (10 000 lГ­zГЎtek)");
Database.addText("cz.lollipopFarmFeedMill", "Nasypat lГ­zГЎtka do mlГЅnice");
Database.addText("cz.lollipopFarmCurrentCandiesProduction", "MomentГЎlnГ­ produkce bonbГіnЕЇ");
Database.addText("cz.lollipopFarmDigPond", "Vykopat rybnГ­k (100 000 lГ­zГЎtek)");
Database.addText("cz.lollipopFarmBuyLolligator", "Koupit lГ­zogГЎtora (1200 bonbГіnЕЇ)");
Database.addText("cz.lollipopFarmLolligatorsConversionText", "Konverze z bonbГіnЕЇ na lГ­zГЎtka aktivnГ­");
Database.addText("cz.lighthouseAskButton", "Zeptat se");
Database.addText("cz.lighthouseQuestionWho", "Kdo jsi?");
Database.addText("cz.lighthouseQuestionWhoSpeech", "Jsem velmi starГЅ kyklop.");
Database.addText("cz.lighthouseQuestionWhat", "Co tady dД›lГЎЕЎ?");
Database.addText("cz.lighthouseQuestionWhatSpeech", "ЕЅiju tady roky a roky, a ДЌekГЎm, aЕѕ pЕ™ipluje loДЏ. UЕѕ je to dlouho, co jsem vidД›l loДЏ, ale musГ­m tady zЕЇstat a ДЌekat, protoЕѕe jednoho dne moЕѕnГЎ pЕ™ipluje.");
Database.addText("cz.lighthouseQuestionWhyEatCandies", "ProДЌ bych jedl bonbГіny?");
Database.addText("cz.lighthouseQuestionWhyEatCandiesSpeech", "ProtoЕѕe jsou dobrГ© pro tvoje zdravГ­!");
Database.addText("cz.lighthouseQuestionCandyBox", "Co je  Candy Box?");
Database.addText("cz.lighthouseQuestionCandyBoxSpeech", "Je to velmi starГЎ truhla, ve kterГ© podle legendy jsou vЕЎechny sladkosti svД›ta. ЕГ­kГЎ se, Еѕe ten, komu se podaЕ™Г­ ji otevЕ™Г­t, bude mГ­t k dispozici tolik bonbГіnЕЇ, Еѕe by dokГЎzal cokoliv.");
Database.addText("cz.lighthouseQuestionDragon", "Drak mi Е™ekl, abych za tebou pЕ™iЕЎel, Еѕe mi prГЅ pomЕЇЕѕeЕЎ dostat vГ­ce bonbГіnЕЇ.");
Database.addText("cz.lighthouseQuestionDragonSpeech", "Aha, dobrГЎ... No, nemЕЇЕѕu ti dГЎt bonbГіny pЕ™Г­mo, ale mЕЇЕѕu ti dГЎt nД›co, co ti pomЕЇЕѕe dostat tolik bonbГіnЕЇ, kolik si jen mЕЇЕѕeЕЎ pЕ™ГЎt. Ale pЕ™edtГ­m si tД› musГ­m provД›Е™it, protoЕѕe nemЕЇЕѕu tuhle vД›c dГЎt jen tak nД›komu. VyЕ™eЕЎ tenhle hlavolam a bude tvoje.");
Database.addText("cz.lighthouseFoundStone", "Gratuluji! ProЕЎel jsi mГЅm testem a naЕЎel jsi kГЎmen. Je to unikГЎt, ale bude uЕѕiteДЌnГЅ jenom, pokud najdeЕЎ tЕ™i dalЕЎГ­, kterГ© k nД›mu patЕ™Г­. HodnД› ЕЎtД›stГ­!");
Database.addText("cz.lighthouseFoundStoneAgain", "Hele, ty jsi ten hlavolam vyЕ™eЕЎil i podruhГ©. DobrГЎ prГЎce, zdГЎ se, Еѕe se ti lГ­bГ­.");
Database.addText("cz.saveLocalSaveTitle", "UloЕѕit lokГЎlnД›");
Database.addText("cz.saveLocalSaveWhy", "Vyber si lokГЎlnГ­ uloЕѕenГ­, pokud chceЕЎ v budoucnu hrГЎt na stejnГ©m poДЌГ­taДЌi a ve stejnГ©m prohlГ­ЕѕeДЌi.");
Database.addText("cz.saveLocalSaveWarning0", "TvЕЇj prohlГ­ЕѕeДЌ zЕ™ejmД› nepodporuje HTML5.");
Database.addText("cz.saveLocalSaveWarning1", "Pro uloЕѕenГ­ hry bude potЕ™eba aktualizovat prohlГ­ЕѕeДЌ.");
Database.addText("cz.saveLocalSaveChooseSlot", "Zvol si pozici, na kterou chceЕЎ hru uloЕѕit:");
Database.addText("cz.saveLocalSaveAutosaveEnabled", "AutomatickГ© uklГЎdГЎnГ­ zapnuto");
Database.addText("cz.saveLocalSaveChooseWhatToDo", "Vyber, co chceЕЎ udД›lat:");
Database.addText("cz.saveLocalSaveSaveButton", "UloЕѕit");
Database.addText("cz.saveLocalSaveAutosaveButton", "UklГЎdat kaЕѕdГЅch 10 minut");
Database.addText("cz.saveLocalSaveDisableAutosaveButton", "Vypnout automatickГ© uklГЎdГЎnГ­");
Database.addText("cz.saveFileSaveTitle", "TextovГ© uklГЎdГЎnГ­");
Database.addText("cz.saveFileSaveWhy0", "Zvol textovГ© uklГЎdГЎnГ­, pokud:");
Database.addText("cz.saveFileSaveWhy1", "ChceЕЎ pokraДЌovat ve hЕ™e na jinГ©m poДЌГ­taДЌi nebo v jinГ©m prohlГ­ЕѕeДЌi");
Database.addText("cz.saveFileSaveWhy2", "ChceЕЎ svou hru sdГ­let s nД›kГЅm jinГЅm");
Database.addText("cz.saveFileSaveWhy3", "Z nД›jakГ©ho dЕЇvodu potЕ™ebujeЕЎ vymazat cache");
Database.addText("cz.saveFileSaveWhy4", "(ДЌГ­mЕѕ se vymaЕѕou i lokГЎlnД› uloЕѕenГ© hry)");
Database.addText("cz.saveFileSaveButton", "Vygenerovat uklГЎdacГ­ text");
Database.addText("cz.saveFileSaveWarning", "TeДЏ ten text nД›kam zkopГ­ruj a uloЕѕ");
Database.addText("cz.saveLocalLoadTitle", "NaДЌГ­st lokГЎlnД› uloЕѕenou hru");
Database.addText("cz.saveLocalLoadYouCan", "Pro naДЌtenГ­ mЕЇЕѕeЕЎ pouЕѕГ­t nГЎsledujГ­cГ­ odkaz:");
Database.addText("cz.saveLocalLoadThanksTo", "DГ­ky kouzlЕЇm, kterГЅch je HTML5 schopnГЅ, bys mД›l bГЅt schopnГЅ naДЌГ­st hru i offline.");
Database.addText("cz.saveFileLoadTitle", "NaДЌГ­st text");
Database.addText("cz.saveFileLoadPaste", "ZkopГ­ruj sem svЕЇj vygenerovanГЅ text a klikni na вЂћNaДЌГ­stвЂњ");
Database.addText("cz.saveFileLoadButton", "NaДЌГ­st");
Database.addText("cz.mountainsText0", "Zpozoroval jsi nД›co v horГЎch!");
Database.addText("cz.mountainsText1", "VypadГЎ to zajГ­mavД›. MoЕѕnГЎ by se to mohlo hodit.");
Database.addText("cz.mountainsTextButton", "JГ­t do hor a sebrat onu vД›c");
Database.addText("cz.mountainsTextAfter", "NaЕЎel jsi skГЎkacГ­ tyДЌ! Byla pЕ™idГЎna do tvГ©ho inventГЎЕ™e.");
Database.addText("cz.secondHouseIntroSpeech", "Ahoj, jsem obchodnГ­k s bonbГіny. Pro bonbГіny bych udД›lal cokoliv! Co potЕ™ebujeЕЎ?");
Database.addText("cz.secondHouseLollipop1Speech", "Tohle je lГ­zГЎtko s citrГіnovou pЕ™Г­chutГ­. Moje oblГ­benГ©! StojГ­ 60 bonbГіnЕЇ, ale stojГ­ za to.");
Database.addText("cz.secondHouseLollipop2Speech", "Tohle je lГ­zГЎtko s jahodovou pЕ™Г­chutГ­. Je to mЕ€amka, a mГЎ krГЎsnou ДЌervenou barvu! Jenom za 60 bonbГіnЕЇ!");
Database.addText("cz.secondHouseLollipop3Speech", "Tohle je lГ­zГЎtko s dГЅЕ€ovou pЕ™Г­chutГ­. VsadГ­m se, Еѕe jsi takovГ© jeЕЎtД› neochutnal! 60 bonbГіnЕЇ a je tvoje.");
Database.addText("cz.secondHouseLollipopButtonText", "Koupi toto lГ­zГЎtko (60 bonbГіnЕЇ)");
Database.addText("cz.secondHouseMerchantHatSpeech", "Mohl bych ti prodat i svЕЇj klobouk, ale vГ­ЕЎ, on je dost vzГЎcnГЅ... BudeЕЎ mi za nД›j muset dГЎt hodnД› bonbГіnЕЇ. Tak tЕ™eba jeden milion. To znГ­ jako fГ©rovГЎ nabГ­dka, ne?");
Database.addText("cz.secondHouseMerchantHatButtonText", "Koupit obchodnГ­kЕЇv klobouk (1 000 000 bonbГіnЕЇ)");
Database.addText("cz.secondHouseTimeRingSpeech", "Tohle je prsten ДЌasu. Je tak trochu kouzelnГЅ, umoЕѕnГ­ ti zpomalit ДЌas, kdyЕѕ se ocitneЕЎ v nesnГЎzГ­ch.");
Database.addText("cz.secondHouseTimeRingButtonText", "Koupit prsten ДЌasu (500 bonbГіnЕЇ)");
Database.addText("cz.secondHouseLeatherGlovesSpeech", "Tyto rukavice jsou z prvotЕ™Г­dnГ­ velbloudГ­ kЕЇЕѕe. MГЎm jich na skladД› hodnД›, proto jsou tak levnГ©: Jenom 300 bonbГіnЕЇ!");
Database.addText("cz.secondHouseLeatherBootsButtonText", "Koupit pГЎr koЕѕenГЅch bot (300 bonbГіnЕЇ)");
Database.addText("cz.secondHouseLeatherBootsSpeech", "Tyhle kvalitnГ­ boty z velbloudГ­ kЕЇЕѕe udrЕѕГ­ tvГ© nohy v teple.");
Database.addText("cz.secondHouseLeatherGlovesButtonText", "Koupit koЕѕenГ© rukavice (300 bonbГіnЕЇ)");
Database.addText("cz.secondHouseChocolateBarSpeech", "Tohle je tabulka ДЌokolГЎdy. NevГ­m, na co je, ale je pomД›rnД› dost vzГЎcnГЎ, coЕѕ vysvД›tluje jejГ­ cenu. 800 bonbГіnЕЇ a je tvoje!");
Database.addText("cz.secondHouseChocolateBarButtonText", "Koupit tabulku ДЌokolГЎdy (800 bonbГіnЕЇ)");
Database.addText("cz.outsideTheHoleButton", "SkoДЌit do velkГ© dГ­ry v zemi");
Database.addText("cz.theCaveExitText0", "KoneДЌnД› ses dostal na druhГЅ konec jeskynД›.");
Database.addText("cz.theCaveExitText1", "Venku vidГ­ЕЎ velkГЅ, hustГЅ les.");
Database.addText("cz.theCaveExitButtonText", "VyjГ­t ven z jeskynД›");
Database.addText("cz.theCaveFirstSentenceWentStraight", "Е el jsi rovnД›.");
Database.addText("cz.theCaveFirstSentenceWentLeft", "Zahnul jsi doleva.");
Database.addText("cz.theCaveFirstSentenceWentRight", "Zahnul jsi doprava.");
Database.addText("cz.theCaveFirstSentenceYouAre", "TeДЏ jsi v jeskyni. PЕ™ed sebou vidГ­ЕЎ tЕ™i moЕѕnГ© cesty.");
Database.addText("cz.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Na zemi leЕѕГ­ jakГЎsi podivnГЎ vД›c.");
Database.addText("cz.theCavePattern_ChocolateBarNowSeeChocolateBar", "PЕ™ed tebou leЕѕГ­ tabulka ДЌokolГЎdy.");
Database.addText("cz.theCavePattern_TreasureMapSentence", "Na zemi vidГ­ЕЎ jakГЅsi podivnГЅ shluk kamenЕЇ.");
Database.addText("cz.theCavePattern_MonkeyWizardSentence", "Narazil jsi na nahatГ©ho opiДЌГ­ho mГЎga.");
Database.addText("cz.theCavePattern_MonkeyWizardButton", "Vyzvat ho na souboj");
Database.addText("cz.theCavePattern_OctopusKingSentence", "Narazil jsi na oЕЎklivГ©ho KrГЎle Chobotnic. VypadГЎ hrozivД›.");
Database.addText("cz.theCavePattern_OctopusKingButton", "Vyzvat... to na souboj");
Database.addText("cz.fortressInsideText0", "Jsi uvnitЕ™ pouЕЎtnГ­ho chrГЎmu.");
Database.addText("cz.fortressInsideText1", "MЕЇЕѕeЕЎ si vybrat jedny ze tЕ™Г­ dveЕ™Г­.");
Database.addText("cz.fortressInsideText2", "KaЕѕdГ© z nich vedou do mГ­stnosti s velkГЅm pokladem.");
Database.addText("cz.fortressInsideEnterRoom1", "Vstoupit do prvnГ­ mГ­stnosti");
Database.addText("cz.fortressInsideEnterRoom2", "Vstoupit do druhГ© mГ­stnosti");
Database.addText("cz.fortressInsideEnterRoom3", "Vstoupit do tЕ™etГ­ mГ­stnosti");
Database.addText("cz.treasureButtonDig", "Vykopat dГ­ru");
Database.addText("cz.treasureButtonYouFound", "NaЕЎel jsi tЕ™i tabulky ДЌokolГЎdy!");
Database.addText("cz.sorceressHutHello", "Ahoj, jГЎ jsem ДЌarodД›jka. MЕЇЕѕu tД› nauДЌit nД›co o magii. Taky ti mЕЇЕѕu prodat pГЎr zajГ­mavГЅch vД›cГ­, nebo pro tebe nД›co vykouzlit. Ale nic nenГ­ zadarmo! Budu po tobД› chtГ­t lГ­zГЎtka. HodnД› lГ­zГЎtek.");
Database.addText("cz.sorceressHutClickedGrimoire", "Tohle je kouzelnГЎ kniha urДЌenГЎ pro zaДЌГЎteДЌnГ­ky. Na vГЅpravГЎch budeЕЎ moci vyvolat pГЎr jednoduchГЅch, ale uЕѕiteДЌnГЅch kouzel. StoprocentnД› se ti budou hodit! Za pouhГЅch 5 000 lГ­zГЎtek je ta kniha tvoje.");
Database.addText("cz.sorceressHutBuyGrimoireButton", "Koupit tuto knihu (5 000 lГ­zГЎtek)");
Database.addText("cz.sorceressHutBuyGrimoireSpeech", "DД›kuji! TeДЏ  budeЕЎ moci pouЕѕГ­vat tЕ™i jednoduchГЎ kouzla. HodnД› ЕЎtД›stГ­ na vГЅpravГЎch!");
Database.addText("cz.sorceressHutClickedGrimoire2", "Tohle je kniha kouzel pro pokroДЌilГ©. DГ­ky nГ­ budeЕЎ moci pouЕѕГ­vat dvД› sloЕѕitГЎ kouzla. Sepsala jsem ji sama, takЕѕe funДЌnost zaruДЌena! MyslГ­m, Еѕe 20 000 je fГ©rovГЎ cena.");
Database.addText("cz.sorceressHutBuyGrimoire2Button", "Koupit tuto knihu (20 000 lГ­zГЎtek)");
Database.addText("cz.sorceressHutBuyGrimoire2Speech", "DobrГЅ obchod! Do tvГ©ho arzenГЎlu pЕ™ibyla dalЕЎГ­ dvД› kouzla, uЕѕГ­vej jich moudЕ™e!");
Database.addText("cz.sorceressHutClickedCauldron", "Tohle je mЕЇj kotlГ­k. UmoЕѕЕ€uje mi vaЕ™it kouzelnГ© lektvary. Mohla bych ti ho prodat, ale je celkem drahГЅ... Bude tД› to stГЎt 100 000 lГ­zГЎtek.");
Database.addText("cz.sorceressHutBuyCauldronButton", "Koupit kotlГ­k (100 000 lГ­zГЎtek)");
Database.addText("cz.sorceressHutBuyCauldronSpeech", "DГ­ky moc! Tady mГЎЕЎ kotlГ­k a nГЎvod na vaЕ™enГ­. A jГЎ mГЎm dalЕЎГ­ch 100 000 lГ­zГЎtek!");
Database.addText("cz.sorceressHutClickedHat", "MГЎm pД›knГЅ klobouk, Еѕe? Ale nemЕЇЕѕu ti ho prodat. Je pЕ™Г­liЕЎ vzГЎcnГЅ. Ne, opravdu nemЕЇЕѕu. Netrvej na tom. Ne. Ne ne ne ne, fakt ti ho nemЕЇЕѕu prodat. Г‰h, tak dobrГЎ, ale dГЎЕЎ mi za nД›j 1 000 000 000 lГ­zГЎtek. Tohle stejnД› asi nebudeЕЎ schopnГЅ zaplatit.");
Database.addText("cz.sorceressHutBuyHatButton", "Koupit ЕЎpiДЌatГЅ klobouk (1 000 000 000 lГ­zГЎtek)");
Database.addText("cz.sorceressHutBuyHatSpeech", "Miliarda! Miliarda lГ­zГЎtek, hurГЎ! Ale... uЕѕ nemГЎm svЕЇj klobouk... Ale celГЎ miliarda lГ­zГЎtek, sakra, tohle za to stГЎlo!");
Database.addText("cz.cauldronPreviousPageButton", "PЕ™edchozГ­ strГЎnka");
Database.addText("cz.cauldronNextPageButton", "NГЎsledujГ­cГ­ strГЎnka");
Database.addText("cz.cauldronWhatYouWantToPut", "Co chceЕЎ dГЎt do kotlГ­ku");
Database.addText("cz.cauldronWhatIsIn", "Co je v kotlГ­ku");
Database.addText("cz.cauldronWhatYouCanDo", "Co mЕЇЕѕeЕЎ udД›lat");
Database.addText("cz.castleBigRoomComment", "VelkГЎ mГ­stnost");
Database.addText("cz.castleARoomComment", "MГ­stnost");
Database.addText("cz.castleADarkRoomComment", "TemnГЎ mГ­stnost");
Database.addText("cz.castleCastleEntranceComment", "Vchod do hradu");
Database.addText("cz.castleTowerEntranceComment", "Vchod do vД›Еѕe");
Database.addText("cz.castleNougatMonsterComment", "ZaГєtoДЌit na nugГЎtovГ© monstrum");
Database.addText("cz.castleGuardsComment", "ZaГєtoДЌit na strГЎЕѕe");
Database.addText("cz.castleStairsComment", "Schody");
Database.addText("cz.buttonBackToTheCastle", "ZpГЎtky do hradu");
Database.addText("cz.castleBigRoomHovenSpeechSad", "Ahoj! Jsem velmi starГЎ pec. Kdysi jsem pekla spoustu velmi dobrГ©ho peДЌiva, ale dnes uЕѕ mД› nikdo nepouЕѕГ­vГЎ. MoЕѕnГЎ... moЕѕnГЎ bys mi mohl pomoct? MЕЇЕѕu si od tebe vzГ­t nД›jakГ© ty sladkosti? Neboj, nebudeЕЎ litovat! MnД› mЕЇЕѕeЕЎ vД›Е™it.");
Database.addText("cz.castleBigRoomHovenNotEnough", "Oh... nemГЎЕЎ dost sladkostГ­, nemЕЇЕѕu udД›lat nic. Jsem prostД› zbyteДЌnГЎ. Od teДЏ mi Е™Г­kej вЂћzbyteДЌnГЎ pecвЂњ.");
Database.addText("cz.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay! DД›kuju moc! PouЕѕila jsem 100 bonbГіnЕЇ a tabulku ДЌokolГЎdy, a koukej, co jsem upekla! Pain au chocolat! Je to moje oblГ­benГ© peДЌivo, doufГЎm, Еѕe ti bude taky chutnat!");
Database.addText("cz.castleBigRoomHovenSpeechHappy", "Jestli budeЕЎ chtГ­t napГ©ct vГ­c, staДЌГ­ Е™Г­ct! RГЎda ti pomЕЇЕѕu.");
Database.addText("cz.castleBigRoomHovenSpeechHappyNotEnough", "Ajaj, bohuЕѕel nemГЎЕЎ dost sladkostГ­. PotЕ™ebuju 100 bonbГіnЕЇ a tabulku ДЌokolГЎdy. UrДЌitД› se vraЕҐ, aЕѕ to seЕѕeneЕЎ!");
Database.addText("cz.castleBigRoomHovenLetHovenTakeButton", "Nechat pec, aЕҐ si vezme sladkosti, kterГ© potЕ™ebuje");
Database.addText("cz.castleBigRoomHovenThanks", "DД›kuju!");
Database.addText("cz.dragonStopTickling", "Hej ty tam dole! To lechtГЎ, nech toho!");
Database.addText("cz.dragonStopTicklingButton", "Eh, promiЕ€, jГЎ myslel, Еѕe tД› mГЎm zabГ­t");
Database.addText("cz.dragonTalking", "Jsem drak a tenhle hrad patЕ™Г­ mnД›. VidГ­m, Еѕe ses dostal dovnitЕ™, musГ­ЕЎ bГЅt velmi stateДЌnГЅ... NД›komu jako ty milerГЎd pomЕЇЕѕu. Po ДЌem nejvГ­ce touЕѕГ­ЕЎ?");
Database.addText("cz.dragonTalkingChallengeButton", "Po vГЅzvД›");
Database.addText("cz.dragonTalkingFameButton", "Po slГЎvД›");
Database.addText("cz.dragonTalkingCandiesButton", "Po bonbГіnech");
Database.addText("cz.dragonTalkingChallengeSpeech", "Aha, takЕѕe ty chceЕЎ vГЅzvu? A co takhle si to rozdat se samotnГЅm ДЏГЎblem? SkoДЌ mi na zГЎda a jГЎ tД› zanesu do pekla!");
Database.addText("cz.dragonTalkingFameSpeech", "NejlepЕЎГ­ zpЕЇsob, jak se proslavit, je porazit samotnГ©ho vГЅvojГЎЕ™e. VГ­m, kde bydlГ­, a klidnД› tД› tam dovezu. Ale pЕ™iprav se, Еѕe to nebude snadnГЅ boj.");
Database.addText("cz.dragonTalkingCandiesSpeech", "To je to, po ДЌem vЕЎichni touЕѕГ­me. ChceЕЎ bonbГіny? MЕЇj starГЅ kamarГЎd by ti s tГ­m mohl pomoct. PoznГЎЕЎ ho snadno, mГЎ jenom jedno oko. ProstД› mu Е™ekni, Еѕe mД› znГЎЕЎ.");
Database.addText("cz.dragonTalkingChallengeAnswer", "Tak pojДЏme!");
Database.addText("cz.dragonTalkingFameAnswer", "Jsem pЕ™ipravenГЅ.");
Database.addText("cz.dragonTalkingCandiesAnswer", "DobrГЎ, dГ­ky!");
Database.addText("cz.buttonBackToCastle", "ZpГЎtky do hradu");
Database.addText("cz.talkingCandySpeechNoBox", "Ahojky! Jsem mluvГ­cГ­ bonbГіnek. UЕѕ jsi skoro vyhrГЎl hru. TeДЏ uЕѕ jenom musГ­ЕЎ najГ­t Candy Box. Je v osamД›lГ©m domku na sever od vesnice. Tohle je poslednГ­ krok!");
Database.addText("cz.talkingCandySpeech1", "Ahojky! Jsem mluvГ­cГ­ bonbГіnek. Gratuluji, vyhrГЎl jsi hru! TvГЎ odmД›na je nГЎsledujГ­cГ­: OtevЕ™u pro tebe Candy Box. MГЎm to udД›lat?");
Database.addText("cz.talkingCandySpeech2", "Hotovo! TeДЏ se mЕЇЕѕeЕЎ podГ­vat dovnitЕ™. DoufГЎm, Еѕe se ti hra lГ­bila :)");
Database.addText("cz.talkingCandyButton", "Ano!!");
Database.addText("cz.lighthousePuzzleResetButton", "Reset");
Database.addText("pl.mapVillageComment", "Wioska");
Database.addText("pl.mapFortressComment", "Pustynna forteca");
Database.addText("pl.mapATreeComment", "Drzewo");
Database.addText("pl.mapTheDesertComment", "Pustynia");
Database.addText("pl.mapWishingWellComment", "Studnia ЕјyczeЕ„");
Database.addText("pl.mapLonelyHouseComment", "Samotny dom");
Database.addText("pl.mapForestComment", "Las");
Database.addText("pl.mapCastleEntranceComment", "WejЕ›cie do zamku");
Database.addText("pl.mapCastleComment", "Zamek");
Database.addText("pl.mapDragonComment", "Smok");
Database.addText("pl.candyBoxEatCandiesButton", "Zjedz wszystkie cukierki");
Database.addText("pl.candyBoxThrowCandiesButton", "WyrzuД‡ 10 cukierkГіw na ziemiД™");
Database.addText("pl.mapVillageAHouseComment", "Dom");
Database.addText("pl.mapVillageForgeComment", "KuЕєnia");
Database.addText("pl.buttonBackToTheMap", "PowrГіt do mapy");
Database.addText("pl.mapSorceressHutComment", "Domek czarownicy");
Database.addText("pl.buttonBackToTheVillage", "PowrГіt do wioski");
Database.addText("pl.mapATreeIntroductionSpeech", "Witaj, jestem WiewiГіrka. MogД™ zapewniД‡ ci cukierki i duЕјo rzeczy. Wiem jak bardzo kochasz cukierki. Ale czuje siД™ samotnie w tym lesie.");
Database.addText("pl.mapATreeIntroductionButton", "Jak mogД™ ci pomГіc?");
Database.addText("pl.mapATreeFirstQuestion", "BД™dД™ zadawaД‡ ci pytania. JeЕ›li odpowiesz poprawnie, najsЕ‚odsze z cukierkГіw bД™dД… twoje! Pierwsze : czy naprawdД™ kochasz cukierki? (odpowiedz po Angielsku)");
Database.addText("pl.mapATreeSecondQuestion", "Zgadza siД™! 20 cukierkГіw dla ciebie. Teraz dokoЕ„cz tД… sekwencje liter i dostaniesz nastД™pnД… nagrodД™ : S, E, I, D, N, A, ?");
Database.addText("pl.mapATreeThirdQuestion", "\"Candies!\" 100 cukierkГіw dla ciebie. NastД™pne pytanie : ile cukierkГіw posiada najbardziej cukierkowa osoba na Е›wiecie?");
Database.addText("pl.mapATreeFourthQuestion", "500 cukierkГіw dla ciebie! NastД™pna nagroda powinna byД‡ jeszcze bardziej interesujД…ca...  Oto Е‚amigЕ‚Гіwka : W starym lesie roЕ›nie bardzo stare drzewo, na ktГіrym ЕјujД… najinteligentniejsze zwierzД™ta na tym Е›wiecie. MГіwi siД™ Ејe to drzewo ma 60 korzeni, 360 gaЕ‚Д™zi i 2160 liЕ›ci. Ile znakГіw moЕјesz znaleЕєД‡ na jego pniu?");
Database.addText("pl.mapATreeFifthQuestion", "Gratulacje! RzeczywiЕ›cie mГіwiЕ‚em o moim drzewie. Oto 3 lizaki dla ciebie. ZrГіb z nich dobry uЕјytek! NastД™pna zagadka : Pod peЕ‚nym ksiД™Ејycem, wrzucam ЕјГіЕ‚ty kapelusz do czerwonego morza. Co dzieje siД™ z ЕјГіЕ‚tym kapeluszem?");
Database.addText("pl.mapATreeTicTacToeIntro", "Dobra odpowiedЕє! To nie byЕ‚o takie trudne. Trzy tabliczki czekolady dla ciebie! Przy zdobywaniu nastД™pnej nagrody zmieniД™ trochД™ zasady. BД™dziesz musiaЕ‚ ze mnД… zagraД‡ w grД™! JesteЕ› gotowy?");
Database.addText("pl.mapATreeTicTacToeIntroButton", "Jasne Ејe jestem!");
Database.addText("pl.mapATreeTicTacToeLetsPlay", "Ta gra to kГіЕ‚ko i krzyЕјyk. BД™dziemy grali na planszy o rozmiarach 3x3. Ty bД™dziesz korzystaЕ‚ z X a ja z O. BД™dziemy wykonywali nasze ruchy na przemian, celem gry jest ustawienie trzech swoich znakГіw w rzД™dzie. Ty zaczynasz!");
Database.addText("pl.mapATreeTicTacToeNobodyWins", "Plansza jest zapeЕ‚niona i Ејadnemu z nas nie udaЕ‚o siД™ uЕ‚oЕјyД‡ trzech pod rzД…d : remis! Chcesz sprГіbowaД‡ jeszcze raz?");
Database.addText("pl.mapATreeTicTacToeYouLose", "UЕ‚oЕјyЕ‚em trzy pod rzД…d! WygraЕ‚em! Chcesz sprГіbowaД‡ jeszcze raz?");
Database.addText("pl.mapATreeTicTacToeTryAgainButton", "Tak, chcД™!");
Database.addText("pl.mapATreeTicTacToeYouWin", "Wow, to byЕ‚ nieoczekiwany ruch. Ale uЕ‚oЕјyЕ‚eЕ› trzy pod rzД…d, nie mogД™ siД™ kЕ‚ГіciД‡. WygraЕ‚eЕ›! WeЕє ten klucz! Otwiera jeden z domГіw w wiosce na poЕ‚udnie od lasu.");
Database.addText("pl.mapATreeTicTacToeAnymoreSweet", "DziД™ki WiewiГіrko! Jeszcze jakieЕ› wyzwania?");
Database.addText("pl.mapATreeNoMoreChallenge", "Niestety nie, nie mam wiД™cej wyzwaЕ„... Bawienie siД™ z tobД… byЕ‚o bardzo fajne, dziД™kuje za to!");
Database.addText("pl.buttonExitQuestKeeping", "WyjdЕє z zadania (zatrzymasz to co znajdziesz)");
Database.addText("pl.buttonExitQuestNoKeeping", "WyjdЕє z zadania (nie zatrzymasz tego co znajdziesz)");
Database.addText("pl.buttonExitQuestNoKeepingBecauseLose", "WyjdЕє z zadania (nie zatrzymasz tego co znajdziesz bo przegraЕ‚eЕ›)");
Database.addText("pl.mapVillageLockedHouseComment", "ZamkniД™ty dom");
Database.addText("pl.mapVillageForgeIntroductionSpeech", "CzeЕ›Д‡! Jestem kowalem. MogД™ sprzedaД‡ ci rГіЕјne bronie i elementy wyposaЕјenia.");
Database.addText("pl.mapVillageForgeIntroductionSpeechNoMoreToSell", "CzeЕ›Д‡! Jestem kowalem. Niestety, Nie mam nic wiД™cej do sprzedania. ByД‡ moЕјe pГіЕєniej bД™de miaЕ‚ coЕ› do sprzedania.");
Database.addText("pl.mapVillageFifthHouseNoWeaponSpeech", "CzeЕ›Д‡. Moja piwnica jest peЕ‚na szczurГіw, MuszД™ siД™ ich pozbyД‡... jeЕ›li tylko ktoЕ› z broniД… mГіgЕ‚by mi pomГіc...");
Database.addText("pl.mapVillageFifthHouseWeaponSpeech", "Hej, ty! WidzД™ Ејe masz broЕ„! JeЕ›li zabijesz szczury ktГіre osiedliЕ‚y siД™ w mojej piwnicy, nagrodzД™ ciД™.");
Database.addText("pl.mapVillageFifthHouseAgree", "JuЕј siД™ biorД™ do roboty!");
Database.addText("pl.mapVillageFifthHouseCellarDone", "DziД™kuje za pomoc! Oto coЕ› bardzo cennego w nagrodД™ : mapa Е›wiata. MyЕ›lД™ Ејe ty skorzystasz z niej bardziej niЕј ja.");
Database.addText("pl.mapVillageTheShopComment", "Sklep");
Database.addText("pl.mapBridgeComment", "Most");
Database.addText("pl.mapFarmComment", "Farma lizakГіw");
Database.addText("pl.mapCaveEntranceComment", "WejЕ›cie do jaskini");
Database.addText("pl.mapLighthouseComment", "Latarnia morska");
Database.addText("pl.mapPierComment", "PrzystaЕ„");
Database.addText("pl.mapTheHoleComment", "Dziura");
Database.addText("pl.candyBoxRequestStatusBarUnlocked", "PoproЕ› o nowД… funkcje od dewelopera(30 cukierkГіw)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedCfg", "PoproЕ› o jeszcze jednД… (5 cukierkГіw)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedSave", "PoproЕ› o nastД™pnД… (5 cukierkГіw)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedHealthBar", "PoproЕ› o coЕ› bardziej ekscytujД…cego (5 cukierkГіw)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedMap", "Ostatnia proЕ›ba! Ta musi byД‡ warta tych cukierkГіw. (10 cukierkГіw)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedComment", "OdblokowaЕ‚eЕ› pasek stanu! (powyЕјej)");
Database.addText("pl.candyBoxRequestStatusBarUnlockedCfgComment1", "Masz teraz dostД™p do opcji!");
Database.addText("pl.candyBoxRequestStatusBarUnlockedCfgComment2", "MoЕјesz tam zmieniД‡ jД™zyk jeЕ›li chcesz.");
Database.addText("pl.candyBoxRequestStatusBarUnlockedSaveComment", "Pojawia siД™ dzika karta zapisu!");
Database.addText("pl.candyBoxRequestStatusBarUnlockedHealthBarComment", "100 punktГіw Ејycia dla ciebie. PrzydadzД… ci siД™!");
Database.addText("pl.cfgChooseLanguage", "Wybierz jД™zyk :");
Database.addText("pl.cfgInvertColors", "OdwrГіciД‡ kolory?");
Database.addText("pl.gridItemMainMapName", "Mapa");
Database.addText("pl.gridItemMainMapDescription", "Mapa Е›wiata");
Database.addText("pl.gridItemPogoStickName", "SprД™Ејynowe urzД…dzenie do podskakiwania");
Database.addText("pl.gridItemPogoStickDescription", "Ten przedmiot pozwala ci skakaД‡ w trakcie zadaЕ„!");
Database.addText("pl.gridItemTimeRingName", "PierЕ›cieЕ„ czasu");
Database.addText("pl.gridItemTimeRingDescription", "Ten przedmiot daje ci nowД… umiejД™tnoЕ›Д‡ w trakcie zadaЕ„: moЕјesz spowalniaД‡ czas. JeЕ›li rzeczy dziejД… siД™ za szybko, skorzystaj z niego!");
Database.addText("pl.gridItemThirdHouseKeyName", "Klucz do trzeciego domu");
Database.addText("pl.gridItemThirdHouseKeyDescription", "Ten klucz pozwala ci otworzyД‡ trzeci dom we wiosce");
Database.addText("pl.gridItemFeatherName", "PiГіro pustynnego ptaka");
Database.addText("pl.gridItemFeatherDescription", "To magiczne piГіro pozwala ci skakaД‡ wyЕјej gdy uЕјywasz swojego sprД™Ејynowego urzД…dzenia do podskakiwania!");
Database.addText("pl.gridItemFeatherDescriptionNoPogoStick", "Z jakiegoЕ› powodu, czujesz Ејe to piГіro byЕ‚oby przydatne gdybyЕ› miaЕ‚ sprД™Ејynowe urzД…dzenie do podskakiwania...");
Database.addText("pl.gridItemSpongeName", "Magiczna gД…bka");
Database.addText("pl.gridItemSpongeDescription", "Ta magiczna gД…bka pozwala ci siД™ Е›cisnД…Д‡ tak jak gД…bka, zmniejsza to twГіj rozmiar.");
Database.addText("pl.gridItemFortressKeyName", "Klucz do pustynnej fortecy");
Database.addText("pl.gridItemFortressKeyDescription", "Ten klucz pozwoli ci otworzyД‡ staroЕјytnД… fortecД™ zlokalizowanД… nad pustyniД…. Kto wie co moЕјe siД™ tam znajdowaД‡?");
Database.addText("pl.gridItemHeartPendantName", "Wisiorek serca");
Database.addText("pl.gridItemHeartPendantDescription", "Ten wisiorek bД™dzie zwiД™kszaЕ‚ twoje punkty zdrowia jeЕ›li bД™dziesz go nosiЕ‚ na szyji .");
Database.addText("pl.gridItemHeartPlugName", "Wtyczka serca");
Database.addText("pl.gridItemHeartPlugDescription", "Ta wtyczka serca, stworzona z Ејelaza, pajД™czych odnГіЕјy, i specjalnego \"alkoholu serca\" zapieczД™towanego w Е›rodku, zwiД™kszy twoje punkty Ејycia o 20 procent!");
Database.addText("pl.gridItemBeginnersGrimoireName", "Grimuar dla poczД…tkujД…cych");
Database.addText("pl.gridItemBeginnersGrimoireDescription", "Ten grimuar zapewnia ci trzy zaklД™cia, w miarД™ Е‚atwe do rzucenia. ZostaЕ‚ stworzony dla poczД…tkujД…cych. BД™dziesz w stanie rzucaД‡ zaklД™cie kwaЕ›nego deszczu (duЕјa iloЕ›Д‡ kwasu spadnie na twoich przeciwnikГіw), zaklД™cie kuli ognia (ogromna magiczna kula stworzona z ognia poleci na twoich przeciwnikГіw), i zaklД™cie teleportacji (ktГіre przeteleportuje ciД™ do nieprzewidywalnej lokalizacji).");
Database.addText("pl.gridItemAdvancedGrimoireName", "Zaawansowany grimuar");
Database.addText("pl.gridItemAdvancedGrimoireDescription", "Ten zaawansowany grimuar daje ci dwa zaklД™cia: zaklД™cie wymazania magii i zaklД™ciД™ ciernistej tarczy. To pierwsze usunie caЕ‚Д… magiД™ z bieЕјД…cego zadania wЕ‚Д…cznie z twoimi zaklД™ciami. Drugie stworzy wokГіЕ‚ ciebie ciernistД… tarczД™ ktГіra bД™dzie zadawaД‡ obraЕјenia twoim wrogom ktГіrzy siД™ z niД… zetknД….");
Database.addText("pl.gridItemBlackMagicGrimoireName", "Grimuar czarnej magii");
Database.addText("pl.gridItemBlackMagicGrimoireDescription", "ZnalazЕ‚eЕ› ten grimuar w jaskini, byЕ‚ bardzo trudny do dosiД™gniД™cia i to miaЕ‚o swГіj powГіd. Zapewnia ci dwa potД™Ејne zaklД™cia czarnej magii. Pierwsze stworzy przed tobД… gigantycznД… Е›cianД™ z obsydianu, co moЕјe byД‡ przydatne przy spowalnianiu przeciwnikГіw. Drugie przyzwie chmarД™ demonГіw ktГіre zaatakujД… kaЕјdego w bieЕјД…cym zadaniu, Е‚Д…cznie z tobД…. BД…dЕє z nim ostroЕјny.");
Database.addText("pl.gridItemUnicornHornName", "RГіg jednoroЕјca");
Database.addText("pl.gridItemUnicornHornDescription", "Ten magiczny rГіg naleЕјaЕ‚ do jednoroЕјca. Jego potД™Ејne moce lecznicze bardzo ci pomogД…. SЕ‚yszaЕ‚eЕ› Ејe ten jednoroЕјec miaЕ‚ na imiД™ Charlie.");
Database.addText("pl.gridItemXinopherydonClawName", "Pazur xinopherydona");
Database.addText("pl.gridItemXinopherydonClawDescription", "Ten pazur naleЕјaЕ‚ do xinopherydona, dwugЕ‚owego staroЕјytnego zwierzД™cia o ktГіrym wszyscy myЕ›leli Ејe wymarЕ‚o. Podwoi obraЕјenia broni ktГіrej uЕјywasz.");
Database.addText("pl.gridItemPitchforkName", "WidЕ‚y");
Database.addText("pl.gridItemPitchforkDescription", "Te specjalne widЕ‚y pozwalajД… ci spulchniaД‡ ziemiД™ bez obracania jej, chroniД…c podziemne ekosystemy. Potroi produkcje twojej farmy lizakГіw.");
Database.addText("pl.gridItemShellPowderName", "Proszek z muszelek");
Database.addText("pl.gridItemShellPowderDescription", "Proszek z muszelek jest czД™sto uЕјywany przez farmerГіw aby zwiД™kszyД‡ szybkoЕ›Д‡ wzrostu ich lizakГіw. Ten proszek zwiД™kszy produkcjД™ twojej farmy lizakГіw razy trzy!");
Database.addText("pl.gridItemPName", "KamieЕ„ P");
Database.addText("pl.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DВ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSВ°-J (`  /R`yM}  T$`` В°+-|U(\\OL&Y_)T|");
Database.addText("pl.gridItemLName", "KamieЕ„ L");
Database.addText("pl.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OВ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    В°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#В° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("pl.gridItemAName", "KamieЕ„ A");
Database.addText("pl.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITВ°#{  Oa$ GM T{Q \"S A-\\ F KmВ°& C #В° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("pl.gridItemYName", "KamieЕ„ Y");
Database.addText("pl.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  В°-  AX Y ` В° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_В°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EВ° I &L- /    K");
Database.addText("pl.gridItemRedSharkFinName", "Magiczna czerwona pЕ‚etwa rekina");
Database.addText("pl.gridItemRedSharkFinDescription", "Ta magiczna pЕ‚etwa znacznie zwiД™kszy obraЕјenia od twojego zaklД™cia kuli ognia. Wreszcie ta kula ognia stanie siД™ przydatna.");
Database.addText("pl.gridItemGreenSharkFinName", "Magiczna zielona pЕ‚etwa rekina");
Database.addText("pl.gridItemGreenSharkFinDescription", "Ta magiczna pЕ‚etwa przyniesie moc natury do twojej farmy lizakГіw! Ich produkcja zostanie pomnoЕјona przez 5.");
Database.addText("pl.gridItemPurpleSharkFinName", "Magiczna fioletowa pЕ‚etwa rekina");
Database.addText("pl.gridItemPurpleSharkFinDescription", "Ta magiczna pЕ‚etwa zapewni ci dodatkowe zaklД™cie czarnej magii. MoЕјesz go uЕјyД‡ tylko raz na jedno zadanie. BД…dЕє z nim bardzo ostroЕјny!");
Database.addText("pl.gridItemTalkingCandyName", "MГіwiД…cy cukierek");
Database.addText("pl.gridItemTalkingCandyDescription", "Ten mГіwiД…cy cukierek pojawiЕ‚ siД™ po tym jak wЕ‚oЕјyЕ‚eЕ› cztery kamienie na szczycie wieЕјy zamkowej. MoЕјe pomoЕјe otworzyД‡ ci candy box...");
Database.addText("pl.inventorySpecialNothingEqItem", "Nic");
Database.addText("pl.eqItemWeaponWoodenSwordName", "Drewniany miecz");
Database.addText("pl.eqItemWeaponWoodenSwordDescription", "Prosty miecz stworzony z drewna");
Database.addText("pl.eqItemWeaponIronAxeName", "Е»elazna siekiera");
Database.addText("pl.eqItemWeaponIronAxeDescription", "Prosta Ејelazna siekiera. Dobrze naostrzona. Silniejsza niЕј drewniany miecz.");
Database.addText("pl.eqItemWeaponPolishedSilverSwordName", "Wypolerowany srebrny miecz");
Database.addText("pl.eqItemWeaponPolishedSilverSwordDescription", "PotД™Ејny miecz, jest pokryty kolcami.");
Database.addText("pl.eqItemWeaponTrollBludgeonName", "Maczuga trolla");
Database.addText("pl.eqItemWeaponTrollBludgeonDescription", "ZabraЕ‚eЕ› tД… maczugД™ trollowi pilnujД…cemu most. Jest wolna, ale wydajnie niszczy twoich przeciwnikГіw.");
Database.addText("pl.eqItemWeaponTribalSpearName", "Plemienna wЕ‚Гіcznia");
Database.addText("pl.eqItemWeaponTribalSpearDescription", "ZnalazЕ‚eЕ› tД… plemiennД… wЕ‚ГіczniД™ na zwЕ‚okach wojownika plemiennego zgubionego w duЕјej dziurze w ziemi. Na poczД…tku trudno siД™ niД… posЕ‚ugiwaД‡, ale kiedy do niej przywykniesz, bД™dzie dobrД… broniД….");
Database.addText("pl.eqItemWeaponSummoningTribalSpearName", "PrzyzywajД…ca plemienna wЕ‚Гіcznia");
Database.addText("pl.eqItemWeaponSummoningTribalSpearDescription", "Ta magiczna plemienna wЕ‚Гіcznia, oprГіcz tego Ејe jest trochД™ silniejsza od zwykЕ‚ej, bД™dzie czД™sto przyzywaД‡ wojownikГіw plemiennych ktГіrzy pomogД… ci w trakcie twoich zadaЕ„.");
Database.addText("pl.eqItemWeaponMonkeyWizardStaffName", "BerЕ‚o maЕ‚piego czarodzieja");
Database.addText("pl.eqItemWeaponMonkeyWizardStaffDescription", "To berЕ‚o naleЕјaЕ‚o do maЕ‚piego czarodzieja ktГіrego znalazЕ‚eЕ› w jaskini. BД™dzie czД™sto strzelaД‡ magicznymi kulami sama z siebie, celujД…c w twoich przeciwnikГіw.");
Database.addText("pl.eqItemWeaponEnchantedMonkeyWizardStaffName", "BerЕ‚o maЕ‚piego czarodzieja (zaczarowane)");
Database.addText("pl.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "To berЕ‚o jest szybsze niЕј jego zwykЕ‚a wersja i bД™dzie strzelaД‡ wiД™kszД… iloЕ›ciД… magicznych kul.");
Database.addText("pl.eqItemWeaponGiantSpoonName", "Ogromna Е‚yЕјka");
Database.addText("pl.eqItemWeaponGiantSpoonDescription", "Ta ogromna Е‚yЕјka byЕ‚a w ogromnym czajniku w pustynnej fortecy. Nie wiesz czy ktoЕ› uЕјywaЕ‚ jej kiedykolwiek jako Е‚yЕјki, ale jeЕ›li tak, to musiaЕ‚ to byД‡ ktoЕ› naprawdД™ wielki. Raczej nie chcesz siД™ z nim spotkaД‡.");
Database.addText("pl.eqItemWeaponGiantSpoonOfDoomName", "Ogromna Е‚yЕјka zagЕ‚ady");
Database.addText("pl.eqItemWeaponGiantSpoonOfDoomDescription", "Ta ogromna Е‚yЕјka jest jeszcze potД™Ејniejsza niЕј zwykЕ‚a ogromna Е‚yЕјka ktГіrД… moЕјesz znaleЕєД‡, na przykЕ‚ad, w czajniku. Jest bardzo wolna.");
Database.addText("pl.eqItemWeaponScytheName", "Kosa");
Database.addText("pl.eqItemWeaponScytheDescription", "MГіwi siД™ Ејe ta kosa naleЕјaЕ‚a do samej Е›mierci. Jest niesamowicie szybka.");
Database.addText("pl.eqItemHatMerchantHatName", "Kapelusz handlarza");
Database.addText("pl.eqItemHatMerchantHatDescription", "Ten kapelusz zostaЕ‚ ci sprzedany przez cukierkowego handlarza. Kupiec cukierkГіw uwielbia cukierki. Ten kapelusz pomnoЕјy iloЕ›Д‡ cukierkГіw ktГіrД… znajdziesz w zadaniach przez 7!");
Database.addText("pl.eqItemHatSorceressHatName", "Kapelusz czarownicy");
Database.addText("pl.eqItemHatSorceressHatDescription", "Ten kapelusz zostaЕ‚ tobie sprzedany przez czarownicД™. Wzmocni efekty twoich zaklД™Д‡ i mikstur");
Database.addText("pl.eqItemHatOctopusKingCrownName", "Korona krГіla oЕ›miornic");
Database.addText("pl.eqItemHatOctopusKingCrownDescription", "Kiedy nosisz tД… koronД™, czujesz siД™ bardziej pewny siebie. Nie daje ci Ејadnej przewagi w zadaniach, ale pewnoЕ›Д‡ siebie jest waЕјna!");
Database.addText("pl.eqItemHatOctopusKingCrownWithJaspersName", "Korona krГіla oЕ›miornic z jaspisami");
Database.addText("pl.eqItemHatOctopusKingCrownWithJaspersDescription", "Ta zaczarowana korona jest zrobiona ze zЕ‚ota i czerwonych jaspisГіw. W zadaniach, bД™dzie czД™sto rzucaД‡ potД™Ејnymi kulami ognia dookoЕ‚a ciebie. Jest bЕ‚yszczД…ca!");
Database.addText("pl.eqItemHatOctopusKingCrownWithObsidianName", "Korona krГіla oЕ›miornic z obsydianem");
Database.addText("pl.eqItemHatOctopusKingCrownWithObsidianDescription", "Ta zaczarowana korona jest zrobiona ze zЕ‚ota i obsydianu. Jest piД™kna. W zadaniach, bД™dzie co jakiЕ› czas przyzywaД‡ krГіla oЕ›miornic aby walczyЕ‚ po twojej stronie. Jaki mackowaty sprzymierzeniec!");
Database.addText("pl.eqItemGlovesLeatherGlovesName", "SkГіrzane rД™kawice");
Database.addText("pl.eqItemGlovesLeatherGlovesDescription", "Te rД™kawice nic nie robiД…. Ale sД… przynajmniej miД™kkie i wygodne!");
Database.addText("pl.eqItemGlovesRedEnchantedGlovesName", "Czerwone zaczarowane rД™kawiczki");
Database.addText("pl.eqItemGlovesRedEnchantedGlovesDescription", "Te zaczarowane rД™kawiczki emitujД… delikatne czerwone Е›wiatЕ‚o gdy znajdujesz siД™ w ciemnoЕ›ci. W zadaniach, bД™dД… losowo rzucaЕ‚y maЕ‚e ogniste kule w kierunku twoich przeciwnikГіw, co moЕјe okazaД‡ siД™ bardzo przydatne.");
Database.addText("pl.eqItemGlovesPinkEnchantedGlovesName", "RГіЕјowe zaczarowane rД™kawiczki");
Database.addText("pl.eqItemGlovesPinkEnchantedGlovesDescription", "Te zaczarowane rД™kawiczki zostawiajД… rГіЕјowe Е›lady na wszystkim czego dotkniesz. W zadaniach, bД™dД… ciД™ stale leczyД‡.");
Database.addText("pl.eqItemBootsRocketBootsName", "Rakietowe buty");
Database.addText("pl.eqItemBootsRocketBootsDescription", "Te odjazdowe pozwalajД… ci skakaД‡ w powietrzu w taki sposГіb, Ејe po prostu latasz!");
Database.addText("pl.eqItemBootsLeatherBootsName", "SkГіrzane buty");
Database.addText("pl.eqItemBootsLeatherBootsDescription", "ZwykЕ‚e skГіrzane buty. Nic specjalnego.");
Database.addText("pl.eqItemBootsBootsOfIntrospectionName", "Buty introspekcji");
Database.addText("pl.eqItemBootsBootsOfIntrospectionDescription", "Nie Е›piesz siД™, zЕ‚ap oddech, odpocznij.NoszД…c te buty, nie bД™dziesz siД™ poruszaЕ‚ dopГіki dotykasz podЕ‚oЕјa.");
Database.addText("pl.eqItemBodyArmoursLightweightBodyArmourName", "Lekka zbroja");
Database.addText("pl.eqItemBodyArmoursLightweightBodyArmourDescription", "Ta zbroja da ci lekkД… obronД™. BД™dziesz trochД™ bardziej odporny na na ataki twoich przeciwnikГіw.");
Database.addText("pl.eqItemBodyArmoursKnightBodyArmourName", "Rycerska zbroja");
Database.addText("pl.eqItemBodyArmoursKnightBodyArmourDescription", "Ta mocna zbroja bД™dzie ciД™ ochraniaД‡. BД™dziesz bardziej odporny na ataki nieprzyjaciГіЕ‚.");
Database.addText("pl.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Zaczarowana rycerska zbroja");
Database.addText("pl.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Ta zbroja jest wyjД…tkowa. BД™dziesz BARDZO odporny na ataki nieprzyjaciГіЕ‚, ale obraЕјenia zadawane przez ciebie zostanД… podzielone przez 2.");
Database.addText("pl.mapVillageForgeBuyWoodenSwordButton", "Kup drewniany miecz (150 cukierkГіw)");
Database.addText("pl.mapVillageForgeBuyWoodenSwordSpeech", "DziД™kujД™! Ten drewniany miecz jest sЕ‚aby, ale to zawsze coЕ›.");
Database.addText("pl.mapVillageForgeBuyIronAxeButton", "Kup ЕјelaznД… siekierД™ (400 cukierkГіw)");
Database.addText("pl.mapVillageForgeBuyIronAxeSpeech", "Mam nadzieje Ејe spodoba ci siД™ ta siekiera. WЕ‚aЕ›nie jД… dla ciebie naostrzyЕ‚em!");
Database.addText("pl.mapVillageForgeBuyPolishedSilverSwordButton", "Kup wypolerowany srebrny miecz (2 000 cukierkГіw)");
Database.addText("pl.mapVillageForgeBuyPolishedSilverSwordSpeech", "Stworzenie tego miecza zajД™Е‚o mi bardzo dЕ‚ugo. Zapewniam ciД™, jest warty swojej ceny.");
Database.addText("pl.mapVillageForgeBuyLightweightBodyArmourButton", "Kup lekkД… zbrojД™ (15 000 cukierkГіw)");
Database.addText("pl.mapVillageForgeBuyLightweightBodyArmourSpeech", "Ta zbroja zapewni ci ochronД™ przed twoimi przeciwnikami.");
Database.addText("pl.mapVillageForgeBuyScytheButton", "Kup kosД™ (5 000 000 cukierkГіw)");
Database.addText("pl.mapVillageForgeBuyScytheSpeech", "Stworzenie tej kosy zajД™Е‚o mi parД™ miesiД™cy. To prawdziwe dzieЕ‚o sztuki. Jest najprawdopodobniej najszybszД… broniД… jakiej bД™dziesz w stanie uЕјyД‡. Powodzenia!");
Database.addText("pl.wishingWellThrowFirstCandyButton", "WrzuД‡ cukierek do studni");
Database.addText("pl.wishingWellCandyIntroductionSpeech", "Witaj podrГіЕјniku! Jestem studniД… ЕјyczeЕ„. BД™dД™ speЕ‚niaД‡ twoje Ејyczenia w zamian za sЕ‚odycze! Kiedy wrzucisz we mnie cukierki, uleczД™ ciД™.");
Database.addText("pl.wishingWellThrewCandiesSpeech", "ZostaЕ‚eЕ› uleczony!");
Database.addText("pl.wishingWellNoWoundSpeech", "Nie masz niczego do uleczenia!");
Database.addText("pl.wishingWellThrowFirstLollipopButton", "WrzuД‡ lizaka do studni");
Database.addText("pl.wishingWellLollipopIntroductionSpeech", "Witaj podrГіЕјniku! Jestem studniД… ЕјyczeЕ„. BД™dД™ speЕ‚niaД‡ twoje Ејyczenia w zamian za sЕ‚odycze! Gdy wrzucisz we mnie lizaki, zamieniД™ je na cukierki!");
Database.addText("pl.wishingWellThrewLollipopsSpeech", "Twoje lizaki zostaЕ‚y zamienione na cukierki! Dwa lizaki na jeden cukierek.");
Database.addText("pl.wishingWellThrowChocolateBarButton", "WrzuД‡ tabliczkД™ czekolady do studni.");
Database.addText("pl.wishingWellChocolateBarIntroductionSpeech", "Witaj podrГіЕјniku! Jestem studniД… ЕјyczeЕ„. BД™dД™ speЕ‚niaД‡ twoje Ејyczenia w zamian za sЕ‚odycze! Uwielbiam czekoladД™. NaprawdД™ jД… kocham. Za kaЕјdД… tabliczkД™ czekolady ktГіrД… we mnie wrzucisz, Е‚Д…cznie z tД…, dostaniesz jednД… moЕјliwoЕ›Д‡ zaczarowania wybranego przez ciebie przedmiotu.");
Database.addText("pl.wishingWellThrewChocolateBarSpeech", "KtГіry przedmiot chcesz zaczarowaД‡?");
Database.addText("pl.wishingWellThrowPainAuChocolatButton", "WrzuД‡ pain au chocolat do studni");
Database.addText("pl.wishingWellPainAuChocolatIntroductionSpeech", "Witaj podrГіЕјniku! Jestem studniД… ЕјyczeЕ„. BД™dД™ speЕ‚niaД‡ twoje Ејyczenia w zamian za sЕ‚odycze! Gdy wrzucisz we mnie pain au chocolat, dostaniesz specjalny prezent. Wybieraj rozwaЕјnie.");
Database.addText("pl.wishingWellThrewPainAuChocolatSpeech", "DziД™ki za pain au chocolat! MoЕјesz teraz wybraД‡ swГіj prezent.");
Database.addText("pl.wishingWellChooseGift", "Wybierz swГіj prezent!");
Database.addText("pl.wishingWellChooseGiftButton", "Wybierz");
Database.addText("pl.wishingWellGiftDoneSpeech", "Gotowe! Masz nowy prezent. Pojawi siД™ w twoim panelu statystyk w ekwipunku.");
Database.addText("pl.wishingWellNoPossibleEnchantment", "Nie moЕјesz teraz nic zaczarowaД‡");
Database.addText("pl.wishingWellChooseEnchantment", "Wybierz czar");
Database.addText("pl.wishingWellEnchantButton", "Zaczaruj");
Database.addText("pl.wishingWellEnchantmentDoneSpeech", "ProszД™ bardzo! TwГіj przedmiot jest teraz zaczarowany.");
Database.addText("pl.pierLighthouseButton", "PopЕ‚yЕ„ do latarni morskiej Е‚ГіdkД…");
Database.addText("pl.pierTheSeaButton", "Wskocz do morza");
Database.addText("pl.lonelyHouseOpenBox", "OtwГіrz pudeЕ‚ko");
Database.addText("pl.lonelyHouseShakeBox", "WstrzД…Е›nij pudeЕ‚kiem");
Database.addText("pl.lonelyHouseBreakLock", "WyЕ‚am zamek");
Database.addText("pl.lonelyHouseKickBox", "Kopnij pudeЕ‚ko");
Database.addText("pl.lonelyHouseAskTheBoxToOpenItself", "PoproЕ› pudeЕ‚ko Ејeby siД™ otworzyЕ‚o");
Database.addText("pl.lonelyHouseLureTheBoxWithACandy", "Zaoferuj pudeЕ‚ku cukierka");
Database.addText("pl.lonelyHouseTakeTheBox", "WeЕє pudeЕ‚ko ze sobД…, prawdopodobnie potrzebujesz klucza Ејeby je otworzyД‡.");
Database.addText("pl.lonelyHouseOpenBoxResult", "PudeЕ‚ko jest zakluczone");
Database.addText("pl.lonelyHouseShakeBoxResult", "Nic siД™ nie dzieje");
Database.addText("pl.lonelyHouseBreakLockResult", "Zamek wytrzymuje");
Database.addText("pl.lonelyHouseKickBoxResult", "Stopa ciД™ trochД™ rozbolaЕ‚a, ale nic siД™ nie dzieje.");
Database.addText("pl.lonelyHouseAskTheBoxToOpenItselfResult", "...wiesz Ејe gadasz do pudeЕ‚ka, prawda?");
Database.addText("pl.lonelyHouseLureTheBoxWithACandyResult", "PudeЕ‚ko siД™ nie przejmuje");
Database.addText("pl.lonelyHouseTakeTheBoxResult", "W tym candy box musi byД‡ coЕ› ciekawego.");
Database.addText("pl.lollipopFarmConstructMill", "Zbuduj mЕ‚yn (10 000 lizakГіw)");
Database.addText("pl.lollipopFarmFeedMill", "Nakarm mЕ‚yn");
Database.addText("pl.lollipopFarmCurrentCandiesProduction", "BieЕјД…ca produkcja cukierkГіw");
Database.addText("pl.lollipopFarmDigPond", "Wykop staw (100 000 lizakГіw)");
Database.addText("pl.lollipopFarmBuyLolligator", "Kup lizakogotora (1200 cukierkГіw)");
Database.addText("pl.lollipopFarmLolligatorsConversionText", "Zamiana cukierki -> lizaki wЕ‚Д…czona");
Database.addText("pl.lighthouseAskButton", "Spytaj");
Database.addText("pl.lighthouseQuestionWho", "Kim jesteЕ›?");
Database.addText("pl.lighthouseQuestionWhoSpeech", "Jestem bardzo starym cyklopem");
Database.addText("pl.lighthouseQuestionWhat", "Co ty tu robisz?");
Database.addText("pl.lighthouseQuestionWhatSpeech", "SiedzД™ tutaj caЕ‚y dzieЕ„, czekajД…c na Е‚ГіdkД™. MinД™Е‚o juЕј sporo czasu od kiedy ostatni raz widziaЕ‚em Е‚ГіdkД™, ale muszД™ tu zostaД‡, patrzyД‡ siД™ na morze, poniewaЕј moЕјe przypЕ‚ynД…Д‡ Е‚Гіdka.");
Database.addText("pl.lighthouseQuestionWhyEatCandies", "Dlaczego powinienem jeЕ›Д‡ cukierki?");
Database.addText("pl.lighthouseQuestionWhyEatCandiesSpeech", "Bo sД… dobre dla twojego zdrowia!");
Database.addText("pl.lighthouseQuestionCandyBox", "Czym jest candy box?");
Database.addText("pl.lighthouseQuestionCandyBoxSpeech", "Jest to bardzo stare pudeЕ‚ko o ktГіrym mГіwi siД™ Ејe zawiera wszystkie cukierki Е›wiata. Legendy mГіwiД… Ејe komukolwiek uda siД™ je otworzyД‡, miaЕ‚by tak duЕјo cukierkГіw Ејe wszystko byЕ‚oby moЕјliwe.");
Database.addText("pl.lighthouseQuestionDragon", "Smok powiedziaЕ‚ mi Ејeby przyjЕ›Д‡ tutaj, jeЕ›li chcД™ cukierkГіw.");
Database.addText("pl.lighthouseQuestionDragonSpeech", "Ach, rozumiem... CГіЕј, nie jestem w stanie zapewniД‡ ci cukierkГіw bezpoЕ›rednio, ale jestem w stanie daД‡ ci coЕ› niezbД™dnego potrzebnego do uzyskania MNГ“STWA cukierkГіw. Lecz najpierw muszД™ ciД™ sprawdziД‡. To co mam nie moЕјe byД‡ oddane do byle kogo. RozwiД…Еј tД™ zagadkД™ i bД™dzie twoje.");
Database.addText("pl.lighthouseFoundStone", "Gratulacje! ZdaЕ‚eЕ› test i znalazЕ‚eЕ› kamieЕ„. Jest bezcenny, ale przydatny tylko jeЕ›li masz trzy pozostaЕ‚e. Powodzenia!");
Database.addText("pl.lighthouseFoundStoneAgain", "Dobra robota, rozwiД…zaЕ‚eЕ› zagadkД™ po raz kolejny. Chyba lubisz to robiД‡.");
Database.addText("pl.saveLocalSaveTitle", "Zapisz w przeglД…darce");
Database.addText("pl.saveLocalSaveWhy", "Wybierz zapis w przeglД…darce jeЕ›li chcesz kontynuowaД‡ na tym urzД…dzeniu i przeglД…darce.");
Database.addText("pl.saveLocalSaveWarning0", "Twoja przeglД…darka chyba nie obsЕ‚uguje HTML5");
Database.addText("pl.saveLocalSaveWarning1", "PowinieneЕ› zaktualizowaД‡ swojД… przeglД…darkД™ aby skorzystaД‡ z funkcji zapisu w przeglД…darce.");
Database.addText("pl.saveLocalSaveChooseSlot", "Wybierz miejsce do zapisania :");
Database.addText("pl.saveLocalSaveAutosaveEnabled", "Autozapis wЕ‚Д…czony");
Database.addText("pl.saveLocalSaveChooseWhatToDo", "Wybierz co zrobiД‡ :");
Database.addText("pl.saveLocalSaveSaveButton", "Zapisz");
Database.addText("pl.saveLocalSaveAutosaveButton", "Zapisuj automatycznie co 10 minut");
Database.addText("pl.saveLocalSaveDisableAutosaveButton", "WyЕ‚Д…cz autozapis");
Database.addText("pl.saveFileSaveTitle", "Zapis tekstowy");
Database.addText("pl.saveFileSaveWhy0", "Wybierz zapis tekstowy jeЕ›li :");
Database.addText("pl.saveFileSaveWhy1", "Chcesz kontynuowaД‡ grД™ na innym urzД…dzeniu bД…dЕє przeglД…darce");
Database.addText("pl.saveFileSaveWhy2", "Chcesz siД™ podzieliД‡ swoim zapisem z kimЕ› innym");
Database.addText("pl.saveFileSaveWhy3", "Z jakiegoЕ› powodu chcesz oprГіЕјniД‡ pamiД™Д‡ podrД™cznД… swojej przeglД…darki");
Database.addText("pl.saveFileSaveWhy4", "(co usunie twoje zapisy przeglД…darkowe)");
Database.addText("pl.saveFileSaveButton", "DostaЕ„ swojД… obecnД… grД™ w formie tekstowej");
Database.addText("pl.saveFileSaveWarning", "Teraz skopiuj gdzieЕ› ten tekst! (na przykЕ‚ad, do pliku)");
Database.addText("pl.saveLocalLoadTitle", "Wczytaj z przeglД…darki");
Database.addText("pl.saveLocalLoadYouCan", "MoЕјesz wczytaД‡ zapis przeglД…darkowy korzystajД…c z tych linkГіw:");
Database.addText("pl.saveLocalLoadThanksTo", "DziД™ki magii HTML5, bД™dziesz w stanie korzystaД‡ z tych zapisГіw nawet offline.");
Database.addText("pl.saveFileLoadTitle", "Wczytaj tekst");
Database.addText("pl.saveFileLoadPaste", "Wklej swГіj zapis poniЕјej, potem kliknij guzik \"Wczytaj\"");
Database.addText("pl.saveFileLoadButton", "Wczytaj");
Database.addText("pl.mountainsText0", "ZauwaЕјyЕ‚eЕ› coЕ› pomiД™dzy gГіrami!");
Database.addText("pl.mountainsText1", "WyglД…da interesujД…co. MoЕјe siД™ przyda.");
Database.addText("pl.mountainsTextButton", "Wespnij siД™ na gГіry aby zdobyД‡ to coЕ›");
Database.addText("pl.mountainsTextAfter", "ZnalazЕ‚eЕ› sprД™Ејynowe urzД…dzenie do podskakiwania! Jest teraz w twoim ekwipunku.");
Database.addText("pl.secondHouseIntroSpeech", "Witaj, jestem handlarzem cukierkГіw. Dla cukierkГіw zrobiД™ wszystko. Czego potrzebujesz?");
Database.addText("pl.secondHouseLollipop1Speech", "To jest cytrynowy lizak. MГіj ulubiony! Kosztuje 60 cukierkГіw, ale jest tego warty.");
Database.addText("pl.secondHouseLollipop2Speech", "To jest truskawkowy lizak. Jest bardzo smaczny. LubiД™ jego czerwony kolor. Tylko 60 cukierkГіw!");
Database.addText("pl.secondHouseLollipop3Speech", "To jest dyniowy lizak. ZaЕ‚oЕјД™ siД™ Ејe nigdy takiego nie jadЕ‚eЕ›! 60 cukierkГіw i jest twГіj.");
Database.addText("pl.secondHouseLollipopButtonText", "Kup tego lizaka (60 cukierkГіw)");
Database.addText("pl.secondHouseMerchantHatSpeech", "MogД™ ci sprzedaД‡ mГіj kapelusz, ale jest bardzo cenny... BД™dziesz musiaЕ‚ mi daД‡ za niego mnГіstwo cukierkГіw. Powiedzmy... milion cukierkГіw. To uczciwa cena, prawda?");
Database.addText("pl.secondHouseMerchantHatButtonText", "Kup kapelusz handlarza (1 000 000 cukierkГіw)");
Database.addText("pl.secondHouseTimeRingSpeech", "To jest pierЕ›cieЕ„ czasu. Jest magiczny. Pozwoli ci zwolniД‡ czas jeЕ›li wpadniesz w tarapaty.");
Database.addText("pl.secondHouseTimeRingButtonText", "Kup pierЕ›cieЕ„ czasu (500 cukierkГіw)");
Database.addText("pl.secondHouseLeatherGlovesSpeech", "Te skГіrzane rД™kawice zostaЕ‚y stworzone z najwyЕјszej jakoЕ›ci wielbЕ‚Д…dziej skГіry. Mam ich mnГіstwo, dlatego sД… takie tanie : tylko 300 cukierkГіw!");
Database.addText("pl.secondHouseLeatherBootsButtonText", "Kup parД™ skГіrzanych butГіw (300 cukierkГіw)");
Database.addText("pl.secondHouseLeatherBootsSpeech", "Te skГіrzane buty wysokiej jakoЕ›ci, stworzone z wielbЕ‚Д…dziej skГіry, ocieplД… twoje stopy.");
Database.addText("pl.secondHouseLeatherGlovesButtonText", "Kup parД™ skГіrzanych rД™kawic (300 cukierkГіw)");
Database.addText("pl.secondHouseChocolateBarSpeech", "To jest tabliczka czekolady. Nie wiem do czego sЕ‚uЕјy, ale wiem Ејe jest bardzo rzadka, co wyjaЕ›nia jej cenД™. 800 cukierkГіw i jest twoja!");
Database.addText("pl.secondHouseChocolateBarButtonText", "Kup tabliczkД™ czekolady (800 cukierkГіw)");
Database.addText("pl.outsideTheHoleButton", "Wskocz do wielkiej dziury w ziemi");
Database.addText("pl.theCaveExitText0", "W koЕ„cu znalazЕ‚eЕ› wyjЕ›cie z jaskini.");
Database.addText("pl.theCaveExitText1", "Widzisz stД…d wielki las.");
Database.addText("pl.theCaveExitButtonText", "WyjdЕє z jaskini");
Database.addText("pl.theCaveFirstSentenceWentStraight", "PoszedЕ‚eЕ› prosto.");
Database.addText("pl.theCaveFirstSentenceWentLeft", "PoszedЕ‚eЕ› w lewo.");
Database.addText("pl.theCaveFirstSentenceWentRight", "PoszedЕ‚eЕ› w prawo");
Database.addText("pl.theCaveFirstSentenceYouAre", "JesteЕ› w jaskini. Masz przed sobД… trzy Е›cieЕјki.");
Database.addText("pl.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "ZauwaЕјyЕ‚eЕ› dziwnД… rzecz na ziemi przed tobД….");
Database.addText("pl.theCavePattern_ChocolateBarNowSeeChocolateBar", "ZauwaЕјyЕ‚eЕ› tabliczkД™ czekolady.");
Database.addText("pl.theCavePattern_TreasureMapSentence", "Widzisz maЕ‚e kamyki uЕ‚oЕјone w dziwny sposГіb na ziemi.");
Database.addText("pl.theCavePattern_MonkeyWizardSentence", "NatknД…Е‚eЕ› siД™ na nagiego maЕ‚piego czarodzieja.");
Database.addText("pl.theCavePattern_MonkeyWizardButton", "Zmierz siД™ z nim");
Database.addText("pl.theCavePattern_OctopusKingSentence", "NatknД…Е‚eЕ› siД™ na krГіla oЕ›miornic. Jest paskudny.");
Database.addText("pl.theCavePattern_OctopusKingButton", "Zmierz siД™ z nim");
Database.addText("pl.fortressInsideText0", "JesteЕ› w pustynnej fortecy.");
Database.addText("pl.fortressInsideText1", "Masz wybГіr pomiД™dzy trzema drzwiami.");
Database.addText("pl.fortressInsideText2", "KaЕјde z nich prowadzi do duЕјego pokoju ze skarbem");
Database.addText("pl.fortressInsideEnterRoom1", "WejdЕє do pierwszego pokoju");
Database.addText("pl.fortressInsideEnterRoom2", "WejdЕє do drugiego pokoju");
Database.addText("pl.fortressInsideEnterRoom3", "WejdЕє do trzeciego pokoju");
Database.addText("pl.treasureButtonDig", "Kop");
Database.addText("pl.treasureButtonYouFound", "ZnalazЕ‚eЕ› trzy tabliczki czekolady!");
Database.addText("pl.sorceressHutHello", "Witaj, jestem czarodziejkД…. MogД™ ciД™ nauczyД‡ co nieco o magii. MogД™ ci takЕјe daД‡ interesujД…ce rzeczy, albo rzucaД‡ za ciebie zaklД™cia. Ale wszystko ma swojД… cenД™! A tД… cenД… bД™dД… lizaki... MnГіstwo lizakГіw.");
Database.addText("pl.sorceressHutClickedGrimoire", "To jest grimuar stworzony dla poczД…tkujД…cych. NoszД…c go ze sobД… w zadaniach, bД™dziesz w stanie rzucaД‡ proste, ale przydatne zaklД™cia. NiezbД™dny! Tylko 5 000 lizakГіw.");
Database.addText("pl.sorceressHutBuyGrimoireButton", "Kup Ten grimuar (5 000 lizakГіw)");
Database.addText("pl.sorceressHutBuyGrimoireSpeech", "DziД™kujД™ za kupno! DziД™ki temu grimuarowi bД™dziesz w stanie rzucaД‡ trzy zaklД™cia. Powodzenia!");
Database.addText("pl.sorceressHutClickedGrimoire2", "To jest zaawansowany grimuar. NoszД…c go ze sobД… w zadaniach, bД™dziesz w stanie rzucaД‡ 2 zaawansowane zaklД™cia. Sama go napisaЕ‚am, a to nie byЕ‚o proste. 20 000 lizakГіw to uczciwa cena.");
Database.addText("pl.sorceressHutBuyGrimoire2Button", "Kup ten grimuar (20 000 lizakГіw)");
Database.addText("pl.sorceressHutBuyGrimoire2Speech", "DziД™kujД™ za kupno! DziД™ki temu grimuarowi bД™dziesz w stanie rzucaД‡ dwa zaawansowane zaklД™cia. UЕјywaj ich rozwaЕјnie!");
Database.addText("pl.sorceressHutClickedCauldron", "To jest mГіj kocioЕ‚. Pozwala mi warzyД‡ magiczne mikstury. MogД™ ci go sprzedaД‡ ale jest bardzo cenny... bД™dzie ciД™ kosztowaД‡ 100 000 lizakГіw.");
Database.addText("pl.sorceressHutBuyCauldronButton", "Kup kocioЕ‚ (100 000 lizakГіw)");
Database.addText("pl.sorceressHutBuyCauldronSpeech", "Wielkie dziД™ki! 100 000 lizakГіw dla mnie! W zestawie doЕ‚Д…czyЕ‚am instrukcje uЕјytkowania. Przyda ci siД™.");
Database.addText("pl.sorceressHutClickedHat", "Mam Е‚adny kapelusz, wiem! Ale naprawdД™ nie mogД™ ci go sprzedaД‡. Jest dla mnie baaaardzo cenny. NaprawdД™, nie mogД™. Nie nalegaj. Nie. Nie nie nie nie. Nie powinnam tego robiД‡. Och, niech ci bД™dzie! Sprzedam ci go, ale za 1 000 000 000 lizakГіw. I tak pewnie nie bД™dziesz w stanie tyle zapЕ‚aciД‡.");
Database.addText("pl.sorceressHutBuyHatButton", "Kup kapelusz (1 000 000 000 lizakГіw)");
Database.addText("pl.sorceressHutBuyHatSpeech", "Miliard lizakГіw dla mnieeeeee! Niestety nie mam juЕј kapelusza... ale miliard lizakГіw, wow! ... ByЕ‚o warto.");
Database.addText("pl.cauldronPreviousPageButton", "Poprzednia strona");
Database.addText("pl.cauldronNextPageButton", "NastД™pna strona");
Database.addText("pl.cauldronWhatYouWantToPut", "Co chcesz wsadziД‡ do kotЕ‚a?");
Database.addText("pl.cauldronWhatIsIn", "Co jest w kotle:");
Database.addText("pl.cauldronWhatYouCanDo", "Co moЕјesz z tym zrobiД‡:");
Database.addText("pl.castleBigRoomComment", "Wielki pokГіj");
Database.addText("pl.castleARoomComment", "PokГіj");
Database.addText("pl.castleADarkRoomComment", "NieoЕ›wietlony pokГіj");
Database.addText("pl.castleCastleEntranceComment", "WejЕ›cie do zamku");
Database.addText("pl.castleTowerEntranceComment", "WejЕ›cie do wieЕјy");
Database.addText("pl.castleNougatMonsterComment", "Zaatakuj wielkiego nugatowego potwora");
Database.addText("pl.castleGuardsComment", "Zaatakuj straЕјnikГіw");
Database.addText("pl.castleStairsComment", "Schody");
Database.addText("pl.buttonBackToTheCastle", "PowrГіt do zamku");
Database.addText("pl.castleBigRoomHovenSpeechSad", "CzeЕ›Д‡! Jestem bardzo starym Piecem Chlebowym. KiedyЕ› wypiekaЕ‚em mnГіstwo wspaniaЕ‚ych wyrobГіw cukierniczych, ale nikt juЕј ze mnie nie korzysta. MoЕјe... moЕјe mГіgЕ‚byЕ› mi pomГіc? PozwГіl mi tylko zabraД‡ od ciebie trochД™ sЕ‚odyczy! Nie martw siД™, nie poЕјaЕ‚ujesz tego! Zaufaj mi.");
Database.addText("pl.castleBigRoomHovenNotEnough", "Och... nie masz wystarczajД…cej iloЕ›ci sЕ‚odyczy, nie mogД™ nic zrobiД‡. Jestem bezuЕјyteczny. Jestem BezuЕјytecznym Piecem Chlebowym, tak powinieneЕ› mnie nazywaД‡.");
Database.addText("pl.castleBigRoomHovenSpeechMadePainAuChocolat", "Hurra! Wielkie dziД™ki! WykorzystaЕ‚em  100 cukierkГіw oraz tabliczkД™ czekolady, i stworzyЕ‚em... pain au chocolat! Jest to mГіj ulubiony wypiek cukierniczy, mam nadzieje Ејe teЕј go polubisz!");
Database.addText("pl.castleBigRoomHovenSpeechHappy", "Hej! JeЕјeli chcesz Ејebym wypiekЕ‚ jeszcze coЕ›, po prostu mi powiedz! Z przyjemnoЕ›ciД… ci pomogД™.");
Database.addText("pl.castleBigRoomHovenSpeechHappyNotEnough", "Och, niestety nie masz wystarczajД…cej iloЕ›ci sЕ‚odyczy. Potrzebuje 100 cukierkГіw i tabliczkД™ czekolady. WrГіД‡ kiedy bД™dziesz miaЕ‚ skЕ‚adniki");
Database.addText("pl.castleBigRoomHovenLetHovenTakeButton", "PozwГіl Piecowi zabraД‡ wszystkie cukierki ktГіrych potrzebuje");
Database.addText("pl.castleBigRoomHovenThanks", "DziД™ki Piecu!");
Database.addText("pl.dragonStopTickling", "Hej, ty! ProszД™, przestaЕ„ mnie Е‚askotaД‡.");
Database.addText("pl.dragonStopTicklingButton", "Yyyy, przepraszam, myЕ›laЕ‚em Ејe miaЕ‚em ciД™ zaatakowaД‡.");
Database.addText("pl.dragonTalking", "Jestem Smok, a to jest mГіj zamek. WidzД™ Ејe udaЕ‚o ci siД™ wejЕ›Д‡, musisz byД‡ bardzo odwaЕјny... MogД™ ci pomГіc. Czego poszukujesz?");
Database.addText("pl.dragonTalkingChallengeButton", "Wyzwania");
Database.addText("pl.dragonTalkingFameButton", "SЕ‚awy");
Database.addText("pl.dragonTalkingCandiesButton", "CukierkГіw");
Database.addText("pl.dragonTalkingChallengeSpeech", "Ach, wiД™c chcesz wyzwania? MyЕ›lД™ Ејe powinieneЕ› wybraД‡ siД™ na wycieczkД™ do piekЕ‚a, wszyscy wiedzД… Ејe DiabeЕ‚ jest trudnym przeciwnikiem. Wskocz mi na plecy to ciД™ tam zabiorД™!");
Database.addText("pl.dragonTalkingFameSpeech", "Najlepszym sposobem na zostanie sЕ‚awnym jest zmierzenie siД™ z samym deweloperem. Wiem gdzie mieszka wiД™c mogД™ ciД™ tam zabraД‡. Ale bД…dЕє gotowy, to nie bД™dzie Е‚atwe.");
Database.addText("pl.dragonTalkingCandiesSpeech", "Ostatecznie, rzeczД… ktГіrej wszyscy chcemy to cukierki, prawda? MyЕ›lД™ Ејe mГіj znajomy mГіgЕ‚by ci z tym pomГіc. ЕЃatwo go rozpoznasz, ma tylko jedno oko. Po prostu powiedz mu Ејe mnie znasz.");
Database.addText("pl.dragonTalkingChallengeAnswer", "ChodЕєmy!");
Database.addText("pl.dragonTalkingFameAnswer", "Jestem gotowy!");
Database.addText("pl.dragonTalkingCandiesAnswer", "Ok, dziД™ki!");
Database.addText("pl.buttonBackToCastle", "PowrГіt do zamku");
Database.addText("pl.talkingCandySpeechNoBox", "Hej! Jestem MГіwiД…cy Cukierek. Prawie przeszedЕ‚eЕ› grД™. Teraz tylko musisz znaleЕєД‡ candy box. Znajduje siД™ w domu na pГіЕ‚noc od wioski. To juЕј ostatni krok!");
Database.addText("pl.talkingCandySpeech1", "Hej! Jestem MГіwiД…cy Cukierek. Gratulacje, przeszedЕ‚eЕ› grД™! OtworzД™ dla ciebie candy box, bД™dzie to twojД… nagrodД…. Mam kontynuowaД‡?");
Database.addText("pl.talkingCandySpeech2", "Gotowe! MoЕјesz go otworzyД‡. Mam nadziejД™ Ејe gra siД™ podobaЕ‚a :)");
Database.addText("pl.talkingCandyButton", "Tak!!");
Database.addText("pl.lighthousePuzzleResetButton", "Resetuj");
Database.addText("br.mapVillageComment", "Aldeia");
Database.addText("br.mapFortressComment", "Fortaleza do Deserto");
Database.addText("br.mapATreeComment", "ГЃrvore");
Database.addText("br.mapTheDesertComment", "Deserto");
Database.addText("br.mapWishingWellComment", "PoГ§o dos Desejos");
Database.addText("br.mapLonelyHouseComment", "Casa abandonada");
Database.addText("br.mapForestComment", "Floresta");
Database.addText("br.mapCastleEntranceComment", "PortГµes do castelo");
Database.addText("br.mapCastleComment", "Castelo");
Database.addText("br.mapDragonComment", "DragГЈo");
Database.addText("br.candyBoxEatCandiesButton", "Comer todos os doces");
Database.addText("br.candyBoxThrowCandiesButton", "Jogar 10 doces no chГЈo");
Database.addText("br.mapVillageAHouseComment", "Casa");
Database.addText("br.mapVillageForgeComment", "Forja");
Database.addText("br.buttonBackToTheMap", "Voltar ao mapa");
Database.addText("br.mapSorceressHutComment", "Cabana da feiticeira");
Database.addText("br.buttonBackToTheVillage", "Voltar Г  aldeia");
Database.addText("br.mapATreeIntroductionSpeech", "Oi, eu sou o esquilo. Posso lhe dar doces e muitas outras coisas. Eu sei que vocГЄ ama doces... Mas eu me sinto tГЈo sГі nessa floresta.");
Database.addText("br.mapATreeIntroductionButton", "Como posso ajudГЎ-lo?");
Database.addText("br.mapATreeFirstQuestion", "Vou fazer perguntas. Se vocГЄ acertar, ganharГЎ os doces mais doces! Primeira pergunta: vocГЄ ama mesmo doces? (responda em inglГЄs)");
Database.addText("br.mapATreeSecondQuestion", "Г‰ isso aГ­! Tome, 20 doces para vocГЄ. Agora, complete essa sequГЄncia de letras para ganhar outro prГЄmio: S, E, I, D, N, A, ?");
Database.addText("br.mapATreeThirdQuestion", "Doces! Fique com mais esses 100 doces. PrГіxima pergunta: quantos doces a pessoa mais doce do mundo tem?");
Database.addText("br.mapATreeFourthQuestion", "Aqui, mais 500 doces para vocГЄ! O prГіximo prГЄmio vai ser bem interessante... LГЎ vai a charada: em uma floresta esquecida, cresce uma ГЎrvore muito antiga, onde vivem os animais mais inteligentes do mundo. Dizem que ela tem 60 raГ­zes, 360 galhos e 2160 folhas. Quantas marcas tem o tronco dessa ГЎrvore?");
Database.addText("br.mapATreeFifthQuestion", "ParabГ©ns! Sim, eu estava falando da minha ГЎrvore. Fique com esses 3 pirulitos. FaГ§a bom uso deles! PrГіxima charada, preste atenГ§ГЈo: em uma noite de lua cheia, eu jogo um chapГ©u amarelo no mar vermelho. O que acontece com o chapГ©u?");
Database.addText("br.mapATreeTicTacToeIntro", "Muito bem! Essa nГЈo era tГЈo difГ­cil. Mais trГЄs barras de chocolate para vocГЄ! JГЎ para a prГіxima recompensa, as regras serГЈo diferentes. VocГЄ terГЎ de me vencer em um jogo! EstГЎ preparado?");
Database.addText("br.mapATreeTicTacToeIntroButton", "Mas Г© claro!");
Database.addText("br.mapATreeTicTacToeLetsPlay", "Г‰ o jogo-da-velha. Vamos jogar em um tabuleiro 3 por 3. VocГЄ usarГЎ o sГ­mbolo X e eu o sГ­mbolo O. Cada um de uma vez, o objetivo Г© colocar trГЄs sГ­mbolos um do lado do outro. Vou deixar que vocГЄ comece!");
Database.addText("br.mapATreeTicTacToeNobodyWins", "Preenchemos todo o tabuleiro, mas ninguГ©m conseguiu fechar uma sequГЄncia... Empatou! Quer tentar novamente?");
Database.addText("br.mapATreeTicTacToeYouLose", "Eu consegui trГЄs sГ­mbolos em sequГЄncia! Quer tentar de novo?");
Database.addText("br.mapATreeTicTacToeTryAgainButton", "Sim, claro!");
Database.addText("br.mapATreeTicTacToeYouWin", "Nossa, nГЈo esperava por essa. Mas nГЈo dГЎ para negar: vocГЄ conseguiu uma sequГЄncia de trГЄs. VocГЄ venceu! Fique com essa chave. Ela abre uma das casas na aldeia ao sul da floresta.");
Database.addText("br.mapATreeTicTacToeAnymoreSweet", "Obrigado, esquilo! VocГЄ tem mais algum desafio?");
Database.addText("br.mapATreeNoMoreChallenge", "Infelizmente, nГЈo. Acabaram meus desafios... Mas foi legal brincar com vocГЄ, muito obrigado!");
Database.addText("br.buttonExitQuestKeeping", "Sair da missГЈo (e levar os itens com vocГЄ)");
Database.addText("br.buttonExitQuestNoKeeping", "Sair da missГЈo (e deixar os itens para trГЎs)");
Database.addText("br.buttonExitQuestNoKeepingBecauseLose", "Sair da missГЈo (e deixar os itens para trГЎs, pois vocГЄ fracassou)");
Database.addText("br.mapVillageLockedHouseComment", "Casa trancada");
Database.addText("br.mapVillageForgeIntroductionSpeech", "OlГЎ! Eu sou um ferreiro. Tenho muitas armas e equipamentos para vender.");
Database.addText("br.mapVillageForgeIntroductionSpeechNoMoreToSell", "OlГЎ! Eu sou um ferreiro. Infelizmente, nГЈo tenho nada para ver. Volte mais tarde.");
Database.addText("br.mapVillageFifthHouseNoWeaponSpeech", "OlГЎ. Meu porГЈo estГЎ cheio de ratos, preciso me livrar deles... Se ao menos alguГ©m com uma arma pudesse me ajudar...");
Database.addText("br.mapVillageFifthHouseWeaponSpeech", "Ei, vocГЄ! Vejo que tem uma arma! Se matar os ratos do meu porГЈo, posso lhe dar uma recompensa!");
Database.addText("br.mapVillageFifthHouseAgree", "EntГЈo vamos");
Database.addText("br.mapVillageFifthHouseCellarDone", "Obrigado por se livrar dos ratos! Fique com esta baita recompensa: um mapa do mundo. Aposto que vocГЄ precisa mais disso do que eu.");
Database.addText("br.mapVillageTheShopComment", "Loja");
Database.addText("br.mapBridgeComment", "Ponte");
Database.addText("br.mapFarmComment", "Fazenda de pirulitos");
Database.addText("br.mapCaveEntranceComment", "br.rada da caverna");
Database.addText("br.mapLighthouseComment", "Farol");
Database.addText("br.mapPierComment", "Cais");
Database.addText("br.mapTheHoleComment", "Buraco");
Database.addText("br.candyBoxRequestStatusBarUnlocked", "Solicitar um novo recurso ao desenvolvedor (30 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedCfg", "Solicitar outro recurso (5 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedSave", "Solicitar novamente (5 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedHealthBar", "Solicitar algo mais emocionante (5 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedMap", "Гљltimo recurso! Tomara que esse valha a pena. (10 doces)");
Database.addText("br.candyBoxRequestStatusBarUnlockedComment", "VocГЄ desbloqueou a barra de status (acima)");
Database.addText("br.candyBoxRequestStatusBarUnlockedCfgComment1", "Agora vocГЄ pode acessar a guia de configuraГ§ГЈo.");
Database.addText("br.candyBoxRequestStatusBarUnlockedCfgComment2", "Se quiser, vocГЄ pode trocar o idioma do jogo.");
Database.addText("br.candyBoxRequestStatusBarUnlockedSaveComment", "Uma guia selvagem aparece!");
Database.addText("br.candyBoxRequestStatusBarUnlockedHealthBarComment", "Fique com esses 100 pontos de vida. VocГЄ vai precisar.");
Database.addText("br.cfgChooseLanguage", "Escolha o idioma:");
Database.addText("br.cfgInvertColors", "Inverter cores?");
Database.addText("br.gridItemMainMapName", "Mapa");
Database.addText("br.gridItemMainMapDescription", "Mapa do mundo");
Database.addText("br.gridItemPogoStickName", "Pula-pula");
Database.addText("br.gridItemPogoStickDescription", "Com ele, vocГЄ poderГЎ pular nas missГµes!");
Database.addText("br.gridItemTimeRingName", "Anel do Tempo");
Database.addText("br.gridItemTimeRingDescription", "Esse item concede uma nova habilidade nas missГµes: desacelerar o tempo. Se as coisas estiverem rГЎpidas demais, use o Anel do Tempo!");
Database.addText("br.gridItemThirdHouseKeyName", "Chave da terceira casa");
Database.addText("br.gridItemThirdHouseKeyDescription", "Essa chave abre a terceira casa da aldeia.");
Database.addText("br.gridItemFeatherName", "Pena de ave do deserto");
Database.addText("br.gridItemFeatherDescription", "Essa pena mГЎgica permite que vocГЄ pule mais alto com o pula-pula!");
Database.addText("br.gridItemFeatherDescriptionNoPogoStick", "Por algum motivo desconhecido, vocГЄ acha que essa pena seria muito Гєtil se vocГЄ tivesse um pula-pula...");
Database.addText("br.gridItemSpongeName", "Esponja mГЎgica");
Database.addText("br.gridItemSpongeDescription", "Essa esponja mГЎgica permite que vocГЄ se esprema como uma esponja, reduzindo o seu tamanho.");
Database.addText("br.gridItemFortressKeyName", "Chave da Fortaleza do Deserto");
Database.addText("br.gridItemFortressKeyDescription", "Essa chave garante acesso Г  antiga fortaleza que fica ao norte do deserto. O que serГЎ que tem lГЎ?");
Database.addText("br.gridItemHeartPendantName", "Pingente de coraГ§ГЈo");
Database.addText("br.gridItemHeartPendantDescription", "Esse pingente aumentarГЎ seus pontos de vida enquanto vocГЄ usГЎ-lo no pescoГ§o.");
Database.addText("br.gridItemHeartPlugName", "Berloque de coraГ§ГЈo");
Database.addText("br.gridItemHeartPlugDescription", "Esse berloque feito de ferro, patas de aranha e \"fluido cardiolГіgico\" envasado no centro aumentarГЎ em 20 por cento seus pontos de vida!");
Database.addText("br.gridItemBeginnersGrimoireName", "GrimГіrio do Aprendiz");
Database.addText("br.gridItemBeginnersGrimoireDescription", "Esse grimГіrio contГ©m trГЄs feitiГ§os bem fГЎceis de serem lanГ§ados, ideais para iniciantes. 1- Chuva ГЎcida (uma grande quantidade de gotas ГЎcidas caem em seus inimigos). 2- Bola de fogo (lanГ§a bola de fogo gigante contra seus inimigos). 3- Teleporte (transporta vocГЄ para um local aleatГіrio).");
Database.addText("br.gridItemAdvancedGrimoireName", "GrimГіrio AvanГ§ado");
Database.addText("br.gridItemAdvancedGrimoireDescription", "Esse grimГіrio contГ©m dois feitiГ§os. 1- Dissipar magia (anula todos os feitiГ§os existentes em uma missГЈo, tanto os seus quanto os dos inimigos). 2- Escudo de espinhos (cria um escudo de espinhos ao seu redor, causando dano aos inimigos que encostarem nele).");
Database.addText("br.gridItemBlackMagicGrimoireName", "GrimГіrio de Magia Negra");
Database.addText("br.gridItemBlackMagicGrimoireDescription", "VocГЄ encontrou esse grimГіrio na caverna, em um canto de difГ­cil acesso; e estava lГЎ por um motivo. Ele concede dois feitiГ§os sombrios muito poderosos. O primeiro criarГЎ um muro gigante de obsidianas, ideal para impedir o avanГ§o de inimigos. O segundo evocarГЎ uma horda de demГґnios que atacarГЈo todos na missГЈo, inclusive vocГЄ. Tome cuidado com esse feitiГ§o.");
Database.addText("br.gridItemUnicornHornName", "Chifre de unicГіrnio");
Database.addText("br.gridItemUnicornHornDescription", "Esse chifre mГЎgico pertencia a um unicГіrnio. Os poderes de cura dele serГЈo de grande ajuda. Dizem que o unicГіrnio se chamava Charlie.");
Database.addText("br.gridItemXinopherydonClawName", "Garra de xinoferedonte");
Database.addText("br.gridItemXinopherydonClawDescription", "Essa garra pertenceu a um xinoferedonte, um animal prГ©-histГіrico de duas cabeГ§as que muitos acreditam ter existido. Ela dobrarГЎ o dano da sua arma.");
Database.addText("br.gridItemPitchforkName", "Forcado");
Database.addText("br.gridItemPitchforkDescription", "Esse forcado especial amacia o solo sem revirГЎ-lo, preservando os ecossistemas subterrГўneos. Ele triplica a produГ§ГЈo da sua fazenda de pirulitos.");
Database.addText("br.gridItemShellPowderName", "PГі de conchas");
Database.addText("br.gridItemShellPowderDescription", "Muitos fazendeiros usam pГі de conchas para acelerar o crescimento dos pirulitos. Ele triplica a produГ§ГЈo da sua fazenda de pirulitos.");
Database.addText("br.gridItemPName", "Pedra P");
Database.addText("br.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DВ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSВ°-J (`  /R`yM}  T$`` В°+-|U(\\OL&Y_)T|");
Database.addText("br.gridItemLName", "Pedra L");
Database.addText("br.gridItemLDescription", "ED^S~\\^ W^LKCKo$OE ~$`W I~   $OВ°   ^   Y} V  ^ \\  - }XuX  IFHS Z(V~\\  VPU NV OE    В°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#В° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("br.gridItemAName", "Pedra A");
Database.addText("br.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITВ°#{  Oa$ GM T{Q \"S A-\\ F KmВ°& C #В° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("br.gridItemYName", "Pedra Y");
Database.addText("br.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  В°-  AX Y ` В° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_В°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EВ° I &L- /    K");
Database.addText("br.gridItemRedSharkFinName", "Barbatana vermelha");
Database.addText("br.gridItemRedSharkFinDescription", "Essa barbatana mГЎgica aumenta consideravelmente o dano do feitiГ§o Bola de fogo. Finalmente ele serГЎ Гєtil para alguma coisa.");
Database.addText("br.gridItemGreenSharkFinName", "Barbatana verde");
Database.addText("br.gridItemGreenSharkFinDescription", "Essa barbatana mГЎgica leva o poder da natureza Г  sua fazenda! Multiplica por 5 a produГ§ГЈo de pirulitos.");
Database.addText("br.gridItemPurpleSharkFinName", "Barbatana roxa");
Database.addText("br.gridItemPurpleSharkFinDescription", "Essa barbatana mГЎgica concede um novo feitiГ§o sombrio, que sГі pode ser usado uma vez por missГЈo. Tome muito cuidado!");
Database.addText("br.gridItemTalkingCandyName", "Doce falante");
Database.addText("br.gridItemTalkingCandyDescription", "Esse doce falante apareceu quando vocГЄ colocou as quatro pedras no alto da torre do castelo. Talvez ele saiba como abrir a caixa de doces...");
Database.addText("br.inventorySpecialNothingEqItem", "Nada");
Database.addText("br.eqItemWeaponWoodenSwordName", "Espada de madeira");
Database.addText("br.eqItemWeaponWoodenSwordDescription", "Uma espada simples, feita de madeira");
Database.addText("br.eqItemWeaponIronAxeName", "Machado de ferro");
Database.addText("br.eqItemWeaponIronAxeDescription", "Um machado de ferro bem afiado. Mais eficiente que a espada de madeira.");
Database.addText("br.eqItemWeaponPolishedSilverSwordName", "Espada de prata polida");
Database.addText("br.eqItemWeaponPolishedSilverSwordDescription", "Uma espada poderosa, coberta de espinhos.");
Database.addText("br.eqItemWeaponTrollBludgeonName", "Tacape de troll");
Database.addText("br.eqItemWeaponTrollBludgeonDescription", "VocГЄ tomou esse tacape do troll que protegia a ponte. Ele Г© bem lento, mas esmaga inimigos que Г© uma beleza.");
Database.addText("br.eqItemWeaponTribalSpearName", "LanГ§a tribal");
Database.addText("br.eqItemWeaponTribalSpearDescription", "VocГЄ encontrou essa lanГ§a no corpo de um guerreiro morto, em um buraco no chГЈo. Г‰ um tanto complicado de se manusear, mas Г© tudo uma questГЈo de costume.");
Database.addText("br.eqItemWeaponSummoningTribalSpearName", "LanГ§a tribal da evocaГ§ГЈo");
Database.addText("br.eqItemWeaponSummoningTribalSpearDescription", "Essa lanГ§a mГЎgica, alГ©m de ser ligeiramente mais poderosa que a lanГ§a tribal normal, evocarГЎ frequentemente guerreiros tribais que ajudarГЈo vocГЄ nas missГµes.");
Database.addText("br.eqItemWeaponMonkeyWizardStaffName", "Cajado do macaco mago");
Database.addText("br.eqItemWeaponMonkeyWizardStaffDescription", "Esse cajado pertenceu ao macaco mago que estava pelado na caverna. Ele lanГ§a frequentemente feitiГ§os contra seus inimigos.");
Database.addText("br.eqItemWeaponEnchantedMonkeyWizardStaffName", "Cajado do macaco mago (encantado)");
Database.addText("br.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Esse cajado Г© mais veloz que a versГЈo normal, alГ©m de lanГ§ar muito mais feitiГ§os.");
Database.addText("br.eqItemWeaponGiantSpoonName", "Colher gigante");
Database.addText("br.eqItemWeaponGiantSpoonDescription", "Essa colher gigante estava em uma chaleira gigante na Fortaleza do Deserto. Se algum dia ela foi usada como uma colher, entГЈo essa pessoa devia ser bem grande. Tomara que vocГЄ nГЈo esbarre com ela.");
Database.addText("br.eqItemWeaponGiantSpoonOfDoomName", "Colher gigante da perdiГ§ГЈo");
Database.addText("br.eqItemWeaponGiantSpoonOfDoomDescription", "Essa colher gigante Г© ainda mais poderosa que as colheres normais encontradas em chaleiras gigantes, mas Г© bem lenta.");
Database.addText("br.eqItemWeaponScytheName", "Foice");
Database.addText("br.eqItemWeaponScytheDescription", "Dizem que essa foice pertenceu Г  prГіpria Morte. Ela Г© extremamente rГЎpida.");
Database.addText("br.eqItemHatMerchantHatName", "ChapГ©u do vendedor");
Database.addText("br.eqItemHatMerchantHatDescription", "VocГЄ comprou esse chapГ©u do vendedor de doces. Sabia que ele ama doces? Os doces encontrados em missГµes serГЈo multiplicados por 7!");
Database.addText("br.eqItemHatSorceressHatName", "ChapГ©u da feiticeira");
Database.addText("br.eqItemHatSorceressHatDescription", "VocГЄ comprou esse chapГ©u da feiticeira. Ele aprimora os efeitos dos seus feitiГ§os e das suas poГ§Гµes.");
Database.addText("br.eqItemHatOctopusKingCrownName", "Coroa do Rei Polvo");
Database.addText("br.eqItemHatOctopusKingCrownDescription", "VocГЄ se sente muito mais confiante com essa coroa. Ela nГЈo dГЎ nenhuma vantagem nas missГµes, mas o importante Г© ter confianГ§a!");
Database.addText("br.eqItemHatOctopusKingCrownWithJaspersName", "Coroa de jaspes do Rei Polvo");
Database.addText("br.eqItemHatOctopusKingCrownWithJaspersDescription", "Essa coroa encantada Г© feita de ouro e jaspes vermelhos. Nas missГµes, ela lanГ§arГЎ poderosas bolas de fogo para todos os cantos. Ah, e ela brilha muito!");
Database.addText("br.eqItemHatOctopusKingCrownWithObsidianName", "Coroa de obsidianas do Rei Polvo");
Database.addText("br.eqItemHatOctopusKingCrownWithObsidianDescription", "Essa coroa encantada Г© feita de ouro e obsidianas. Г‰ linda! Nas missГµes, ela evocarГЎ esporadicamente um Rei Polvo para lutar ao seu lado. TentГЎculos nunca sГЈo demais!");
Database.addText("br.eqItemGlovesLeatherGlovesName", "Luvas de couro");
Database.addText("br.eqItemGlovesLeatherGlovesDescription", "Essas luvas nГЈo fazem nada, mas sГЈo macias e confortГЎveis!");
Database.addText("br.eqItemGlovesRedEnchantedGlovesName", "Luvas vermelhas encantadas");
Database.addText("br.eqItemGlovesRedEnchantedGlovesDescription", "Essas luvas emitem um suave brilho vermelho quando estГЎ escuro. Nas missГµes, elas lanГ§am pequenas bolas de fogo contra os inimigos. NГЈo hГЎ como negar que isso Г© bem Гєtil.");
Database.addText("br.eqItemGlovesPinkEnchantedGlovesName", "Luvas rosa encantadas");
Database.addText("br.eqItemGlovesPinkEnchantedGlovesDescription", "Essas luvas deixam uma marca rosa em tudo que tocam. Nas missГµes, elas curarГЈo vocГЄ continuamente.");
Database.addText("br.eqItemBootsRocketBootsName", "Botas-foguete");
Database.addText("br.eqItemBootsRocketBootsDescription", "Essas incrГ­veis botas permitem que vocГЄ pule no ar, ou seja, vocГЄ pode praticamente voar!");
Database.addText("br.eqItemBootsLeatherBootsName", "Botas de couro");
Database.addText("br.eqItemBootsLeatherBootsDescription", "Botas simples de couro. Nada demais.");
Database.addText("br.eqItemBootsBootsOfIntrospectionName", "Botas da introspecГ§ГЈo");
Database.addText("br.eqItemBootsBootsOfIntrospectionDescription", "Tire um tempo para respirar e se acalmar. Com essas botas, vocГЄ nunca andarГЎ enquanto estiver com os pГ©s no chГЈo.");
Database.addText("br.eqItemBodyArmoursLightweightBodyArmourName", "Armadura leve");
Database.addText("br.eqItemBodyArmoursLightweightBodyArmourDescription", "Essa armadura oferece um pouco de proteГ§ГЈo. VocГЄ ficarГЎ mais resistente aos ataques dos inimigos.");
Database.addText("br.eqItemBodyArmoursKnightBodyArmourName", "Armadura de cavaleiro");
Database.addText("br.eqItemBodyArmoursKnightBodyArmourDescription", "Essa pesada armadura oferece mais proteГ§ГЈo. VocГЄ ficarГЎ muito resistente aos ataques dos inimigos.");
Database.addText("br.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Armadura de cavaleiro encantada");
Database.addText("br.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Essa armadura Г© muito especial. VocГЄ ficarГЎ MUITO mais resistente aos ataques inimigos, mas o dano da sua arma cairГЎ pela metade.");
Database.addText("br.mapVillageForgeBuyWoodenSwordButton", "Comprar espada de madeira (150 doces)");
Database.addText("br.mapVillageForgeBuyWoodenSwordSpeech", "Obrigado! Essa espada Г© um tanto fraca, mas Г© melhor do que nada.");
Database.addText("br.mapVillageForgeBuyIronAxeButton", "Comprar machado de ferro (400 doces)");
Database.addText("br.mapVillageForgeBuyIronAxeSpeech", "Espero que goste do machado. Acabei de afiГЎ-lo para vocГЄ.");
Database.addText("br.mapVillageForgeBuyPolishedSilverSwordButton", "Comprar espada de prata polida (2.000 doces)");
Database.addText("br.mapVillageForgeBuyPolishedSilverSwordSpeech", "Como demorei para criar essa espada. Garanto que ela vale cada doce gasto.");
Database.addText("br.mapVillageForgeBuyLightweightBodyArmourButton", "Comprar armadura leve (15.000 doces)");
Database.addText("br.mapVillageForgeBuyLightweightBodyArmourSpeech", "Essa armadura vai proteger vocГЄ dos ataques inimigos.");
Database.addText("br.mapVillageForgeBuyScytheButton", "Comprar foice (5.000.000 doces)");
Database.addText("br.mapVillageForgeBuyScytheSpeech", "Demorei meses para terminar essa foice. Г‰ uma verdadeira obra de arte. Aposto que vocГЄ nunca encontrarГЎ arma mais rГЎpida que essa. Boa sorte!");
Database.addText("br.wishingWellThrowFirstCandyButton", "Jogar um doce no poГ§o");
Database.addText("br.wishingWellCandyIntroductionSpeech", "OlГЎ, viajante! Sou o PoГ§o dos Desejos. Concederei desejos em troca de guloseimas! Jogue doces dentro de mim para que eu cure seus ferimentos.");
Database.addText("br.wishingWellThrewCandiesSpeech", "Seus ferimentos foram curados!");
Database.addText("br.wishingWellNoWoundSpeech", "VocГЄ nГЈo estГЎ ferido!");
Database.addText("br.wishingWellThrowFirstLollipopButton", "Jogar um pirulito no poГ§o");
Database.addText("br.wishingWellLollipopIntroductionSpeech", "OlГЎ, viajante! Sou o PoГ§o dos Desejos. Concederei desejos em troca de guloseimas! Jogue pirulitos dentro de mim para que eu os converta em doces.");
Database.addText("br.wishingWellThrewLollipopsSpeech", "Seus pirulitos sГЈo transformados em doces! Dois pirulitos por um doce.");
Database.addText("br.wishingWellThrowChocolateBarButton", "Jogar uma barra de chocolate no poГ§o");
Database.addText("br.wishingWellChocolateBarIntroductionSpeech", "OlГЎ, viajante! Sou o PoГ§o dos Desejos. Concederei desejos em troca de guloseimas! Eu amo, AMO chocolate. Para cada chocolate que vocГЄ jogar em mim, incluindo esse, eu encantarei um item seu.");
Database.addText("br.wishingWellThrewChocolateBarSpeech", "Qual objeto vocГЄ deseja encantar?");
Database.addText("br.wishingWellThrowPainAuChocolatButton", "Jogar um pГЈo de chocolate no poГ§o");
Database.addText("br.wishingWellPainAuChocolatIntroductionSpeech", "OlГЎ, viajante! Sou o PoГ§o dos Desejos. Concederei desejos em troca de guloseimas! Para cada pГЈo de chocolate que vocГЄ jogar, eu lhe darei um dom especial. Pense bem antes de escolher!");
Database.addText("br.wishingWellThrewPainAuChocolatSpeech", "Obrigado pelo pГЈo de chocolate! Escolha o seu dom.");
Database.addText("br.wishingWellChooseGift", "Escolha seu dom!");
Database.addText("br.wishingWellChooseGiftButton", "Escolher");
Database.addText("br.wishingWellGiftDoneSpeech", "Pronto! VocГЄ ganhou um dom. Ele serГЎ exibido nas estatГ­sticas do inventГЎrio.");
Database.addText("br.wishingWellNoPossibleEnchantment", "Nenhum encantamento disponГ­vel");
Database.addText("br.wishingWellChooseEnchantment", "Escolha o encantamento");
Database.addText("br.wishingWellEnchantButton", "Encantar");
Database.addText("br.wishingWellEnchantmentDoneSpeech", "Prontinho! O item foi encantado.");
Database.addText("br.pierLighthouseButton", "Ir de barco ao farol");
Database.addText("br.pierTheSeaButton", "Pular no mar");
Database.addText("br.lonelyHouseOpenBox", "Abrir a caixa");
Database.addText("br.lonelyHouseShakeBox", "Sacudir a caixa");
Database.addText("br.lonelyHouseBreakLock", "Quebrar a fechadura");
Database.addText("br.lonelyHouseKickBox", "Chutar a caixa");
Database.addText("br.lonelyHouseAskTheBoxToOpenItself", "Pedir Г  caixa para que se abra");
Database.addText("br.lonelyHouseLureTheBoxWithACandy", "Oferecer um doce Г  caixa");
Database.addText("br.lonelyHouseTakeTheBox", "Levar a caixa embora. VocГЄ provavelmente precisarГЎ de uma chave.");
Database.addText("br.lonelyHouseOpenBoxResult", "A caixa estГЎ trancada.");
Database.addText("br.lonelyHouseShakeBoxResult", "Nada acontece.");
Database.addText("br.lonelyHouseBreakLockResult", "A fechadura Г© forte.");
Database.addText("br.lonelyHouseKickBoxResult", "VocГЄ machuca o pГ©, mas nada acontece.");
Database.addText("br.lonelyHouseAskTheBoxToOpenItselfResult", "...Г© uma caixa, vocГЄ sabe disso, nГЈo Г©?");
Database.addText("br.lonelyHouseLureTheBoxWithACandyResult", "A caixa parece nГЈo se importar.");
Database.addText("br.lonelyHouseTakeTheBoxResult", "Deve ter algo de interessante dentro da caixa.");
Database.addText("br.lollipopFarmConstructMill", "Construir um moinho (10.000 pirulitos)");
Database.addText("br.lollipopFarmFeedMill", "Abastecer o moinho");
Database.addText("br.lollipopFarmCurrentCandiesProduction", "ProduГ§ГЈo atual de doces");
Database.addText("br.lollipopFarmDigPond", "Cavar um lago (100.000 pirulitos)");
Database.addText("br.lollipopFarmBuyLolligator", "Comprar um crocolito (1.200 doces)");
Database.addText("br.lollipopFarmLolligatorsConversionText", "ConversГЈo doces -> pirulitos ativada");
Database.addText("br.lighthouseAskButton", "Perguntar");
Database.addText("br.lighthouseQuestionWho", "Quem Г© vocГЄ?");
Database.addText("br.lighthouseQuestionWhoSpeech", "Sou um ciclope muito velho.");
Database.addText("br.lighthouseQuestionWhat", "O que vocГЄ faz aqui?");
Database.addText("br.lighthouseQuestionWhatSpeech", "Passo os dias aqui, esperando algum barco chegar. JГЎ faz tempo desde o Гєltimo barco... Mas preciso ficar aqui, olhando o horizonte... Talvez mais algum chegue.");
Database.addText("br.lighthouseQuestionWhyEatCandies", "Por que eu comeria doces?");
Database.addText("br.lighthouseQuestionWhyEatCandiesSpeech", "Porque eles fazem bem para a saГєde!");
Database.addText("br.lighthouseQuestionCandyBox", "O que Г© uma caixa de doces?");
Database.addText("br.lighthouseQuestionCandyBoxSpeech", "Г‰ uma caixa muito antiga... dizem que ela guarda todos os doces do mundo. Segundo a lenda, quem abrir a caixa terГЎ tantos doces que tudo lhe serГЎ possГ­vel.");
Database.addText("br.lighthouseQuestionDragon", "O dragГЈo me disse para vir aqui em busca de doces.");
Database.addText("br.lighthouseQuestionDragonSpeech", "Ah, bem... Eu nГЈo posso lhe dar doces diretamente, mas posso lhe dar algo essencial para se conseguir MUITOS doces. Mas terei de testГЎ-lo antes disso. O que eu guardo nГЈo pode ser dado a qualquer um. Solucione esse quebra-cabeГ§a e ele serГЎ seu.");
Database.addText("br.lighthouseFoundStone", "ParabГ©ns! VocГЄ passou no teste e encontrou a pedra. Ela Г© muito preciosa, mas somente se vocГЄ tiver outras trГЄs pedras como essa. Boa sorte!");
Database.addText("br.lighthouseFoundStoneAgain", "Bom trabalho, vocГЄ solucionou o quebra-cabeГ§a de novo. Gostou, foi?");
Database.addText("br.saveLocalSaveTitle", "Salvar no navegador");
Database.addText("br.saveLocalSaveWhy", "Escolha salvamento local se quiser continuar jogando no dispositivo e navegador atuais.");
Database.addText("br.saveLocalSaveWarning0", "O navegador nГЈo Г© compatГ­vel com HTML5.");
Database.addText("br.saveLocalSaveWarning1", "Atualize o navegador para usar o recurso de salvamento local.");
Database.addText("br.saveLocalSaveChooseSlot", "Escolha um lugar para salvar:");
Database.addText("br.saveLocalSaveAutosaveEnabled", "Salvamento automГЎtico ativado");
Database.addText("br.saveLocalSaveChooseWhatToDo", "Escolha o que fazer:");
Database.addText("br.saveLocalSaveSaveButton", "Salvar");
Database.addText("br.saveLocalSaveAutosaveButton", "Salvar a cada 10 minutos");
Database.addText("br.saveLocalSaveDisableAutosaveButton", "Desativar salvamento automГЎtico");
Database.addText("br.saveFileSaveTitle", "Salvar em texto");
Database.addText("br.saveFileSaveWhy0", "Escolha salvar em texto se:");
Database.addText("br.saveFileSaveWhy1", "quiser continuar jogando em outro dispositivo ou navegador.");
Database.addText("br.saveFileSaveWhy2", "quiser compartilhar seu jogo salvo com alguГ©m.");
Database.addText("br.saveFileSaveWhy3", "por algum motivo vocГЄ quiser apagar o cache do navegador");
Database.addText("br.saveFileSaveWhy4", "(isso apagarГЎ jogos salvos localmente)");
Database.addText("br.saveFileSaveButton", "Obter jogo atual em texto");
Database.addText("br.saveFileSaveWarning", "Agora copie e cole esse texto em algum lugar (ex.: um arquivo)");
Database.addText("br.saveLocalLoadTitle", "Carregar do navegador");
Database.addText("br.saveLocalLoadYouCan", "Г‰ possГ­vel carregar um jogo salvo localmente usando um dos links:");
Database.addText("br.saveLocalLoadThanksTo", "GraГ§as Г  magia do HTML5, Г© possГ­vel usar esses links atГ© mesmo off-line.");
Database.addText("br.saveFileLoadTitle", "Carregar de texto");
Database.addText("br.saveFileLoadPaste", "Cole o texto do jogo salvo e clique em \"Carregar\".");
Database.addText("br.saveFileLoadButton", "Carregar");
Database.addText("br.mountainsText0", "VocГЄ avistou algo nas montanhas!");
Database.addText("br.mountainsText1", "Parece algo interessante. Talvez seja Гєtil.");
Database.addText("br.mountainsTextButton", "Escalar as montanhas atГ© o troГ§o");
Database.addText("br.mountainsTextAfter", "VocГЄ achou um pula-pula! Ele foi adicionado ao seu inventГЎrio.");
Database.addText("br.secondHouseIntroSpeech", "OlГЎ, sou o vendedor de doces. Eu faГ§o tudo por doces. Como posso ajudГЎ-lo?");
Database.addText("br.secondHouseLollipop1Speech", "Esse pirulito de limГЈo Г© o meu favorito! Ele custa 60 doces, mas vale a pena.");
Database.addText("br.secondHouseLollipop2Speech", "Esse pirulito de morango Г© uma delГ­cia! Eu adoro a cor dele. SГі custa 60 doces!");
Database.addText("br.secondHouseLollipop3Speech", "Aposto que vocГЄ nunca experimentou um pirulito de abГіbora! 60 doces e serГЎ todo seu.");
Database.addText("br.secondHouseLollipopButtonText", "Comprar esse pirulito (60 doces)");
Database.addText("br.secondHouseMerchantHatSpeech", "Eu atГ© poderia vender meu chapГ©u, mas gosto muito dele. A nГЈo ser que seja por... 1 milhГЈo de doces. O que me diz? Uma pechincha, nГЈo Г© mesmo?");
Database.addText("br.secondHouseMerchantHatButtonText", "Comprar o chapГ©u do vendedor (1.000.000 doces)");
Database.addText("br.secondHouseTimeRingSpeech", "Esse Г© o Anel do Tempo. Com ele, vocГЄ poderГЎ desacelerar o tempo quando estiver em apuros.");
Database.addText("br.secondHouseTimeRingButtonText", "Comprar o Anel do Tempo (500 doces)");
Database.addText("br.secondHouseLeatherGlovesSpeech", "Essas luvas sГЈo feitas de couro de camelo; altГ­ssima qualidade. Tenho um monte delas no estoque, por isso sГЈo tГЈo baratas... apenas 300 doces!");
Database.addText("br.secondHouseLeatherBootsButtonText", "Comprar um par de botas de couro (300 doces)");
Database.addText("br.secondHouseLeatherBootsSpeech", "Essas botas sГЈo do mais puro couro de camelo. Seus pГ©s ficarГЈo quentinhos.");
Database.addText("br.secondHouseLeatherGlovesButtonText", "Comprar um par de luvas de couro (300 doces)");
Database.addText("br.secondHouseChocolateBarSpeech", "Isso Г© uma barra de chocolate. NГЈo sei para que serve, mas Г© bem rara... e cara! Por 800 doces, ela Г© sua.");
Database.addText("br.secondHouseChocolateBarButtonText", "Comprar a barra de chocolate (800 doces)");
Database.addText("br.outsideTheHoleButton", "Pular nesse buraco grande no chГЈo");
Database.addText("br.theCaveExitText0", "VocГЄ finalmente chegou Г  saГ­da da caverna.");
Database.addText("br.theCaveExitText1", "VocГЄ vГЄ uma enorme floresta lГЎ fora.");
Database.addText("br.theCaveExitButtonText", "Sair da caverna");
Database.addText("br.theCaveFirstSentenceWentStraight", "VocГЄ seguiu reto.");
Database.addText("br.theCaveFirstSentenceWentLeft", "VocГЄ virou Г  esquerda.");
Database.addText("br.theCaveFirstSentenceWentRight", "VocГЄ virou Г  direita.");
Database.addText("br.theCaveFirstSentenceYouAre", "VocГЄ estГЎ em uma caverna. HГЎ trГЄs caminho Г  sua frente.");
Database.addText("br.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "VocГЄ vГЄ algo estranho no chГЈo Г  sua frente.");
Database.addText("br.theCavePattern_ChocolateBarNowSeeChocolateBar", "VocГЄ vГЄ uma barra de chocolate Г  sua frente.");
Database.addText("br.theCavePattern_TreasureMapSentence", "VocГЄ vГЄ pedrinhas estranhamente dispostas no chГЈo.");
Database.addText("br.theCavePattern_MonkeyWizardSentence", "VocГЄ se depara com um macaco mago pelado.");
Database.addText("br.theCavePattern_MonkeyWizardButton", "DesafiГЎ-lo");
Database.addText("br.theCavePattern_OctopusKingSentence", "VocГЄ se depara com o Rei Polvo. Ele parece ser durГЈo.");
Database.addText("br.theCavePattern_OctopusKingButton", "DesafiГЎ-lo");
Database.addText("br.fortressInsideText0", "VocГЄ estГЎ dentro da Fortaleza do Deserto.");
Database.addText("br.fortressInsideText1", "HГЎ trГЄs portas Г  sua frente.");
Database.addText("br.fortressInsideText2", "Cada uma delas leva a uma sala com um tesouro no fim.");
Database.addText("br.fortressInsideEnterRoom1", "br.rar na primeira sala");
Database.addText("br.fortressInsideEnterRoom2", "br.rar na segunda sala");
Database.addText("br.fortressInsideEnterRoom3", "br.rar na terceira sala");
Database.addText("br.treasureButtonDig", "Cavar");
Database.addText("br.treasureButtonYouFound", "VocГЄ encontrou trГЄs barras de chocolate!");
Database.addText("br.sorceressHutHello", "OlГЎ, sou a feiticeira. Posso lhe ensinar algumas coisinhas sobre magia. TambГ©m posso lhe dar coisas interessantes ou criar feitiГ§os para vocГЄ. Mas tudo tem um preГ§o... pirulitos! Muitos pirulitos!");
Database.addText("br.sorceressHutClickedGrimoire", "Esse Г© um grimГіrio para aprendizes. Com ele, vocГЄ poderГЎ lanГ§ar feitiГ§os simples porГ©m Гєteis nas missГµes. VocГЄ vai precisar! Apenas 5.000 pirulitos.");
Database.addText("br.sorceressHutBuyGrimoireButton", "Comprar esse grimГіrio (5.000 pirulitos)");
Database.addText("br.sorceressHutBuyGrimoireSpeech", "Obrigado pela compra! VocГЄ poderГЎ lanГ§ar trГЄs feitiГ§os com esse grimГіrio. Boa sorte!");
Database.addText("br.sorceressHutClickedGrimoire2", "Esse Г© um grimГіrio avanГ§ado. Com ele, vocГЄ poderГЎ lanГ§ar dois feitiГ§os mais poderosos. Eu mesmo os escrevi; nГЈo foi nada fГЎcil. Acho que 20.000 pirulitos Г© um bom preГ§o.");
Database.addText("br.sorceressHutBuyGrimoire2Button", "Comprar esse grimГіrio (20.000 pirulitos)");
Database.addText("br.sorceressHutBuyGrimoire2Speech", "Obrigado pela compra! VocГЄ poderГЎ lanГ§ar dois feitiГ§os com esse grimГіrio. Use-os com sabedoria!");
Database.addText("br.sorceressHutClickedCauldron", "Esse Г© o meu caldeirГЈo. Г‰ nele onde preparo as poГ§Гµes mГЎgicas. Posso atГ© vendГЄ-lo, mas ele Г© muito valioso... que tal 100.000 pirulitos?");
Database.addText("br.sorceressHutBuyCauldronButton", "Comprar o caldeirГЈo (100.000 pirulitos)");
Database.addText("br.sorceressHutBuyCauldronSpeech", "Muito obrigada! 100.000 pirulitos para mim! Fique com este livro de receitas. Ele serГЎ muito Гєtil.");
Database.addText("br.sorceressHutClickedHat", "Belo chapГ©u, nГЈo acha? Mas nГЈo posso vendГЄ-lo; ele Г© muuuito valioso. Г‰ sГ©rio, nГЈo insista. NГЈo. NГЈo, nГЈo posso fazer isso. Ah, tГЎ... Talvez eu o troque por 1.000.000.000 de pirulitos. VocГЄ nГЈo vai ter como me pagar esse valor mesmo.");
Database.addText("br.sorceressHutBuyHatButton", "Comprar o chapГ©u (1.000.000.000 pirulitos)");
Database.addText("br.sorceressHutBuyHatSpeech", "Um bilhГЈo de pirulitos para mim! NГЈo tenho mais o chapГ©u... mas um bilhГЈo de pirulitos, puxa vida! ... Valeu a pena.");
Database.addText("br.cauldronPreviousPageButton", "PГЎgina anterior");
Database.addText("br.cauldronNextPageButton", "PrГіxima pГЎgina");
Database.addText("br.cauldronWhatYouWantToPut", "O que deseja colocar no caldeirГЈo?");
Database.addText("br.cauldronWhatIsIn", "No caldeirГЈo hГЎ:");
Database.addText("br.cauldronWhatYouCanDo", "O que deseja fazer?");
Database.addText("br.castleBigRoomComment", "Sala grande");
Database.addText("br.castleARoomComment", "Sala");
Database.addText("br.castleADarkRoomComment", "Sala escura");
Database.addText("br.castleCastleEntranceComment", "PortГµes do castelo");
Database.addText("br.castleTowerEntranceComment", "br.rada da torre");
Database.addText("br.castleNougatMonsterComment", "Atacar o monstro de torrone gigante");
Database.addText("br.castleGuardsComment", "Atacar os guardas");
Database.addText("br.castleStairsComment", "Escadaria");
Database.addText("br.buttonBackToTheCastle", "Voltar ao castelo");
Database.addText("br.castleBigRoomHovenSpeechSad", "OlГЎ! Sou um velho forno Г  lenha. Eu costumava assar toneladas de pГЈes, mas nunca mais fui usado. SerГЎ... SerГЎ que vocГЄ pode me ajudar? SГі preciso de algumas das suas guloseimas! VocГЄ nГЈo vai se arrepender! Eu juro.");
Database.addText("br.castleBigRoomHovenNotEnough", "Ah... VocГЄ nГЈo tem guloseimas suficientes. NГЈo posso fazer nada, sou inГєtil. Um forno totalmente imprestГЎvel, Г© isso o que sou.");
Database.addText("br.castleBigRoomHovenSpeechMadePainAuChocolat", "Oba! Muito obrigado! Usei 100 doces e uma barra de chocolate e preparei... um pГЈo de chocolate! Г‰ minha receita predileta. Espero que vocГЄ goste!");
Database.addText("br.castleBigRoomHovenSpeechHappy", "Ei! Se quiser cozinhar mais, Г© sГі falar comigo! SerГЎ um prazer ajudar.");
Database.addText("br.castleBigRoomHovenSpeechHappyNotEnough", "Ah, vocГЄ nГЈo tem guloseimas suficientes. Eu preciso de 100 doces e uma barra de chocolate. Volte quando tiver tudo.");
Database.addText("br.castleBigRoomHovenLetHovenTakeButton", "Deixar que o forno pegue tudo de que precisar.");
Database.addText("br.castleBigRoomHovenThanks", "Obrigado, forno!");
Database.addText("br.dragonStopTickling", "Г”, vocГЄ aГ­! Pare de fazer cГіcegas, por favor.");
Database.addText("br.dragonStopTicklingButton", "HГЈ, erh... Desculpe-me. Achei que eu devia derrotar vocГЄ.");
Database.addText("br.dragonTalking", "Eu sou um dragГЈo e esse Г© meu castelo. VocГЄ deve ser muito corajoso por ter entrado aqui... SerГЎ um prazer ajudar alguГ©m tГЈo destemido. O que vocГЄ mais deseja?");
Database.addText("br.dragonTalkingChallengeButton", "Desafio");
Database.addText("br.dragonTalkingFameButton", "Fama");
Database.addText("br.dragonTalkingCandiesButton", "Doces");
Database.addText("br.dragonTalkingChallengeSpeech", "Ah, entГЈo gosta de desafios? O que me diz de dar um pulinho no inferno? Dizem que SatГЈ Г© um desafio e tanto. Suba nas minhas costas que eu levarei vocГЄ atГ© lГЎ.");
Database.addText("br.dragonTalkingFameSpeech", "O melhor jeito de se tornar famoso Г© desafiar o prГіprio criador do jogo. Eu sei onde ele mora; posso levar vocГЄ atГ© lГЎ. Mas nГЈo serГЎ uma luta fГЎcil.");
Database.addText("br.dragonTalkingCandiesSpeech", "No fim, todos queremos doces, nГЈo Г© mesmo? Tenho um amigo que pode ajudar. Г‰ fГЎcil reconhecГЄ-lo... Ele sГі tem um olho. Diga a ele que vocГЄ me conhece.");
Database.addText("br.dragonTalkingChallengeAnswer", "Vamos entГЈo!");
Database.addText("br.dragonTalkingFameAnswer", "Estou pronto.");
Database.addText("br.dragonTalkingCandiesAnswer", "EstГЎ bem, obrigado!");
Database.addText("br.buttonBackToCastle", "Voltar ao castelo");
Database.addText("br.talkingCandySpeechNoBox", "Ei! Eu sou o doce falante. VocГЄ quase terminou o jogo, sГі falta encontrar a caixa de doces. Ela estГЎ em uma casa perto da aldeia. Г‰ a Гєltima parte!");
Database.addText("br.talkingCandySpeech1", "Oi! Eu sou o doce falante. ParabГ©ns, vocГЄ terminou o jogo! Abrirei a caixa de doces para vocГЄ como recompensa. Posso?");
Database.addText("br.talkingCandySpeech2", "Prontinho! VocГЄ jГЎ pode entrar. Espero que tenha gostado do jogo. :)");
Database.addText("br.talkingCandyButton", "Sim!!");
Database.addText("br.lighthousePuzzleResetButton", "RecomeГ§ar");
Database.addText("п»їnl.mapVillageComment", "Het Dorp");
Database.addText("nl.mapFortressComment", "De woestijnvesting");
Database.addText("nl.mapATreeComment", "Een boom");
Database.addText("nl.mapTheDesertComment", "De woestijn");
Database.addText("nl.mapWishingWellComment", "De wensput");
Database.addText("nl.mapLonelyHouseComment", "Een afgelegen huis");
Database.addText("nl.mapForestComment", "Het bos");
Database.addText("nl.mapCastleEntranceComment", "Kasteelingang");
Database.addText("nl.mapCastleComment", "Het kasteel");
Database.addText("nl.mapDragonComment", "De draak");
Database.addText("nl.candyBoxEatCandiesButton", "Eet alle snoepjes");
Database.addText("nl.candyBoxThrowCandiesButton", "Gooi 10 snoepjes op de grond");
Database.addText("nl.mapVillageAHouseComment", "Een huis");
Database.addText("nl.mapVillageForgeComment", "De smederij");
Database.addText("nl.buttonBackToTheMap", "Terug naar de kaart");
Database.addText("nl.mapSorceressHutComment", "Hut van de tovenaar");
Database.addText("nl.buttonBackToTheVillage", "Terug naar het dorp");
Database.addText("nl.mapATreeIntroductionSpeech", "Hallo, ik ben de eekhoorn. Ik kan je snoepjes en veel meer dingen geven. Ik weet hoeveel jij van snoepjes houdt. Maar ik voel me alleen in dit woud.");
Database.addText("nl.mapATreeIntroductionButton", "Hoe kan ik je helpen ?");
Database.addText("nl.mapATreeFirstQuestion", "Ik ga je een paar vragen stellen. Als je ze goed beantwoord, zijn de zoetste zoetjes van jou! Eerste vraag: Hou je echt van snoepjes? (Beantwoord in Engels)");
Database.addText("nl.mapATreeSecondQuestion", "Dat klopt! Hier zijn 20 snoepjes voor jou. Maak nu deze reeks van letters af en je krijgt een nieuwe prijs: S, E, I, D, N, A, ?");
Database.addText("nl.mapATreeThirdQuestion", "Snoepjes! Hier zijn 100 snoepjes voor jou. Volgende vraag : Hoeveel snoepjes heeft de snoepigste persoon in zijn bezit?");
Database.addText("nl.mapATreeFourthQuestion", "Hier zijn 500 snoepjes voor jou! De volgende prijs zal nog interessanter zijn...  Hier is het raadsel: In een oeroud woud groeit een hele oude boom, Waar de meest intelligente dieren wonen. Er wordt verteld dat hij 60 wortels heeft, 360 takken en 2160 bladeren. Hoeveel markeringen kun je vinden op zijn stam?");
Database.addText("nl.mapATreeFifthQuestion", "Gefeliciteerd! Ik had het over mijn boom, inderdaad. Hier zijn 3 lollies voor jou. Gebruik ze goed! Volgende raadsel, Luister goed : Onder een volle maan gooi ik een gele hoed in de rode zee. Wat gebeurd er met de gele hoed?");
Database.addText("nl.mapATreeTicTacToeIntro", "Goed geantwoord! Dat was niet zo moeilijk. Hier zijn 3 chocoladerepen voor jou! Voor de volgende prijs zullen we de regels een beetje veranderen. Je moet een spel met mij spelen! Ben je er klaar voor?");
Database.addText("nl.mapATreeTicTacToeIntroButton", "Natuurlijk ben ik dat!");
Database.addText("nl.mapATreeTicTacToeLetsPlay", "Het spel is boter kaas en eieren. We spelen het op een 3 bij 3 bord. Jij zult het X teken gebruiken terwijl ik de O gebruik. We plaatsen onze teken(s) omstebeurt en het doel is om 3 tekens op een rij te krijgen. Ik laat jou eerst gaan!");
Database.addText("nl.mapATreeTicTacToeNobodyWins", "Het bord is helemaal opgevuld en we hebben beiden geen 3 op een rij: Niemand wint! Wil je het weer proberen?");
Database.addText("nl.mapATreeTicTacToeYouLose", "Ik heb drie op een rij! Ik win. Wil je het weer proberen?");
Database.addText("nl.mapATreeTicTacToeTryAgainButton", "Ja dat wil ik!");
Database.addText("nl.mapATreeTicTacToeYouWin", "Wow, dat was een onverwachte zet. Maar je hebt drie op een rij, daar kan ik niks over zeggen. Jij wint! Neem deze sleutel! Het opent een van de huizen in het dorp.");
Database.addText("nl.mapATreeTicTacToeAnymoreSweet", "Dankjewel eekhoorn! Zijn er nog meer uitdagingen?");
Database.addText("nl.mapATreeNoMoreChallenge", "Helaas niet, ik heb geen uitdagingen meer voor je... Met jou spelen was heel erg leuk, bedankt daarvoor!");
Database.addText("nl.buttonExitQuestKeeping", "Eindig de zoektocht (En houd wat je gevonden hebt)");
Database.addText("nl.buttonExitQuestNoKeeping", "Eindig de zoektocht (Je houdt niet wat je gevonden hebt)");
Database.addText("nl.buttonExitQuestNoKeepingBecauseLose", "Eindig de zoektocht (Je houdt niet wat je hebt gevonden want je faalde)");
Database.addText("nl.mapVillageLockedHouseComment", "Een gesloten huis");
Database.addText("nl.mapVillageForgeIntroductionSpeech", "Hoi! Ik ben een wapensmid. Ik kan je verschillende wapens en uitrustingen verkopen.");
Database.addText("nl.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hoi! Ik ben een wapensmid. Helaas, Ik heb niks meer om te verkopen. Kom later terug misschien?");
Database.addText("nl.mapVillageFifthHouseNoWeaponSpeech", "Hallo. Mijn kelder zit vol met ratten. Ik moet van ze af zien te komen... Was er maar iemand met een wapen die mij kon helpen...");
Database.addText("nl.mapVillageFifthHouseWeaponSpeech", "He, Jij! Ik zie dat je een wapen draagt! Als jij de ratten in mijn kelder doodt, zal ik je een geschenk geven!");
Database.addText("nl.mapVillageFifthHouseAgree", "We gaan er voor!");
Database.addText("nl.mapVillageFifthHouseCellarDone", "Bedankt voor het opruimen van de ratten! Hier is iets heel kostbaars als geschenk : een kaart van de wereld. Ik denk dat jij het meer zult gebruiken dan ik.");
Database.addText("nl.mapVillageTheShopComment", "De winkel");
Database.addText("nl.mapBridgeComment", "De brug");
Database.addText("nl.mapFarmComment", "De lollieboerderij");
Database.addText("nl.mapCaveEntranceComment", "De ingang van de grot");
Database.addText("nl.mapLighthouseComment", "De vuurtoren");
Database.addText("nl.mapPierComment", "De pier");
Database.addText("nl.mapTheHoleComment", "Het gat");
Database.addText("nl.candyBoxRequestStatusBarUnlocked", "Vraag een nieuwe functie aan bij de ontwikkelaar (30 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedCfg", "Vraag nog eens (5 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedSave", "Vraag nog een keer aan (5 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedHealthBar", "Vraag iets spannends aan (5 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedMap", "Laatste aanvraag! Deze zal de snoepjes wel waard zijn. (10 snoepjes)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedComment", "Je hebt een statusbalk ontgrendeld! (boven)");
Database.addText("nl.candyBoxRequestStatusBarUnlockedCfgComment1", "Je hebt nu toegang tot een configuratietabblad.");
Database.addText("nl.candyBoxRequestStatusBarUnlockedCfgComment2", "Je kan de taal veranderen als je wilt.");
Database.addText("nl.candyBoxRequestStatusBarUnlockedSaveComment", "Een wilde opslaan-tab verschijnt!");
Database.addText("nl.candyBoxRequestStatusBarUnlockedHealthBarComment", "Hier zijn 100 levenspunten voor je. Ze zullen goed van pas komen.");
Database.addText("nl.cfgChooseLanguage", "Kies je taal:");
Database.addText("nl.cfgInvertColors", "Kleuren omkeren?");
Database.addText("nl.gridItemMainMapName", "De kaart");
Database.addText("nl.gridItemMainMapDescription", "Kaart van de wereld");
Database.addText("nl.gridItemPogoStickName", "Pogostick");
Database.addText("nl.gridItemPogoStickDescription", "Hiermee kun je springen in zoektochten!");
Database.addText("nl.gridItemTimeRingName", "Een tijdring");
Database.addText("nl.gridItemTimeRingDescription", "Dit zal je een nieuwe vaardigheid geven in zoektochten: Je kunt de tijd vertragen. Als iets te snel voor je gaat, gebruik je de tijdring!");
Database.addText("nl.gridItemThirdHouseKeyName", "De derde huissleutel");
Database.addText("nl.gridItemThirdHouseKeyDescription", "Met deze sleutel kun je naar het derde huis van het dorp.");
Database.addText("nl.gridItemFeatherName", "Een veer van een woestijnvogel");
Database.addText("nl.gridItemFeatherDescription", "Door deze magische veer kun je hoger springen met je pogostick!");
Database.addText("nl.gridItemFeatherDescriptionNoPogoStick", "Om een of andere reden heb je het gevoel dat deze veer nuttig zou zijn als je een pogostick had...");
Database.addText("nl.gridItemSpongeName", "Een magische spons");
Database.addText("nl.gridItemSpongeDescription", "Door deze magische spons kun je jezelf fijnknijpen als een spons en daardoor dus kleiner worden.");
Database.addText("nl.gridItemFortressKeyName", "De sleutel van de woestijnvesting");
Database.addText("nl.gridItemFortressKeyDescription", "Door deze sleutel kun je naar het eeuwenoude kasteel boven de woestijn. Wie weet wat je daar kunt vinden?");
Database.addText("nl.gridItemHeartPendantName", "Een harten hangertje");
Database.addText("nl.gridItemHeartPendantDescription", "Dit hangertje zal je levenspunten verhogen zolang je het om je nek draagt.");
Database.addText("nl.gridItemHeartPlugName", "Een hartplug");
Database.addText("nl.gridItemHeartPlugDescription", "Deze hartplug, gemaakt met staal, spinnenpoten en een speciaal \"hartdrankje\" opgesloten in het midden, zal je levenspunten verhogen met 20 procent!");
Database.addText("nl.gridItemBeginnersGrimoireName", "De beginnersgrimoire");
Database.addText("nl.gridItemBeginnersGrimoireDescription", "Deze grimoire geeft je drie gemakkelijke spreuken. Het is echt gemaakt voor beginners. Je zult in staat zijn een zure regen-spreuk te gebruiken (Een groote hoeveelheid zuur zal op je vijanden vallen), een vuurbalspreuk (een gigantische bal van vuur zal naar je vijanden vliegen) en een teleporteerspreuk (Die zal je teleporterenn naar een onvoorspelbare locatie).");
Database.addText("nl.gridItemAdvancedGrimoireName", "De geavanceerde grimoire");
Database.addText("nl.gridItemAdvancedGrimoireDescription", "Deze geavanceerde grimoire geeft je twee spreuken: de magie verwijder-spreuk en een stekelschildspreuk. De eerste zal alle eerder uitgevoerde magie van een zoektocht verwijderen, inclusief de magie van jezelf en van je vijanden. De tweede roept een zwevend schild van stekels op rondom je, dat schade zal aanrichten wanneer het in contact met vijanden.");
Database.addText("nl.gridItemBlackMagicGrimoireName", "De zwarte magie grimoire");
Database.addText("nl.gridItemBlackMagicGrimoireDescription", "Je vond deze grimoire in een grot. Het was heel moeilijk te bereiken, en dat was met een reden. Het geeft je twee gevaarlijke zwarte magie spreuken. De eerste zal een gigantische muur van obsidiaan creГ«ren, dat handig kan zijn om je vijanden tegen te houden. De tweede zal een zwerm van demonen oproepen die alles aanvallen in de zoektocht, inclusief jou. Wees voorzichtig met deze spreuk.");
Database.addText("nl.gridItemUnicornHornName", "Een eenhoornhoorn");
Database.addText("nl.gridItemUnicornHornDescription", "Deze magische hoorn behoorde eerst tot een eenhoorn. Zijn sterke helende krachten kunnen je goed helpen. Je hoorde dat deze eenhoorn Charlie heette.");
Database.addText("nl.gridItemXinopherydonClawName", "Een xinopherydonklauw.");
Database.addText("nl.gridItemXinopherydonClawDescription", "Deze klauw behoorde eerst tot een xinopherydon, een tweehoofdig eeuwenoud beest waarvan men dacht dat zij uitgestorven waren. Het zal de kracht van het wapen dat je gebruikt verdubbelen.");
Database.addText("nl.gridItemPitchforkName", "Een hooivork");
Database.addText("nl.gridItemPitchforkDescription", "Met deze speciale hooivork kun je de grond losser maken zonder het om te keren, waardoor je het ondergrondse eco-systeem niet stoort. Het zal de productie van je lollieboerderij verdriedubbelen.");
Database.addText("nl.gridItemShellPowderName", "Schelppoeder");
Database.addText("nl.gridItemShellPowderDescription", "Schelppoeder wordt vaak gebruikt door boeren om de groei van hun lollies te versnellen. Dit poeder zal je productie verdriedubbelen!");
Database.addText("nl.gridItemPName", "De P steen");
Database.addText("nl.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DГ‚В° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSГ‚В°-J (`  /R`yM}  T$`` Г‚В°+-|U(\\OL&Y_)T|");
Database.addText("nl.gridItemLName", "De L steen");
Database.addText("nl.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OГ‚В°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    Г‚В°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#Г‚В° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("nl.gridItemAName", "De A steen");
Database.addText("nl.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITГ‚В°#{  Oa$ GM T{Q \"S A-\\ F KmГ‚В°& C #Г‚В° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("nl.gridItemYName", "De Y steen");
Database.addText("nl.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  Г‚В°-  AX Y ` Г‚В° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_Г‚В°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EГ‚В° I &L- /    K");
Database.addText("nl.gridItemRedSharkFinName", "Een magische rode haaienvin");
Database.addText("nl.gridItemRedSharkFinDescription", "Deze magische vin zal de schade van de vuurbalspreuk versterken. Eindelijk wordt deze vuurbal nuttig.");
Database.addText("nl.gridItemGreenSharkFinName", "Een magische groene haaienvin");
Database.addText("nl.gridItemGreenSharkFinDescription", "Deze magische vin zal de kracht van de natuur aan je lollieboerderij geven! Je productie zal zich vervijfvoudigen.");
Database.addText("nl.gridItemPurpleSharkFinName", "Een magische paarse haaienvin");
Database.addText("nl.gridItemPurpleSharkFinDescription", "Deze magische vin zal je een nieuwe zwarte magie spreuk geven. Je kunt het maar een keer per zoektocht gebruiken. Wees erg voorzichtig met deze!");
Database.addText("nl.gridItemTalkingCandyName", "Een pratend snoepje");
Database.addText("nl.gridItemTalkingCandyDescription", "Dit pratende snoepje verscheen nadat je de vier stenen in de top van de kasteeltoren had gezet. Hij kan je misschien helpen met het openen van de candy box...");
Database.addText("nl.inventorySpecialNothingEqItem", "Niks");
Database.addText("nl.eqItemWeaponWoodenSwordName", "Houten Zwaard");
Database.addText("nl.eqItemWeaponWoodenSwordDescription", "Een simpel zwaard, gemaakt van hout");
Database.addText("nl.eqItemWeaponIronAxeName", "Ijzeren bijl");
Database.addText("nl.eqItemWeaponIronAxeDescription", "Een simpele ijzeren bijl. Goed geslepen. Sterker dan het houten zwaard.");
Database.addText("nl.eqItemWeaponPolishedSilverSwordName", "Gepolijst zilveren zwaard");
Database.addText("nl.eqItemWeaponPolishedSilverSwordDescription", "Een sterk zwaard bedekt met stekels.");
Database.addText("nl.eqItemWeaponTrollBludgeonName", "De trollenknuppel.");
Database.addText("nl.eqItemWeaponTrollBludgeonDescription", "Je nam deze knuppel van de trol die de brug verdedigde. Het is sloom, maar slaat je vijanden behoorlijk efficient.");
Database.addText("nl.eqItemWeaponTribalSpearName", "Een stamspeer");
Database.addText("nl.eqItemWeaponTribalSpearDescription", "Je vond deze stamspeer op het karkas van een stamkrijger, verdwaald in een groot gat in de grond. Het is best lastig om te gebruiken in het begin, maar als je er aan gewend bent is het een goed wapen.");
Database.addText("nl.eqItemWeaponSummoningTribalSpearName", "Een oproepende stamspeer");
Database.addText("nl.eqItemWeaponSummoningTribalSpearDescription", "Deze magische stamspeer, naast het feit dat het sterker is dan de normale stamspeer, zal vaak stamkrijgers oproepen tijdens je zoektochten.");
Database.addText("nl.eqItemWeaponMonkeyWizardStaffName", "De apentovenaar zijn staf");
Database.addText("nl.eqItemWeaponMonkeyWizardStaffDescription", "Deze staf behoorde toe aan de naakte apentovenaar die je vond in de grot. Het zal vaak spreuken vanzelf gebruiken, gericht op je vijand.");
Database.addText("nl.eqItemWeaponEnchantedMonkeyWizardStaffName", "De apentovenaar zijn staf (betoverd)");
Database.addText("nl.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Deze staf is sneller dan de niet-betoverde versie en zal ook veel meer spreuken gebruiken.");
Database.addText("nl.eqItemWeaponGiantSpoonName", "Een gigantische lepel");
Database.addText("nl.eqItemWeaponGiantSpoonDescription", "Deze gigantische lepel vond je in een gigantische theepot in de woestijnvesting. Je weet niet of iemand het ooit heeft gebruikt als een lepel, maar als dat wel zo is dan moet het iemand zijn geweest die heel erg groot was.");
Database.addText("nl.eqItemWeaponGiantSpoonOfDoomName", "De gigantische lepel der verdoeming");
Database.addText("nl.eqItemWeaponGiantSpoonOfDoomDescription", "Deze gigantische lepel is nog sterker dan de normale gigantische lepel die je bijvoorbeeld kon vinden in een theepot, maar hij is best sloom.");
Database.addText("nl.eqItemWeaponScytheName", "Een zeis");
Database.addText("nl.eqItemWeaponScytheDescription", "Er word gezegd dat deze zeis toebehoorde aan de dood zelf. Het is extreem snel.");
Database.addText("nl.eqItemHatMerchantHatName", "De handelaarshoed");
Database.addText("nl.eqItemHatMerchantHatDescription", "Deze hoed was verkocht door de snoepjeshandelaar. De snoepjeshandelaar houdt van snoepjes. Deze hoed zal de snoepjes die je vindt in zoektochten vermenigvuldigen met 7.");
Database.addText("nl.eqItemHatSorceressHatName", "De tovenaarshoed");
Database.addText("nl.eqItemHatSorceressHatDescription", "Deze hoed was verkocht door de tovenaar. Het zal het effect van je spreuken en drankjes versterken.");
Database.addText("nl.eqItemHatOctopusKingCrownName", "De kroon van de octopuskoning");
Database.addText("nl.eqItemHatOctopusKingCrownDescription", "Wanneer je deze kroon draagt, voel je veel zelfverzekerder. Het geeft geen voordelen in zoektochten, maar zelfverzekerheid is belangrijk.");
Database.addText("nl.eqItemHatOctopusKingCrownWithJaspersName", "De kroon van de octopuskoning met jaspis");
Database.addText("nl.eqItemHatOctopusKingCrownWithJaspersDescription", "Deze betoverde kroon is belegd met goud en rode jaspis. In zoektochten schiet het vaak machtige vuurballen om je heen. En het schijnt ook!");
Database.addText("nl.eqItemHatOctopusKingCrownWithObsidianName", "De octopus koning kroon met obsidiaan.");
Database.addText("nl.eqItemHatOctopusKingCrownWithObsidianDescription", "Deze betoverde kroon is gemaakt met goud en obsidiaan. Het is schitterend. In zoektochten zal het af en toe een Octopus Koning oproepen die vecht aan jouw zijde. Wat een vasthoudend hulpje!");
Database.addText("nl.eqItemGlovesLeatherGlovesName", "Leren handschoenen");
Database.addText("nl.eqItemGlovesLeatherGlovesDescription", "Deze handschoenen doen in principe niks. Maar ze zijn tenminste zacht en comfortabel!");
Database.addText("nl.eqItemGlovesRedEnchantedGlovesName", "Rode betoverde handschoenen");
Database.addText("nl.eqItemGlovesRedEnchantedGlovesDescription", "Deze betoverde handschoenen schijnen een zacht rood licht als het donker is. In zoektochten zullen ze willekeurig een kleine vuurbal naar je vijanden schieten, wat behoorlijk nuttig kan zijn.");
Database.addText("nl.eqItemGlovesPinkEnchantedGlovesName", "Roze betoverde handschoenen");
Database.addText("nl.eqItemGlovesPinkEnchantedGlovesDescription", "Deze betoverde handschoenen laten een roze vlek achter op alles wat het aanraakt. In zoektochten zullen ze je de hele tijd genezen.");
Database.addText("nl.eqItemBootsRocketBootsName", "Raketschoenen");
Database.addText("nl.eqItemBootsRocketBootsDescription", "Door deze geweldige raketschoenen kun je springen in het midden van de lucht en dus in principe vliegen!");
Database.addText("nl.eqItemBootsLeatherBootsName", "Leren schoenen");
Database.addText("nl.eqItemBootsLeatherBootsDescription", "Simpele leren schoenen. Er is niets bijzonders aan.");
Database.addText("nl.eqItemBootsBootsOfIntrospectionName", "Schoenen der introspectie");
Database.addText("nl.eqItemBootsBootsOfIntrospectionDescription", "Neem de tijd om te ademen en rustig te worden. Als je deze schoenen draagt, zul je niet bewegen zolang je op de grond staat.");
Database.addText("nl.eqItemBodyArmoursLightweightBodyArmourName", "Een lichtgewicht torsopantser");
Database.addText("nl.eqItemBodyArmoursLightweightBodyArmourDescription", "Dit pantser zal je zwakke beveiliging geven. Je zult iets meer bestand zijn tegen de aanvallen van je vijand.");
Database.addText("nl.eqItemBodyArmoursKnightBodyArmourName", "Het pantser van een krijger.");
Database.addText("nl.eqItemBodyArmoursKnightBodyArmourDescription", "Dit sterke pantser zal je beschermen. Je zult meer bestand zijn tegen de aanvallen van je vijand.");
Database.addText("nl.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Het betoverde pantser van een krijger");
Database.addText("nl.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Dit pantser is erg speciaal. Je zult VEEL meer bestand zijn tegen de aanvallen van je vijand, maar de kracht van het wapen dat je gebruikt zal door tweeГ«n gedeeld zijn.");
Database.addText("nl.mapVillageForgeBuyWoodenSwordButton", "Koop een houten zwaard (150 snoepjes)");
Database.addText("nl.mapVillageForgeBuyWoodenSwordSpeech", "Dankje voor het kopen! Dit houten zwaard is best zwak, maar een goed begin.");
Database.addText("nl.mapVillageForgeBuyIronAxeButton", "Koop een ijzeren bijl (400 snoepjes)");
Database.addText("nl.mapVillageForgeBuyIronAxeSpeech", "Ik hoop dat je blij bent met deze ijzeren bijl. Ik heb het net geslepen voor jou!");
Database.addText("nl.mapVillageForgeBuyPolishedSilverSwordButton", "Een opgepoetst zilveren zwaard (2 snoepjes)");
Database.addText("nl.mapVillageForgeBuyPolishedSilverSwordSpeech", "Het kostte me veel tijd om dit zwaard te maken. Ik kan je garanderen dat het de prijs waard is.");
Database.addText("nl.mapVillageForgeBuyLightweightBodyArmourButton", "Koop een lichtgewicht pantser (15 000 snoepjes)");
Database.addText("nl.mapVillageForgeBuyLightweightBodyArmourSpeech", "Dit pantser zal je bescherming bieden tegen je vijanden.");
Database.addText("nl.mapVillageForgeBuyScytheButton", "Koop een zeis(5 000 000 snoepjes)");
Database.addText("nl.mapVillageForgeBuyScytheSpeech", "Het kostte me een paar maanden om deze zeis te maken. Het is een echt kunststuk. Het is waarschijnlijk het snelste wapen dat je ooit kunt gebruiken. Veel succes!");
Database.addText("nl.wishingWellThrowFirstCandyButton", "Gooi een snoepje in de put");
Database.addText("nl.wishingWellCandyIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Wanneer je snoepjes in mij gooit, zal ik je wonden genezen.");
Database.addText("nl.wishingWellThrewCandiesSpeech", "Je wonden zijn nu genezen!");
Database.addText("nl.wishingWellNoWoundSpeech", "Je hebt geen wonden om te genezen!");
Database.addText("nl.wishingWellThrowFirstLollipopButton", "Gooi een lollie in de put");
Database.addText("nl.wishingWellLollipopIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Wanneer je lollies in mij gooit, zal ik ze veranderen in snoepjes.");
Database.addText("nl.wishingWellThrewLollipopsSpeech", "Je lollies zijn nu veranderd in in snoepjes! Twee lollies voor een snoepje.");
Database.addText("nl.wishingWellThrowChocolateBarButton", "Gooi een chocoladereep in de put");
Database.addText("nl.wishingWellChocolateBarIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Ik ben gek op chocoladerepen. Ik ben er echt gek op. Voor elke chocoladereep die je in mij gooit, inclusief deze, krijg je een magische betovering.");
Database.addText("nl.wishingWellThrewChocolateBarSpeech", "Welk object wil je betoveren?");
Database.addText("nl.wishingWellThrowPainAuChocolatButton", "Gooi een pain au chocolat in de put");
Database.addText("nl.wishingWellPainAuChocolatIntroductionSpeech", "Hallo, dwaler! Ik ben de wensput. Ik zal je wens uit laten komen in ruil voor snoep! Wanneer je een pain au chocolat in mij gooit krijg je een heel speciaal geschenk. Kies verstandig.");
Database.addText("nl.wishingWellThrewPainAuChocolatSpeech", "Bedankt voor de pain au chocolat! Je kunt nu je geschenk kiezen.");
Database.addText("nl.wishingWellChooseGift", "Kies je geschenk!");
Database.addText("nl.wishingWellChooseGiftButton", "Kies");
Database.addText("nl.wishingWellGiftDoneSpeech", "Klaar! Je hebt nu een nieuw geschenk. Het zal verschijnen in je inventaris statuspaneel.");
Database.addText("nl.wishingWellNoPossibleEnchantment", "Geen mogelijke betoveringen");
Database.addText("nl.wishingWellChooseEnchantment", "Kies de betovering");
Database.addText("nl.wishingWellEnchantButton", "Betover");
Database.addText("nl.wishingWellEnchantmentDoneSpeech", "Daar is het! Je object is betoverd");
Database.addText("nl.pierLighthouseButton", "Ga naar de vuurtoren met de boot");
Database.addText("nl.pierTheSeaButton", "Spring in de zee");
Database.addText("nl.lonelyHouseOpenBox", "Open de doos");
Database.addText("nl.lonelyHouseShakeBox", "Schud de doos");
Database.addText("nl.lonelyHouseBreakLock", "Breek het slot");
Database.addText("nl.lonelyHouseKickBox", "Schop de doos");
Database.addText("nl.lonelyHouseAskTheBoxToOpenItself", "Vraag de doos om zichzelf te openen");
Database.addText("nl.lonelyHouseLureTheBoxWithACandy", "Lok de doos met snoep");
Database.addText("nl.lonelyHouseTakeTheBox", "Neem de doos mee, Je hebt waarschijnlijk toch een sleutel nodig om hem te openen");
Database.addText("nl.lonelyHouseOpenBoxResult", "De doos is op slot");
Database.addText("nl.lonelyHouseShakeBoxResult", "Er gebeurt niks");
Database.addText("nl.lonelyHouseBreakLockResult", "Het slot weigert");
Database.addText("nl.lonelyHouseKickBoxResult", "Je voet doet een beetje zeer, maar er gebeurt niks");
Database.addText("nl.lonelyHouseAskTheBoxToOpenItselfResult", "...je praat tegen een doos, weet je dat?");
Database.addText("nl.lonelyHouseLureTheBoxWithACandyResult", "Het lijkt alsof het de doos niks uitmaakt");
Database.addText("nl.lonelyHouseTakeTheBoxResult", "Er zit waarschijnlijk iets interessants in deze candy box");
Database.addText("nl.lollipopFarmConstructMill", "Bouw een molen(10 000 lollies)");
Database.addText("nl.lollipopFarmFeedMill", "Voed de molen");
Database.addText("nl.lollipopFarmCurrentCandiesProduction", "Huidige snoepjesproductie");
Database.addText("nl.lollipopFarmDigPond", "Graaf een vijver (100 000 lollies)");
Database.addText("nl.lollipopFarmBuyLolligator", "Koop een lolliegator (1200 snoepjes)");
Database.addText("nl.lollipopFarmLolligatorsConversionText", "Snoepjes omkeer -> lollies geactiveerd");
Database.addText("nl.lighthouseAskButton", "Vraag");
Database.addText("nl.lighthouseQuestionWho", "Wie ben jij?");
Database.addText("nl.lighthouseQuestionWhoSpeech", "Ik ben een hele oude cycloop.");
Database.addText("nl.lighthouseQuestionWhat", "Wat doe je hier?");
Database.addText("nl.lighthouseQuestionWhatSpeech", "Ik woon hier de hele dag door, wachtend op een boot. Het is heel lang geleden sinds ik een boot heb gezien, maar ik moet hier blijven, starend naar de zee, omdat er mischien een boot komt.");
Database.addText("nl.lighthouseQuestionWhyEatCandies", "Waarom zou ik snoepjes eten?");
Database.addText("nl.lighthouseQuestionWhyEatCandiesSpeech", "Omdat ze goed voor je gezondheid zijn!");
Database.addText("nl.lighthouseQuestionCandyBox", "Wat is candy box?");
Database.addText("nl.lighthouseQuestionCandyBoxSpeech", "Het is een hele oude doos waarover word gezegd dat het alle snoepjes in de wereld bevat. De legende zegt dat wie het voor elkaar krijgt om het open te maken zoveel snoepjes zou hebben dat alles mogelijk is.");
Database.addText("nl.lighthouseQuestionDragon", "De draak zei dat ik hier moest komen omdat ik snoepjes wil.");
Database.addText("nl.lighthouseQuestionDragonSpeech", "Oh, Op die manier... Nou, ik kan je niet direct snoepjes geven, maar ik kan je iets essensieels geven om in het eind HEEL veel snoepjes  te kunnen krijgen. Maar eerst moet ik je testen, want wat ik heb kan niet gegeven worden aan iedereen. Los deze puzzel op en het zal van jou zijn.");
Database.addText("nl.lighthouseFoundStone", "Gefeliciteerd! Je hebt de test gehaald en vond de steen. Het is heel erg zeldzaam, maar alleen nuttig als je nog drie stenen zoals deze bezit. Veel succes!");
Database.addText("nl.lighthouseFoundStoneAgain", "Goed gedaan, je hebt de puzzel weer opgelost. Je lijkt het leuk te vinden.");
Database.addText("nl.saveLocalSaveTitle", "Browser opslaan");
Database.addText("nl.saveLocalSaveWhy", "Kies lokaal opslaan als je wilt blijven spelen op je huidige toestel en browser.");
Database.addText("nl.saveLocalSaveWarning0", "Je browser blijkt geen HTML5 te steunen.");
Database.addText("nl.saveLocalSaveWarning1", "Je moet je browser updaten om lokale opslag te kunnen gebruiken.");
Database.addText("nl.saveLocalSaveChooseSlot", "Kies een opslag slot :");
Database.addText("nl.saveLocalSaveAutosaveEnabled", "Automatisch opslaan geactiveerd");
Database.addText("nl.saveLocalSaveChooseWhatToDo", "Kies wat te doen:");
Database.addText("nl.saveLocalSaveSaveButton", "Opslaan");
Database.addText("nl.saveLocalSaveAutosaveButton", "Sla elke 10 minuten op");
Database.addText("nl.saveLocalSaveDisableAutosaveButton", "Deactiveer automatisch opslaan");
Database.addText("nl.saveFileSaveTitle", "Tekst opslaan");
Database.addText("nl.saveFileSaveWhy0", "Kies tekst opslaan als :");
Database.addText("nl.saveFileSaveWhy1", "Je wilt blijven spelen op een ander apparaat of browser");
Database.addText("nl.saveFileSaveWhy2", "Je je progressie wilt delen met iemand anders");
Database.addText("nl.saveFileSaveWhy3", "Voor een of andere reden je je browser cache wilt legen");
Database.addText("nl.saveFileSaveWhy4", "(dit zal je lokale opslag verwijderen)");
Database.addText("nl.saveFileSaveButton", "Krijg het huidige spel als tekst");
Database.addText("nl.saveFileSaveWarning", "Plak de tekst nu ergens!(in een bestand, bijvoorbeeld)");
Database.addText("nl.saveLocalLoadTitle", "Browser laden");
Database.addText("nl.saveLocalLoadYouCan", "Je kunt een lokale opslag laden met de volgende links:");
Database.addText("nl.saveLocalLoadThanksTo", "Dankzij HTML5 magie, kun je deze link zelfs gebruiken als je offline bent");
Database.addText("nl.saveFileLoadTitle", "Tekst laden");
Database.addText("nl.saveFileLoadPaste", "Plak je opslagtekst hier onder en klik dan op het \"Laad\" knopje");
Database.addText("nl.saveFileLoadButton", "Laad");
Database.addText("nl.mountainsText0", "Je zag iets in de bergen!");
Database.addText("nl.mountainsText1", "He ziet er interessant uit. Misschien is het nuttig.");
Database.addText("nl.mountainsTextButton", "Beklim de bergen om het ding te krijgen");
Database.addText("nl.mountainsTextAfter", "Je vond een pogostick! Het is toegevoegd aan je inventaris.");
Database.addText("nl.secondHouseIntroSpeech", "Hallo, ik ben de snoepjes handelaar. Ik doe alles voor snoepjes. Wat heb je nodig?");
Database.addText("nl.secondHouseLollipop1Speech", "Dit is een citroenaroma-lollie. Mijn favoriet! Het kost 60 snoepjes, maar het is het waard.");
Database.addText("nl.secondHouseLollipop2Speech", "Dit is een aardbeienaroma-lollie. Het smaakt goed. Ik hou van zijn rode kleur. Maar 60 snoepjes!");
Database.addText("nl.secondHouseLollipop3Speech", "Dit is een pompoenaroma-lollie. Ik wed dat je die nog nooit had geprobeerd! 60 snoepjes en het is van jou.");
Database.addText("nl.secondHouseLollipopButtonText", "Koop deze lollie (60 snoepjes)");
Database.addText("nl.secondHouseMerchantHatSpeech", "Ik kan je mijn hoed verkopen, maar het is heel erg zeldzaam, weet je... Je moet mij er heel veel snoepjes voor in de plaats geven. Laten we zeggen 1 miljoen snoepjes. Lijkt mij eerlijk, toch?");
Database.addText("nl.secondHouseMerchantHatButtonText", "Koop de hoed van de handelaar (1 000 000 snoepjes)");
Database.addText("nl.secondHouseTimeRingSpeech", "Dit is een tijdring. Het is best magisch. Het laat je de tijd vertragen voor wanneer je in de problemen zit.");
Database.addText("nl.secondHouseTimeRingButtonText", "Koop de tijdring (500 snoepjes)");
Database.addText("nl.secondHouseLeatherGlovesSpeech", "Deze leren handschoenen zijn gemaakt met kameelleer van hoge kwaliteit. Ik heb er veel van op voorraad, daarom zijn ze zo goedkoop : maar 300 snoepjes!");
Database.addText("nl.secondHouseLeatherBootsButtonText", "Koop een paar leren laarzen (300 snoepjes)");
Database.addText("nl.secondHouseLeatherBootsSpeech", "Deze hoge kwaliteit leren laarzen, zijn gemaakt met kameel leer, zal je voeten warm houden.");
Database.addText("nl.secondHouseLeatherGlovesButtonText", "Koop een paar handschoenen (300 schoenen)");
Database.addText("nl.secondHouseChocolateBarSpeech", "Dit is een chocladereep. Ik weet niet waar het voor wordt gebruikt, maar het blijkt behoorlijk zeldzaam te zijn, wat de prijs verklaart. 800 snoepjes en het is van jou!");
Database.addText("nl.secondHouseChocolateBarButtonText", "Koop de chocoladereep (800 snoepjes)");
Database.addText("nl.outsideTheHoleButton", "Spring in het grote gat in de grond");
Database.addText("nl.theCaveExitText0", "Je bereikte eindelijk het einde van de grot");
Database.addText("nl.theCaveExitText1", "Je kunt een groot bos zien vanuit hier.");
Database.addText("nl.theCaveExitButtonText", "Ga uit de grot");
Database.addText("nl.theCaveFirstSentenceWentStraight", "Je ging rechtdoor.");
Database.addText("nl.theCaveFirstSentenceWentLeft", "Je nam het pad links van je.");
Database.addText("nl.theCaveFirstSentenceWentRight", "Je nam het pad rechts van je.");
Database.addText("nl.theCaveFirstSentenceYouAre", "Je bent in een grot. Er zijn drie paden voor je.");
Database.addText("nl.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Voor je zie je een vreemd ding op de grond.");
Database.addText("nl.theCavePattern_ChocolateBarNowSeeChocolateBar", "Je ziet een chocoladereep voor je.");
Database.addText("nl.theCavePattern_TreasureMapSentence", "Je ziet kleine stenen in een vreemde manier geordend.");
Database.addText("nl.theCavePattern_MonkeyWizardSentence", "Je stuit op een naakte apentovenaar.");
Database.addText("nl.theCavePattern_MonkeyWizardButton", "Daag het uit");
Database.addText("nl.theCavePattern_OctopusKingSentence", "Je stuit op de octopuskoning. Het ziet er smerig uit.");
Database.addText("nl.theCavePattern_OctopusKingButton", "Daag het uit");
Database.addText("nl.fortressInsideText0", "Je bent in de woestijnvesting.");
Database.addText("nl.fortressInsideText1", "Je kunt kiezen tussen drie deuren.");
Database.addText("nl.fortressInsideText2", "Elk van hun leidt naar een grote kamer met een schat.");
Database.addText("nl.fortressInsideEnterRoom1", "Ga in de eerste kamer");
Database.addText("nl.fortressInsideEnterRoom2", "Ga in de tweede kamer");
Database.addText("nl.fortressInsideEnterRoom3", "Ga in de derde kamer");
Database.addText("nl.treasureButtonDig", "Graaf");
Database.addText("nl.treasureButtonYouFound", "Je vond drie chocolade repen!");
Database.addText("nl.sorceressHutHello", "Hallo, ik ben de tovenaar. Ik kan je het een en ander leren over magie. Ik kan je ook interessante dingen geven, of spreuken gebruiken. Maar alles heeft een prijs! En deze prijs zullen lollies zijn. Heel veel.");
Database.addText("nl.sorceressHutClickedGrimoire", "Dit is een grimoire voor beginners. Door dit mee te nemen in je zoektochten kun je simpele maar handige spreuken gebruiken. Je hebt dit nodig! Maar 5 000 lollies.");
Database.addText("nl.sorceressHutBuyGrimoireButton", "Koop deze grimoire (5 000 lollies)");
Database.addText("nl.sorceressHutBuyGrimoireSpeech", "Bedankt voor het kopen! Je kunt nu drie spreuken gebruiken met deze grimoire. Veel succes!");
Database.addText("nl.sorceressHutClickedGrimoire2", "Dit is een geavanceerde grimoire. Door dit mee te nemen in je zoektochten, kun je twee geavanceerde spreuken gebruiken. Ik schreef ze zelf, en dat was niet makkelijk. 20 000 lollies is een eerlijke prijs.");
Database.addText("nl.sorceressHutBuyGrimoire2Button", "Koop deze grimoire (20 000 lollies)");
Database.addText("nl.sorceressHutBuyGrimoire2Speech", "Bedankt voor het kopen! Je kunt nu twee spreuken gebruiken met deze grimoire. Gebruik ze verstandig!");
Database.addText("nl.sorceressHutClickedCauldron", "Dit is mijn ketel. Hiermee kan ik magische drankjes brouwen. Ik kan het aan je verkopen, maar het is heel erg kostbaar... het zal je 100 000 lollies kosten.");
Database.addText("nl.sorceressHutBuyCauldronButton", "Koop de ketel (100 000 lollies)");
Database.addText("nl.sorceressHutBuyCauldronSpeech", "Heel erg bedankt! 100 000 lollies voor mij! Ik gaf je ook een brouwhandleiding. Die zal erg handig zijn.");
Database.addText("nl.sorceressHutClickedHat", "Ik heb een mooie hoed, inderdaad! Maar ik kan hem helaas niet aan je verkopen. Het is veeeel te kostbaar. Echt, Ik kan het niet. Niet aandringen. Nee. Nee nee nee ik moet het niet doen. Nou ja, ik verkoop het, maar voor 1 000 000 000 lollies. Je kunt dat waarschijnlijk toch niet betalen.");
Database.addText("nl.sorceressHutBuyHatButton", "Koop de hoed (1 000 000 000 lollies)");
Database.addText("nl.sorceressHutBuyHatSpeech", "Een miljard lollies voor miiiiiiij! Maar ik heb geen hoed meer.. maar een miljard lollies, wow! .. het was het waard.");
Database.addText("nl.cauldronPreviousPageButton", "Vorige pagina");
Database.addText("nl.cauldronNextPageButton", "Volgende pagina");
Database.addText("nl.cauldronWhatYouWantToPut", "Wat je in de ketel wil doen");
Database.addText("nl.cauldronWhatIsIn", "Wat zit er in de ketel");
Database.addText("nl.cauldronWhatYouCanDo", "Wat je er mee kunt doen");
Database.addText("nl.castleBigRoomComment", "Een grote kamer");
Database.addText("nl.castleARoomComment", "Een kamer");
Database.addText("nl.castleADarkRoomComment", "Een donkere kamer");
Database.addText("nl.castleCastleEntranceComment", "De ingang van het kasteel");
Database.addText("nl.castleTowerEntranceComment", "De ingang van de toren");
Database.addText("nl.castleNougatMonsterComment", "Val de gigantische noga aan");
Database.addText("nl.castleGuardsComment", "Val de bewakers aan");
Database.addText("nl.castleStairsComment", "Trap");
Database.addText("nl.buttonBackToTheCastle", "Terug naar het kasteel");
Database.addText("nl.castleBigRoomHovenSpeechSad", "Hallo, Ik been een hele oude broodoven. Ik bakte vroeger heel veel lekker banket, maar niemand gebruikt mij meer. Misschien... misschien kun jij me helpen? Laat me een paar snoepjes van je gebruiken! Maak je geen zorgen, je zult er geen spijt van krijgen! Je kunt me vertrouwen.");
Database.addText("nl.castleBigRoomHovenNotEnough", "Oh... je hebt niet genoeg snoepjes, ik kan niks doen. Ik ben gewoon nutteloos. Ik ben de nuttelozebrood oven, dat is hoe je mij zou moeten noemen.");
Database.addText("nl.castleBigRoomHovenSpeechMadePainAuChocolat", "Jeej! Heel erg bedankt! Ik gebruikte 100 snoepjes en een chocoladereep en maakte voor jou... een pain au chocolat! Het is mijn favoriete banket, ik hoop dat jij het ook lekker vind.");
Database.addText("nl.castleBigRoomHovenSpeechHappy", "Hey! Als je wil dat ik nog een banket bak, laat het me weten! Ik zou je graag helpen.");
Database.addText("nl.castleBigRoomHovenSpeechHappyNotEnough", "Oh, je hebt niet genoeg snoepjes, helaas. Ik heb 100 snoepjes en een chocoladereep nodig. Kom terug als je dat hebt!");
Database.addText("nl.castleBigRoomHovenLetHovenTakeButton", "Laat de oven alle snoepjes pakken dat het wil pakken");
Database.addText("nl.castleBigRoomHovenThanks", "Bedankt, oven!");
Database.addText("nl.dragonStopTickling", "He, jij, stop met kietelen, alsjeblieft");
Database.addText("nl.dragonStopTicklingButton", "Uh, oh, sorry, ik dacht dat ik je moest aanvallen");
Database.addText("nl.dragonTalking", "Ik ben de draak en dit is mijn kasteel. Ik zie dat het je gelukt is om binnen te komen, je zal vast moedig zijn... Ik zou graag iemand helpen zoals jij. Waar zoek je naar?");
Database.addText("nl.dragonTalkingChallengeButton", "Uitdaging");
Database.addText("nl.dragonTalkingFameButton", "Roem");
Database.addText("nl.dragonTalkingCandiesButton", "Snoepjes");
Database.addText("nl.dragonTalkingChallengeSpeech", "Oh, je wilt dus een uitdaging? Ik denk dat je een reis moet maken naar de hel, het is bekend dat de duivel een sterke tegenstander is. Spring op mijn rug en ik breng je er heen!");
Database.addText("nl.dragonTalkingFameSpeech", "De beste manier om beroemd te worden is door de confrontatie aan te gaan met de ontwikkelaar zelf. Ik weet waar hij woont en ik kan je daar brengen. Maar wees voorbereid, dit zal niet makkelijk zijn.");
Database.addText("nl.dragonTalkingCandiesSpeech", "Hetgene wat wij uiteindelijk allemaal willen zijn snoepjes, of niet? Ik denk dat een vriend van mij je daarmee kan helpen. Je kunt hem makkelijk herkennen, hij heeft maar een oog. Vertel hem maar dat je mij kent.");
Database.addText("nl.dragonTalkingChallengeAnswer", "Laten we gaan!");
Database.addText("nl.dragonTalkingFameAnswer", "Ik ben er klaar voor.");
Database.addText("nl.dragonTalkingCandiesAnswer", "Okay, bedankt!");
Database.addText("nl.buttonBackToCastle", "Terug naar het kasteel");
Database.addText("nl.talkingCandySpeechNoBox", "Hey! Ik ben het pratende snoepje. Je hebt het spel bijna gewonnen. Je moet alleen nog de candy box vinden. Het is in een huis buiten het dorp. Dit is de laatste stap!");
Database.addText("nl.talkingCandySpeech1", "He!, Ik ben het pratende snoepje. Je hebt het spel gewonnen! Ik zal je candy box openmaken, dit is je prijs. Zal ik doorgaan?");
Database.addText("nl.talkingCandySpeech2", "Klaar! Je kunt er nu in. Ik hoop dat je het spel leuk vond :)");
Database.addText("nl.talkingCandyButton", "Ja!!");
Database.addText("nl.lighthousePuzzleResetButton", "Reset");
Database.addText("hu.mapVillageComment", "A falu");
Database.addText("hu.mapFortressComment", "A sivatagi erЕ‘d");
Database.addText("hu.mapATreeComment", "Egy fa");
Database.addText("hu.mapTheDesertComment", "A sivatag");
Database.addText("hu.mapWishingWellComment", "Egy kГ­vГЎnsГЎgkГєt");
Database.addText("hu.mapLonelyHouseComment", "Egy magГЎnyos hГЎz");
Database.addText("hu.mapForestComment", "Az erdЕ‘");
Database.addText("hu.mapCastleEntranceComment", "A kastГ©ly bejГЎrata");
Database.addText("hu.mapCastleComment", "A kastГ©ly");
Database.addText("hu.mapDragonComment", "Egy sГЎrkГЎny");
Database.addText("hu.candyBoxEatCandiesButton", "Minden cukrot megesz");
Database.addText("hu.candyBoxThrowCandiesButton", "10 cukrot a fГ¶ldre dob");
Database.addText("hu.mapVillageAHouseComment", "Egy hГЎz");
Database.addText("hu.mapVillageForgeComment", "A kohГі");
Database.addText("hu.buttonBackToTheMap", "Vissza a tГ©rkГ©pre");
Database.addText("hu.mapSorceressHutComment", "Egy banya kunyhГіja");
Database.addText("hu.buttonBackToTheVillage", "Vissza a faluba");
Database.addText("hu.mapATreeIntroductionSpeech", "Гњdv, Г©n vagyok a mГіkus. Tudok neked cukorkГЎt Г©s rengeteg egyebet adni. Tudom, hogy mennyire szereted a cukorkГЎt. De Г©n olyan magГЎnyos vagyok ebben az erdЕ‘ben.");
Database.addText("hu.mapATreeIntroductionButton", "Hogyan segГ­thetek neked?");
Database.addText("hu.mapATreeFirstQuestion", "KГ©rdГ©seket fogok feltenni neked. Ha helyesen vГЎlaszolsz, megkapod a legГ©desebb Г©dessГ©geket! Az elsЕ‘ : tГ©nyleg szereted a cukorkГЎkat? (angolul vГЎlaszolj)");
Database.addText("hu.mapATreeSecondQuestion", "Pontosan! TessГ©k, itt van 20 cukorka. EgГ©szГ­tsd ki ezt a betЕ±sorozatot Г©s egy Гєjabb jutalmat kapsz: A, K, R, O, K, U, ?");
Database.addText("hu.mapATreeThirdQuestion", "Cukorka! MГЎr kapsz is tЕ‘lem 100 darabot. KГ¶vetkezЕ‘ kГ©rdГ©s : hГЎny cukorkГЎja van a vilГЎg legcukrosabb emberГ©nek?");
Database.addText("hu.mapATreeFourthQuestion", "TessГ©k, 500 cukorka neked! A kГ¶vetkezЕ‘ jutalom mГ©g Г©rdekesebb lesz... Itt egy rejtvГ©ny : Egy Е‘si erdЕ‘ben nЕ‘ egy nagyon Г¶reg fa, amin a vilГЎg leginteligensebb ГЎllatai Г©lnek. ГЃllГ­tГіlag ennek a fГЎnak 60 gyГ¶kere, 360 ГЎga Г©s 2160 levele van. HГЎny jelГ¶lГ©s van a fa tГ¶rzsГ©n?");
Database.addText("hu.mapATreeFifthQuestion", "GratulГЎlok! ValГіban a sajГЎt fГЎmrГіl beszГ©ltem. Itt van neked 3 nyalГіka. Okosan hasznГЎld fel Е‘ket! Itt a kГ¶vetkezЕ‘ rejtvГ©ny : Ha teliholdkor beledobom a sГЎrga sapkГЎmat a vГ¶rГ¶s tengerbe, mi tГ¶rtГ©nik a sГЎrga sapkГЎmmal? (angolul vГЎlaszolj)");
Database.addText("hu.mapATreeTicTacToeIntro", "Helyes a vГЎlasz! Nem is volt annyira nehГ©z. Adok neked hГЎrom csokolГЎdГ© rudat! A kГ¶vetkezЕ‘ jutalomhoz kissГ© megvГЎltoztatjuk a szabГЎlyokat. JГЎtszanod kell velem! KГ©szen ГЎllsz?");
Database.addText("hu.mapATreeTicTacToeIntroButton", "NanГЎ!");
Database.addText("hu.mapATreeTicTacToeLetsPlay", "AmЕ‘bГЎzni fogunk, hГЎromszor hГЎrmas tГЎblГЎn. Te leszel az X, Г©s Г©n leszek a O. FelvГЎltva fogunk jГЎtszani, Г©s a cГ©l az, hogy hГЎrom jelet rakjunk le egymГЎs utГЎn egy sorba. Te kezdesz elsЕ‘kГ©nt!");
Database.addText("hu.mapATreeTicTacToeNobodyWins", "Teljesen betelt a tГЎbla, Г©s egyikГјnk se tudott hГЎrmat sorba rakni: senki se nyert! Гљjra akarod prГіbГЎlni?");
Database.addText("hu.mapATreeTicTacToeYouLose", "HГЎrmat raktam egy sorba! Г‰n gyЕ‘ztem. Гљjra akarod prГіbГЎlni?");
Database.addText("hu.mapATreeTicTacToeTryAgainButton", "Igen, akarom!");
Database.addText("hu.mapATreeTicTacToeYouWin", "VГЎГі, hГЎt ez egy nem vГЎrt mozdulat volt. De nem ellenkezhetek, hiszen hГЎrmat raktГЎl egy sorba. GyЕ‘ztГ©l! Fogd ezt a kulcsot! Ez a falu egyik hГЎzГЎnak ajtajГЎt nyitja.");
Database.addText("hu.mapATreeTicTacToeAnymoreSweet", "KГ¶szГ¶nГ¶m mГіkus! Van mГ©g kihГ­vГЎsod a szГЎmomra?");
Database.addText("hu.mapATreeNoMoreChallenge", "Sajnos nincs mГЎr szГЎmodra mГЎs kihГ­vГЎsom... De jГі mГіka volt jГЎtszani veled, kГ¶szГ¶nГ¶m!");
Database.addText("hu.buttonExitQuestKeeping", "KilГ©psz a kГјldetГ©sbЕ‘l (Г©s megtartod amit talГЎltГЎl)");
Database.addText("hu.buttonExitQuestNoKeeping", "KilГ©psz a kГјldetГ©sbЕ‘l (Г©s nem tartod meg amit talГЎltГЎl)");
Database.addText("hu.buttonExitQuestNoKeepingBecauseLose", "KilГ©psz a kГјldetГ©sbЕ‘l (Г©s nem tartod meg amit talГЎltГЎl mert elbuktГЎl)");
Database.addText("hu.mapVillageLockedHouseComment", "Egy bezГЎrt hГЎz");
Database.addText("hu.mapVillageForgeIntroductionSpeech", "Гњdv! Г‰n egy kovГЎcs vagyok. Eladhatok neked pГЎr fegyvert Г©s felszerelГ©st.");
Database.addText("hu.mapVillageForgeIntroductionSpeechNoMoreToSell", "Гњdv! Г‰n egy kovГЎcs vagyok. Sajnos nincs mit eladnom a szГЎmodra. TalГЎn gyere vissza kГ©sЕ‘bb!");
Database.addText("hu.mapVillageFifthHouseNoWeaponSpeech", "Гњdv. A pincГ©m tele van patkГЎnyokkal, Г©s el kellene intГ©znem Е‘ket... bГЎrcsak valaki akinГ©l fegyver van segГ­thetne nekem...");
Database.addText("hu.mapVillageFifthHouseWeaponSpeech", "HГ©, te! Гљgy lГЎtom nГЎlad van fegyver! Ha megГ¶lГ¶d a patkГЎnyokat akik a pincГ©mben ГіlГЎlkodnak, akkor megjutalmazlak!");
Database.addText("hu.mapVillageFifthHouseAgree", "MenjГјnk hГЎt!");
Database.addText("hu.mapVillageFifthHouseCellarDone", "KГ¶szГ¶nГ¶m, hogy elintГ©zted Е‘ket! Itt van egy nagyon Г©rtГ©kes jutalom a szГЎmodra : a vilГЎg tГ©rkГ©pe. Szerintem te tГ¶bbet fogod hasznГЎlni mint Г©n.");
Database.addText("hu.mapVillageTheShopComment", "A bolt");
Database.addText("hu.mapBridgeComment", "A hГ­d");
Database.addText("hu.mapFarmComment", "A nyalГіka farm");
Database.addText("hu.mapCaveEntranceComment", "Egy barlang bejГЎrata");
Database.addText("hu.mapLighthouseComment", "A vilГЎgГ­tГіtorony");
Database.addText("hu.mapPierComment", "A kikГ¶tЕ‘");
Database.addText("hu.mapTheHoleComment", "A gГ¶dГ¶r");
Database.addText("hu.candyBoxRequestStatusBarUnlocked", "KГ©rj egy Гєj dolgot a kГ©szГ­tЕ‘tЕ‘l (30 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedCfg", "KГ©rj mГ©g egyet (5 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedSave", "KГ©rj Гєjra egyet (5 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedHealthBar", "KГ©rj valami sokkal izgalmasabbat (5 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedMap", "Az utolsГі kГ©rГ©s! Ez meg fogja Г©rni a cukorkГЎkat. (10 cukorka)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedComment", "ElГ©rhetЕ‘ lett a stГЎtusz fГјl! (fent)");
Database.addText("hu.candyBoxRequestStatusBarUnlockedCfgComment1", "MostantГіl elГ©red a konfigurГЎciГіs fГјlet.");
Database.addText("hu.candyBoxRequestStatusBarUnlockedCfgComment2", "MegvГЎltoztathatod a jГЎtГ©k nyelvГ©t, ha akarod.");
Database.addText("hu.candyBoxRequestStatusBarUnlockedSaveComment", "Hirtelen felbukkant egy mentГ©s fГјl!");
Database.addText("hu.candyBoxRequestStatusBarUnlockedHealthBarComment", "Itt van 100 Г©leterЕ‘ pont. Nagyon hasznosak lesznek.");
Database.addText("hu.cfgChooseLanguage", "VГЎlassz nyelvet :");
Database.addText("hu.cfgInvertColors", "MegfordГ­tod a szГ­neket?");
Database.addText("hu.gridItemMainMapName", "A tГ©rkГ©p");
Database.addText("hu.gridItemMainMapDescription", "Egy tГ©rkГ©p a vilГЎgrГіl");
Database.addText("hu.gridItemPogoStickName", "Pogo rГєd");
Database.addText("hu.gridItemPogoStickDescription", "Ezzel a tГЎrggyal ugrГЎlni tudsz a kГјldetГ©seken!");
Database.addText("hu.gridItemTimeRingName", "Egy idЕ‘ gyЕ±rЕ±");
Database.addText("hu.gridItemTimeRingDescription", "Ez a tГЎrgy egy Гєj kГ©pessГ©ggel ruhГЎz fel a kГјldetГ©seken : le tudod lassГ­tani az idЕ‘t. Ha tГєl gyors szГЎmodra az akciГі, hasznГЎld az idЕ‘ gyЕ±rЕ±t!");
Database.addText("hu.gridItemThirdHouseKeyName", "A harmadik hГЎz kulcsa");
Database.addText("hu.gridItemThirdHouseKeyDescription", "Ezzel a kulccsal bejuthatsz a falu harmadik hГЎzГЎba.");
Database.addText("hu.gridItemFeatherName", "Egy sivatagi madГЎr tolla");
Database.addText("hu.gridItemFeatherDescription", "hu.ek a varГЎzslatos tollnak a segГ­tsГ©gГ©vel magasabbra ugorhatsz a pogo rГєddal!");
Database.addText("hu.gridItemFeatherDescriptionNoPogoStick", "Valamilyen furcsa oknГЎl fogva Гєgy Г©rzed, hogy ez a toll nagyon hasznos lehet szГЎmodra, ha lenne pogo rudad...");
Database.addText("hu.gridItemSpongeName", "Egy varГЎzslatos szivacs");
Database.addText("hu.gridItemSpongeDescription", "hu.ek a varГЎzslatos szivacsnak a segГ­tsГ©gГ©vel Г¶sszenyomhatod magadat, akГЎrcsak egy szivacs, Г­gy kisebb leszel.");
Database.addText("hu.gridItemFortressKeyName", "A sivatagi erЕ‘d kulcsa");
Database.addText("hu.gridItemFortressKeyDescription", "Ezzel a kulccsal belГ©phetsz a nagyon Е‘si erЕ‘dbe, ami a sivatag felett talГЎlhatГі. Ki tudja, hogy mit talГЎlsz ott?");
Database.addText("hu.gridItemHeartPendantName", "Egy szГ­v alakГє nyakГ©k");
Database.addText("hu.gridItemHeartPendantDescription", "Ez a szГ­v alakГє nyakГ©k megnГ¶veli a maximГЎlis Г©leterЕ‘ pontjaidat amГ­g hordod.");
Database.addText("hu.gridItemHeartPlugName", "Egy szГ­v alakГє dugГі");
Database.addText("hu.gridItemHeartPlugDescription", "Ez egy szГ­v alakГє dugГі, ami vasbГіl, pГіklГЎbakbГіl Г©s speciГЎlis \"szГ­v likЕ‘rbЕ‘l\" kГ©szГјlt, Г©s megnГ¶veli a maximГЎlis Г©leterЕ‘ pontjaidat 20 szГЎzalГ©kkal!");
Database.addText("hu.gridItemBeginnersGrimoireName", "KezdЕ‘k varГЎzskГ¶nyve");
Database.addText("hu.gridItemBeginnersGrimoireDescription", "Ez a varГЎzskГ¶nyv hГЎrom varГЎzslattal ruhГЎz fel tГ©ged, amiket kГ¶nnyЕ± varГЎzsolni. ValГіjГЎban kezdЕ‘knek kГ©szГјlt. HasznГЎlhatod a sav esЕ‘ varГЎzslatot (rengeteg savas esЕ‘csepp esik rГЎ az ellenfeleidre), a tЕ±zgolyГі varГЎzslatot (egy ГіriГЎsi tЕ±zgolyГі repГјl az ellenfeleid felГ©), valamint a teleportГЎlГЎs varГЎzslatot (amivel kiszГЎmГ­thatatlan helyre teleportГЎlhatsz).");
Database.addText("hu.gridItemAdvancedGrimoireName", "HaladГіk varГЎzskГ¶nyve");
Database.addText("hu.gridItemAdvancedGrimoireDescription", "A haladГіk varГЎzskГ¶nyve kГ©t varГЎzslattal ruhГЎz fel tГ©ged : a tГ¶rlГ©s mГЎgiГЎval Г©s a tГјskГ©s pajzs mГЎgiГЎval. Az elsЕ‘ mindenfГ©le mГЎgiГЎt eltГ¶rГ¶l a kГјldetГ©sben, mГ©g azt is, amit te Г©s ellenfeled hasznГЎlt. A mГЎsodik lebegЕ‘ tГјskГ©s pajzsot alkot kГ¶rГјlГ¶tted, amik Г©rintГ©sre megsebzik az ellenfeleidet.");
Database.addText("hu.gridItemBlackMagicGrimoireName", "Fekete mГЎgiГЎs varГЎzskГ¶nyv");
Database.addText("hu.gridItemBlackMagicGrimoireDescription", "Ezt a varГЎzskГ¶nyvet egy barlangban talГЎltad, egy nagyon nehezen elГ©rhetЕ‘ helyen, Г©s Г©rthetЕ‘, hogy miГ©rt. Ez kГ©t erЕ‘s fekete mГЎgiГЎt tartalmaz. Az elsЕ‘vel elГ©dvarГЎzsol egy ГіriГЎsi obszidiГЎn falat, ami hasznos lehet ellenfeleid lelassГ­tГЎsГЎra. A mГЎsodik egy dГ©mon rajt idГ©z meg, akik mindenkit megtГЎmadnak a kГјldetГ©sen belГјl, mГ©g tГ©ged is. Ezzel lГ©gy Гіvatos.");
Database.addText("hu.gridItemUnicornHornName", "Egy unikornis szarva");
Database.addText("hu.gridItemUnicornHornDescription", "Ez a varГЎzslatos szarv valaha egy unikornisГ© volt. ErЕ‘s gyГіgyГ­tГі hatalma van, ami sokat fog segГ­teni neked. Гљgy hallottad, hogy ezt az unikornist valaha Charlienak hГ­vtГЎk.");
Database.addText("hu.gridItemXinopherydonClawName", "Egy xinopherydon karma");
Database.addText("hu.gridItemXinopherydonClawDescription", "Ez a karom valaha egy xinopherydonГ© volt, ami egy kГ©tfejЕ± Е‘si ГЎllat, amire mindenki azt hitte, hogy mГЎr kihalt. MegduplГЎzza a jelenlegi fegyvered sebzГ©sГ©t.");
Database.addText("hu.gridItemPitchforkName", "Egy vasvilla");
Database.addText("hu.gridItemPitchforkDescription", "Ezzel a speciГЎlis vasvillГЎval Гєgy is meglazГ­thatod a talajt, hogy nem forgatod fel, Г­gy megtartod a fГ¶ldalatti Г¶koszisztГ©mГЎt. Ez meghГЎromszorozza a nyalГіka farmod termelГ©sГ©t.");
Database.addText("hu.gridItemShellPowderName", "KagylГіpor");
Database.addText("hu.gridItemShellPowderDescription", "A fГ¶ldmЕ±vesek gyakran hasznГЎlnak kagylГіport, hogy megnГ¶veljГ©k a nyalГіka farmjuk hatГ©konysГЎgГЎt. Ez a por meghГЎromszorozza a nyalГіka farmod termelГ©sГ©t!");
Database.addText("hu.gridItemPName", "A P kЕ‘");
Database.addText("hu.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DВ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSВ°-J (`  /R`yM}  T$`` В°+-|U(\\OL&Y_)T|");
Database.addText("hu.gridItemLName", "Az L kЕ‘");
Database.addText("hu.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OВ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    В°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#В° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("hu.gridItemAName", "Az A kЕ‘");
Database.addText("hu.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITВ°#{  Oa$ GM T{Q \"S A-\\ F KmВ°& C #В° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("hu.gridItemYName", "Az Y kЕ‘");
Database.addText("hu.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  В°-  AX Y ` В° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_В°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EВ° I &L- /    K");
Database.addText("hu.gridItemRedSharkFinName", "Egy varГЎzslatos piros cГЎpauszony");
Database.addText("hu.gridItemRedSharkFinDescription", "Ez a varГЎzslatos uszony nagyban megnГ¶veli a tЕ±zgolyГі varГЎzslatod sebzГ©sГ©t. VГ©gre ez a tЕ±zgolyГі hasznos is lesz.");
Database.addText("hu.gridItemGreenSharkFinName", "Egy varГЎzslatos zГ¶ld cГЎpauszony");
Database.addText("hu.gridItemGreenSharkFinDescription", "Ez a varГЎzslatos uszony elhozza a termГ©szet erejГ©t a nyalГіka farmodra! A termelГ©sedet megГ¶tszГ¶rГ¶zi.");
Database.addText("hu.gridItemPurpleSharkFinName", "Egy varГЎzslatos lila cГЎpauszony");
Database.addText("hu.gridItemPurpleSharkFinDescription", "Ez a varГЎzslatos uszony egy Гєj fekete mГЎgiГЎval ruhГЎz fel tГ©ged. Egy kГјldetГ©sen belГјl csak egyszer hasznГЎlhatod fel. Ezzel lГ©gy Гіvatos!");
Database.addText("hu.gridItemTalkingCandyName", "Egy beszГ©lЕ‘ cukorka");
Database.addText("hu.gridItemTalkingCandyDescription", "Ez a beszГ©lЕ‘ cukorka akkor jelent meg, mikor beraktГЎl nГ©gy kГ¶vet a kastГ©ly tornyГЎnak tetejГ©be. Еђ talГЎn tud segГ­teni kinyitni a candy box-ot...");
Database.addText("hu.inventorySpecialNothingEqItem", "Semmi");
Database.addText("hu.eqItemWeaponWoodenSwordName", "Fa kard");
Database.addText("hu.eqItemWeaponWoodenSwordDescription", "Egy egyszerЕ±, fГЎbГіl kГ©szГјlt kard");
Database.addText("hu.eqItemWeaponIronAxeName", "Vas balta");
Database.addText("hu.eqItemWeaponIronAxeDescription", "Egy egyszerЕ± vas balta. JГіl megcsiszolt. ErЕ‘sebb, mint a fa kard.");
Database.addText("hu.eqItemWeaponPolishedSilverSwordName", "Megcsiszolt ezГјst kard");
Database.addText("hu.eqItemWeaponPolishedSilverSwordDescription", "Egy erЕ‘s kard, ami tГјskГ©kkel van tele.");
Database.addText("hu.eqItemWeaponTrollBludgeonName", "A troll bunkГіsbotja");
Database.addText("hu.eqItemWeaponTrollBludgeonDescription", "Ezt a bunkГіsbotot a hidat Е‘rzЕ‘ trolltГіl vetted el. LassГє, de elГ©g hatГ©konyan lapГ­tja szГ©t ellenfeleidet.");
Database.addText("hu.eqItemWeaponTribalSpearName", "Egy tГ¶rzsi lГЎndzsa");
Database.addText("hu.eqItemWeaponTribalSpearDescription", "Ezt a tГ¶rzsi lГЎndzsГЎt egy nagy gГ¶dГ¶rben talГЎltad egy elveszett tГ¶rzsi harcos hullГЎjГЎnГЎl. ElЕ‘szГ¶r nehГ©z kezelni, de amint belejГ¶ssz jГі fegyver lesz.");
Database.addText("hu.eqItemWeaponSummoningTribalSpearName", "Egy idГ©zЕ‘s tГ¶rzsi lГЎndzsa");
Database.addText("hu.eqItemWeaponSummoningTribalSpearDescription", "Ez a varГЎzslatos tГ¶rzsi lГЎndzsa az mellett, hogy kissГ© erЕ‘sebb mint a normГЎl tГ¶rzsi lГЎndzsa, kГ©pes megidГ©zni tГ¶rzsi harcosokat, akik segГ­tenek neked a kГјldetГ©sek sorГЎn.");
Database.addText("hu.eqItemWeaponMonkeyWizardStaffName", "A majom varГЎzslГі botja");
Database.addText("hu.eqItemWeaponMonkeyWizardStaffDescription", "Ez a bot valaha a barlangban talГЎlhatГі majom varГЎzslГіГ© volt. Gyakran idГ©z meg magГЎtГіl varГЎzslatokat, amik az ellenfeleidet cГ©lozzГЎk meg.");
Database.addText("hu.eqItemWeaponEnchantedMonkeyWizardStaffName", "A majom varГЎzslГі botja (elbЕ±vГ¶lt)");
Database.addText("hu.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Ez a bot gyorsabb, mint a nem elbЕ±vГ¶lt vГЎltozat, Г©s sokkalta tГ¶bbet varГЎzsol.");
Database.addText("hu.eqItemWeaponGiantSpoonName", "Egy ГіriГЎsi kanГЎl");
Database.addText("hu.eqItemWeaponGiantSpoonDescription", "Ez az ГіriГЎsi kanГЎl a sivatagi erЕ‘dben volt egy nagy teГЎskannГЎban. Nem tudsz arrГіl, hogy valaki ezt kanГЎlkГ©nt hasznГЎlta volna, de ha igen, akkor az nagyon nagy lehetett. ValГіszГ­nЕ±leg nem szeretnГ©l talГЎlkozni vele.");
Database.addText("hu.eqItemWeaponGiantSpoonOfDoomName", "A VГ©gzet ГіriГЎsi kanala");
Database.addText("hu.eqItemWeaponGiantSpoonOfDoomDescription", "Ez az ГіriГЎsi kanГЎl mГ©g erЕ‘sebb, mint az ГЎtlagos vГЎltozat amit talГЎlhatsz, mondjuk egy teГЎskannГЎban. BГЎr ez mellett elГ©ggГ© lassГє.");
Database.addText("hu.eqItemWeaponScytheName", "Egy kasza");
Database.addText("hu.eqItemWeaponScytheDescription", "Azt mondjГЎk, hogy ez a kasza valaha magГЎhoz a HalГЎlhoz tartozott. ExtrГ©m gyors.");
Database.addText("hu.eqItemHatMerchantHatName", "Az ГЎrus sapkГЎja");
Database.addText("hu.eqItemHatMerchantHatDescription", "Ezt a sapkГЎt a cukorka ГЎrus adta el neked. A cukorka ГЎrus imГЎdja a cukorkГЎkat. Ez a sapka meghГ©tszerezi a kГјldetГ©seken szerzett cukorkГЎk mennyisГ©gГ©t!");
Database.addText("hu.eqItemHatSorceressHatName", "A banya sapkГЎja");
Database.addText("hu.eqItemHatSorceressHatDescription", "Ezt a sapkГЎt a banya adta el neked. Ez megnГ¶veli a varГЎzslataid Г©s italaid hatГЎsГЎt.");
Database.addText("hu.eqItemHatOctopusKingCrownName", "A polip kirГЎly koronГЎja");
Database.addText("hu.eqItemHatOctopusKingCrownDescription", "Hogyha ez a korona rajtad van, akkor magabiztosabb vagy. Nem ad semmilyen elЕ‘nyt a kГјldetГ©seken, de az Г¶nbizalom fontos dolog!");
Database.addText("hu.eqItemHatOctopusKingCrownWithJaspersName", "JГЎspiskГ¶ves polip kirГЎly korona");
Database.addText("hu.eqItemHatOctopusKingCrownWithJaspersDescription", "Ez az elbЕ±vГ¶lt korona aranybГіl Г©s vГ¶rГ¶s jГЎspisbГіl van. A kГјldetГ©seken belГјl gyakran varГЎzsol tЕ±zgolyГіkat kГ¶rГ©d. Г‰s mГ©g ragyog is!");
Database.addText("hu.eqItemHatOctopusKingCrownWithObsidianName", "ObszidiГЎnos polip kirГЎly korona");
Database.addText("hu.eqItemHatOctopusKingCrownWithObsidianDescription", "Ez az elbЕ±volt korona aranybГіl Г©s obszidiГЎnbГіl van. CsodГЎlatos. A kГјldetГ©seken belГјl megidГ©z egy polip kirГЎlyt, hogy segГ­tsen neked a harcokban. Micsoda csГЎpos tГЎrs!");
Database.addText("hu.eqItemGlovesLeatherGlovesName", "BЕ‘r kesztyЕ±");
Database.addText("hu.eqItemGlovesLeatherGlovesDescription", "Ezek a kesztyЕ±k semmit se csinГЎlnak. De legalГЎbb puhГЎk Г©s kГ©nyelmesek!");
Database.addText("hu.eqItemGlovesRedEnchantedGlovesName", "VГ¶rГ¶s elbЕ±vГ¶lt kesztyЕ±");
Database.addText("hu.eqItemGlovesRedEnchantedGlovesDescription", "Ezek az elbЕ±vГ¶lt kesztyЕ±k halvГЎny piros fГ©nyt ГЎrasztanak kГ¶rГ©d a sГ¶tГ©tben. A kГјldetГ©seken vГ©letlenszerЕ± tЕ±zgolyГіkat dobГЎlnak az ellenfeleid felГ©, ami biztosan hasznos lehet.");
Database.addText("hu.eqItemGlovesPinkEnchantedGlovesName", "RГіzsaszГ­n elbЕ±vГ¶lt kesztyЕ±");
Database.addText("hu.eqItemGlovesPinkEnchantedGlovesDescription", "Ezek az elbЕ±vГ¶lt kesztyЕ±k mindenen amihez hozzГЎГ©rsz rГіzsaszГ­n jelet hagynak. A kГјldetГ©seken belГјl folyamatosan gyГіgyГ­tanak tГ©ged.");
Database.addText("hu.eqItemBootsRocketBootsName", "RakГ©ta cipЕ‘k");
Database.addText("hu.eqItemBootsRocketBootsDescription", "Ezek a menЕ‘ rakГ©ta cipЕ‘k engedГ©lyezik a levegЕ‘ben valГі ugrГЎlГЎst, szГіval ezekkel gyakorlatilag repГјlhetsz!");
Database.addText("hu.eqItemBootsLeatherBootsName", "BЕ‘r cipЕ‘k");
Database.addText("hu.eqItemBootsLeatherBootsDescription", "EgyszerЕ± bЕ‘r cipЕ‘k. Semmi kГјlГ¶nГ¶s nincs bennГјk.");
Database.addText("hu.eqItemBootsBootsOfIntrospectionName", "A betekintГ©s cipЕ‘i");
Database.addText("hu.eqItemBootsBootsOfIntrospectionDescription", "Csak lazulj el egy kicsit Г©s lГ©legezz mГ©lyeket. Hogyha ezek a cipЕ‘k vannak rajtad, akkor addig nem mozdulsz elЕ‘re, amГ­g a fГ¶ldet Г©ri a lГЎbad.");
Database.addText("hu.eqItemBodyArmoursLightweightBodyArmourName", "Egy kГ¶nnyЕ± pГЎncГ©l");
Database.addText("hu.eqItemBodyArmoursLightweightBodyArmourDescription", "Ez a pГЎncГ©l gyenge vГ©delmet nyГєjt. KissГ© ellenГЎllГіbb leszel a tГЎmadГЎsokkal szemben.");
Database.addText("hu.eqItemBodyArmoursKnightBodyArmourName", "Egy lovag pГЎncГ©lja");
Database.addText("hu.eqItemBodyArmoursKnightBodyArmourDescription", "Ez az erЕ‘s pГЎncГ©l alaposan megvГ©d tГ©ged. EllenГЎllГіvГЎ tesz a tГЎmadГЎsokkal szemben.");
Database.addText("hu.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Egy elbЕ±vГ¶lt lovagi pГЎncГ©l");
Database.addText("hu.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Ez a pГЎncГ©l nagyon kГјlГ¶nleges. Ez NAGYON ellenГЎllГіvГЎ tesz a tГЎmadГЎsokkal szemben, de ugyanakkor a fegyvered sebzГ©sГ©t felezi.");
Database.addText("hu.mapVillageForgeBuyWoodenSwordButton", "Fa kard megvГ©tele (150 cukorka)");
Database.addText("hu.mapVillageForgeBuyWoodenSwordSpeech", "KГ¶szГ¶nГ¶m, hogy megvetted! Ez a fa kard elГ©ggГ© gyenge, de kezdetnek megteszi.");
Database.addText("hu.mapVillageForgeBuyIronAxeButton", "Vas balta megvГ©tele (400 cukorka)");
Database.addText("hu.mapVillageForgeBuyIronAxeSpeech", "RemГ©lem, hogy tetszik neked ez a vas balta. MГ©g meg is csiszoltam neked!");
Database.addText("hu.mapVillageForgeBuyPolishedSilverSwordButton", "Megcsiszolt ezГјst kard megvГ©tele (2 000 cukorka)");
Database.addText("hu.mapVillageForgeBuyPolishedSilverSwordSpeech", "Rengeteg idЕ‘mbe telt elkГ©szГ­teni ezt a kardot. BiztosГ­thatlak, hogy megГ©ri az ГЎrГЎt.");
Database.addText("hu.mapVillageForgeBuyLightweightBodyArmourButton", "KГ¶nnyЕ± pГЎncГ©l megvГ©tele (15 000 cukorka)");
Database.addText("hu.mapVillageForgeBuyLightweightBodyArmourSpeech", "Ez a pГЎncГ©lzat meg fog vГ©deni tГ©ged az ellenfeleidtЕ‘l.");
Database.addText("hu.mapVillageForgeBuyScytheButton", "Kasza megvГ©tele (5 000 000 cukorka)");
Database.addText("hu.mapVillageForgeBuyScytheSpeech", "TГ¶bb hГіnapomba telt mire elkГ©szГ­tettem ezt a kaszГЎt. Igazi mЕ±vГ©szeti alkotГЎs. Ez talГЎn a leggyorsabb fegyver, amit valaha is hasznГЎlni tudsz majd. Sok sikert!");
Database.addText("hu.wishingWellThrowFirstCandyButton", "Dobj egy cukorkГЎt a kГєtba");
Database.addText("hu.wishingWellCandyIntroductionSpeech", "Гњdv, vГЎndor! Г‰n vagyok a kГ­vГЎnsГЎgkГєt. Az Г©dessГ©gekГ©rt cserГ©be teljesГ­tem a kГ­vГЎnsГЎgaidat! Ha cukorkГЎkat dobsz belГ©m, akkor meggyГіgyГ­tom a sebeidet.");
Database.addText("hu.wishingWellThrewCandiesSpeech", "A sebeid begyГіgyultak!");
Database.addText("hu.wishingWellNoWoundSpeech", "Nincsenek meggyГіgyГ­tandГі sebeid!");
Database.addText("hu.wishingWellThrowFirstLollipopButton", "Dobj egy nyalГіkГЎt a kГєtba");
Database.addText("hu.wishingWellLollipopIntroductionSpeech", "Гњdv, vГЎndor! Г‰n vagyok a kГ­vГЎnsГЎgkГєt. Az Г©dessГ©gekГ©rt cserГ©be teljesГ­tem a kГ­vГЎnsГЎgaidat! Ha nyalГіkГЎkat dobsz belГ©m, akkor azokat cukorkГЎkra vГЎltom be.");
Database.addText("hu.wishingWellThrewLollipopsSpeech", "A nyalГіkГЎidat bevГЎltottam cukorkГЎkra! KГ©t nyalГіka egy cukorkГЎГ©rt.");
Database.addText("hu.wishingWellThrowChocolateBarButton", "Dobj egy csokolГЎdГ© rudat a kГєtba");
Database.addText("hu.wishingWellChocolateBarIntroductionSpeech", "Гњdv, vГЎndor! Г‰n vagyok a kГ­vГЎnsГЎgkГєt. Az Г©dessГ©gekГ©rt cserГ©be teljesГ­tem a kГ­vГЎnsГЎgaidat! Szeretem a csokolГЎdГ© rudakat. Nagyon szeretem Е‘ket. Minden egy csokolГЎdГ© rГєdГ©rt cserГ©be, mГ©g ezГ©rt is, elbЕ±vГ¶lheted az egyik felszerelГ©sedet.");
Database.addText("hu.wishingWellThrewChocolateBarSpeech", "Melyik tГЎrgyat akarod elbЕ±vГ¶lni?");
Database.addText("hu.wishingWellThrowPainAuChocolatButton", "Dobj egy pain au chocolatot a kГєtba");
Database.addText("hu.wishingWellPainAuChocolatIntroductionSpeech", "Гњdv, vГЎndor! Г‰n vagyok a kГ­vГЎnsГЎgkГєt. Az Г©dessГ©gekГ©rt cserГ©be teljesГ­tem a kГ­vГЎnsГЎgaidat! Hogyha egy pain au chocolatot dobsz belГ©m, akkor egy nagyon speciГЎlis ajГЎndГ©kot kapsz. BГ¶lcsen dГ¶nts.");
Database.addText("hu.wishingWellThrewPainAuChocolatSpeech", "KГ¶szГ¶nГ¶m a pain au chocolatot! Most kivГЎlaszthatod az ajГЎndГ©kodat.");
Database.addText("hu.wishingWellChooseGift", "VГЎlaszd ki az ajГЎndГ©kodat!");
Database.addText("hu.wishingWellChooseGiftButton", "VГЎlassz");
Database.addText("hu.wishingWellGiftDoneSpeech", "KГ©sz! Most megszerezted az Гєj ajГЎndГ©kodat. A tГЎrgymenГјdben lesz a statisztikГЎk rГ©szlegnГ©l.");
Database.addText("hu.wishingWellNoPossibleEnchantment", "Nincs elГ©rhetЕ‘ bЕ±vГ¶lГ©s");
Database.addText("hu.wishingWellChooseEnchantment", "VГЎlassz bЕ±vГ¶lГ©st");
Database.addText("hu.wishingWellEnchantButton", "BЕ±vГ¶lГ©s");
Database.addText("hu.wishingWellEnchantmentDoneSpeech", "Г‰s mГЎr kГ©sz is! A tГЎrgyat elbЕ±vГ¶ltem.");
Database.addText("hu.pierLighthouseButton", "Menj a vilГЎgГ­tГіtoronyhoz hajГіval");
Database.addText("hu.pierTheSeaButton", "Ugorj bele a tengerbe");
Database.addText("hu.lonelyHouseOpenBox", "Nyisd ki a lГЎdГЎt");
Database.addText("hu.lonelyHouseShakeBox", "RГЎzd meg a lГЎdГЎt");
Database.addText("hu.lonelyHouseBreakLock", "TГ¶rd szГ©t a zГЎrat");
Database.addText("hu.lonelyHouseKickBox", "RГєgj bele a lГЎdГЎba");
Database.addText("hu.lonelyHouseAskTheBoxToOpenItself", "KГ©rd meg a lГЎdГЎt, hogy magГЎtГіl nyГ­ljon ki");
Database.addText("hu.lonelyHouseLureTheBoxWithACandy", "Csalogasd a lГЎdГЎt cukorkГЎval");
Database.addText("hu.lonelyHouseTakeTheBox", "Vidd magaddal a lГЎdГЎt, mert biztos kulcs kell majd a kinyitГЎsГЎhoz");
Database.addText("hu.lonelyHouseOpenBoxResult", "A lГЎda zГЎrva van");
Database.addText("hu.lonelyHouseShakeBoxResult", "Semmi se tГ¶rtГ©nik");
Database.addText("hu.lonelyHouseBreakLockResult", "A zГЎr ellenГЎll");
Database.addText("hu.lonelyHouseKickBoxResult", "A lГЎbad megfГЎjdult egy kicsit, de semmi mГЎs nem tГ¶rtГ©nt");
Database.addText("hu.lonelyHouseAskTheBoxToOpenItselfResult", "...ugye tudod, hogy most egy lГЎdГЎhoz beszГ©lsz?");
Database.addText("hu.lonelyHouseLureTheBoxWithACandyResult", "Гљgy tЕ±nik, hogy ez a lГЎdГЎt nem Г©rdekli");
Database.addText("hu.lonelyHouseTakeTheBoxResult", "Гљgy tЕ±nik van valami Г©rdekes ebben a candy box-ban.");
Database.addText("hu.lollipopFarmConstructMill", "Г‰pГ­ts egy malmot (10 000 nyalГіka)");
Database.addText("hu.lollipopFarmFeedMill", "TГ¶ltsd fel a malmot");
Database.addText("hu.lollipopFarmCurrentCandiesProduction", "Jelenlegi cukorka gyГЎrtГЎs");
Database.addText("hu.lollipopFarmDigPond", "ГЃss egy tavat (100 000 nyalГіka)");
Database.addText("hu.lollipopFarmBuyLolligator", "VegyГ©l egy lolligГЎtort (1200 cukorka)");
Database.addText("hu.lollipopFarmLolligatorsConversionText", "ГЃtalakГ­tГЎs cukorkГЎbГіl -> nyalГіkГЎba aktivГЎlva");
Database.addText("hu.lighthouseAskButton", "KГ©rdezz");
Database.addText("hu.lighthouseQuestionWho", "Te meg ki vagy?");
Database.addText("hu.lighthouseQuestionWhoSpeech", "Г‰n egy nagyon Г¶reg kГјklopsz vagyok.");
Database.addText("hu.lighthouseQuestionWhat", "Mit keresel itt?");
Database.addText("hu.lighthouseQuestionWhatSpeech", "EgГ©sz nap itt Г©lek, Г©s vГЎrok egy hajГіra. RГ©gГіta lГЎttam mГЎr hajГіt, de itt kell maradnom Г©s bГЎmulnom a tengert, hГЎtha erre jГЎr egy hajГі.");
Database.addText("hu.lighthouseQuestionWhyEatCandies", "MiГ©rt ennГ©k cukorkГЎkat?");
Database.addText("hu.lighthouseQuestionWhyEatCandiesSpeech", "Mert jГіt tesznek az egГ©szsГ©gednek!");
Database.addText("hu.lighthouseQuestionCandyBox", "Mi az a candy box?");
Database.addText("hu.lighthouseQuestionCandyBoxSpeech", "Az egy nagyon Г¶reg lГЎda, amiben ГЎllГ­tГіlag a vilГЎg minden cukorkГЎja megtalГЎlhatГі. A legenda szerint bГЎrki is nyitja ki, annak annyi cukorkГЎja lesz amennyi csak lehetsГ©ges.");
Database.addText("hu.lighthouseQuestionDragon", "A sГЎrkГЎny azt mondta, hogy jГ¶jjek ide, ha cukorkГЎt akarok.");
Database.addText("hu.lighthouseQuestionDragonSpeech", "Г“, Г©rtem... Nos, Г©n nem adhatok neked cukorkГЎkat, csak valami fontosat, amivel vГ©gГјl RENGETEG cukorkГЎt szerezhetsz. De elЕ‘szГ¶r le kell tesztelnelek. Nem adhatom ezt csak Гєgy oda bГЎrkinek. Oldd meg ezt a rejtvГ©nyt Г©s a tiГ©d lehet.");
Database.addText("hu.lighthouseFoundStone", "GratulГЎlok! ГЃtmentГ©l a teszten Г©s megtalГЎltad a kГ¶vet. Nagyon Г©rtГ©kes darab, de csak akkor van szГЎmodra haszna, ha talГЎlsz mГ©g hГЎrom hasonlГі kГ¶vet. Sok szerencsГ©t!");
Database.addText("hu.lighthouseFoundStoneAgain", "SzГ©p munka, ismГ©t teljesГ­tetted a rejtvГ©nyt. Гљgy lГЎtom ez tetszik neked.");
Database.addText("hu.saveLocalSaveTitle", "BГ¶ngГ©szЕ‘ mentГ©s");
Database.addText("hu.saveLocalSaveWhy", "VГЎlaszd a helyi mentГ©st, hogyha a jelenlegi eszkГ¶zГ¶dГ¶n Г©s bГ¶ngГ©szЕ‘dben szeretnГ©l jГЎtszani.");
Database.addText("hu.saveLocalSaveWarning0", "Гљgy tЕ±nik, hogy a bГ¶ngГ©szЕ‘d nem tГЎmogatja a HTML5-Г¶t.");
Database.addText("hu.saveLocalSaveWarning1", "FrissГ­tened kellene a bГ¶ngГ©szЕ‘det, hogyha hasznГЎlni szeretnГ©d a helyi mentГ©s funkciГіt.");
Database.addText("hu.saveLocalSaveChooseSlot", "VГЎlassz a mentГ©sednek helyet :");
Database.addText("hu.saveLocalSaveAutosaveEnabled", "AutomentГ©s bekapcsolva");
Database.addText("hu.saveLocalSaveChooseWhatToDo", "VГЎlaszd ki, hogy mit akarsz :");
Database.addText("hu.saveLocalSaveSaveButton", "MentГ©s");
Database.addText("hu.saveLocalSaveAutosaveButton", "MentГ©s 10 percenkГ©nt");
Database.addText("hu.saveLocalSaveDisableAutosaveButton", "AutomentГ©s kikapcsolГЎsa");
Database.addText("hu.saveFileSaveTitle", "SzГ¶veges mentГ©s");
Database.addText("hu.saveFileSaveWhy0", "VГЎlaszd a szГ¶veges mentГ©st, ha :");
Database.addText("hu.saveFileSaveWhy1", "Egy mГЎsik eszkГ¶zrЕ‘l vagy bГ¶ngГ©szЕ‘vel akarod folytatni tovГЎbb a jГЎtГ©kot");
Database.addText("hu.saveFileSaveWhy2", "Meg akarod osztani a mentГ©sedet mГЎssal");
Database.addText("hu.saveFileSaveWhy3", "Valami oknГЎl fogva tГ¶rГ¶lni akarod a bГ¶ngГ©szЕ‘d sГјtijeit");
Database.addText("hu.saveFileSaveWhy4", "(ami tГ¶rli a helyi mentГ©seidet)");
Database.addText("hu.saveFileSaveButton", "Szerezd meg a jelenlegi jГЎtГ©kot szГ¶vegkГ©nt");
Database.addText("hu.saveFileSaveWarning", "Most mГЎsold le ezt a szГ¶veget valahovГЎ! (pГ©ldГЎul egy fГЎjlba)");
Database.addText("hu.saveLocalLoadTitle", "BГ¶ngГ©szЕ‘ betГ¶ltГ©s");
Database.addText("hu.saveLocalLoadYouCan", "BetГ¶lthetsz egy helyi mentГ©st az alГЎbbi linkekkel :");
Database.addText("hu.saveLocalLoadThanksTo", "HГЎla a HTML5 varГЎzsГЎnak, mostantГіl ezeket a linkeket offline is hasznГЎlhatod.");
Database.addText("hu.saveFileLoadTitle", "SzГ¶veges betГ¶ltГ©s");
Database.addText("hu.saveFileLoadPaste", "Illeszd be alulra a mentГ©sedet, majd kattints a \"BetГ¶ltГ©s\" gombra");
Database.addText("hu.saveFileLoadButton", "BetГ¶ltГ©s");
Database.addText("hu.mountainsText0", "MeglГЎttГЎl valamit a hegyekben!");
Database.addText("hu.mountainsText1", "Г‰rdekesnek tЕ±nik. Lehet, hogy a hasznodra vГЎlhat.");
Database.addText("hu.mountainsTextButton", "MГЎssz fel a hegyre, hogy megszerezd a tГЎrgyat");
Database.addText("hu.mountainsTextAfter", "TalГЎltГЎl egy pogo rudat! BelekerГјlt a tГЎrgymenГјdbe.");
Database.addText("hu.secondHouseIntroSpeech", "Гњdv, Г©n vagyok a cukorka ГЎrus. BГЎrmit megtennГ©k a cukorkГЎkГ©rt. Mire van szГјksГ©ged?");
Database.addText("hu.secondHouseLollipop1Speech", "Ez egy citrom-Г­zЕ± nyalГіka. A kedvencem! 60 cukorkГЎba kerГјl, de megГ©ri az ГЎrГЎt.");
Database.addText("hu.secondHouseLollipop2Speech", "Ez egy eper-Г­zЕ± nyalГіka. JГі az Г­ze. Tetszik a piros szГ­ne. Csak 60 cukorkГЎba kerГјl!");
Database.addText("hu.secondHouseLollipop3Speech", "Ez egy tГ¶k-Г­zЕ± nyalГіka. Fogadok, hogy ilyent mГ©g nem prГіbГЎltГЎl! 60 cukorkГЎГ©rt a tiГ©d.");
Database.addText("hu.secondHouseLollipopButtonText", "Vedd meg ezt a nyalГіkГЎt (60 cukorka)");
Database.addText("hu.secondHouseMerchantHatSpeech", "Eladhatom neked a sapkГЎmat, de ez nagyon drГЎga, tudod... Rengeteg cukorkГЎt kellene adnod Г©rte. Mondjuk Гєgy 1 milliГі cukorkГЎt. Ez egy fair ГЎr, ugye?");
Database.addText("hu.secondHouseMerchantHatButtonText", "Vedd meg az ГЎrus sapkГЎjГЎt (1 000 000 cukorka)");
Database.addText("hu.secondHouseTimeRingSpeech", "Ez egy idЕ‘ gyЕ±rЕ±. Olyan varГЎzs-fajta. SegГ­tsГ©gГ©vel lelassГ­thatod az idЕ‘t ha bajban lennГ©l.");
Database.addText("hu.secondHouseTimeRingButtonText", "Vedd meg az idЕ‘ gyЕ±rЕ±t (500 cukorka)");
Database.addText("hu.secondHouseLeatherGlovesSpeech", "Ezek a bЕ‘r kesztyЕ±k tevebЕ‘rbЕ‘l kГ©szГјltek, Г­gy nagyon jГі a minЕ‘sГ©gГјk. Rengeteg van belЕ‘le raktГЎron, azГ©rt ilyen olcsГіk : csak 300 cukorka darabja!");
Database.addText("hu.secondHouseLeatherBootsButtonText", "VegyГ©l egy pГЎr bЕ‘r cipЕ‘t (300 cukorka)");
Database.addText("hu.secondHouseLeatherBootsSpeech", "Ezek a jГі minЕ‘sГ©gЕ± bЕ‘r cipЕ‘k, amik tevebЕ‘rbЕ‘l kГ©szГјltek, melegen fogjГЎk tartani a lГЎbaidat.");
Database.addText("hu.secondHouseLeatherGlovesButtonText", "VegyГ©l egy pГЎr bЕ‘r kesztyЕ±t (300 cukorka)");
Database.addText("hu.secondHouseChocolateBarSpeech", "Ez egy csokolГЎdГ© rГєd. Nem tudom, hogy ezt mire hasznГЎljГЎk, de Гєgy tЕ±nik, hogy ez nagyon ritka dolog, ami megmagyarГЎzza az ГЎrГЎt. 800 cukorkГЎГ©rt a tiГ©d!");
Database.addText("hu.secondHouseChocolateBarButtonText", "VegyГ©l csokolГЎdГ© rudat (800 cukorka)");
Database.addText("hu.outsideTheHoleButton", "Ugorj bele ebbe a gГ¶dГ¶rbe a fГ¶ldГ¶n");
Database.addText("hu.theCaveExitText0", "VГ©gre elГ©rted a barlang kijГЎratГЎt.");
Database.addText("hu.theCaveExitText1", "LГЎtsz egy hatalmas erdЕ‘t odakint.");
Database.addText("hu.theCaveExitButtonText", "LГ©pj ki a barlangbГіl");
Database.addText("hu.theCaveFirstSentenceWentStraight", "TovГЎbb mentГ©l egyenesen.");
Database.addText("hu.theCaveFirstSentenceWentLeft", "Balra mentГ©l.");
Database.addText("hu.theCaveFirstSentenceWentRight", "Jobbra mentГ©l.");
Database.addText("hu.theCaveFirstSentenceYouAre", "Egy barlangban vagy. HГЎrom Гєt van elЕ‘tted.");
Database.addText("hu.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Valami furcsa dolgot lГЎtsz a fГ¶ldГ¶n elЕ‘tted.");
Database.addText("hu.theCavePattern_ChocolateBarNowSeeChocolateBar", "Egy csokolГЎdГ© rudat lГЎtsz elЕ‘tted.");
Database.addText("hu.theCavePattern_TreasureMapSentence", "Kisebb kГ¶veket lГЎtsz a fГ¶ldГ¶n elЕ‘tted.");
Database.addText("hu.theCavePattern_MonkeyWizardSentence", "TalГЎlkozol egy meztelen majom varГЎzslГіval.");
Database.addText("hu.theCavePattern_MonkeyWizardButton", "KЕ±zdj meg vele");
Database.addText("hu.theCavePattern_OctopusKingSentence", "Belebotlasz a Polip KirГЎlyba. DurvГЎnak tЕ±nik.");
Database.addText("hu.theCavePattern_OctopusKingButton", "KЕ±zdj meg vele");
Database.addText("hu.fortressInsideText0", "Egy sivatagi erЕ‘dben vagy.");
Database.addText("hu.fortressInsideText1", "HГЎrom ajtГі kГ¶zГјl vГЎlaszthatsz.");
Database.addText("hu.fortressInsideText2", "Mindegyik egy nagy szobГЎba vezet, aminek a vГ©gГ©n egy kincs vГЎr.");
Database.addText("hu.fortressInsideEnterRoom1", "LГ©pj be az elsЕ‘ szobГЎba");
Database.addText("hu.fortressInsideEnterRoom2", "LГ©pj be a mГЎsodik szobГЎba");
Database.addText("hu.fortressInsideEnterRoom3", "LГ©pj be a harmadik szobГЎba");
Database.addText("hu.treasureButtonDig", "ГЃss");
Database.addText("hu.treasureButtonYouFound", "HГЎrom csokolГЎdГ© rudat talГЎltГЎl!");
Database.addText("hu.sorceressHutHello", "Гњdv, Г©n egy banya vagyok. TanГ­thatok egy-kГ©t dolgot a mГЎgiГЎrГіl neked. Adhatok mГ©g pГЎr Г©rdekessГ©get is, vagy varГЎzsolhatok a szГЎmodra. De mindennek ГЎra van! Г‰s a fizetЕ‘eszkГ¶z nyalГіka. JГі sok darab.");
Database.addText("hu.sorceressHutClickedGrimoire", "Ez egy varГЎzskГ¶nyv kezdЕ‘knek. A kГјldetГ©sek sorГЎn ennek segГ­tsГ©gГ©vel egyszerЕ±, de hasznos varГЎzslatokat hasznГЎlhatsz. Erre szГјksГ©ged van! Csak 5 000 nyalГіka.");
Database.addText("hu.sorceressHutBuyGrimoireButton", "Vedd meg ezt a varГЎzskГ¶nyvet (5 000 nyalГіka)");
Database.addText("hu.sorceressHutBuyGrimoireSpeech", "KГ¶szГ¶nГ¶m a vГЎsГЎrlГЎst! Ezzel a varГЎzskГ¶nyvvel hГЎrom varГЎzslatot hasznГЎlhatsz. Sok szerencsГ©t!");
Database.addText("hu.sorceressHutClickedGrimoire2", "Ez egy varГЎzskГ¶nyv haladГіknak. A kГјldetГ©sek sorГЎn kГ©t erЕ‘sebb varГЎzslatot hasznГЎlhatsz. Г‰n magam Г­rtam a kГ¶nyvet, Г©s nem volt kГ¶nnyЕ± dolgom. 20 000 nyalГіka fair ГЎr Г©rte.");
Database.addText("hu.sorceressHutBuyGrimoire2Button", "Vedd meg ezt a varГЎzskГ¶nyvet (20 000 nyalГіka)");
Database.addText("hu.sorceressHutBuyGrimoire2Speech", "KГ¶szГ¶nГ¶m a vГЎsГЎrlГЎst! Ezzel a varГЎzskГ¶nyvvel kГ©t varГЎzslatot hasznГЎlhatsz. HasznГЎld Е‘ket okosan!");
Database.addText("hu.sorceressHutClickedCauldron", "Ez az ГјstГ¶m. Ezzel kГ©szГ­tem a varГЎzsitalaimat. Eladhatom neked, de ez tГєl Г©rtГ©kes szГЎmomra... de 100 000 nyalГіkГЎГ©rt a tiГ©d lehet.");
Database.addText("hu.sorceressHutBuyCauldronButton", "Vedd meg az ГјstГ¶t (100 000 nyalГіka)");
Database.addText("hu.sorceressHutBuyCauldronSpeech", "KГ¶szГ¶nГ¶m! 100 000 nyalГіka az enyГ©m! Adok mГ©g neked egy fЕ‘zГ©si ГєtmutatГіt. JГіl fog jГ¶nni.");
Database.addText("hu.sorceressHutClickedHat", "Igen, tГ©nyleg szГ©p a sapkГЎm! De tГ©nyleg nem adhatom el neked. TГєГєГєlsГЎgosan Г©rtГ©kes szГЎmomra. Nagyon, Г­gy nem tehetem. Ne erЕ‘lkГ¶dj. Nem. Nem nem nem, nem tehetem! Nah, jГіl van, eladhatom, de 1 000 000 000 nyalГіka az ГЎra. ValГіszГ­nЕ±leg annyit Гєgyse tudsz fizetni.");
Database.addText("hu.sorceressHutBuyHatButton", "Vedd meg a sapkГЎt (1 000 000 000 nyalГіka)");
Database.addText("hu.sorceressHutBuyHatSpeech", "Egy billiГі nyalГіka nekeeeeem! De mГЎr nincsen tГ¶bbГ© sapkГЎm... de egy billiГі nyalГіka, vГЎГі! ...teljesen megГ©rte.");
Database.addText("hu.cauldronPreviousPageButton", "ElЕ‘zЕ‘ oldal");
Database.addText("hu.cauldronNextPageButton", "KГ¶vetkezЕ‘ oldal");
Database.addText("hu.cauldronWhatYouWantToPut", "Mit akarsz belerakni az Гјstbe");
Database.addText("hu.cauldronWhatIsIn", "Mi van az Гјstben");
Database.addText("hu.cauldronWhatYouCanDo", "Mit csinГЎlhatsz vele");
Database.addText("hu.castleBigRoomComment", "Egy nagy szoba");
Database.addText("hu.castleARoomComment", "Egy szoba");
Database.addText("hu.castleADarkRoomComment", "Egy sГ¶tГ©t szoba");
Database.addText("hu.castleCastleEntranceComment", "A kastГ©ly bejГЎrata");
Database.addText("hu.castleTowerEntranceComment", "A torony bejГЎrata");
Database.addText("hu.castleNougatMonsterComment", "TГЎmadd meg az ГіriГЎsi nugГЎt szГ¶rnyet");
Database.addText("hu.castleGuardsComment", "TГЎmadd meg az Е‘rГ¶ket");
Database.addText("hu.castleStairsComment", "LГ©pcsЕ‘");
Database.addText("hu.buttonBackToTheCastle", "Vissza a kastГ©lyba");
Database.addText("hu.castleBigRoomHovenSpeechSad", "Гњdv! Г‰n egy nagyon Г¶reg kenyГ©rsГјtЕ‘ vagyok. RГ©gen tonnaszГЎmra kГ©szГ­tettem sГјtemГ©nyeket, de manapsГЎg senki se hasznГЎl engem. TalГЎn... talГЎn te segГ­tenГ©l nekem? Csak hadd vegyek el pГЎr Г©dessГ©get tЕ‘led! Ne aggГіdj, nem fogod megbГЎnni! BГ­zhatsz bennem.");
Database.addText("hu.castleBigRoomHovenNotEnough", "Г“h... nincs nГЎlad elГ©g Г©dessГ©g, nem tehetek semmit. Haszontalan vagyok. Г‰n vagyok a haszontalan kenyГ©rsГјtЕ‘, Г­gy kellene hГ­vnod engem.");
Database.addText("hu.castleBigRoomHovenSpeechMadePainAuChocolat", "JupГ­! KГ¶szГ¶nГ¶m! 100 cukorkГЎt Г©s egy csokolГЎdГ© rudat hasznГЎltam el, Г©s kГ©szГ­tettem neked... egy pain au chocolatot! Ez a kedvenc sГјtim, Г©s remГ©lem neked is tetszeni fog!");
Database.addText("hu.castleBigRoomHovenSpeechHappy", "HГ©! Ha akarod, hogy Гєjabb sГјtemГ©nyt kГ©szГ­tsek, csak szГіlj! SzГ­vesen segГ­tek neked.");
Database.addText("hu.castleBigRoomHovenSpeechHappyNotEnough", "Г“h, nincs nГЎlad elГ©g Г©dessГ©g, sajnos. 100 cukorka Г©s egy csokolГЎdГ© rГєd kellene nekem. Gyere vissza, ha van nГЎlad pГЎr!");
Database.addText("hu.castleBigRoomHovenLetHovenTakeButton", "Hadd vegye el a sГјtЕ‘ azt az Г©dessГ©get amit szeretne");
Database.addText("hu.castleBigRoomHovenThanks", "KГ¶szГ¶nГ¶m, sГјtЕ‘!");
Database.addText("hu.dragonStopTickling", "HГ©, te! KГ©rlek ne csikizz tovГЎbb.");
Database.addText("hu.dragonStopTicklingButton", "Г“, jaj, elnГ©zГ©st, azt hittem, hogy meg kellene tГЎmadni tГ©ged");
Database.addText("hu.dragonTalking", "Г‰n egy sГЎrkГЎny vagyok, Г©s ez az Г©n kastГ©lyom. LГЎttam, hogy sikerГјlt bejutnod, biztosan nagyon bГЎtor vagy... szГ­vesen segГ­tenГ©k olyannak, mint amilyen te vagy. Mit keresel?");
Database.addText("hu.dragonTalkingChallengeButton", "KihГ­vГЎst");
Database.addText("hu.dragonTalkingFameButton", "HГ­rnevet");
Database.addText("hu.dragonTalkingCandiesButton", "CukorkГЎkat");
Database.addText("hu.dragonTalkingChallengeSpeech", "Г“, szГіval kihГ­vГЎst akarsz? Akkor azt hiszem el kellene menned a pokolba, mivel az Г¶rdГ¶grЕ‘l jГіl ismert, hogy nehГ©z legyЕ‘zni Е‘t. Pattanj a hГЎtamra, Г©s elviszlek oda!");
Database.addText("hu.dragonTalkingFameSpeech", "A leggyorsabb mГіdon Гєgy lehetsz hГ­res, hogyha legyЕ‘zГ¶d magГЎt a fejlesztЕ‘t. Tudom, hogy hol lakik Г©s elvihetlek hozzГЎ. De kГ©szГјlj fel, mert nem lesz kГ¶nnyЕ± menet.");
Database.addText("hu.dragonTalkingCandiesSpeech", "A legvГ©gГ©n mindenki csak cukorkГЎt akar, nemde? Azt hiszem az egyik barГЎtom tud segГ­teni neked ebben. ElГ©g kГ¶nnyen fel fogod ismerni Е‘t, mivel csak egy szeme van. Csak szГіlj neki, hogy ismersz engem.");
Database.addText("hu.dragonTalkingChallengeAnswer", "MenjГјnk hГЎt!");
Database.addText("hu.dragonTalkingFameAnswer", "KГ©szen ГЎllok.");
Database.addText("hu.dragonTalkingCandiesAnswer", "Rendben, kГ¶szГ¶nГ¶m!");
Database.addText("hu.buttonBackToCastle", "Vissza a kastГ©lyba");
Database.addText("hu.talkingCandySpeechNoBox", "HГ©! Г‰n egy beszГ©lЕ‘ cukorka vagyok. MГЎr majdnem megnyerted a jГЎtГ©kot. Csak meg kell talГЎlnod a candy box-ot. Valahol a falun kГ­vГјl van egy hГЎzban. Ez az utolsГі lГ©pГ©s!");
Database.addText("hu.talkingCandySpeech1", "HГ©! Г‰n vagyok a beszГ©lЕ‘ cukorka. GratulГЎlok, megnyerted a jГЎtГ©kot! Most kinyitom neked a candy box-ot, ez a jutalmad. TovГЎbbmehetГјnk?");
Database.addText("hu.talkingCandySpeech2", "KГ©sz! Most mГЎr belГ©phetsz. RemГ©lem tetszett a jГЎtГ©k :)");
Database.addText("hu.talkingCandyButton", "Igen!!");
Database.addText("hu.lighthousePuzzleResetButton", "Гљjrakezd");
Database.addText("fr.mapVillageComment", "Le Village");
Database.addText("fr.mapFortressComment", "La forteresse du dГ©sert");
Database.addText("fr.mapATreeComment", "Un arbre");
Database.addText("fr.mapTheDesertComment", "Le dГ©sert");
Database.addText("fr.mapWishingWellComment", "Le puits aux souhaits");
Database.addText("fr.mapLonelyHouseComment", "Une maison solitaire");
Database.addText("fr.mapForestComment", "La forГЄt");
Database.addText("fr.mapCastleEntranceComment", "EntrГ©e du chГўteau");
Database.addText("fr.mapCastleComment", "Le chГўteau");
Database.addText("fr.mapDragonComment", "Le dragon");
Database.addText("fr.candyBoxEatCandiesButton", "Manger tous les bonbons");
Database.addText("fr.candyBoxThrowCandiesButton", "Jeter 10 bonbons par terre");
Database.addText("fr.mapVillageLockedHouseComment", "Une maison verrouillГ©e");
Database.addText("fr.mapVillageAHouseComment", "Une maison");
Database.addText("fr.mapVillageForgeComment", "La forge");
Database.addText("fr.buttonBackToTheMap", "Revenir Г  la carte");
Database.addText("fr.mapSorceressHutComment", "Hutte de la sorciГЁre");
Database.addText("fr.buttonBackToTheVillage", "Revenir au village");
Database.addText("fr.mapATreeIntroductionSpeech", "Bonjour, je suis l'Г‰cureuil. Je peux te fournir des bonbons, et un tas d'autres choses. Je sais Г  quel point tu aimes les bonbons. Mais je me sens seul dans cette forГЄt.");
Database.addText("fr.mapATreeIntroductionButton", "Comment puis-je t'aider ?");
Database.addText("fr.mapATreeFirstQuestion", "Je vais te poser des questions. Si tu rГ©ponds correctement, les plus douces sucreries seront Г  toi ! PremiГЁre question : aimes-tu vraiment les bonbons ? (rГ©pondre en anglais)");
Database.addText("fr.mapATreeSecondQuestion", "C'est bon ! Voici 20 bonbons pour toi. Maintenant complГЁte cette suite de lettres : S, E, I, D, N, A, ?");
Database.addText("fr.mapATreeThirdQuestion", "Candies! Voici 100 bonbons pour toi. Question suivante : combien de bonbons possГЁde la personne la plus bonbon du monde ?");
Database.addText("fr.mapATreeFourthQuestion", "Voici 500 bonbons pour toi ! La prochaine rГ©compense devrait ГЄtre encore plus intГ©ressante... Voici l'Г©nigme : Dans une ancienne forГЄt pousse un trГЁs vieil arbre, sur lequel vivent les animaux les plus intelligents de ce monde. On dit que cet arbre possГЁde 60 racines, 360 branches et 2160 feuilles. Combien de marques peut-on trouver sur son tronc ?");
Database.addText("fr.mapATreeFifthQuestion", "Bravo ! Je parlais de mon arbre, effectivement. Voici 3 sucettes pour toi. Fais-en bon usage ! Prochaine Г©nigme : Г©coute attentivement : Sous la pleine lune, je jette un chapeau jaune dans la mer rouge. Qu'arrive-t-il au chapeau jaune ?");
Database.addText("fr.mapATreeTicTacToeIntro", "Bien rГ©pondu ! Ce n'Г©tait pas trop dur. Voici trois barres de chocolat pour toi ! Pour la prochaine rГ©compense, on va changer un peu les rГЁgles. Tu vas devoir jouer Г  un jeu avec moi ! Es-tu prГЄt ?");
Database.addText("fr.mapATreeTicTacToeIntroButton", "Bien sГ»r que je le suis !");
Database.addText("fr.mapATreeTicTacToeLetsPlay", "Le jeu est Tic-Tac-Toe. On joue sur un plateau de 3 par 3. Tu utiliseras le signe X et moi le signe O. On place nos signes alternativement, et le but est d'en aligner trois. Je te laisse commencer !");
Database.addText("fr.mapATreeTicTacToeNobodyWins", "Le plateau est entiГЁrement remplit et on a tous les deux Г©chouГ© Г  aligner trois signes : personne ne gagne ! Tu veux rejouer ?");
Database.addText("fr.mapATreeTicTacToeYouLose", "J'en ai alignГ© trois ! J'ai gagnГ©. Tu veux rejouer ?");
Database.addText("fr.mapATreeTicTacToeTryAgainButton", "Oui je veux !");
Database.addText("fr.mapATreeTicTacToeYouWin", "Wow, c'est un coup innatendu. Mais tu en as alignГ© trois, je ne peux rien dire. Tu as gagnГ© ! Prends cette clГ© ! Elle ouvre l'une des maisons du village sous la forГЄt.");
Database.addText("fr.mapATreeTicTacToeAnymoreSweet", "Merci, Г©cureuil ! Un autre dГ©fi ?");
Database.addText("fr.mapATreeNoMoreChallenge", "Malheureusement non, je n'ai plus de dГ©fi pour toi... Jouer avec toi Г©tait vraiment amusant, je t'en remercie !");
Database.addText("fr.buttonExitQuestKeeping", "Quitter la quГЄte (et gardez ce que vous avez trouvГ©)");
Database.addText("fr.buttonExitQuestNoKeeping", "Quitter la quГЄte (vous ne garderez pas ce que vous avez trouvГ©)");
Database.addText("fr.buttonExitQuestNoKeepingBecauseLose", "Quitter la quГЄte (vous ne garderez pas ce que vous avez touvГ© car vous avez Г©couchГ©)");
Database.addText("fr.mapVillageForgeIntroductionSpeech", "Bonjour ! Je suis un forgeron. Je peux vous vendre diverses armes et piГЁces d'Г©quipement.");
Database.addText("fr.mapVillageForgeIntroductionSpeechNoMoreToSell", "Bonjour ! Je suis un forgeron. Je n'ai plus rien Г  vous vendre. Revenez plus tard, peut-ГЄtre ?");
Database.addText("fr.mapVillageFifthHouseNoWeaponSpeech", "Bonjour. Ma cave est pleine de rats, j'ai besoin de quelqu'un pour m'en dГ©barrasser... si seulement quelqu'un avec une arme pouvait m'aider...");
Database.addText("fr.mapVillageFifthHouseWeaponSpeech", "Eh, vous ! Je vois que vous portez une arme ! Si vous tuez les rats qui infestent ma cave, je vous rГ©compenserai !");
Database.addText("fr.mapVillageFifthHouseAgree", "C'est parti !");
Database.addText("fr.mapVillageFifthHouseCellarDone", "Merci de m'en avoir dГ©barrassГ© ! Voici quelque chose de trГЁs prГ©cieux en rГ©compense : une carte du monde. Je pense que vous en aurez plus l'usage que moi.");
Database.addText("fr.mapVillageTheShopComment", "Le magasin");
Database.addText("fr.mapBridgeComment", "Le pont");
Database.addText("fr.mapFarmComment", "La ferme Г  sucettes");
Database.addText("fr.mapCaveEntranceComment", "L'entrГ©e de la grotte");
Database.addText("fr.mapLighthouseComment", "Le phare");
Database.addText("fr.mapPierComment", "La jetГ©e");
Database.addText("fr.mapTheHoleComment", "Le Trou");
Database.addText("fr.candyBoxRequestStatusBarUnlocked", "Demander une nouvelle fonctionnalitГ© au dГ©veloppeur (30 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedCfg", "En demander une autre (5 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedSave", "Demander encore (5 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedHealthBar", "Demander quelque chose de plus intГ©ressant (5 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedMap", "DerniГЁre demande ! Celle-lГ  a intГ©rГЄt de valoir le coup. (10 bonbons)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedComment", "Vous avez dГ©bloquГ© une barre d'Г©tat ! (en haut)");
Database.addText("fr.candyBoxRequestStatusBarUnlockedCfgComment1", "Vous avez maintenant accГЁs Г  un onglet de configuration.");
Database.addText("fr.candyBoxRequestStatusBarUnlockedCfgComment2", "Vous pouvez changer la langue, si vous le voulez.");
Database.addText("fr.candyBoxRequestStatusBarUnlockedSaveComment", "Un onglet de sauvegarde sauvage apparait !");
Database.addText("fr.candyBoxRequestStatusBarUnlockedHealthBarComment", "Voici 100 points de vie pour vous. Ils vont vous ГЄtre utiles.");
Database.addText("fr.cfgChooseLanguage", "Choisissez la langue :");
Database.addText("fr.cfgInvertColors", "Inverser les couleurs ?");
Database.addText("fr.gridItemMainMapName", "La Carte");
Database.addText("fr.gridItemMainMapDescription", "Carte du monde");
Database.addText("fr.gridItemPogoStickName", "BГўton sauteur");
Database.addText("fr.gridItemPogoStickDescription", "Cet objet vous permet de sauter pendant les quГЄtes !");
Database.addText("fr.gridItemTimeRingName", "Un anneau temporel");
Database.addText("fr.gridItemTimeRingDescription", "Cet objet vous donne une nouvelle capacitГ© pendant les quГЄtes : vous pouvez ralentir le temps. Si les choses vont trop vite pour vous, utilisez votre anneau temporel !");
Database.addText("fr.gridItemThirdHouseKeyName", "La clГ© de la troisiГЁme maison");
Database.addText("fr.gridItemThirdHouseKeyDescription", "Cette clГ© vous permet d'entrer dans la troisiГЁme maison du village");
Database.addText("fr.gridItemFeatherName", "Une plume d'oiseau du dГ©sert");
Database.addText("fr.gridItemFeatherDescription", "Cette plume magique vous permet de sauter plus haut quand vous utilisez votre bГўton sauteur !");
Database.addText("fr.gridItemFeatherDescriptionNoPogoStick", "Pour une raison inconnue, vous sentez que cette plume pourrait ГЄtre utile si vous aviez un bГўton sauteur...");
Database.addText("fr.gridItemSpongeName", "Une Г©ponge magique");
Database.addText("fr.gridItemSpongeDescription", "Cette Г©ponge magique vous permet de vous presser vous-mГЄme comme une Г©ponge, rГ©duisant ainsi votre taille.");
Database.addText("fr.gridItemFortressKeyName", "La clГ© de la forteresse du dГ©sert");
Database.addText("fr.gridItemFortressKeyDescription", "Cette clГ© vous permet d'entrer dans la trГЁs ancienne forteresse situГ©e au-dessus du dГ©sert. Qui sait ce que vous pourriez y trouver ?");
Database.addText("fr.gridItemHeartPendantName", "Un pendentif en forme de coeur");
Database.addText("fr.gridItemHeartPendantDescription", "Ce pendentif va augmenter vos points de vie tant que vous le garderez autour du cou.");
Database.addText("fr.gridItemHeartPlugName", "Module cardiaque");
Database.addText("fr.gridItemHeartPlugDescription", "Ce module cardiaque, fabriquГ© Г  l'aide de fer, de pattes d'araignГ©e et d'une \"liqueur cardiaque\" spГ©ciale scellГ©e en son centre, va augmenter votre nombre de points de vie de 20 pourcents !");
Database.addText("fr.gridItemBeginnersGrimoireName", "Le grimoire des dГ©butants");
Database.addText("fr.gridItemBeginnersGrimoireDescription", "Ce grimoire vous fournit trois sorts, assez faciles Г  lancer. Il est vraiment fait pour les dГ©butants. Vous serez capables d'utiliser le sort de pluie d'acide (une importante quantitГ© de gouttes d'acide tombera sur vos ennemis), le sort de boule de feu (une boule magique gГ©ante faite de feu volera en direction de vos ennemis) et le sort de tГ©lГ©portation (qui vous tГ©lГ©portera en un endroit imprГ©visible).");
Database.addText("fr.gridItemAdvancedGrimoireName", "Le grimoire avancГ©");
Database.addText("fr.gridItemAdvancedGrimoireDescription", "Ce grimoire avancГ© vous fournit deux sorts : le sort d'effacement de la magie et le sort de bouclier d'Г©pines. Le premier effacera toute la magie d'une quГЄte Г  un moment donnГ©, y compris les sorts que vous avez lancГ© et la magie de vos ennemis. Le second crГ©era autour de vous un bouclier d'Г©pines flottantes qui infligeront des dommages Г  vos ennemis au contact.");
Database.addText("fr.gridItemBlackMagicGrimoireName", "Le grimoire de magie noire");
Database.addText("fr.gridItemBlackMagicGrimoireDescription", "Vous avez trouvГ© ce grimoire dans une cave, il Г©tait trГЁs difficile d'accГЁs, et ce n'Г©tait pas pour rien. Il vous fournit deux puissants sorts de magie noire. Le premier crГ©era devant vous un mur gГ©ant fait de briques d'obsidienne, ce qui peut ГЄtre utile pour ralentir vos ennemis. Le second invoquera une horde de dГ©mons attaquant tout le monde dans la quГЄte, y compris vous. Faites attention avec celui-ci.");
Database.addText("fr.gridItemUnicornHornName", "Une corne de licorne");
Database.addText("fr.gridItemUnicornHornDescription", "Cette corne magique appartenait Г  une licorne. Ses puissants pouvoirs de guГ©rison vont beaucoup vous aider. On vous a dit que la licorne s'appelait Charlie.");
Database.addText("fr.gridItemXinopherydonClawName", "Une griffe de xinopherydon");
Database.addText("fr.gridItemXinopherydonClawDescription", "Cette griffe appartenait Г  un xinopherydon, un ancien animal Г  deux tГЄtes que tout le monde croit Г©teint. Elle doublera les dommages de l'arme que vous utilisez.");
Database.addText("fr.gridItemPitchforkName", "Une fourche");
Database.addText("fr.gridItemPitchforkDescription", "Cette fourche spГ©ciale vous permet d'ameublir la terre sans avoir Г  le retourner, prГ©servant ainsi les Г©cosystГЁmes du sol. Cela triplera la production de votre ferme Г  sucettes.");
Database.addText("fr.gridItemShellPowderName", "Poudre de coquillage");
Database.addText("fr.gridItemShellPowderDescription", "La poudre de coquillage est souvent utilisГ©e par les paysans pour amГ©liorer la vitesse de pousse de leurs sucettes. Cette poudre multipliera votre production de sucettes par trois !");
Database.addText("fr.gridItemPName", "La pierre P");
Database.addText("fr.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DВ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSВ°-J (`  /R`yM}  T$`` В°+-|U(\\OL&Y_)T|");
Database.addText("fr.gridItemLName", "La pierre L");
Database.addText("fr.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OВ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    В°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#В° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("fr.gridItemAName", "La pierre A");
Database.addText("fr.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITВ°#{  Oa$ GM T{Q \"S A-\\ F KmВ°& C #В° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("fr.gridItemYName", "La pierre Y");
Database.addText("fr.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  В°-  AX Y ` В° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_В°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EВ° I &L- /    K");
Database.addText("fr.gridItemRedSharkFinName", "Un aileron de requin magique rouge");
Database.addText("fr.gridItemRedSharkFinDescription", "Cet aileron magique va grandement augmenter les dГ©gГўts de votre sort de boule de feu. Cette boule de feu devient enfin utile.");
Database.addText("fr.gridItemGreenSharkFinName", "Un aileron de requin magique vert");
Database.addText("fr.gridItemGreenSharkFinDescription", "Cet aileron magique apportera le pouvoir de la nature Г  votre ferme Г  sucettes! Votre production sera multipliГ©e par 5.");
Database.addText("fr.gridItemPurpleSharkFinName", "Un aileron de requin magique violet");
Database.addText("fr.gridItemPurpleSharkFinDescription", "Cet aileron magique vous apportera un nouveau sort de magie noire. Vous ne pouvez l'utiliser qu'une fois par quГЄte. Faites attention avec celui-lГ  !");
Database.addText("fr.gridItemTalkingCandyName", "Un bonbon qui parle");
Database.addText("fr.gridItemTalkingCandyDescription", "Ce bonbon qui parle est apparu aprГЁs que vous ayez placГ© les quatre pierres en haut de la tour du chГўteau. Il pourrait vous ГЄtre utile pour ouvrir la candy box...");
Database.addText("fr.inventorySpecialNothingEqItem", "Rien");
Database.addText("fr.eqItemWeaponWoodenSwordName", "Г‰pГ©e en bois");
Database.addText("fr.eqItemWeaponWoodenSwordDescription", "Une simple Г©pГ©e en bois");
Database.addText("fr.eqItemWeaponIronAxeName", "Hache en fer");
Database.addText("fr.eqItemWeaponIronAxeDescription", "Une simple hache en fer. Bien aiguisГ©e. Plus puissante que l'Г©pГ©e en bois.");
Database.addText("fr.eqItemWeaponPolishedSilverSwordName", "Г‰pГ©e en argent travaillГ©e");
Database.addText("fr.eqItemWeaponPolishedSilverSwordDescription", "Une Г©pГ©e puissante, recouverte de piques.");
Database.addText("fr.eqItemWeaponTrollBludgeonName", "Le gourdin du troll");
Database.addText("fr.eqItemWeaponTrollBludgeonDescription", "Vous avez pris ce gourdin au troll gardant le pont. Il est lent, mais Г©crase vos ennemis assez efficacement.");
Database.addText("fr.eqItemWeaponTribalSpearName", "Une lance tribale");
Database.addText("fr.eqItemWeaponTribalSpearDescription", "Vous avez trouvГ© cette lance tribale sur le corps d'un guerrier tribal perdu dans un gros trou dans le sol. Elle est un peu difficile Г  manipuler au dГ©but, mais une fois qu'on s'est habituГ©, c'est une bonne arme.");
Database.addText("fr.eqItemWeaponSummoningTribalSpearName", "Une lance tribale d'invocation");
Database.addText("fr.eqItemWeaponSummoningTribalSpearDescription", "Cette lance tribale magique, en plus d'ГЄtre un peu plus puissante que la lance tribale normale, va invoquer frГ©quemment des guerriers tribals pour vous aider pendant pendant vos quГЄtes.");
Database.addText("fr.eqItemWeaponMonkeyWizardStaffName", "Le bГўton du singe-magicien");
Database.addText("fr.eqItemWeaponMonkeyWizardStaffDescription", "Ce bГўton appartenait au singe-magicien nu que vous avez trouvГ© dans la grotte. Il va rГ©guliГЁrement lancer des sorts de lui-mГЄme en direction de vos ennemis.");
Database.addText("fr.eqItemWeaponEnchantedMonkeyWizardStaffName", "Le bГўton du singe-magicien (enchantГ©)");
Database.addText("fr.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Ce bГўton est plus rapide que la version non enchantГ©e, et va Г©galement lancer beaucoup plus de sorts.");
Database.addText("fr.eqItemWeaponGiantSpoonName", "Une cuillГЁre gГ©ante");
Database.addText("fr.eqItemWeaponScytheName", "Une faux");
Database.addText("fr.eqItemWeaponScytheDescription", "On dit que cette faux appartenait Г  la mort elle-mГЄme. Elle est extrГЄmement rapide.");
Database.addText("fr.eqItemWeaponGiantSpoonDescription", "Cette cuillГЁre gГ©ante Г©tait Г  l'intГ©rieure d'une thГ©iГЁre gГ©ante dans la forteresse du dГ©sert. Vous ne savez pas si quiconque la dГ©jГ  utilisГ©e en tant que cuillГЁre, mais si c'est le cas, Г§a devait quelqu'un d'Г©norme. Vous ne voulez probablement pas le rencontrer.");
Database.addText("fr.eqItemWeaponGiantSpoonOfDoomName", "La CuillГЁre gГ©ante du Destin");
Database.addText("fr.eqItemWeaponGiantSpoonOfDoomDescription", "Cette cuillГЁre gГ©ante est encore plus puissante que la cuillГЁre gГ©ante normale que vous pourriez trouver, par exemple, dans une thГ©iГЁre. Elle est assez lente, cependant.");
Database.addText("fr.eqItemHatMerchantHatName", "Le chapeau du marchand");
Database.addText("fr.eqItemHatMerchantHatDescription", "Ce chapeau vous a Г©tГ© vendu par le marchand de bonbons. Le marchand de bonbons adore les bonbons. Ce chapeau multipliera par 7 les bonbons que vous trouvez pendant les quГЄtes !");
Database.addText("fr.eqItemHatSorceressHatName", "Le chapeau de la sorciГЁre");
Database.addText("fr.eqItemHatSorceressHatDescription", "Ce chapeau vous a Г©tГ© vendu par la sorciГЁre. Il amГ©liorera les effets de vos sorts et potions.");
Database.addText("fr.eqItemHatOctopusKingCrownName", "La couronne du Roi Poulpe");
Database.addText("fr.eqItemHatOctopusKingCrownDescription", "Quand vous portez cette couronne, vous vous sentez beaucoup plus confiant. Elle n'apporte aucun avantage en quГЄte, mais la confiance en soi c'est important !");
Database.addText("fr.eqItemHatOctopusKingCrownWithJaspersName", "La couronne du Roi Poulpe surmontГ©e de jaspes");
Database.addText("fr.eqItemHatOctopusKingCrownWithJaspersDescription", "Cette couronne enchantГ©e est faite d'or et de jaspes rouges. Pendant les quГЄtes, elle va lancer frГ©quemment de puissantes boules de feu magiques autour de vous. Et en plus, elle brille !");
Database.addText("fr.eqItemHatOctopusKingCrownWithObsidianName", "La couronne du Roi Poulpe surmontГ©e d'obsidienne");
Database.addText("fr.eqItemHatOctopusKingCrownWithObsidianDescription", "Cette couronne enchantГ©e est faite d'or et d'obsidienne. Elle est superbe. Pendant les quГЄtes, elle invoquera de temps en temps un Roi Poulpe combattant Г  vos cГґtГ©s. Quel alliГ© tentaculaire !");
Database.addText("fr.eqItemGlovesLeatherGlovesName", "Gants en cuir");
Database.addText("fr.eqItemGlovesLeatherGlovesDescription", "Ces gants ne font tout simplement rien. Mais ils sont doux et agrГ©ables Г  porter, au moins !");
Database.addText("fr.eqItemGlovesRedEnchantedGlovesName", "Gants enchantГ©s rouges");
Database.addText("fr.eqItemGlovesRedEnchantedGlovesDescription", "Ces gants enchantГ©s Г©mettent une faible lueur rouge quand il fait sombre autour de vous. Pendant les quГЄtes, ils vont alГ©atoirement lancer de petites boules de feu en direction de vos enemis, ce qui peut clairement ГЄtre utile.");
Database.addText("fr.eqItemGlovesPinkEnchantedGlovesName", "Gants enchantГ©s roses");
Database.addText("fr.eqItemGlovesPinkEnchantedGlovesDescription", "Ces gants enchantГ©s laissent une trace rose sur tout ce que vous touchez. Pendant les quГЄtes, ils vous soigneront continuellement.");
Database.addText("fr.eqItemBootsRocketBootsName", "Bottes roquettes");
Database.addText("fr.eqItemBootsRocketBootsDescription", "Ces bottes roquettes gГ©niales vous permettent de sauter en plein air, comme si vous voliez !");
Database.addText("fr.eqItemBootsLeatherBootsName", "Bottes en cuir");
Database.addText("fr.eqItemBootsLeatherBootsDescription", "De simples bottes en cuir. Rien de spГ©cial.");
Database.addText("fr.eqItemBootsBootsOfIntrospectionName", "Les bottes d'introspection");
Database.addText("fr.eqItemBootsBootsOfIntrospectionDescription", "Prenez le temps de respirer et de vous calmer. Si vous portez ces bottes, vous ne bougerez plus tant que vous toucherez le sol.");
Database.addText("fr.eqItemBodyArmoursLightweightBodyArmourName", "Une armure lГ©gГЁre");
Database.addText("fr.eqItemBodyArmoursLightweightBodyArmourDescription", "Cette armure vous offrira une faible protection. Vous serez lГ©gГЁrement plus rГ©sistant face aux attaques de vos ennemis.");
Database.addText("fr.eqItemBodyArmoursKnightBodyArmourName", "Une armure de chevalier");
Database.addText("fr.eqItemBodyArmoursKnightBodyArmourDescription", "Cette solide armure vous protГ©gera. Vous serez plus rГ©sistant face aux attaques de vos ennemis.");
Database.addText("fr.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Une armure de chevalier enchantГ©e");
Database.addText("fr.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Cette armure est trГЁs spГ©ciale. Vous serez BEAUCOUP plus rГ©sistant face aux attaques de vos ennemis, mais les dommages de l'arme que vous utilisez seront divisГ©s par deux.");
Database.addText("fr.mapVillageForgeBuyWoodenSwordButton", "Acheter une Г©pГ©e en bois (150 bonbons)");
Database.addText("fr.mapVillageForgeBuyWoodenSwordSpeech", "Merci pour l'achat ! Cette Г©pГ©e en bois est peu puissante, mais c'est un dГ©but.");
Database.addText("fr.mapVillageForgeBuyIronAxeButton", "Acheter une hache en fer (400 bonbons)");
Database.addText("fr.mapVillageForgeBuyIronAxeSpeech", "J'espГЁre que vous aimerez cette hache en argent, je viens juste de l'aiguiser pour vous !");
Database.addText("fr.mapVillageForgeBuyPolishedSilverSwordButton", "Acheter une Г©pГ©e en argent travaillГ©e (2 000 bonbons)");
Database.addText("fr.mapVillageForgeBuyPolishedSilverSwordSpeech", "Г‡a m'a pris beaucoup de temps pour crГ©er cette Г©pГ©e. Je vous assure qu'elle vaut son prix.");
Database.addText("fr.mapVillageForgeBuyLightweightBodyArmourButton", "Acheter une armure lГ©gГЁre (15 000 bonbons)");
Database.addText("fr.mapVillageForgeBuyLightweightBodyArmourSpeech", "Cette armure vous apportera une protection contre vos ennemis.");
Database.addText("fr.mapVillageForgeBuyScytheButton", "Acheter une faux (5 000 000 bonbons)");
Database.addText("fr.mapVillageForgeBuyScytheSpeech", "Cela m'a demandГ© plusieurs mois pour rГ©aliser cette faux. C'est une vraie oeuvre d'art. C'est probablement l'arme la plus rapide que vous serez jamais capable d'utiliser. Bonne chance !");
Database.addText("fr.wishingWellThrowFirstCandyButton", "Jeter un bonbon dans le puits");
Database.addText("fr.wishingWellCandyIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en Г©change de sucreries ! Quand tu jetteras des bonbons dans moi, je soignerai tes blessures.");
Database.addText("fr.wishingWellThrewCandiesSpeech", "Tes blessures sont soignГ©es !");
Database.addText("fr.wishingWellNoWoundSpeech", "Tu n'as pas de blessure Г  soigner !");
Database.addText("fr.wishingWellThrowFirstLollipopButton", "Jeter une sucette dans le puits");
Database.addText("fr.wishingWellLollipopIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en Г©change de sucreries ! Quand tu jetteras des sucettes dans moi, je les convertirai en bonbons.");
Database.addText("fr.wishingWellThrewLollipopsSpeech", "Tes sucettes sont converties en bonbons ! Deux sucettes pour un bonbon.");
Database.addText("fr.wishingWellThrowChocolateBarButton", "Jeter une barre de chocolat dans le puits");
Database.addText("fr.wishingWellChocolateBarIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en Г©change de sucreries ! J'adore les barres de chocolat. Je les adore vraiment. Pour chaque barre de chocolat que tu jettera en moi, y compris celle-ci, un enchantement magique te sera accordГ©.");
Database.addText("fr.wishingWellThrewChocolateBarSpeech", "Quel objet souhaites-tu enchanter ?");
Database.addText("fr.wishingWellThrowPainAuChocolatButton", "Jeter un pain au chocolat dans le puits");
Database.addText("fr.wishingWellPainAuChocolatIntroductionSpeech", "Salut, voyageur ! Je suis le puits aux souhaits. J'exaucerai tes voeux en Г©change de sucreries ! Quand tu jetteras un pain en chocolat dans moi, tu seras dotГ© d'un don trГЁs spГ©cial. Choisis sagement.");
Database.addText("fr.wishingWellThrewPainAuChocolatSpeech", "Merci pour la pain au chocolat ! Tu peux maintenant choisir ton don.");
Database.addText("fr.wishingWellChooseGift", "Choisis ton don !");
Database.addText("fr.wishingWellChooseGiftButton", "Choisir");
Database.addText("fr.wishingWellGiftDoneSpeech", "C'est fait ! Tu as maintenant un nouveau don. Il apparaitra dans le panneau de statistiques de ton inventaire.");
Database.addText("fr.wishingWellNoPossibleEnchantment", "Pas d'enchantement possible");
Database.addText("fr.wishingWellChooseEnchantment", "Choisissez l'enchantement");
Database.addText("fr.wishingWellEnchantButton", "Enchanter");
Database.addText("fr.wishingWellEnchantmentDoneSpeech", "Et voilГ  ! Ton objet est enchantГ©.");
Database.addText("fr.pierLighthouseButton", "Aller au phare par bateau");
Database.addText("fr.pierTheSeaButton", "Sauter dans la mer");
Database.addText("fr.lonelyHouseOpenBox", "Ouvrir la boГ®te");
Database.addText("fr.lonelyHouseShakeBox", "Secouer la boГ®te");
Database.addText("fr.lonelyHouseBreakLock", "Casser le verrou");
Database.addText("fr.lonelyHouseKickBox", "Donner un coup de pied dans la boГ®te");
Database.addText("fr.lonelyHouseAskTheBoxToOpenItself", "Demander Г  la boГ®te de s'ouvrir d'elle-mГЄme");
Database.addText("fr.lonelyHouseLureTheBoxWithACandy", "AppГўter la boГ®te avec un bonbon");
Database.addText("fr.lonelyHouseTakeTheBox", "Prendre la boГ®te avec vous, il faut probablement une clГ© pour l'ouvrir de toute faГ§on");
Database.addText("fr.lonelyHouseOpenBoxResult", "La boГ®te est verouillГ©e");
Database.addText("fr.lonelyHouseShakeBoxResult", "Rien ne se passe");
Database.addText("fr.lonelyHouseBreakLockResult", "Le verrou rГ©siste");
Database.addText("fr.lonelyHouseKickBoxResult", "Votre pied vous fait un peu mal, mais rien ne se passe");
Database.addText("fr.lonelyHouseAskTheBoxToOpenItselfResult", "...vous parlez Г  une boГ®te, vous savez ?");
Database.addText("fr.lonelyHouseLureTheBoxWithACandyResult", "La boГ®te n'a pas l'air d'y prГЄter attention");
Database.addText("fr.lonelyHouseTakeTheBoxResult", "Il y a probablement quelque chose d'intГ©ressant dans cette candy box.");
Database.addText("fr.lollipopFarmConstructMill", "Construire un moulin (10 000 sucettes)");
Database.addText("fr.lollipopFarmFeedMill", "Nourrir le moulin");
Database.addText("fr.lollipopFarmCurrentCandiesProduction", "Production actuelle de bonbons");
Database.addText("fr.lollipopFarmDigPond", "Creuser un bassin (100 000 sucettes)");
Database.addText("fr.lollipopFarmBuyLolligator", "Acheter un lolligator (1200 bonbons)");
Database.addText("fr.lollipopFarmLolligatorsConversionText", "Conversion bonbons -> sucettes activГ©e");
Database.addText("fr.lighthouseAskButton", "Demander");
Database.addText("fr.lighthouseQuestionWho", "Qui ГЄtes-vous ?");
Database.addText("fr.lighthouseQuestionWhoSpeech", "Je suis un trГЁs vieux cyclope.");
Database.addText("fr.lighthouseQuestionWhat", "Que faites-vous ici ?");
Database.addText("fr.lighthouseQuestionWhatSpeech", "Je vis ici toute la journГ©e, attendant l'arrivГ©e d'un bateau. Cela fait trГЁs longtemps que je n'en ai pas vu, mais je dois rester ici, Г  fixer la mer, car un bateau pourrait arriver.");
Database.addText("fr.lighthouseQuestionWhyEatCandies", "Pourquoi est-ce que je devrais manger des bonbons ?");
Database.addText("fr.lighthouseQuestionWhyEatCandiesSpeech", "Parce que c'est bon pour la santГ© !");
Database.addText("fr.lighthouseQuestionCandyBox", "Qu'est-ce qu'une candy box ?");
Database.addText("fr.lighthouseQuestionCandyBoxSpeech", "C'est une trГЁs vieille boГ®te qu'on dit contenir tous les bonbons du monde. D'aprГЁs les lГ©gendes, quiconque arrivera Г  l'ouvrir possГЁderait tellement de bonbons que tout serait possible.");
Database.addText("fr.lighthouseQuestionDragon", "Le dragon m'a dit de venir ici parce que je veux des bonbons.");
Database.addText("fr.lighthouseQuestionDragonSpeech", "Oh, je vois... Eh bien, je ne peux peux pas t'en donner directement, mais je peux te donner quelque chose d'indispensable pour qu'au final tu aies BEAUCOUP de bonbons. Je dois juste te tester auparavant. Parce que ce que j'ai ne peut ГЄtre donnГ© Г  n'importe qui. RГ©sous ce puzzle et ce sera Г  toi.");
Database.addText("fr.lighthouseFoundStone", "Bravo! Tu as passГ© le test et trouvГ© la pierre. Elle est trГЁs prГ©cieuse, mais n'est utile que si tu as trois autres pierres du mГЄme genre. Bonne chance !");
Database.addText("fr.lighthouseFoundStoneAgain", "Bravo, tu as encore rГ©ussi le puzzle. Tu as l'air d'aimer Г§a.");
Database.addText("fr.saveLocalSaveTitle", "Sauvegarde par navigateur");
Database.addText("fr.saveLocalSaveWhy", "Choisissez la sauvegarde locale si vous voulez continuer de jouer sur cet appareil et ce navigateur.");
Database.addText("fr.saveLocalSaveWarning0", "Votre navigateur ne semble pas supporter le HTML5.");
Database.addText("fr.saveLocalSaveWarning1", "Vous devez mettre Г  jour votre navigateur pour pouvoir sauvegarder localement.");
Database.addText("fr.saveLocalSaveChooseSlot", "Choisissez un emplacement de sauvegarde :");
Database.addText("fr.saveLocalSaveAutosaveEnabled", "Sauvegarde auto activГ©e");
Database.addText("fr.saveLocalSaveChooseWhatToDo", "Choisissez que faire :");
Database.addText("fr.saveLocalSaveSaveButton", "Sauvegarder");
Database.addText("fr.saveLocalSaveAutosaveButton", "Sauvegarder toutes les 10 minutes");
Database.addText("fr.saveLocalSaveDisableAutosaveButton", "DГ©sactiver la sauvegarde auto");
Database.addText("fr.saveFileSaveTitle", "Sauvegarde sous forme de texte");
Database.addText("fr.saveFileSaveWhy0", "Choisissez la sauvegarde sous forme de texte si :");
Database.addText("fr.saveFileSaveWhy1", "Vous voulez continuer de jouer sur un autre appareil ou navigateur");
Database.addText("fr.saveFileSaveWhy2", "Vous voulez partager votre sauvegarde avec quelqu'un d'autre");
Database.addText("fr.saveFileSaveWhy3", "Pour une raison quelconque vous voulez vider le cache de votre navigateur");
Database.addText("fr.saveFileSaveWhy4", "(ce qui effacerait vos sauvegardes locales)");
Database.addText("fr.saveFileSaveButton", "Obtenir la partie actuelle sous forme de texte");
Database.addText("fr.saveFileSaveWarning", "Maintenant copiez ce texte quelque part ! (dans un fichier, par exemple)");
Database.addText("fr.saveLocalLoadTitle", "Chargement par navigateur");
Database.addText("fr.saveLocalLoadYouCan", "Vous pouvez charger une sauvegarde locale en utilisant les liens suivants :");
Database.addText("fr.saveLocalLoadThanksTo", "GrГўce Г  la magie du HTML5, vous devriez pouvoir utiliser ces liens mГЄme hors-ligne.");
Database.addText("fr.saveFileLoadTitle", "Chargement sous forme de texte");
Database.addText("fr.saveFileLoadPaste", "Collez votre sauvegarde ci-dessous, puis cliquez sur le bouton \"Load\"");
Database.addText("fr.saveFileLoadButton", "Charger");
Database.addText("fr.mountainsText0", "Vous avez repГ©rГ© un truc dans les montagnes !");
Database.addText("fr.mountainsText1", "Г‡a a l'air intГ©ressant. Peut-ГЄtre que Г§a pourrait ГЄtre utile.");
Database.addText("fr.mountainsTextButton", "Escalader les montagnes pour rГ©cupГ©rer le truc");
Database.addText("fr.mountainsTextAfter", "Vous avez trouvГ© un bГўton sauteur ! Il a Г©tГ© ajoutГ© Г  votre inventaire.");
Database.addText("fr.secondHouseIntroSpeech", "Bonjour, je suis le marchand de bonbons. Je ferais n'importe quoi contre des bonbons. De quoi avez-vous besoin ?");
Database.addText("fr.secondHouseLollipop1Speech", "C'est une sucette goГ»t citron. Ma prГ©fГ©rГ©e ! Elle coГ»te 60 bonbons, mais Г§a vaut le coup.");
Database.addText("fr.secondHouseLollipop2Speech", "Celle-ci est une sucette goГ»t fraise. Г‡a a bon goГ»t. J'aime bien sa couleur rouge. Seulement 60 bonbons !");
Database.addText("fr.secondHouseLollipop3Speech", "C'est une sucette goГ»t citrouille. Je parie que vous n'en avez jamais goГ»tГ© ! 60 bonbons et elle est Г  vous.");
Database.addText("fr.secondHouseLollipopButtonText", "Acheter cette sucette (60 bonbons)");
Database.addText("fr.secondHouseMerchantHatSpeech", "Je pourrais vous vendre mon chapeau, mais il est trГЁs prГ©cieux, vous savez... Vous allez devoir me donner beaucoup de bonbons en Г©change. Disons un million de bonbons. Г‡a parait honГЄte, non ?");
Database.addText("fr.secondHouseMerchantHatButtonText", "Acheter le chapeau du marchand (1 000 000 de bonbons)");
Database.addText("fr.secondHouseTimeRingSpeech", "C'est un anneau temporel. Il est un peu magique. Il vous permet de ralentir le temps en cas de problГЁme.");
Database.addText("fr.secondHouseTimeRingButtonText", "Acheter l'anneau temporel (500 bonbons)");
Database.addText("fr.secondHouseLeatherGlovesSpeech", "Ces gants en cuir sont fait avec du cuir de chameau, c'est de la bonne qualitГ©. J'en ai beaucoup en stock, c'est pour Г§a qu'ils sont si peu chers : seulement 300 bonbons !");
Database.addText("fr.secondHouseLeatherGlovesButtonText", "Acheter une paire de gants en cuir (300 bonbons)");
Database.addText("fr.secondHouseLeatherBootsButtonText", "Acheter une paire de bottes en cuir (300 bonbons)");
Database.addText("fr.secondHouseLeatherBootsSpeech", "Ces bottes en cuir de haute qualitГ©, faites en cuir de chameau, garderont vos pieds au chaud.");
Database.addText("fr.secondHouseChocolateBarSpeech", "C'est une barre de chocolat. Je ne sais pas Г  quoi Г§a sert, mais il se trouve que c'est assez rare, ce qui explique le prix. 800 bonbons et elle est Г  vous !");
Database.addText("fr.secondHouseChocolateBarButtonText", "Acheter la barre de chocolat (800 bonbons)");
Database.addText("fr.outsideTheHoleButton", "Sauter dans ce gros trou dans le sol");
Database.addText("fr.theCaveExitText0", "Vous avez enfin atteint la sortie de la grotte");
Database.addText("fr.theCaveExitText1", "Vous pouvez voir une grande forГЄt au dehors");
Database.addText("fr.theCaveExitButtonText", "Sortir de la grotte");
Database.addText("fr.theCaveFirstSentenceWentStraight", "Vous ГЄtes allГ© tout droit.");
Database.addText("fr.theCaveFirstSentenceWentLeft", "You avez choisi le chemin de gauche.");
Database.addText("fr.theCaveFirstSentenceWentRight", "Vous avez choisi le chemin de droite.");
Database.addText("fr.theCaveFirstSentenceYouAre", "Vous ГЄtes dans une grotte. Trois chemins s'offrent Г  vous.");
Database.addText("fr.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Vous repГ©rez une chose Г©trange sur le sol en face de vous.");
Database.addText("fr.theCavePattern_ChocolateBarNowSeeChocolateBar", "Vous repГ©rez une barre de chocolat en face de vous.");
Database.addText("fr.theCavePattern_TreasureMapSentence", "Vous voyez des petits cailloux Г©trangement disposГ©s sur le sol.");
Database.addText("fr.theCavePattern_MonkeyWizardSentence", "Vous tombez sur un singe-magicien nu.");
Database.addText("fr.theCavePattern_MonkeyWizardButton", "Le dГ©fier");
Database.addText("fr.theCavePattern_OctopusKingSentence", "Vous tombez sur le Roi Poulpe. Il a l'air mГ©chant.");
Database.addText("fr.theCavePattern_OctopusKingButton", "Le dГ©fier");
Database.addText("fr.fortressInsideText0", "Vous ГЄtes Г  l'intГ©rieur de la forteresse du dГ©sert.");
Database.addText("fr.fortressInsideText1", "Vous pouvez choisir entre trois portes, chacune menant Г  une grande piГЁce avec un trГ©sor Г  la clГ©.");
Database.addText("fr.fortressInsideText2", "Chacune d'elles mГЁne Г  une grande piГЁce avec un trГ©sor Г  la clГ©.");
Database.addText("fr.fortressInsideEnterRoom1", "Entrer dans la premiГЁre piГЁce");
Database.addText("fr.fortressInsideEnterRoom2", "Entrer dans la deuxiГЁme piГЁce");
Database.addText("fr.fortressInsideEnterRoom3", "Entrer dans la troisiГЁme piГЁce");
Database.addText("fr.treasureButtonDig", "Creuser");
Database.addText("fr.treasureButtonYouFound", "Vous avez trouvГ© trois barres de chocolat !");
Database.addText("fr.sorceressHutHello", "Bonjour, je suis la sorciГЁre. Je pourrais vous apprendre une chose ou deux Г  propos de la magie. Je pourrais vous donner des choses intГ©ressantes, ou lancer des sorts pour vous. Mais tout a un prix ! Et ce prix sera des sucettes. Beaucoup de sucettes.");
Database.addText("fr.sorceressHutClickedGrimoire", "C'est un grimoire fait pour les dГ©butants. En l'emportant avec vous pendant les quГЄtes, vous pourrez lancer des sorts simples mais utiles. Vous en avez besoin ! Seulement 5 000 sucettes.");
Database.addText("fr.sorceressHutBuyGrimoireButton", "Acheter ce grimoire (5 000 sucettes)");
Database.addText("fr.sorceressHutBuyGrimoireSpeech", "Merci pour l'achat ! Vous pourrez lancer trois sorts avec ce grimoire. Bonne chance !");
Database.addText("fr.sorceressHutClickedGrimoire2", "C'est un grimoire avancГ©. En l'emportant avec vous pendant les quГЄtes, vous pourrez lancer deux sorts avancГ©s. Je l'ai rГ©digГ© moi-mГЄme, ce qui n'Г©tait pas simple. 20 000 sucettes est un prix honnГЄte.");
Database.addText("fr.sorceressHutBuyGrimoire2Button", "Acheter ce grimoire (20 000 sucettes)");
Database.addText("fr.sorceressHutBuyGrimoire2Speech", "Merci de l'achat ! Vous pourrez lancer deux sorts avec ce grimoire. Utilisez-les sagement !");
Database.addText("fr.sorceressHutClickedCauldron", "C'est mon chaudron. Il me permet de prГ©parer des potions magiques. Je pourrais vous le vendre, mais il est trГЁs prГ©cieux... il vous en coГ»tera 100 000 sucettes.");
Database.addText("fr.sorceressHutBuyCauldronButton", "Acheter le chaudron (100 000 sucettes)");
Database.addText("fr.sorceressHutBuyCauldronSpeech", "Merci beaucoup ! 100 000 sucettes pour moi ! Je vous ai aussi donnГ© un manuel de prГ©paration de potions. Il va vous ГЄtre utile.");
Database.addText("fr.sorceressHutClickedHat", "J'ai un beau chapeau, en effet ! Mais je ne peux vraiment pas vous le vendre. Il est bieeeen trop prГ©cieux. Vraiment, je ne peux pas. N'insistez pas. Non. Non non non je ne devrais pas faire Г§a. Oh, bon, je l'Г©changerai, mais contre 1 000 000 000 de sucettes. Vous ne serez probablement pas capable de payer Г§a de toute faГ§on.");
Database.addText("fr.sorceressHutBuyHatButton", "Acheter le chapeau (1 000 000 000 de sucettes)");
Database.addText("fr.sorceressHutBuyHatSpeech", "Une milliard de sucettes pour moiiii ! Mais je n'ai plu de chapeau... mais un milliard de sucettes, woah ! .. Г‡a valait le coup.");
Database.addText("fr.cauldronPreviousPageButton", "Page prГ©cГ©dente");
Database.addText("fr.cauldronNextPageButton", "Page suivante");
Database.addText("fr.cauldronWhatYouWantToPut", "Ce que vous voulez mettre dans le chaudron");
Database.addText("fr.cauldronWhatIsIn", "Ce qui est dans le chaudron");
Database.addText("fr.cauldronWhatYouCanDo", "Ce que vous pouvez faire avec");
Database.addText("fr.castleBigRoomComment", "Une grande piГЁce");
Database.addText("fr.castleARoomComment", "Une piГЁce");
Database.addText("fr.castleADarkRoomComment", "Une piГЁce sombre");
Database.addText("fr.castleCastleEntranceComment", "L'entrГ©e du chГўteau");
Database.addText("fr.castleTowerEntranceComment", "L'entrГ©e de la tour");
Database.addText("fr.castleNougatMonsterComment", "Attaquer le monstre en nougat gГ©ant");
Database.addText("fr.castleGuardsComment", "Attaquer les gardes");
Database.addText("fr.castleStairsComment", "Escaliers");
Database.addText("fr.buttonBackToTheCastle", "Revenir au chГўteau");
Database.addText("fr.castleBigRoomHovenSpeechSad", "Salut ! Je suis un trГЁs vieux four Г  pain. J'avais l'habitude de cuire des tas de bonnes pГўtisseries, mais plus personne ne m'utilise. Peut-ГЄtre... peut-ГЄtre que tu pourrais m'aider ? Laisse-moi juste te prendre quelques sucreries ! Ne t'en fais pas, tu ne vas pas lre regretter. Tu peux me faire confiance.");
Database.addText("fr.castleBigRoomHovenNotEnough", "Oh... tu n'as pas assez de sucreries, je ne peux rien faire. Je suis juste inutile. Je suis le four Г  pain inutile, c'est comme Г§a que tu devrais m'appeler.");
Database.addText("fr.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay ! Merci baucoup ! J'ai utilisГ© 100 bonbons et une barre de chocolat, et je t'ai fait... un pain au chocolat ! C'est ma pГўtisserie prГ©fГ©rГ©e, j'espГЁre que tu aimes Г§a aussi !");
Database.addText("fr.castleBigRoomHovenSpeechHappy", "Hey ! Si tu veux que je cuise une autre pГўtisserie, dis-le moi ! J'adorerais t'aider.");
Database.addText("fr.castleBigRoomHovenSpeechHappyNotEnough", "Oh, tu n'as pas assez de sucreries, malheureusement. J'ai besoin de 100 bonbons et d'une barre de chocolat. Reviens quand tu auras Г§a !");
Database.addText("fr.castleBigRoomHovenLetHovenTakeButton", "Laisser le four prendre toutes les sucreries qu'il veut prendre");
Database.addText("fr.castleBigRoomHovenThanks", "Merci, four !");
Database.addText("fr.dragonStopTickling", "Eh, toi ! ArrГЄte de me chatouiller, s'il te plaГ®t.");
Database.addText("fr.dragonStopTicklingButton", "Uh, oh, dГ©solГ©, j'ai cru que je devais vous attaquer");
Database.addText("fr.dragonTalking", "Je suis le dragon et ceci est mon chГўteau. Je vois que vous avez rГ©ussi Г  entrer, vous devez ГЄtre trГЁs courageux... J'adorerais aider quelqu'un comme vous. Que recherchez-vous ?");
Database.addText("fr.dragonTalkingChallengeButton", "Du dГ©fi");
Database.addText("fr.dragonTalkingFameButton", "La gloire");
Database.addText("fr.dragonTalkingCandiesButton", "Des bonbons");
Database.addText("fr.dragonTalkingChallengeSpeech", "Oh, comme Г§a vous voulez du dГ©fi ? Je pense que vous devriez faire un tour en enfer, il est de notoriГ©tГ© publique que le diable est un adversaire coriace. Sautez sur mon dos et je vous y emmГЁnerai !");
Database.addText("fr.dragonTalkingFameSpeech", "Le meilleur moyen de devenir cГ©lГЁbre est d'affronter le dГ©veloppeur lui-mГЄme. Je sais oГ№ il vit que je pourrais vous y emmener. Mais soyez prГЄt, ce ne sera pas facile.");
Database.addText("fr.dragonTalkingCandiesSpeech", "Au final, la chose que nous voulons tous ce sont des bonbons, n'est-ce pas ? Je pense qu'un des mes amis pourrait vous aider. Vous le reconnaitrez aisГ©ment, il n'a qu'un seul oeil. Dites-lui juste que vous me connaissez.");
Database.addText("fr.dragonTalkingChallengeAnswer", "C'est parti !");
Database.addText("fr.dragonTalkingFameAnswer", "Je suis prГЄt.");
Database.addText("fr.dragonTalkingCandiesAnswer", "D'accord, merci !");
Database.addText("fr.buttonBackToCastle", "Revenir au chГўteau");
Database.addText("fr.talkingCandySpeechNoBox", "Hey ! Je suis le bonbon qui parle. Tu as presque terminГ© le jeu. Tu dois juste trouver la candy box. Elle est dans une maison en dehors du village. C'est la derniГЁre Г©tape !");
Database.addText("fr.talkingCandySpeech1", "Hey ! Je suis le bonbon qui parle. Bravo, tu as terminГ© le jeu ! Je vais ouvrir ta candy box pour toi, c'est ta rГ©compense. Je peux y aller ?");
Database.addText("fr.talkingCandySpeech2", "C'est fait ! Tu peux y entrer maintenant. J'espГЁre que tu as aimГ© le jeu :)");
Database.addText("fr.talkingCandyButton", "Oui !!");
Database.addText("fr.lighthousePuzzleResetButton", "Recommencer");
Database.addText("zh.mapVillageComment", "жќ‘еє„");
Database.addText("zh.mapFortressComment", "жІ™жј и¦ЃеЎћ");
Database.addText("zh.mapATreeComment", "дёЂжЈµж ‘");
Database.addText("zh.mapTheDesertComment", "жІ™жј ");
Database.addText("zh.mapWishingWellComment", "и®ёж„їдє•");
Database.addText("zh.mapLonelyHouseComment", "дёЂе№ўе­¤е®…");
Database.addText("zh.mapForestComment", "жЈ®жћ—");
Database.addText("zh.mapCastleEntranceComment", "еџЋе Ўе…ҐеЏЈ");
Database.addText("zh.mapCastleComment", "еџЋе Ў");
Database.addText("zh.mapDragonComment", "е·Ёйѕ™");
Database.addText("zh.candyBoxEatCandiesButton", "еђѓе…‰зі–жћњ");
Database.addText("zh.candyBoxThrowCandiesButton", "жЉЉеЌЃйў—зі–жћњж‰”ењЁењ°дёЉ");
Database.addText("zh.mapVillageAHouseComment", "дёЂж ‹ж€їе±‹");
Database.addText("zh.mapVillageForgeComment", "й“ЃеЊ й“є");
Database.addText("zh.buttonBackToTheMap", "иї”е›ћењ°е›ѕ");
Database.addText("zh.mapSorceressHutComment", "еҐіе·«зљ„е°Џе±‹");
Database.addText("zh.buttonBackToTheVillage", "иї”е›ћжќ‘еє„");
Database.addText("zh.mapATreeIntroductionSpeech", "дЅ еҐЅпјЊж€‘жЇе°Џжќѕйј гЂ‚ж€‘еЏЇд»Ґз»™дЅ зі–жћње’Њеѕ€е¤љзљ„дёњиҐїгЂ‚ж€‘зџҐйЃ“дЅ жњ‰е¤ље–њж¬ўзі–жћњгЂ‚дЅ†ж€‘ењЁжЈ®жћ—й‡Њеѕ€е­¤з‹¬гЂ‚");
Database.addText("zh.mapATreeIntroductionButton", "ж€‘иѓЅеё®дЅ д»Ђд№€еї™еђ—пјџ");
Database.addText("zh.mapATreeFirstQuestion", "ж€‘дјљй—®дЅ е‡ дёЄй—®йўгЂ‚е¦‚жћњдЅ е›ћз­”ж­ЈзЎ®зљ„иЇќпјЊжњЂз”њзѕЋзљ„зі–жћње°±йѓЅжЇдЅ зљ„дє†пјЃз¬¬дёЂдёЄй—®йўпјљдЅ зњџзљ„е–њж¬ўзі–жћњеђ—пјџпј€з”Ёи‹±иЇ­е›ћз­”пј‰");
Database.addText("zh.mapATreeSecondQuestion", "иї™е°±еЇ№дє†пјЃз»™дЅ 20йў—зі–жћњгЂ‚зЋ°ењЁиЇ·е®Њж€ђиї™дёЄе­—жЇЌеєЏе€—пјЊдЅ е°±дјљеѕ—е€°ж–°зљ„еҐ–еЉ±пјљS,E,I,D,N,A,?");
Database.addText("zh.mapATreeThirdQuestion", "зі–жћњпјЃе†Ќз»™дЅ 100йў—зі–жћњгЂ‚дё‹дёЂдёЄй—®йўпјљиї™дё–з•ЊдёЉжњЂжњ‰зі–зљ„дєєж‹Ґжњ‰е¤ље°‘йў—зі–жћње‘ўпјџ");
Database.addText("zh.mapATreeFourthQuestion", "дЅ еѕ—е€°дє†500йў—зі–жћњпјЃиЂЊдё‹дёЂдёЄеҐ–еЉ±дјљж›ґжњ‰и¶ЈвЂ¦вЂ¦иї™жЇдёЄи°њиЇ­пјљењЁеЏ¤иЂЃзљ„жЈ®жћ—й‡ЊпјЊз”џй•їзќЂдёЂжЈµйќћеёёе№ґиї€зљ„ж ‘пјЊж ‘дёЉжњ‰дёЂеЏЄдё–з•ЊдёЉжњЂиЃЄжЋзљ„еЉЁз‰©гЂ‚жЌ®иЇґиї™жЈµж ‘жњ‰60жќЎж ‘ж №пјЊ360ж №ж ‘жћќе’Њ2160з‰‡ж ‘еЏ¶пјЊй‚Јд№€дЅ иѓЅењЁе®ѓзљ„ж ‘е№ІдёЉж‰ѕе€°е¤ље°‘еЌ°и®°е‘ўпјџ");
Database.addText("zh.mapATreeFifthQuestion", "жЃ­е–њдЅ пјЃзљ„зЎ®пјЊж€‘ж‰ЂиЇґзљ„е°±жЇж€‘зљ„иї™йў—ж ‘гЂ‚з»™дЅ дё‰ж №жЈ’жЈ’зі–пјЊи¦Ѓе¦Ґе–„е€©з”Ёе®ѓд»¬е“¦пјЃд»”з»†еђ¬еҐЅпјЊдё‹дёЂдёЄи°њиЇ­пјљењЁдёЂиЅ®ж»Ўжњ€д№‹дё‹пјЊж€‘жЉЉдёЂйЎ¶й»„и‰Ізљ„еёЅе­ђж‰”иї›дє†зєўи‰Ізљ„е¤§жµ·й‡ЊпјЊиї™йЎ¶й»„и‰Ізљ„еёЅе­ђдјљжЂЋж ·е‘ўпјџ");
Database.addText("zh.mapATreeTicTacToeIntro", "е›ћз­”ж­ЈзЎ®пјЃиї™е№¶дёЌе›°йљѕе›гЂ‚з»™дЅ дё‰еќ—е·§е…‹еЉ›пјЃе…ідєЋдё‹дёЂдёЄеҐ–еЉ±пјЊж€‘д»¬и¦ЃзЁЌеѕ®ж”№еЏдёЂдё‹и§„е€™дє†гЂ‚дЅ и¦Ѓи·џж€‘зЋ©дёЂењєжёёж€ЏпјЃдЅ е‡†е¤‡еҐЅдє†еђ—пјџ");
Database.addText("zh.mapATreeTicTacToeIntroButton", "еЅ“з„¶е‡†е¤‡еҐЅдє†пјЃ");
Database.addText("zh.mapATreeTicTacToeLetsPlay", "иї™жЇдёЂдёЄдє•е­—пј€дё‰иїћпј‰жёёж€ЏгЂ‚ж€‘д»¬ењЁдёЂдёЄ3x3зљ„жёёж€ЏйќўжќїдёЉиї›иЎЊпјЊдЅ дЅїз”ЁXж ‡и®°пјЊж€‘дЅїз”ЁOж ‡и®°гЂ‚ж€‘д»¬дє¤ж›їж”ѕзЅ®и‡Єе·±зљ„ж ‡и®°пјЊз›®ж ‡е°±жЇи®©и‡Єе·±зљ„дё‰дёЄж ‡и®°иїћж€ђдёЂиЎЊгЂ‚ж€‘дјљи®©дЅ е…€жќҐпјЃ");
Database.addText("zh.mapATreeTicTacToeNobodyWins", "йќўжќїе·Із»Џиў«еЎ«ж»Ўдє†пјЊж€‘д»¬йѓЅжІЎиѓЅжЉЉдё‰дёЄж ‡и®°иїћж€ђдёЂиЎЊпјље№іе±ЂпјЃдЅ ж‰“з®—е†ЌжќҐдёЂж¬Ўеђ—пјџ");
Database.addText("zh.mapATreeTicTacToeYouLose", "ж€‘жЉЉдё‰дёЄиїћж€ђдёЂиЎЊе•¦пјЃж€‘иµўдє†гЂ‚дЅ ж‰“з®—е†ЌжќҐдёЂж¬Ўеђ—пјџ");
Database.addText("zh.mapATreeTicTacToeTryAgainButton", "еЅ“з„¶пјЃе†ЌжќҐпјЃ");
Database.addText("zh.mapATreeTicTacToeYouWin", "е“¦пјЊиї™еЏЇзњџжЇж„ЏжѓідёЌе€°зљ„е¦™зќЂгЂ‚дЅ†дЅ жЉЉдё‰дёЄиїћж€ђдёЂиЎЊдє†пјЊж€‘дёЌеѕ—дёЌжњЌгЂ‚дЅ иµўдє†пјЃз»™дЅ иї™жЉЉй’ҐеЊ™пјЃе®ѓеЏЇд»Ґж‰“ејЂжЈ®жћ—дё‹ж–№жќ‘еє„дё­зљ„дёЂж ‹ж€їе±‹гЂ‚");
Database.addText("zh.mapATreeTicTacToeAnymoreSweet", "и°ўи°ўдЅ пјЊе°Џжќѕйј пјЃиїжњ‰ж›ґе¤љжЊ‘ж€еђ—пјџ");
Database.addText("zh.mapATreeNoMoreChallenge", "еѕ€еЏЇжѓњпјЊжІЎжњ‰дє†гЂ‚ж€‘е·Із»ЏжІЎжњ‰ж›ґе¤љжЊ‘ж€еЏЇй™ЄдЅ зЋ©дє†вЂ¦вЂ¦е’ЊдЅ зЋ©еЏЇзњџжњ‰и¶ЈпјЊи°ўи°ўдЅ й™Єж€‘пјЃ");
Database.addText("zh.buttonExitQuestKeeping", "йЂЂе‡єжЋўзґўпј€дїќз•™е·ІиЋ·еѕ—зљ„ж€е€©е“Ѓпј‰");
Database.addText("zh.buttonExitQuestNoKeeping", "йЂЂе‡єжЋўзґўпј€ж— жі•дїќз•™е·ІиЋ·еѕ—зљ„ж€е€©е“Ѓпј‰");
Database.addText("zh.buttonExitQuestNoKeepingBecauseLose", "йЂЂе‡єжЋўзґўпј€е› дёєдЅ е¤±иґҐдє†пјЊж‰Ђд»Ґж— жі•дїќз•™е·ІиЋ·еѕ—зљ„ж€е€©е“Ѓпј‰");
Database.addText("zh.mapVillageLockedHouseComment", "дёЂж ‹й”ЃдЅЏзљ„ж€їе±‹");
Database.addText("zh.mapVillageForgeIntroductionSpeech", "дЅ еҐЅпјЃж€‘жЇдёЄй“ЃеЊ пјЊж€‘еЏЇд»ҐеЌ–з»™дЅ еђ„з§Ќж­¦е™Ёе’ЊиЈ…е¤‡гЂ‚");
Database.addText("zh.mapVillageForgeIntroductionSpeechNoMoreToSell", "дЅ еҐЅпјЃж€‘жЇдёЄй“ЃеЊ пјЊеѕ€йЃ—ж†ѕпјЊзЋ°ењЁж€‘е·Із»ЏжІЎдёњиҐїеЏЇеЌ–дє†гЂ‚д№џи®ёдЅ еє”иЇҐиї‡дє›ж—¶еЂ™е†ЌжќҐпјџ");
Database.addText("zh.mapVillageFifthHouseNoWeaponSpeech", "дЅ еҐЅгЂ‚ж€‘зљ„ењ°зЄ–й‡Ње…ЁжЇиЂЃйј пјЊж€‘йњЂи¦Ѓй™¤жЋ‰е®ѓд»¬вЂ¦вЂ¦е¦‚жћњжњ‰и°ЃиѓЅеё¦зќЂдёЂжЉЉж­¦е™ЁжќҐеё®ж€‘зљ„иЇќвЂ¦вЂ¦");
Database.addText("zh.mapVillageFifthHouseWeaponSpeech", "еїпјЃе°±жЇдЅ пјЃж€‘зњ‹дЅ ж‹їзќЂдёЂжЉЉж­¦е™ЁпјЃе¦‚жћњдЅ иѓЅе№ІжЋ‰й‚Јдє›жђ…д№±ж€‘ењ°зЄ–зљ„иЂЃйј зљ„иЇќпјЊж€‘дјљз»™дЅ еҐ–еЉ±зљ„пјЃ");
Database.addText("zh.mapVillageFifthHouseAgree", "й‚Је°±еЉЁж‰‹еђ§пјЃ");
Database.addText("zh.mapVillageFifthHouseCellarDone", "и°ўи°ўдЅ её®ж€‘й™¤жЋ‰е®ѓд»¬пјЃиї™дёЂдёЄйќћеёёе®ќиґµзљ„еҐ–еЉ±пјљдёЂеј дё–з•Њењ°е›ѕгЂ‚ж€‘и§‰еѕ—дЅ дјљжЇ”ж€‘ж›ґз”Ёеѕ—зќЂе®ѓзљ„гЂ‚");
Database.addText("zh.mapVillageTheShopComment", "е•†еє—");
Database.addText("zh.mapBridgeComment", "е¤§жЎҐ");
Database.addText("zh.mapFarmComment", "жЈ’жЈ’зі–е†њењє");
Database.addText("zh.mapCaveEntranceComment", "жґћз©ґе…ҐеЏЈ");
Database.addText("zh.mapLighthouseComment", "зЃЇеЎ”");
Database.addText("zh.mapPierComment", "з Ѓе¤ґ");
Database.addText("zh.mapTheHoleComment", "ж·±еќ‘");
Database.addText("zh.candyBoxRequestStatusBarUnlocked", "еђ‘ејЂеЏ‘иЂ…и¦Ѓж±‚еѕ—е€°дёЂйЎ№ж–°еЉџиѓЅпј€30йў—зі–жћњпј‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedCfg", "е†Ќи¦ЃеЏ¦дёЂйЎ№ж–°еЉџиѓЅпј€5йў—зі–жћњпј‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedSave", "е†Ќи¦ЃдёЂж¬Ў(5йў—зі–жћњ)");
Database.addText("zh.candyBoxRequestStatusBarUnlockedHealthBar", "и¦Ѓж±‚еѕ—е€°ж›ґжїЂеЉЁдєєеїѓзљ„ж–°дёњиҐїпј€5йў—зі–жћњпј‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedMap", "иї™жЇжњЂеђЋдёЂж¬Ўи¦Ѓж±‚дє†пјЃиї™ж¬Ўи‚Їе®љеЂјеѕ—дёЉиї™д№€е¤љзі–жћњгЂ‚(10йў—зі–жћњ)");
Database.addText("zh.candyBoxRequestStatusBarUnlockedComment", "дЅ и§Јй”Ѓдє†зЉ¶жЂЃж ЏпјЃпј€ењЁдёЉйќўпј‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedCfgComment1", "зЋ°ењЁдЅ еЏЇд»Ґи®їй—®й…ЌзЅ®ж ‡з­ѕпј€CFGпј‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedCfgComment2", "дЅ еЏЇд»ҐењЁжЋ§е€¶йќўжќїдё­е€‡жЌўиЇ­иЁЂгЂ‚");
Database.addText("zh.candyBoxRequestStatusBarUnlockedSaveComment", "дёЂеЏЄй‡Ћз”џзљ„е­е‚Ёж ‡з­ѕе‡єзЋ°дє†пјЃпј€SAVEпј‰");
Database.addText("zh.candyBoxRequestStatusBarUnlockedHealthBarComment", "иї™жЇдёєдЅ е‡†е¤‡зљ„100з‚№з”џе‘ЅеЂјпјЊд»–д»¬дјљйќћеёёжњ‰з”Ёзљ„гЂ‚");
Database.addText("zh.cfgChooseLanguage", "йЂ‰ж‹©иЇ­иЁЂпјљ");
Database.addText("zh.cfgInvertColors", "еЏЌи‰Іжѕз¤єпјџ");
Database.addText("zh.gridItemMainMapName", "ењ°е›ѕ");
Database.addText("zh.gridItemMainMapDescription", "иї™дёЄдё–з•Њзљ„ењ°е›ѕ");
Database.addText("zh.gridItemPogoStickName", "еј№и·іжЈ’");
Database.addText("zh.gridItemPogoStickDescription", "иї™дёЄз‰©е“Ѓи®©дЅ иѓЅе¤џењЁжЋўзґўж—¶и·іи·ѓпјЃ");
Database.addText("zh.gridItemTimeRingName", "ж—¶й—ґжЊ‡зЋЇ");
Database.addText("zh.gridItemTimeRingDescription", "иї™дёЄз‰©е“Ѓи®©дЅ иѓЅе¤џењЁжЋўзґўдё­дЅїз”Ёж–°зљ„иѓЅеЉ›пјљдЅ еЏЇд»Ґе‡Џзј“ж—¶й—ґзљ„жµЃйЂќгЂ‚е¦‚жћње‘Ёе›ґзљ„дёЂе€‡еЇ№дЅ жќҐиЇґиї‡дєЋиї…йЂџзљ„иЇќпјЊе€«еїдє†дЅїз”ЁдЅ зљ„ж—¶й—ґжЊ‡зЋЇпјЃ");
Database.addText("zh.gridItemThirdHouseKeyName", "з¬¬дё‰ж ‹ж€їе±‹зљ„й’ҐеЊ™");
Database.addText("zh.gridItemThirdHouseKeyDescription", "иї™жћљй’ҐеЊ™и®©дЅ еЏЇд»Ґиї›е…Ґжќ‘еє„й‡Њзљ„з¬¬дё‰ж ‹ж€їе±‹гЂ‚");
Database.addText("zh.gridItemFeatherName", "жІ™жј йЈћйёџзљ„зѕЅжЇ›");
Database.addText("zh.gridItemFeatherDescription", "иї™жћљй­”жі•зѕЅжЇ›и®©дЅ ењЁдЅїз”Ёеј№и·іжЈ’ж—¶иѓЅе¤џи·іеѕ—ж›ґй«пјЃ");
Database.addText("zh.gridItemFeatherDescriptionNoPogoStick", "дёЌзџҐд»Ђд№€еЋџе› пјЊдЅ и§‰еѕ—е¦‚жћњдЅ жњ‰дёЂж №еј№и·іжЈ’зљ„иЇќпјЊиї™ж №зѕЅжЇ›е°±иѓЅжґѕдёЉз”ЁењєвЂ¦вЂ¦");
Database.addText("zh.gridItemSpongeName", "й­”жі•жµ·з»µ");
Database.addText("zh.gridItemSpongeDescription", "й­”жі•жµ·з»µи®©дЅ еЏЇд»ҐеѓЏжµ·з»µдёЂж ·жЊ¤еЋ‹и‡Єе·±пјЊд»Ґж­¤зј©е°Џи‡Єе·±зљ„дЅ“з§ЇгЂ‚");
Database.addText("zh.gridItemFortressKeyName", "жІ™жј и¦ЃеЎћзљ„й’ҐеЊ™");
Database.addText("zh.gridItemFortressKeyDescription", "иї™жћљй’ҐеЊ™и®©дЅ еЏЇд»Ґиї›е…ҐдЅЌдєЋжІ™жј дёЉж–№зљ„иїњеЏ¤и¦ЃеЎћгЂ‚и°ЃзџҐйЃ“дЅ иѓЅењЁй‚Јй‡Њж‰ѕе€°д»Ђд№€е‘ўпјџ");
Database.addText("zh.gridItemHeartPendantName", "еїѓеЅўећ‚йҐ°");
Database.addText("zh.gridItemHeartPendantDescription", "еЏЄи¦ЃдЅ жЉЉе®ѓж€ґењЁи„–е­ђдёЉпјЊиї™жћљеїѓеЅўећ‚йҐ°е°±еЏЇд»ҐеўћеЉ дЅ зљ„з”џе‘ЅеЂјгЂ‚");
Database.addText("zh.gridItemHeartPlugName", "зєўеїѓиЂійҐ°");
Database.addText("zh.gridItemHeartPlugDescription", "иї™жћљзєўеїѓиЂійҐ°жЇз”±й“ЃгЂЃињи››и…їпјЊд»ҐеЏЉиў«е°Ѓе…Ґдё­еїѓдЅЌзЅ®зљ„вЂњзєўеїѓй…’вЂќе€¶ж€ђзљ„пјЊе®ѓиѓЅе¤џдёєдЅ еўћеЉ 20%зљ„з”џе‘ЅеЂјпјЃ");
Database.addText("zh.gridItemBeginnersGrimoireName", "ж–°ж‰‹й­”жі•д№¦");
Database.addText("zh.gridItemBeginnersGrimoireDescription", "иї™жњ¬й­”жі•д№¦еЏЇдёєдЅ жЏђдѕ›дё‰з§Ќз›ёеЅ“е®№ж“ж–Ѕж”ѕзљ„жі•жњЇпјЊзќЂе®ћжЇдёєж–°ж‰‹е‡†е¤‡зљ„гЂ‚дЅ иѓЅе¤џдЅїз”Ёй…ёй›Ёжі•жњЇпј€е¤§з‰‡й…ёй›Ёй™Ќи‡іж•Њдєєзљ„е¤ґйЎ¶пј‰пјЊзЃ«зђѓжі•жњЇпј€дёЂйў—е·Ёе¤§зљ„зЃ«з„°й­”жі•зђѓйЈћеђ‘дЅ зљ„ж•Њдєєпј‰пјЊд»ҐеЏЉдј йЂЃжі•жњЇпј€иЇҐжі•жњЇеЏЇе°†дЅ дј йЂЃи‡іж— жі•йў„жµ‹зљ„дЅЌзЅ®пј‰гЂ‚");
Database.addText("zh.gridItemAdvancedGrimoireName", "й«й¶й­”жі•д№¦");
Database.addText("zh.gridItemAdvancedGrimoireDescription", "иї™жњ¬й«й¶й­”жі•д№¦еЏЇдёєдЅ жЏђдѕ›дё¤з§Ќжі•жњЇпјљж¶€й™¤й­”жі•жі•жњЇе’ЊиЌ†жЈд№‹з›ѕжі•жњЇгЂ‚е‰ЌиЂ…еЏЇењЁжЋўзґўдё­ж¶€й™¤жџђдёЂж—¶е€»зљ„жі•жњЇвЂ•вЂ•еЊ…ж‹¬дЅ дёЋж•Њдєєж–Ѕж”ѕзљ„е…ЁйѓЁгЂ‚еђЋиЂ…еЏЇењЁдЅ е‘Ёе›ґе€›йЂ дёЂйќўз”±жј‚жµ®зљ„иЌ†жЈжћ„ж€ђзљ„з›ѕз‰ЊпјЊиї™дє›иЌ†жЈдјљеЇ№жЋҐи§¦зљ„ж•ЊдєєйЂ ж€ђдј¤е®ігЂ‚");
Database.addText("zh.gridItemBlackMagicGrimoireName", "й»‘й­”жі•д№¦");
Database.addText("zh.gridItemBlackMagicGrimoireDescription", "дЅ ењЁдёЂдёЄжґћз©ґдё­ж‰ѕе€°дє†иї™жњ¬й­”жі•д№¦пјЊе®ѓйќћеёёйљѕд»Ґи§¦еЏЉпјЊиЂЊиї™е№¶дёЌжЇжІЎзђ†з”±зљ„гЂ‚е®ѓеЏЇдёєдЅ жЏђдѕ›дё¤з§ЌејєеЉ›й»‘й­”жі•гЂ‚е…¶дёЂеЏЇењЁдЅ йќўе‰Ќе€›йЂ дёЂйќўз”±й»‘ж›њзџіз –еќ—жћ„ж€ђзљ„е·Ёеў™пјЊеЇ№дєЋе‡Џзј“ж•Њдєєзљ„ж”»еЉїйќћеёёжњ‰ж•€гЂ‚е…¶дєЊеЏЇеЏ¬е”¤зѕ¤й­”ж”»е‡»жЋўзґўдё­зљ„ж‰Ђжњ‰з”џз‰©пјЊеЅ“з„¶д№џеЊ…ж‹¬дЅ ењЁе†…гЂ‚дЅїз”Ёз¬¬дєЊз§Ќй­”жі•ж—¶йњЂи°Ёж…ЋиЎЊдє‹гЂ‚");
Database.addText("zh.gridItemUnicornHornName", "з‹¬и§’е…Ѕд№‹и§’");
Database.addText("zh.gridItemUnicornHornDescription", "иї™ж”Їеё¦жњ‰й­”еЉ›зљ„и§’ж›ѕе±ћдєЋдёЂеЏЄз‹¬и§’е…ЅгЂ‚е®ѓжћЃејєзљ„жІ»ж„€иѓЅеЉ›еЇ№дЅ жћЃжњ‰её®еЉ©гЂ‚дЅ еђ¬иЇґиї™еЏЄз‹¬и§’е…Ѕзљ„еђЌе­—еЏ«жџҐзђ†гЂ‚");
Database.addText("zh.gridItemXinopherydonClawName", "иҐїиЇєеј—йЎїд№‹з€Є");
Database.addText("zh.gridItemXinopherydonClawDescription", "иї™ж №з€Єе­ђж›ѕе±ћдєЋиҐїиЇєеј—йЎїпјЊдёЂеЏЄдєєд»¬и®¤дёєе·Із»ЏзЃ­з»ќзљ„еЏЊе¤ґиїњеЏ¤е·Ёе…ЅгЂ‚е®ѓдјље°†дЅ еЅ“е‰ЌдЅїз”Ёзљ„ж­¦е™Ёзљ„дј¤е®іеўће№…и‡іеЏЊеЂЌгЂ‚");
Database.addText("zh.gridItemPitchforkName", "иЌ‰еЏ‰");
Database.addText("zh.gridItemPitchforkDescription", "йЂљиї‡иї™жџ„з‰№ж®Љзљ„иЌ‰еЏ‰пјЊдЅ ж— йњЂзї»иЅ¬ењџењ°е°±иѓЅе®ћзЋ°жќѕењџпјЊе®ѓиѓЅе¤џжњ‰ж•€дїќжЉ¤ењ°дё‹зљ„ењџеЈ¤з”џжЂЃзі»з»џгЂ‚иЇҐйЃ“е…·еЏЇе°†жЈ’жЈ’зі–е†њењєзљ„дє§й‡Џеўће№…дё‰еЂЌгЂ‚");
Database.addText("zh.gridItemShellPowderName", "иґќеЈізІ‰");
Database.addText("zh.gridItemShellPowderDescription", "иґќеЈізІ‰йЂљеёёиў«е†њењєдё»д»¬з”ЁдєЋеЉ еї«жЈ’жЈ’зі–зљ„ж€ђй•їйЂџеє¦гЂ‚иї™дє›зІ‰жњ«еЏЇе°†жЈ’жЈ’зі–е†њењєзљ„дє§й‡ЏеўћеЉ дё‰еЂЌпјЃ");
Database.addText("zh.gridItemPName", "Pз¬¦ж–‡зџі");
Database.addText("zh.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DВ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSВ°-J (`  /R`yM}  T$`` В°+-|U(\\OL&Y_)T|");
Database.addText("zh.gridItemLName", "Lз¬¦ж–‡зџі");
Database.addText("zh.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OВ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    В°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#В° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("zh.gridItemAName", "Aз¬¦ж–‡зџі");
Database.addText("zh.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITВ°#{  Oa$ GM T{Q \"S A-\\ F KmВ°& C #В° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("zh.gridItemYName", "Yз¬¦ж–‡зџі");
Database.addText("zh.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  В°-  AX Y ` В° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_В°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EВ° I &L- /    K");
Database.addText("zh.gridItemRedSharkFinName", "й­”еЉ›зєўи‰ІйІЁй±јйіЌ");
Database.addText("zh.gridItemRedSharkFinDescription", "её¦жњ‰й­”еЉ›зљ„зєўи‰ІйІЁй±јйіЌдјљдёєдЅ зљ„зЃ«зђѓжі•жњЇеё¦жќҐжћЃй«зљ„дј¤е®іеўће№…гЂ‚зЃ«зђѓжЂ»з®—жЇиѓЅжґѕдёЉз”Ёењєдє†гЂ‚");
Database.addText("zh.gridItemGreenSharkFinName", "й­”еЉ›з»їи‰ІйІЁй±јйіЌ");
Database.addText("zh.gridItemGreenSharkFinDescription", "её¦жњ‰й­”еЉ›зљ„з»їи‰ІйІЁй±јйіЌдјље°†и‡Єз„¶д№‹еЉ›жіЁе…ҐдЅ зљ„жЈ’жЈ’зі–е†њењєпјЃе†њењєзљ„дє§й‡Џдјљеѕ—е€°5еЂЌзљ„еўће№…гЂ‚");
Database.addText("zh.gridItemPurpleSharkFinName", "й­”еЉ›зґ«и‰ІйІЁй±јйіЌ");
Database.addText("zh.gridItemPurpleSharkFinDescription", "её¦жњ‰й­”еЉ›зљ„зґ«и‰ІйІЁй±јйіЌдјљдёєдЅ жЏђдѕ›дёЂз§Ќж–°зљ„й»‘й­”жі•гЂ‚иї™з§Ќй­”жі•ењЁжЇЏж¬ЎжЋўзґўдё­еЏЄиѓЅдЅїз”ЁдёЂж¬ЎгЂ‚дЅїз”Ёж—¶йњЂи¦Ѓж је¤–еЅ“еїѓпјЃ");
Database.addText("zh.gridItemTalkingCandyName", "дјљиЇґиЇќзљ„зі–жћњ");
Database.addText("zh.gridItemTalkingCandyDescription", "еЅ“дЅ ењЁеџЋе ЎеЎ”жҐјзљ„йЎ¶йѓЁж”ѕзЅ®е››жћљз¬¦ж–‡зџіеђЋпјЊиї™йў—дјљиЇґиЇќзљ„зі–жћње‡єзЋ°ењЁдЅ йќўе‰ЌгЂ‚д»–д№џи®ёиѓЅе¤џеё®дЅ ејЂеђЇcandy boxвЂ¦вЂ¦");
Database.addText("zh.inventorySpecialNothingEqItem", "ж— иЈ…е¤‡");
Database.addText("zh.eqItemWeaponWoodenSwordName", "жњЁе‰‘");
Database.addText("zh.eqItemWeaponWoodenSwordDescription", "дёЂжЉЉз®Ђй™‹зљ„жњЁе€¶е‰‘");
Database.addText("zh.eqItemWeaponIronAxeName", "й“Ѓж–§");
Database.addText("zh.eqItemWeaponIronAxeDescription", "дёЂжЉЉжњґзґ зљ„й“Ѓж–§гЂ‚йќћеёёй”‹е€©гЂ‚жЇ”жњЁе‰‘ж›ґдёєејєеЉ›гЂ‚");
Database.addText("zh.eqItemWeaponPolishedSilverSwordName", "жЉ›е…‰зљ„й“¶е‰‘");
Database.addText("zh.eqItemWeaponPolishedSilverSwordDescription", "дёЂжџ„ејєеЉ›зљ„е®ќе‰‘,е‰‘иє«дёЉи¦†з›–зќЂй“¶й’‰");
Database.addText("zh.eqItemWeaponTrollBludgeonName", "е·Ёй­”зљ„е·ЁжЈ’");
Database.addText("zh.eqItemWeaponTrollBludgeonDescription", "дЅ д»Ће®€еЌ«е¤§жЎҐзљ„е·Ёй­”й‚Јй‡Њеѕ—е€°дє†иї™ж №е·ЁжЈ’гЂ‚е®ѓзљ„йЂџеє¦зј“ж…ўпјЊдЅ†иѓЅе¤џжњ‰ж•€з ёзѓ‚ж•ЊдєєгЂ‚");
Database.addText("zh.eqItemWeaponTribalSpearName", "йѓЁиђЅй•їзџ›");
Database.addText("zh.eqItemWeaponTribalSpearDescription", "дЅ д»ЋдёЂдЅЌиї·е¤±ењЁж·±еќ‘дё­зљ„йѓЁиђЅж€еЈ«зљ„е°ёдЅ“дёЉеѕ—е€°дє†иї™ж №й•їзџ›гЂ‚е®ѓеѕ€йљѕдёЉж‰‹пјЊиЂЊдёЂж—¦зІѕйЂљпјЊе®ѓе°±зќЂе®ћжЇдёЂжЉЉе‡єи‰Ізљ„ж­¦е™ЁгЂ‚");
Database.addText("zh.eqItemWeaponSummoningTribalSpearName", "еЏ¬е”¤д№‹еЉ›йѓЁиђЅй•їзџ›");
Database.addText("zh.eqItemWeaponSummoningTribalSpearDescription", "иї™жЉЉй™„й­”зљ„йѓЁиђЅй•їзџ›дёЌе…‰жЇжЇ”ж™®йЂљзљ„йѓЁиђЅй•їзџ›зЁЌеѕ®й”‹е€©дє†дёЂз‚№пјЊе®ѓиїиѓЅе¤џйў‘з№ЃеЏ¬е”¤йѓЁиђЅж€еЈ«ењЁжЋўзґўдё­еЉ©дЅ дёЂи‡‚д№‹еЉ›гЂ‚");
Database.addText("zh.eqItemWeaponMonkeyWizardStaffName", "зЊґз‹Іжі•её€д№‹жќ–");
Database.addText("zh.eqItemWeaponMonkeyWizardStaffDescription", "иї™жџ„жі•жќ–ж›ѕе±ћдєЋжґћз©ґдё­дёЂдЅЌиµ¤иє«иЈёдЅ“зљ„зЊґз‹Іжі•её€гЂ‚е®ѓиѓЅе¤џи‡ЄиЎЊзћ„е‡†дЅ зљ„ж•Њдєєе№¶йў‘з№Ѓж–Ѕж”ѕжі•жњЇгЂ‚");
Database.addText("zh.eqItemWeaponEnchantedMonkeyWizardStaffName", "зЊґз‹Іжі•её€д№‹жќ–пј€е·Ій™„й­”пј‰");
Database.addText("zh.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "иї™жџ„жі•жќ–иѕѓжњЄй™„й­”зљ„з‰€жњ¬ж›ґдёєиї…йЂџпјЊе®ѓиѓЅе¤џж›ґй«ж•€ењ°ж–Ѕж”ѕе¤§й‡Џжі•жњЇгЂ‚");
Database.addText("zh.eqItemWeaponGiantSpoonName", "е·Ёећ‹иЊ¶еЊ™");
Database.addText("zh.eqItemWeaponGiantSpoonDescription", "иї™жџ„е·Ёећ‹иЊ¶еЊ™ж›ѕиў«ж”ѕзЅ®ењЁжІ™жј и¦ЃеЎћдё­зљ„е·Ёећ‹иЊ¶еЈ¶й‡ЊгЂ‚дЅ дј°дёЌе€°жЇеђ¦жњ‰д»Ђд№€дєєж›ѕжЉЉе®ѓеЅ“ж€ђиї‡иЊ¶еЊ™жќҐз”ЁпјЊдЅ†е¦‚жћњзњџжњ‰иї™е›ћдє‹зљ„иЇќпјЊй‚Је®¶дј™и‚Їе®љжњ‰зќЂеѕ€е¤§зљ„дёЄе¤ґгЂ‚дЅ д№џи®ёдёЌдјљжѓіи¦Ѓе’Њд»–и§ЃдёЉдёЂйќўзљ„гЂ‚");
Database.addText("zh.eqItemWeaponGiantSpoonOfDoomName", "жЇЃзЃ­д№‹еЉ›е·Ёећ‹иЊ¶еЊ™");
Database.addText("zh.eqItemWeaponGiantSpoonOfDoomDescription", "иї™жџ„е·Ёећ‹иЊ¶еЊ™е±…з„¶и¦ЃжЇ”дЅ ењЁиЊ¶еЈ¶дё­ж‰ЂиѓЅж‰ѕе€°зљ„йЂљеёёзљ„е·Ёећ‹иЊ¶еЊ™ж›ґжњ‰жќЂдј¤еЉ›гЂ‚дёЌиї‡е®ѓзљ„йЂџеє¦д№џзќЂе®ће¤џж…ўзљ„гЂ‚");
Database.addText("zh.eqItemWeaponScytheName", "й•їжџ„й•°е€Ђ");
Database.addText("zh.eqItemWeaponScytheDescription", "жЌ®иЇґиї™жЉЉй•°е€Ђж›ѕз»Џе±ћдєЋж­»зҐћжњ¬е°ЉпјЊе®ѓзљ„йЂџеє¦еї«е€°д»¤дєєйљѕд»ҐзЅ®дїЎгЂ‚");
Database.addText("zh.eqItemHatMerchantHatName", "е•†дєєеёЅ");
Database.addText("zh.eqItemHatMerchantHatDescription", "зі–жћње•†дєєжЉЉиї™йЎ¶еёЅе­ђеЌ–з»™дє†дЅ гЂ‚зі–жћње•†дєєйќћеёёе–њж¬ўзі–жћњгЂ‚иї™йЎ¶еёЅе­ђиѓЅе¤џд»¤дЅ ењЁжЋўзґўдё­иЋ·еѕ—зљ„зі–жћњж•°й‡ЏеўћеЉ дёѓеЂЌпјЃ");
Database.addText("zh.eqItemHatSorceressHatName", "еҐіе·«еёЅ");
Database.addText("zh.eqItemHatSorceressHatDescription", "еҐіе·«жЉЉиї™йЎ¶еёЅе­ђеЌ–з»™дє†дЅ гЂ‚е®ѓиѓЅе¤џеўћејєдЅ зљ„жі•жњЇе’ЊиЌЇе‰‚зљ„ж•€еЉ›гЂ‚");
Database.addText("zh.eqItemHatOctopusKingCrownName", "з« й±јзЋ‹е† ");
Database.addText("zh.eqItemHatOctopusKingCrownDescription", "еЅ“дЅ ж€ґдёЉиї™йЎ¶зЋ‹е† ж—¶пјЊдЅ ж„џе€°жЇ”д»ҐеѕЂи‡ЄдїЎдє†и®ёе¤љгЂ‚е®ѓж— жі•ењЁжЋўзґўдё­з»™дЅ её¦жќҐе¤ље°‘е®ћжѓ пјЊдЅ†и‡ЄдїЎжЂ»жЇй‡Ќи¦Ѓзљ„пјЃ");
Database.addText("zh.eqItemHatOctopusKingCrownWithJaspersName", "й•¶еµЊзєўзў§зЋ‰зљ„з« й±јзЋ‹е† ");
Database.addText("zh.eqItemHatOctopusKingCrownWithJaspersDescription", "иї™йЎ¶й™„й­”зљ„зЋ‹е† д»Ґй»„й‡‘дёЋзєўзў§зЋ‰е€¶ж€ђгЂ‚ењЁжЋўзґўдё­пјЊе®ѓдјљйў‘з№Ѓеђ‘дЅ е››е‘Ёж–Ѕж”ѕејєеЉ›зљ„й­”жі•зЃ«зђѓгЂ‚йЎєдѕїпјЊе®ѓиїй—Єй—ЄеЏ‘е…‰пјЃ");
Database.addText("zh.eqItemHatOctopusKingCrownWithObsidianName", "й•¶еµЊй»‘ж›њзџізљ„з« й±јзЋ‹е† ");
Database.addText("zh.eqItemHatOctopusKingCrownWithObsidianDescription", "иї™йЎ¶й™„й­”зљ„зЋ‹е† д»Ґй»„й‡‘дёЋй»‘ж›њзџіе€¶ж€ђгЂ‚е…¶йЂ ећ‹зѕЋдёЅеЉЁдєєгЂ‚ењЁжЋўзґўдё­пјЊе®ѓдјљж—¶дёЌж—¶ењ°еЏ¬е”¤е‡єз« й±јзЋ‹дёЋдЅ е№¶и‚©дЅњж€гЂ‚иї™жЇе¤љд№€вЂњи§¦ж‰‹вЂќеЏЇеЏЉзљ„еђЊз›џе•ЉпјЃ");
Database.addText("zh.eqItemGlovesLeatherGlovesName", "зљ®ж‰‹еҐ—");
Database.addText("zh.eqItemGlovesLeatherGlovesDescription", "иї™еЏЊж‰‹еҐ—еџєжњ¬жІЎжњ‰д»»дЅ•дЅњз”ЁпјЊдЅ†и‡іе°‘е®ѓд»¬ж—ўжџ”иЅЇеЏ€и€’йЂ‚пјЃ");
Database.addText("zh.eqItemGlovesRedEnchantedGlovesName", "зєўи‰Ій™„й­”ж‰‹еҐ—");
Database.addText("zh.eqItemGlovesRedEnchantedGlovesDescription", "еЅ“дЅ иє«е¤„й»‘жљ—д№‹дё­ж—¶пјЊиї™еЏЊй™„й­”ж‰‹еҐ—дјљеЏ‘е‡єжџ”е’Њзљ„зєўи‰Іе…‰иЉ’гЂ‚ењЁжЋўзґўдё­пјЊж‰‹еҐ—дјљйљЏжњєеђ‘ж•Њдєєж–Ѕж”ѕе°ЏзЃ«зђѓпјЊиї™з»ќеЇ№иѓЅжґѕдёЉз”ЁењєгЂ‚");
Database.addText("zh.eqItemGlovesPinkEnchantedGlovesName", "зІ‰и‰Ій™„й­”ж‰‹еҐ—");
Database.addText("zh.eqItemGlovesPinkEnchantedGlovesDescription", "иї™еЏЊй™„й­”ж‰‹еҐ—дјљењЁдЅ зў°и§¦зљ„д»»дЅ•дёњиҐїдёЉз•™дё‹зІ‰и‰Ізљ„еЌ°и®°гЂ‚ењЁжЋўзґўдё­пјЊж‰‹еҐ—дјљжЊЃз»­дёєдЅ жЏђдѕ›жІ»ж„€гЂ‚");
Database.addText("zh.eqItemBootsRocketBootsName", "зЃ«з®­йќґ");
Database.addText("zh.eqItemBootsRocketBootsDescription", "иї™еЏЊи¶…иµћзљ„зЃ«з®­йќґи®©дЅ иѓЅе¤џењЁеЌЉз©єдё­иї›иЎЊи·іи·ѓпјЊд№џе°±жЇиЇґпјЊдЅ еџєжњ¬дёЉеЏЇд»ҐйЈћиµ·жќҐдє†пјЃ");
Database.addText("zh.eqItemBootsLeatherBootsName", "зљ®йќґ");
Database.addText("zh.eqItemBootsLeatherBootsDescription", "жњґзґ зљ„зљ®йќґпјЊжІЎжњ‰д»»дЅ•з‰№е€«д№‹е¤„гЂ‚");
Database.addText("zh.eqItemBootsBootsOfIntrospectionName", "е†…зњЃд№‹йќґ");
Database.addText("zh.eqItemBootsBootsOfIntrospectionDescription", "иЉ±ж—¶й—ґйќ™дё‹еїѓжќҐж·±е‘јеђёгЂ‚е¦‚жћњдЅ з©їзќЂиї™еЏЊйќґе­ђпјЊдЅ ењЁи„љиёЏе®ћењ°ж—¶е°±е†Ќд№џдёЌдјље‰Ќиї›е€†жЇ«гЂ‚");
Database.addText("zh.eqItemBodyArmoursLightweightBodyArmourName", "иЅ»ећ‹жЉ¤з”І");
Database.addText("zh.eqItemBodyArmoursLightweightBodyArmourDescription", "иї™иє«жЉ¤з”ІеЏЇдёєдЅ жЏђдѕ›иЅ»еѕ®зљ„дїќжЉ¤гЂ‚дЅ еЇ№ж•Њдєєж”»е‡»зљ„жЉµжЉ—еЉ›дјљз•Ґеѕ®еѕ—е€°жЏђеЌ‡гЂ‚");
Database.addText("zh.eqItemBodyArmoursKnightBodyArmourName", "йЄ‘еЈ«жЉ¤з”І");
Database.addText("zh.eqItemBodyArmoursKnightBodyArmourDescription", "иї™иє«еЋљй‡Ќзљ„жЉ¤з”ІдјљдёєдЅ жЏђдѕ›йІжЉ¤гЂ‚дЅ еЇ№ж•Њдєєж”»е‡»зљ„жЉµжЉ—еЉ›дјљеѕ—е€°ж›ґе¤§жЏђеЌ‡гЂ‚");
Database.addText("zh.eqItemBodyArmoursEnchantedKnightBodyArmourName", "й™„й­”йЄ‘еЈ«жЉ¤з”І");
Database.addText("zh.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "иї™иє«жЉ¤з”Ійќћеёёз‰№ж®ЉгЂ‚дЅ еЇ№ж•Њдєєж”»е‡»зљ„жЉµжЉ—еЉ›дјљеѕ—е€°жћЃе¤§жЏђеЌ‡пјЊдЅ†дЅ дЅїз”Ёзљ„ж­¦е™Ёж‰ЂйЂ ж€ђзљ„дј¤е®ідјље› ж­¤иЂЊе‡ЏеЌЉгЂ‚");
Database.addText("zh.mapVillageForgeBuyWoodenSwordButton", "д№°дёЂжЉЉжњЁе‰‘пј€150йў—зі–жћњпј‰");
Database.addText("zh.mapVillageForgeBuyWoodenSwordSpeech", "и°ўи°ўжѓ йЎѕпјЃиї™жЉЉжњЁе‰‘з›ёеЅ“иґ«еј±пјЊеЌґжЇдёЄи‰ЇеҐЅзљ„ејЂз«ЇгЂ‚");
Database.addText("zh.mapVillageForgeBuyIronAxeButton", "д№°дёЂжЉЉй“Ѓж–§пј€400йў—зі–жћњпј‰");
Database.addText("zh.mapVillageForgeBuyIronAxeSpeech", "ж€‘еёЊжњ›дЅ дјље–њж¬ўиї™жЉЉй“Ѓж–§пјЊж€‘е€љдёєдЅ жЉЉе®ѓж‰“зЈЁй”‹е€©пјЃ");
Database.addText("zh.mapVillageForgeBuyPolishedSilverSwordButton", "д№°дёЂжЉЉжЉ›е…‰зљ„й“¶е‰‘пј€2000йў—зі–жћњпј‰");
Database.addText("zh.mapVillageForgeBuyPolishedSilverSwordSpeech", "й“ёиї™жЉЉе‰‘еЏЇиЉ±дє†ж€‘дёЌе°‘ж—¶й—ґгЂ‚ж€‘еЏЇд»Ґеђ‘дЅ дїќиЇЃе®ѓз»ќеЇ№еЂјеѕ—дёЉиї™з¬”д»·гЂ‚");
Database.addText("zh.mapVillageForgeBuyLightweightBodyArmourButton", "д№°дёЂд»¶иЅ»ећ‹жЉ¤з”Іпј€15000йў—зі–жћњпј‰");
Database.addText("zh.mapVillageForgeBuyLightweightBodyArmourSpeech", "иї™иє«жЉ¤з”ІеЏЇд»ҐењЁдЅ дёЋж•ЊдєєдЅњж€ж—¶жЏђдѕ›дёЂе®љзљ„дїќжЉ¤гЂ‚");
Database.addText("zh.mapVillageForgeBuyScytheButton", "д№°дёЂжЉЉй•їжџ„й•°е€Ђпј€5 000 000йў—зі–жћњпј‰");
Database.addText("zh.mapVillageForgeBuyScytheSpeech", "ж€‘иЉ±дє†е‡ дёЄжњ€ж—¶й—ґж‰Ќж‰“йЂ е‡єиї™жџ„й•°е€ЂгЂ‚е®ѓеЏЇжЇдёЂд»¶еЅ“д№‹ж— ж„§зљ„и‰єжњЇе“ЃгЂ‚иї™еЏЇиѓЅдјљжЇдЅ ж‰ЂиѓЅз”Ёе€°зљ„ж‰Ђжњ‰ж­¦е™Ёдё­жњЂиї…йЂџзљ„гЂ‚зҐќдЅ еҐЅиїђпјЃ");
Database.addText("zh.wishingWellThrowFirstCandyButton", "жЉЉдёЂжћљзі–жћњж‰”иї›дє•й‡Њ");
Database.addText("zh.wishingWellCandyIntroductionSpeech", "дЅ еҐЅпјЊж—…иЎЊиЂ…пјЃж€‘жЇи®ёж„їдє•гЂ‚ж€‘дјљд»Ґеђ„з§Ќзі–жћњдёєд»Јд»·ж»Ўи¶ідЅ зљ„ж„їжњ›пјЃеЅ“дЅ жЉЉзі–ж‰”иї›дє•дё­пјЊж€‘е°±дјљжІ»ж„€дЅ зљ„дј¤з—›гЂ‚");
Database.addText("zh.wishingWellThrewCandiesSpeech", "дЅ зљ„дј¤з—›еѕ—е€°дє†жІ»ж„€пјЃ");
Database.addText("zh.wishingWellNoWoundSpeech", "дЅ е№¶жІЎжњ‰дј¤з—›еЏЇдѕ›жІ»ж„€пјЃ");
Database.addText("zh.wishingWellThrowFirstLollipopButton", "жЉЉдёЂж №жЈ’жЈ’зі–ж‰”иї›дє•й‡Њ");
Database.addText("zh.wishingWellLollipopIntroductionSpeech", "дЅ еҐЅпјЊж—…иЎЊиЂ…пјЃж€‘жЇи®ёж„їдє•гЂ‚ж€‘дјљд»Ґеђ„з§Ќзі–жћњдёєд»Јд»·ж»Ўи¶ідЅ зљ„ж„їжњ›пјЃеЅ“дЅ жЉЉжЈ’жЈ’зі–ж‰”иї›дє•дё­пјЊж€‘е°±дјљдёєдЅ жЉЉе®ѓд»¬иЅ¬еЊ–дёєзі–жћњгЂ‚");
Database.addText("zh.wishingWellThrewLollipopsSpeech", "дЅ зљ„жЈ’жЈ’зі–иў«иЅ¬еЊ–ж€ђдє†зі–жћњпјЃдё¤ж №жЈ’жЈ’зі–жЌўдёЂжћљзі–жћњгЂ‚");
Database.addText("zh.wishingWellThrowChocolateBarButton", "жЉЉдёЂеќ—е·§е…‹еЉ›ж‰”иї›дє•й‡Њ");
Database.addText("zh.wishingWellChocolateBarIntroductionSpeech", "дЅ еҐЅпјЊж—…иЎЊиЂ…пјЃж€‘жЇи®ёж„їдє•гЂ‚ж€‘дјљд»Ґеђ„з§Ќзі–жћњдёєд»Јд»·ж»Ўи¶ідЅ зљ„ж„їжњ›пјЃж€‘е–њж¬ўе·§е…‹еЉ›пјЊж€‘жњЂе–њж¬ўе·§е…‹еЉ›дє†гЂ‚дёєдє†дЅ ж‰”иї›дє•дё­зљ„жЇЏдёЂеќ—е·§е…‹еЉ›пјЊеЊ…ж‹¬е€љж‰Ќй‚ЈдёЂеќ—пјЊж€‘йѓЅдјљз»™дє€дЅ дёЂж¬Ўй™„й­”зљ„жњєдјљгЂ‚");
Database.addText("zh.wishingWellThrewChocolateBarSpeech", "дЅ жѓіи¦Ѓй™„й­”д»Ђд№€з‰©е“Ѓпјџ");
Database.addText("zh.wishingWellThrowPainAuChocolatButton", "жЉЉдёЂдёЄе·§е…‹еЉ›йќўеЊ…ж‰”иї›дє•й‡Њ");
Database.addText("zh.wishingWellPainAuChocolatIntroductionSpeech", "дЅ еҐЅпјЊж—…иЎЊиЂ…пјЃж€‘жЇи®ёж„їдє•гЂ‚ж€‘дјљд»Ґеђ„з§Ќзі–жћњдёєд»Јд»·ж»Ўи¶ідЅ зљ„ж„їжњ›пјЃеЅ“дЅ жЉЉе·§е…‹еЉ›йќўеЊ…ж‰”иї›дє•дё­пјЊж€‘дјљз»™дЅ дёЂдёЄйќћеёёз‰№е€«зљ„з¤јз‰©гЂ‚иЇ·еЃље‡єжЋж™єзљ„йЂ‰ж‹©гЂ‚");
Database.addText("zh.wishingWellThrewPainAuChocolatSpeech", "и°ўи°ўдЅ зљ„е·§е…‹еЉ›йќўеЊ…пјЃзЋ°ењЁиЇ·йЂ‰ж‹©дЅ зљ„з¤јз‰©гЂ‚");
Database.addText("zh.wishingWellChooseGift", "йЂ‰ж‹©дЅ зљ„з¤јз‰©пјЃ");
Database.addText("zh.wishingWellChooseGiftButton", "йЂ‰ж‹©");
Database.addText("zh.wishingWellGiftDoneSpeech", "жђће®љпјЃдЅ е·Із»Џеѕ—е€°дє†дёЂдёЄж–°з¤јз‰©гЂ‚е®ѓдјљжѕз¤єењЁдЅ зљ„з‰©е“Ѓж ЏзЉ¶жЂЃйќўжќїдёЉгЂ‚");
Database.addText("zh.wishingWellNoPossibleEnchantment", "жІЎжњ‰еЏЇз”Ёзљ„й™„й­”");
Database.addText("zh.wishingWellChooseEnchantment", "йЂ‰ж‹©й™„й­”");
Database.addText("zh.wishingWellEnchantButton", "й™„й­”");
Database.addText("zh.wishingWellEnchantmentDoneSpeech", "жђће®љпјЃдЅ зљ„з‰©е“Ѓе·Із»Џй™„й­”е®ЊжЇ•гЂ‚");
Database.addText("zh.pierLighthouseButton", "д№и€№е‰ЌеѕЂзЃЇеЎ”");
Database.addText("zh.pierTheSeaButton", "и·іе…Ґжµ·дё­");
Database.addText("zh.lonelyHouseOpenBox", "ж‰“ејЂз›’е­ђ");
Database.addText("zh.lonelyHouseShakeBox", "ж‘‡ж™ѓз›’е­ђ");
Database.addText("zh.lonelyHouseBreakLock", "жљґеЉ›ејЂй”Ѓ");
Database.addText("zh.lonelyHouseKickBox", "иёўж‰“з›’е­ђ");
Database.addText("zh.lonelyHouseAskTheBoxToOpenItself", "иЇ·ж±‚з›’е­ђж‰“ејЂи‡Єе·±");
Database.addText("zh.lonelyHouseLureTheBoxWithACandy", "з”ЁдёЂйў—зі–еј•иЇ±з›’е­ђ");
Database.addText("zh.lonelyHouseTakeTheBox", "жЉЉз›’е­ђйљЏиє«жђєеё¦пјЊдЅ†дЅ еЏЇиѓЅйњЂи¦ЃдёЂжЉЉй’ҐеЊ™ж‰ЌиѓЅж‰“ејЂе®ѓгЂ‚");
Database.addText("zh.lonelyHouseOpenBoxResult", "з›’е­ђиў«й”ЃдЅЏдє†");
Database.addText("zh.lonelyHouseShakeBoxResult", "д»Ђд№€дє‹йѓЅжІЎеЏ‘з”џ");
Database.addText("zh.lonelyHouseBreakLockResult", "й”ЃйЂљиї‡дє†и±Ѓе…ЌжЈЂе®љ");
Database.addText("zh.lonelyHouseKickBoxResult", "дЅ зљ„и„љеЏ—дє†иЅ»дј¤пјЊдЅ†з›’е­ђдёЌдёєж‰ЂеЉЁ");
Database.addText("zh.lonelyHouseAskTheBoxToOpenItselfResult", "вЂ¦вЂ¦дЅ жЇењЁеЇ№дёЂдёЄз›’е­ђиЇґиЇќпјЊдЅ ж™“еѕ—еђ—пјџ");
Database.addText("zh.lonelyHouseLureTheBoxWithACandyResult", "з›’е­ђдјјд№Ће№¶дёЌењЁд№Ћ");
Database.addText("zh.lonelyHouseTakeTheBoxResult", "candy boxдё­еЏЇиѓЅдјљжњ‰д»Ђд№€жњ‰и¶Јзљ„дёњиҐїгЂ‚");
Database.addText("zh.lollipopFarmConstructMill", "е»єдёЂеє§зЈЁеќЉпј€10 000ж №жЈ’жЈ’зі–пј‰");
Database.addText("zh.lollipopFarmFeedMill", "ж‰©е»єзЈЁеќЉ");
Database.addText("zh.lollipopFarmCurrentCandiesProduction", "еЅ“е‰Ќзі–жћњдє§й‡Џ");
Database.addText("zh.lollipopFarmDigPond", "жЊ–дёЂдёЄж± еЎпј€100 000ж №жЈ’жЈ’зі–пј‰");
Database.addText("zh.lollipopFarmBuyLolligator", "д№°дёЂжќЎжЈ’жЈ’зі–йі„пј€1200йў—зі–жћњпј‰");
Database.addText("zh.lollipopFarmLolligatorsConversionText", "зі–жћњ->жЈ’жЈ’зі–иЅ¬жЌўе·Іиў«жїЂжґ»");
Database.addText("zh.lighthouseAskButton", "иЇўй—®");
Database.addText("zh.lighthouseQuestionWho", "дЅ жЇи°Ѓпјџ");
Database.addText("zh.lighthouseQuestionWhoSpeech", "ж€‘жЇйќћеёёеЏ¤иЂЃзљ„з‹¬зњје·ЁдєєгЂ‚");
Database.addText("zh.lighthouseQuestionWhat", "дЅ ењЁиї™й‡ЊеЃљд»Ђд№€пјџ");
Database.addText("zh.lighthouseQuestionWhatSpeech", "ж€‘ж•ґе¤©йѓЅз”џжґ»ењЁиї™й‡ЊпјЊз­‰еѕ…дёЂи‰и€№й©¶иї‡жќҐгЂ‚ж€‘е·Із»Џеѕ€д№…жІЎи§Ѓиї‡и€№дє†пјЊдЅ†ж€‘еї…йЎ»е‘†ењЁиї™е„їпјЊжњ›зќЂе¤§жµ·пјЊе› дёєжЂ»дјљжњ‰и‰и€№й©¶иї‡жќҐгЂ‚");
Database.addText("zh.lighthouseQuestionWhyEatCandies", "ж€‘дёєд»Ђд№€и¦Ѓеђѓзі–жћњпјџ");
Database.addText("zh.lighthouseQuestionWhyEatCandiesSpeech", "е› дёєзі–жћњеЇ№дЅ зљ„з”џе‘Ѕжњ‰еҐЅе¤„пјЃ");
Database.addText("zh.lighthouseQuestionCandyBox", "candy boxжЇд»Ђд№€пјџ");
Database.addText("zh.lighthouseQuestionCandyBoxSpeech", "й‚ЈжЇдёЂдёЄйќћеёёеЏ¤иЂЃзљ„з›’е­ђпјЊжЌ®иЇґиЈ…зќЂдё–з•ЊдёЉж‰Ђжњ‰зљ„зі–жћњгЂ‚дј иЇґж‰“ејЂе®ѓзљ„дєєдјљж‹Ґжњ‰ж— е°Ѕзљ„зі–жћњпјЊе№¶дё”жІЎжњ‰иї™дє›зі–жћњеЃљдёЌе€°зљ„дє‹гЂ‚");
Database.addText("zh.lighthouseQuestionDragon", "е·Ёйѕ™е‘ЉиЇ‰ж€‘жѓіи¦Ѓзі–жћњзљ„иЇќе°±жќҐиї™й‡Њи§ЃдЅ гЂ‚");
Database.addText("zh.lighthouseQuestionDragonSpeech", "е“¦пјЊж€‘зџҐйЃ“дє†вЂ¦вЂ¦еҐЅеђ§пјЊж€‘дёЌиѓЅз›ґжЋҐз»™дЅ зі–жћњпјЊдЅ†ж€‘еЏЇд»Ґз»™дЅ дёЂдёЄдёєжњЂз»€иЋ·еѕ—е¤§й‡Џзі–жћњиЂЊеї…дёЌеЏЇзјєзљ„дёњиҐїгЂ‚ж€‘еЏЄйњЂи¦ЃењЁж­¤д№‹е‰ЌеЇ№дЅ иї›иЎЊдёЂдёЄжµ‹йЄЊгЂ‚е› дёєиї™е№¶дёЌжЇеЏЇд»ҐйљЏдѕїз»™е‡єеЋ»зљ„дёњиҐїгЂ‚и§ЈејЂиї™дёЄи°њйўпјЊе®ѓе°±е±ћдєЋдЅ гЂ‚");
Database.addText("zh.lighthouseFoundStone", "жЃ­е–њдЅ пјЃдЅ йЂљиї‡дє†жµ‹иЇ•пјЊе№¶ж‰ѕе€°дє†з¬¦ж–‡зџігЂ‚е®ѓйќћеёёе®ќиґµпјЊдЅ†еЏЄжњ‰ењЁдЅ ж‰ѕе€°еЏ¦е¤–дё‰жћљдёЋе…¶з›ёдјјзљ„з¬¦ж–‡зџіеђЋж‰ЌиѓЅжґѕдёЉз”ЁењєгЂ‚зҐќдЅ еҐЅиїђпјЃ");
Database.addText("zh.lighthouseFoundStoneAgain", "е№Іеѕ—еҐЅпјЊдЅ еЏ€дёЂж¬Ўи§ЈејЂдє†иї™дёЄи°њйўгЂ‚дЅ дјјд№Ћеѕ€е–њж¬ўе®ѓе›гЂ‚");
Database.addText("zh.saveLocalSaveTitle", "жµЏи§€е™Ёе­жЎЈ");
Database.addText("zh.saveLocalSaveWhy", "е¦‚жћњдЅ жѓіењЁеЅ“е‰Ќи®ѕе¤‡еЏЉжµЏи§€е™ЁдёЉз»§з»­жёёж€Џзљ„иЇќпјЊиЇ·йЂ‰ж‹©жњ¬ењ°е­жЎЈгЂ‚");
Database.addText("zh.saveLocalSaveWarning0", "дЅ зљ„жµЏи§€е™Ёдјјд№Ће№¶дёЌж”ЇжЊЃHTML5");
Database.addText("zh.saveLocalSaveWarning1", "дЅ еє”еЅ“еЌ‡зє§жµЏи§€е™Ёд»ҐдЅїз”Ёжњ¬ењ°е­жЎЈеЉџиѓЅгЂ‚");
Database.addText("zh.saveLocalSaveChooseSlot", "йЂ‰ж‹©е­жЎЈдЅЌзЅ®пјљ");
Database.addText("zh.saveLocalSaveAutosaveEnabled", "и‡ЄеЉЁе­жЎЈе·ІејЂеђЇ");
Database.addText("zh.saveLocalSaveChooseWhatToDo", "йЂ‰ж‹©е­жЎЈж–№ејЏ");
Database.addText("zh.saveLocalSaveSaveButton", "е­жЎЈ");
Database.addText("zh.saveLocalSaveAutosaveButton", "жЇЏеЌЃе€†й’џе­жЎЈдёЂж¬Ў");
Database.addText("zh.saveLocalSaveDisableAutosaveButton", "з¦Ѓз”Ёи‡ЄеЉЁе­жЎЈ");
Database.addText("zh.saveFileSaveTitle", "ж–‡жњ¬е­жЎЈ");
Database.addText("zh.saveFileSaveWhy0", "е¦‚жћњдЅ жњ‰д»Ґдё‹йњЂж±‚пјЊиЇ·йЂ‰ж‹©ж–‡жњ¬е­жЎЈпјљ");
Database.addText("zh.saveFileSaveWhy1", "дЅ жѓіењЁе…¶д»–и®ѕе¤‡ж€–жµЏи§€е™ЁдёЉз»§з»­жёёж€Џ");
Database.addText("zh.saveFileSaveWhy2", "дЅ жѓідёЋе…¶д»–дєєе€†дє«и‡Єе·±зљ„е­жЎЈ");
Database.addText("zh.saveFileSaveWhy3", "е› дёєжџђдє›еЋџе› пјЊдЅ жѓіжё…з©єи‡Єе·±зљ„жµЏи§€е™Ёзј“е­");
Database.addText("zh.saveFileSaveWhy4", "пј€жё…з©єдЅ зљ„жµЏи§€е™Ёзј“е­дјљжё…й™¤дЅ зљ„жњ¬ењ°е­жЎЈпј‰");
Database.addText("zh.saveFileSaveButton", "д»Ґж–‡жњ¬еЅўејЏдїќе­еЅ“е‰Ќжёёж€Џ");
Database.addText("zh.saveFileSaveWarning", "зЋ°ењЁиЇ·жЉЉиї™ж®µж–‡жњ¬е¤Ќе€¶е€°е…¶д»–ењ°ж–№пјЃпј€жЇ”е¦‚иЇґж”ѕе€°дёЂдёЄж–‡жњ¬ж–‡д»¶й‡Њпј‰");
Database.addText("zh.saveLocalLoadTitle", "жµЏи§€е™ЁиЇ»жЎЈ");
Database.addText("zh.saveLocalLoadYouCan", "дЅ еЏЇд»ҐйЂљиї‡д»Ґдё‹й“ѕжЋҐиЇ»еЏ–жњ¬ењ°е­жЎЈпјљ");
Database.addText("zh.saveLocalLoadThanksTo", "з”±дєЋHTML5зљ„й­”еЉ›пјЊеЌідѕїжЇењЁз¦»зєїзЉ¶жЂЃдё‹пјЊдЅ д»ЌеЏЇдЅїз”Ёиї™дє›й“ѕжЋҐгЂ‚");
Database.addText("zh.saveFileLoadTitle", "ж–‡жњ¬иЇ»жЎЈ");
Database.addText("zh.saveFileLoadPaste", "е°†дЅ зљ„е­жЎЈзІиґґи‡ідё‹ж–№пјЊз„¶еђЋз‚№е‡»вЂњиЇ»жЎЈвЂќжЊ‰й’®");
Database.addText("zh.saveFileLoadButton", "иЇ»жЎЈ");
Database.addText("zh.mountainsText0", "дЅ жіЁж„Џе€°зѕ¤е±±д№‹й—ґжњ‰д»Ђд№€дёњиҐїпјЃ");
Database.addText("zh.mountainsText1", "е®ѓзњ‹иµ·жќҐеѕ€жњ‰и¶ЈпјЊд№џи®ёиїдјљеѕ€жњ‰з”ЁгЂ‚");
Database.addText("zh.mountainsTextButton", "з€¬дёЉе±±д»Ґеѕ—е€°й‚ЈдёЄдёњиҐї");
Database.addText("zh.mountainsTextAfter", "дЅ ж‰ѕе€°дє†дёЂж №еј№и·іжЈ’пјЃзЋ°е·ІеЉ е…ҐдЅ зљ„и±ЄеЌЋз‰©е“Ѓж ЏгЂ‚");
Database.addText("zh.secondHouseIntroSpeech", "дЅ еҐЅпјЊж€‘жЇзі–жћње•†дєєгЂ‚ж€‘дёєдє†зі–жћњеЏЇд»ҐеЃљд»»дЅ•дє‹жѓ…гЂ‚дЅ йњЂи¦Ѓд»Ђд№€пјџ");
Database.addText("zh.secondHouseLollipop1Speech", "иї™жЇдёЂж №жџ жЄ¬еЏЈе‘ізљ„жЈ’жЈ’зі–гЂ‚ж€‘жњЂе–њж¬ўзљ„пјЃе®ѓзљ„е”®д»·жЇ60йў—зі–жћњпјЊи‚Їе®љеЂјеѕ—дёЉиї™з¬”д»·гЂ‚");
Database.addText("zh.secondHouseLollipop2Speech", "иї™жЇдёЂж №иЌ‰иЋ“еЏЈе‘ізљ„жЈ’жЈ’зі–гЂ‚е®ѓйќћеёёзѕЋе‘ігЂ‚ж€‘е–њж¬ўе®ѓзљ„зєўи‰ІгЂ‚еЏЄеЌ–60йў—зі–жћњпјЃ");
Database.addText("zh.secondHouseLollipop3Speech", "иї™жЇдёЂж №еЌ—з“њеЏЈе‘ізљ„жЈ’жЈ’зі–гЂ‚ж€‘ж‰“иµЊдЅ з»ќеЇ№жІЎе°ќиї‡иї™з§ЌпјЃз»™ж€‘60йў—зі–жћњпјЊе®ѓе°±жЇдЅ зљ„дє†гЂ‚");
Database.addText("zh.secondHouseLollipopButtonText", "д№°дё‹иї™ж №жЈ’жЈ’зі–пј€60йў—зі–жћњпј‰");
Database.addText("zh.secondHouseMerchantHatSpeech", "ж€‘еЏЇд»ҐжЉЉи‡Єе·±зљ„еёЅе­ђеЌ–з»™дЅ пјЊдЅ†дЅ зџҐйЃ“пјЊе®ѓеѕ€е®ќиґµзљ„вЂ¦вЂ¦дЅ еѕ—з»™ж€‘еѕ€е¤љеѕ€е¤љзі–жћњж‰ЌиѓЅж‹їиµ°е®ѓгЂ‚жЇ”е¦‚иЇґ100дё‡йў—зі–жћњгЂ‚еђ¬иµ·жќҐеѕ€е€’з®—еЇ№еђ§пјџ");
Database.addText("zh.secondHouseMerchantHatButtonText", "д№°дё‹иї™йЎ¶е•†дєєеёЅпј€1 000 000йў—зі–жћњпј‰");
Database.addText("zh.secondHouseTimeRingSpeech", "иї™жЇдёЂжћљж—¶й—ґжЊ‡зЋЇгЂ‚е®ѓжњ‰зќЂжџђз§Ќй­”еЉ›пјЊеЅ“дЅ йЃ‡е€°йє»зѓ¦ж—¶пјЊдЅ еЏЇд»ҐйЂљиї‡е®ѓжќҐе‡Џзј“ж—¶й—ґзљ„жµЃйЂќгЂ‚");
Database.addText("zh.secondHouseTimeRingButtonText", "д№°дё‹иї™жћљж—¶й—ґжЊ‡зЋЇпј€500йў—зі–жћњпј‰");
Database.addText("zh.secondHouseLeatherGlovesSpeech", "иї™еЏЊзљ®ж‰‹еҐ—жЇд»ҐйЄ†й©јзљ®е€¶ж€ђзљ„пјЊе“ЃиґЁй«жЎЈгЂ‚ж€‘жњ‰е¤§ж‰№еє“е­пјЊиї™е°±жЇе®ѓд»¬е¦‚ж­¤дѕїе®њзљ„еЋџе› пјљеЏЄеЌ–300йў—зі–жћњпјЃ");
Database.addText("zh.secondHouseLeatherBootsButtonText", "д№°дё‹иї™еЏЊзљ®йќґпј€300йў—зі–жћњпј‰");
Database.addText("zh.secondHouseLeatherBootsSpeech", "иї™еЏЊй«жЎЈе“ЃиґЁзљ„зљ®йќґжЇд»ҐйЄ†й©јзљ®е€¶ж€ђзљ„пјЊе®ѓд»¬еЏЇд»ҐдёєдЅ зљ„еЏЊи„љдїќжљ–гЂ‚");
Database.addText("zh.secondHouseLeatherGlovesButtonText", "д№°дё‹иї™еЏЊзљ®ж‰‹еҐ—пј€300йў—зі–жћњпј‰");
Database.addText("zh.secondHouseChocolateBarSpeech", "иї™жЇдёЂеќ—е·§е…‹еЉ›пјЊж€‘дёЌзџҐйЃ“е®ѓиѓЅз”ЁжќҐеЃљд»Ђд№€пјЊдЅ†иї™дёњиҐїдјјд№Ћз›ёеЅ“зЅ•и§ЃпјЊиї™е°±жЇе®ѓиЋ·еѕ—иї™дёЂе”®д»·зљ„еЋџе› пјљз»™ж€‘800йў—зі–жћњпјЊе®ѓе°±жЇдЅ зљ„дє†пјЃ");
Database.addText("zh.secondHouseChocolateBarButtonText", "д№°дё‹иї™еќ—е·§е…‹еЉ›пј€800йў—зі–жћњпј‰");
Database.addText("zh.outsideTheHoleButton", "и·іиї›иї™дёЄж·±еќ‘");
Database.addText("zh.theCaveExitText0", "дЅ жЂ»з®—жЇе€°иѕѕдє†жґћз©ґзљ„е‡єеЏЈгЂ‚");
Database.addText("zh.theCaveExitText1", "дЅ ењЁжґћз©ґе¤–зњ‹е€°дє†дёЂз‰‡е¤§жЈ®жћ—");
Database.addText("zh.theCaveExitButtonText", "з¦»ејЂжґћз©ґ");
Database.addText("zh.theCaveFirstSentenceWentStraight", "дЅ з…§з›ґе‰ЌиЎЊгЂ‚");
Database.addText("zh.theCaveFirstSentenceWentLeft", "дЅ йЂ‰ж‹©дє†е·¦иѕ№зљ„и·ЇгЂ‚");
Database.addText("zh.theCaveFirstSentenceWentRight", "дЅ йЂ‰ж‹©дє†еЏіиѕ№зљ„и·ЇгЂ‚");
Database.addText("zh.theCaveFirstSentenceYouAre", "дЅ иє«е¤„дёЂдёЄжґћз©ґд№‹дё­пјЊйќўе‰Ќжњ‰зќЂдё‰жќЎйЃ“и·ЇгЂ‚");
Database.addText("zh.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "дЅ ењЁе‰Ќж–№зљ„ењ°йќўдёЉеЏ‘зЋ°дє†дёЂдёЄеҐ‡жЂЄзљ„дёњиҐїгЂ‚");
Database.addText("zh.theCavePattern_ChocolateBarNowSeeChocolateBar", "дЅ ењЁе‰Ќж–№еЏ‘зЋ°дє†дёЂеќ—е·§е…‹еЉ›гЂ‚");
Database.addText("zh.theCavePattern_TreasureMapSentence", "дЅ зњ‹е€°ењ°йќўдёЉзљ„е°Џзџіе­ђиў«ж‘†ж€ђдє†еҐ‡жЂЄзљ„е›ѕжЎ€гЂ‚");
Database.addText("zh.theCavePattern_MonkeyWizardSentence", "дЅ еЃ¶з„¶йЃ­йЃ‡е€°дє†дёЂеЏЄиµ¤иє«иЈёдЅ“зљ„зЊґз‹Іжі•её€гЂ‚");
Database.addText("zh.theCavePattern_MonkeyWizardButton", "еђ‘д»–еЏ‘иµ·жЊ‘ж€");
Database.addText("zh.theCavePattern_OctopusKingSentence", "дЅ еЃ¶з„¶йЃ­йЃ‡е€°дє†дёЂеЏЄз« й±јзЋ‹пјЊе®ѓзњ‹дёЉеЋ»з›ёеЅ“д»¤дєєдёЌеї«гЂ‚");
Database.addText("zh.theCavePattern_OctopusKingButton", "еђ‘е®ѓеЏ‘иµ·жЊ‘ж€");
Database.addText("zh.fortressInsideText0", "дЅ ж­Јиє«е¤„жІ™жј и¦ЃеЎћд№‹дё­гЂ‚");
Database.addText("zh.fortressInsideText1", "дЅ еЏЇд»ҐењЁдё‰ж‰‡е¤§й—Ёдё­йЂ‰ж‹©е‰ЌиЎЊзљ„йЃ“и·ЇгЂ‚");
Database.addText("zh.fortressInsideText2", "жЇЏж‰‡е¤§й—ЁйѓЅйЂљеѕЂдёЂдёЄе®Ѕй”зљ„ж€їй—ґпјЊжЇЏдёЄж€їй—ґзљ„жњЂж·±е¤„йѓЅжњ‰дёЂдёЄе®ќз‰©гЂ‚");
Database.addText("zh.fortressInsideEnterRoom1", "иї›е…Ґз¬¬дёЂдёЄж€їй—ґ");
Database.addText("zh.fortressInsideEnterRoom2", "иї›е…Ґз¬¬дєЊдёЄж€їй—ґ");
Database.addText("zh.fortressInsideEnterRoom3", "иї›е…Ґз¬¬дё‰дёЄж€їй—ґ");
Database.addText("zh.treasureButtonDig", "жЊ–жЋ");
Database.addText("zh.treasureButtonYouFound", "дЅ жЊ–е€°дє†дё‰еќ—е·§е…‹еЉ›пјЃ");
Database.addText("zh.sorceressHutHello", "дЅ еҐЅпјЊж€‘жЇеҐіе·«гЂ‚ж€‘еЏЇд»Ґж•™дЅ дёЂдё¤д»¶е…ідєЋй­”жі•зљ„дє‹гЂ‚ж€‘иїеЏЇд»Ґз»™дЅ дёЂдє›жњ‰и¶Јзљ„е°ЏзЋ©ж„ЏпјЊж€–дёєдЅ ж–Ѕжі•гЂ‚дЅ†иї™дёЂе€‡йѓЅжЇжЋз Ѓж ‡д»·зљ„пјЃд»Јд»·е°±жЇжЈ’жЈ’зі–пјЊеѕ€е¤љеѕ€е¤љзљ„жЈ’жЈ’зі–гЂ‚");
Database.addText("zh.sorceressHutClickedGrimoire", "иї™жЇдёЂжњ¬й­”жі•д№¦пјЊдёєе€ќе­¦иЂ…й‡Џиє«е®ље€¶гЂ‚ењЁжЋўзґўдё­йљЏиє«жђєеё¦е°±иѓЅе¤џж–Ѕж”ѕз®ЂеЌ•дё”е®ћз”Ёзљ„жі•жњЇгЂ‚дЅ и‚Їе®љйњЂи¦Ѓиї™дёЄпјЃеЏЄеЌ–5000ж №жЈ’жЈ’зі–пјЃ");
Database.addText("zh.sorceressHutBuyGrimoireButton", "д№°дё‹иї™жњ¬й­”жі•д№¦пј€5 000ж №жЈ’жЈ’зі–пј‰");
Database.addText("zh.sorceressHutBuyGrimoireSpeech", "и°ўи°ўжѓ йЎѕпјЃдЅ еЏЇд»ҐйЂљиї‡иї™жњ¬й­”жі•д№¦ж–Ѕж”ѕдё‰з§Ќжі•жњЇгЂ‚зҐќдЅ еҐЅиїђпјЃ");
Database.addText("zh.sorceressHutClickedGrimoire2", "иї™жЇдёЂжњ¬й«й¶й­”жі•д№¦гЂ‚ењЁжЋўзґўдё­йљЏиє«жђєеё¦е°±иѓЅж–Ѕж”ѕдё¤з§Ќй«й¶жі•жњЇгЂ‚иї™еЏЇжЇж€‘дєІж‰‹е†™е°±зљ„пјЊе№¶дёЌжЇд»Ђд№€з®ЂеЌ•зљ„жґ»е„їгЂ‚2дё‡ж №жЈ’жЈ’зі–жЇз›ёеЅ“е…¬йЃ“зљ„д»·ж јгЂ‚");
Database.addText("zh.sorceressHutBuyGrimoire2Button", "д№°дё‹иї™жњ¬й­”жі•д№¦пј€20 000ж №жЈ’жЈ’зі–пј‰");
Database.addText("zh.sorceressHutBuyGrimoire2Speech", "и°ўи°ўжѓ йЎѕпјЃдЅ еЏЇд»ҐйЂљиї‡иї™жњ¬й­”жі•д№¦ж–Ѕж”ѕдё¤з§Ќжі•жњЇпјЊиЇ·е¦Ґе–„е€©з”ЁпјЃ");
Database.addText("zh.sorceressHutClickedCauldron", "иї™жЇж€‘зљ„з‚јиЌЇй‡њгЂ‚ж€‘еЏЇд»ҐйЂљиї‡е®ѓз‚је€¶й­”жі•иЌЇе‰‚гЂ‚ж€‘еЏЇд»ҐжЉЉе®ѓеЌ–з»™дЅ пјЊдЅ†д»·ж јз›ёеЅ“ж‚иґµвЂ¦вЂ¦дЅ еѕ—иЉ±дёЉ10дё‡ж №жЈ’жЈ’зі–гЂ‚");
Database.addText("zh.sorceressHutBuyCauldronButton", "д№°дё‹иї™дёЄз‚јиЌЇй‡њпј€100 000ж №жЈ’жЈ’зі–пј‰");
Database.addText("zh.sorceressHutBuyCauldronSpeech", "йќћеёёж„џи°ўпјЃж€‘еѕ—е€°дє†10дё‡ж №жЈ’жЈ’зі–пјЃж­¤е¤–пјЊж€‘иїи¦ЃйЂЃз»™дЅ дёЂжњ¬з‚јиЌЇж‰‹е†ЊгЂ‚е®ѓи‚Їе®љиѓЅжґѕдёЉз”ЁењєгЂ‚");
Database.addText("zh.sorceressHutClickedHat", "зЎ®е®ћпјЊж€‘жњ‰дёЂйЎ¶еѕ€жЈ’зљ„еёЅе­ђпјЃдЅ†ж€‘дёЌиѓЅжЉЉе®ѓеЌ–з»™дЅ гЂ‚е®ѓйќћеёёйќћеёёйќћеёёе®ќиґµгЂ‚иЇґзњџзљ„пјЊж€‘дёЌиѓЅеЌ–гЂ‚иЇ·е€«е†ЌеќљжЊЃи¦Ѓд№°дє†гЂ‚дёЌпјЊдёЌдёЌдёЌпјЊж€‘дёЌиЇҐй‚Јд№€иЇґгЂ‚е“¦еҐЅеђ§пјЊж€‘дјљеЌ–з»™дЅ зљ„пјЊдЅ†д»·ж јжЇ10дєїж №жЈ’жЈ’зі–гЂ‚дЅ еѕ€еЏЇиѓЅд№џд»дёЌиµ·иї™д№€е¤љзі–еђ§гЂ‚");
Database.addText("zh.sorceressHutBuyHatButton", "д№°дё‹иї™йЎ¶еёЅе­ђпј€1 000 000 000ж №жЈ’жЈ’зі–пј‰");
Database.addText("zh.sorceressHutBuyHatSpeech", "ж€‘ж€‘ж€‘еѕ—е€°дє†10дєїж №жЈ’жЈ’зі–пјЃдЅ†ж€‘е†Ќд№џжІЎжњ‰д»Ђд№€еёЅе­ђдє†вЂ¦вЂ¦дЅ†иї™10дєїж №жЈ’жЈ’зі–пјЊе“¦пјЃиї™е¤ЄеЂјдє†гЂ‚");
Database.addText("zh.cauldronPreviousPageButton", "дёЉдёЂйЎµ");
Database.addText("zh.cauldronNextPageButton", "дё‹дёЂйЎµ");
Database.addText("zh.cauldronWhatYouWantToPut", "дЅ ж‰“з®—жЉЉд»Ђд№€ж”ѕе…Ґз‚јиЌЇй‡њ");
Database.addText("zh.cauldronWhatIsIn", "з‚јиЌЇй‡њдё­еЅ“е‰Ќе·Іиў«ж”ѕе…Ґ");
Database.addText("zh.cauldronWhatYouCanDo", "дЅ еЏЇд»ҐеЇ№з‚јиЌЇй‡њиї›иЎЊ");
Database.addText("zh.castleBigRoomComment", "е®Ѕж•ћзљ„ж€їй—ґ");
Database.addText("zh.castleARoomComment", "еџЋе Ўж€їй—ґ");
Database.addText("zh.castleADarkRoomComment", "е°Џй»‘е±‹");
Database.addText("zh.castleCastleEntranceComment", "еџЋе Ўе…ҐеЏЈ");
Database.addText("zh.castleTowerEntranceComment", "еЎ”жҐје…ҐеЏЈ");
Database.addText("zh.castleNougatMonsterComment", "ж”»е‡»е·Ёећ‹з‰›иЅ§зі–жЂЄ");
Database.addText("zh.castleGuardsComment", "ж”»е‡»е®€еЌ«");
Database.addText("zh.castleStairsComment", "жҐјжўЇ");
Database.addText("zh.buttonBackToTheCastle", "иї”е›ћеџЋе Ў");
Database.addText("zh.castleBigRoomHovenSpeechSad", "дЅ еҐЅпјЃж€‘жЇеЏ¤иЂЃзљ„йќўеЊ…з‚‰гЂ‚ж€‘ж›ѕз»Џзѓ№е€¶иї‡дёЌи®Ўе…¶ж•°зљ„зѕЋе‘ізі•з‚№пјЊдЅ†е¦‚д»Ље·Із»ЏжІЎдєєе†ЌдЅїз”Ёж€‘дє†гЂ‚д№џи®ёвЂ¦вЂ¦д№џи®ёдЅ иѓЅе¤џеё®ж€‘пјџиЇ·е…Ѓи®ёж€‘д»ЋдЅ й‚Јй‡Њж‹їдє›зі–жћњпјЃе€«ж‹…еїѓпјЊдЅ дёЌдјљеђЋж‚”зљ„пјЃдЅ еЏЇд»ҐдїЎд»»ж€‘гЂ‚");
Database.addText("zh.castleBigRoomHovenNotEnough", "е“¦вЂ¦вЂ¦дЅ жІЎжњ‰и¶іе¤џзљ„зі–жћњпјЊж€‘д»Ђд№€йѓЅеЃљдёЌдє†гЂ‚ж€‘зњџжЇжІЎз”ЁгЂ‚ж€‘жЇдёЄжІЎз”Ёзљ„йќўеЊ…з‚‰пјЊдЅ еє”иЇҐиї™д№€з§°е‘јж€‘гЂ‚");
Database.addText("zh.castleBigRoomHovenSpeechMadePainAuChocolat", "иЂ¶пјЃж„џжїЂдёЌе°ЅпјЃж€‘дЅїз”Ёдє†100йў—зі–жћње’Њ1еќ—е·§е…‹еЉ›пјЊе№¶дё”дёєдЅ зѓ№йҐЄе‡єдє†вЂ¦вЂ¦дёЂдёЄе·§е…‹еЉ›йќўеЊ…пјЃиї™жЇж€‘жњЂе–њж¬ўзљ„зі•з‚№пјЊж€‘еёЊжњ›дЅ д№џдјље–њж¬ўе®ѓпјЃ");
Database.addText("zh.castleBigRoomHovenSpeechHappy", "еїпјЃе¦‚жћњдЅ жѓіи®©ж€‘зѓ№йҐЄеЏ¦дёЂдёЄзі•з‚№зљ„иЇќпјЊиЇ·йљЏж—¶и·џж€‘иЇґпјЃж€‘йќћеёёд№ђж„Џеё®дЅ зљ„еї™гЂ‚");
Database.addText("zh.castleBigRoomHovenSpeechHappyNotEnough", "е“¦пјЊдЅ жІЎжњ‰и¶іе¤џзљ„зі–жћњпјЊе¤ЄйЃ—ж†ѕдє†гЂ‚ж€‘йњЂи¦Ѓ100йў—зі–жћње’Њ1еќ—е·§е…‹еЉ›гЂ‚иЇ·ењЁеѕ—е€°й‚Јдє›д№‹еђЋе›ћжќҐж‰ѕж€‘пјЃ");
Database.addText("zh.castleBigRoomHovenLetHovenTakeButton", "и®©йќўеЊ…з‚‰ж‹їиµ°е®ѓж‰ЂйњЂи¦Ѓзљ„зі–жћњ");
Database.addText("zh.castleBigRoomHovenThanks", "и°ўи°ўдЅ пјЊйќўеЊ…з‚‰пјЃ");
Database.addText("zh.dragonStopTickling", "еїпјЊиЇґзљ„е°±жЇдЅ пјЃиЇ·е€«е†Ќз»™ж€‘жЊ з—’дє†гЂ‚");
Database.addText("zh.dragonStopTicklingButton", "е•Ље“¦пјЊжЉ±ж­‰пјЊж€‘иїд»Ґдёєж€‘жЇењЁж”»е‡»дЅ е‘ў");
Database.addText("zh.dragonTalking", "ж€‘жЇдёЂеЏЄе·Ёйѕ™пјЊиЂЊиї™жЇж€‘зљ„еџЋе ЎгЂ‚дЅ ж—ўз„¶иѓЅе¤џиї›жќҐпјЊи‚Їе®љйќћеёёе‹‡ж•ўвЂ¦вЂ¦ж€‘еѕ€й«е…ґиѓЅе¤џеё®дёЉдЅ иї™ж ·зљ„е‹‡еЈ«гЂ‚дЅ ж‰ЂеЇ»ж±‚зљ„жЇд»Ђд№€пјџ");
Database.addText("zh.dragonTalkingChallengeButton", "жЊ‘ж€");
Database.addText("zh.dragonTalkingFameButton", "еђЌеЈ°");
Database.addText("zh.dragonTalkingCandiesButton", "зі–жћњ");
Database.addText("zh.dragonTalkingChallengeSpeech", "е“¦пјЊиї™д№€иЇґдЅ жѓіи¦Ѓзљ„жЇжЊ‘ж€пјџж€‘и®¤дёєдЅ еє”иЇҐдєІи‡Єе‰ЌеѕЂењ°з‹±дёЂи¶џпјЊй‚Јй‡Њзљ„й­”й¬јжЇдёЄз›ёеЅ“дёҐеі»зљ„жЊ‘ж€гЂ‚и·іе€°ж€‘зљ„иѓЊдёЉжќҐпјЊж€‘дјљжЉЉдЅ её¦е€°й‚Је„їеЋ»зљ„пјЃ");
Database.addText("zh.dragonTalkingFameSpeech", "ж€ђеђЌзљ„жњЂдЅіж–№ејЏе°±жЇеЋ»йќўеЇ№ејЂеЏ‘иЂ…жњ¬дєєгЂ‚ж€‘зџҐйЃ“д»–дЅЏењЁе“Єе„їпјЊиЂЊдё”еЏЇд»ҐжЉЉдЅ её¦е€°й‚Је„їеЋ»гЂ‚дЅ†дЅ и¦ЃеЃљеҐЅе‡†е¤‡пјЊиї™еЏЇдёЌжЇдёЂењєз®ЂеЌ•зљ„ж€ж–—гЂ‚");
Database.addText("zh.dragonTalkingCandiesSpeech", "иЇґе€°еє•пјЊж€‘д»¬жѓіи¦Ѓзљ„йѓЅжЇзі–жћњпјЊдёЌжЇеђ—пјџж€‘и®¤дёєж€‘зљ„дёЂдЅЌиЂЃжњ‹еЏ‹иѓЅе¤џеё®дёЉдЅ зљ„еї™гЂ‚дЅ еє”иЇҐеѕ€е®№ж“и®¤е‡єд»–жќҐпјЊд»–еЏЄжњ‰дёЂеЏЄзњјзќ›гЂ‚еЏЄи¦Ѓе‘ЉиЇ‰д»–дЅ и®¤иЇ†ж€‘е°±иЎЊдє†гЂ‚");
Database.addText("zh.dragonTalkingChallengeAnswer", "й‚Је°±е‡єеЏ‘еђ§пјЃ");
Database.addText("zh.dragonTalkingFameAnswer", "ж€‘е·Із»Џе‡†е¤‡еҐЅдє†гЂ‚");
Database.addText("zh.dragonTalkingCandiesAnswer", "еҐЅеђ§пјЊе¤љи°ўпјЃ");
Database.addText("zh.buttonBackToCastle", "иї”е›ћеџЋе Ў");
Database.addText("zh.talkingCandySpeechNoBox", "еїпјЃж€‘жЇдјљиЇґиЇќзљ„зі–жћњгЂ‚дЅ е·Із»Џеї«и¦Ѓж‰“йЂљиї™дёЄжёёж€Џдє†гЂ‚зЋ°ењЁдЅ еЏЄйњЂи¦Ѓж‰ѕе€°candy boxгЂ‚е®ѓе°±ењЁжќ‘еє„е¤–зљ„ж€їе­ђй‡ЊгЂ‚иї™е°±жЇжњЂеђЋдёЂж­Ґдє†пјЃ");
Database.addText("zh.talkingCandySpeech1", "еїпјЃж€‘жЇдјљиЇґиЇќзљ„зі–жћњгЂ‚зҐќиґєдЅ пјЊдЅ е·Із»ЏйЂље…ідє†ж•ґдёЄжёёж€ЏпјЃж€‘дјљдёєдЅ ж‰“ејЂcandy boxпјЊиї™е°±жЇдЅ еѕ—е€°зљ„еҐ–еЉ±гЂ‚зЋ°ењЁйњЂи¦Ѓж€‘ж‰“ејЂе®ѓеђ—пјџ");
Database.addText("zh.talkingCandySpeech2", "ејЂеђЇпјЃзЋ°ењЁдЅ еЏЇд»Ґиї›е…Ґе…¶дё­дє†гЂ‚еёЊжњ›дЅ е–њж¬ўиї™ж¬ѕжёёж€Џ пјљпј‰");
Database.addText("zh.talkingCandyButton", "еЅ“з„¶пјЃпјЃ");
Database.addText("zh.lighthousePuzzleResetButton", "й‡ЌзЅ®и°њйў");
Database.addText("п»їde.mapVillageComment", "Das Dorf");
Database.addText("de.mapFortressComment", "Die WГјstenfestung");
Database.addText("de.mapATreeComment", "Ein Baum");
Database.addText("de.mapTheDesertComment", "Die WГјste");
Database.addText("de.mapWishingWellComment", "Der Wunschbrunnen");
Database.addText("de.mapLonelyHouseComment", "Ein verlassenes Haus");
Database.addText("de.mapForestComment", "Der Wald");
Database.addText("de.mapCastleEntranceComment", "Schlosseingang");
Database.addText("de.mapCastleComment", "Das Schloss");
Database.addText("de.mapDragonComment", "Der Drache");
Database.addText("de.candyBoxEatCandiesButton", "Alle Bonbons aufessen");
Database.addText("de.candyBoxThrowCandiesButton", "10 Bonbons auf den Boden werfen");
Database.addText("de.mapVillageAHouseComment", "Ein Haus");
Database.addText("de.mapVillageForgeComment", "Die Schmiede");
Database.addText("de.buttonBackToTheMap", "ZurГјck zur Karte");
Database.addText("de.mapSorceressHutComment", "HexenhГјtte");
Database.addText("de.buttonBackToTheVillage", "ZurГјck zum Dorf");
Database.addText("de.mapATreeIntroductionSpeech", "Hallo, ich bin das EichhГ¶rnchen. Ich kann dir Bonbons und viele andere Dinge anbieten. Ich weiГџ, wie sehr du SГјГџes magst. Aber ich fГјhle mich in diesem Wald einsam.");
Database.addText("de.mapATreeIntroductionButton", "Wie kann ich dir helfen?");
Database.addText("de.mapATreeFirstQuestion", "Ich werde dir Fragen stellen. Wenn du sie korrekt beantwortest, werden die sГјГџesten SГјГџspeisen deine sein. Die erste : Magst du wirklich Bonbons?? (Antworte auf Englisch)");
Database.addText("de.mapATreeSecondQuestion", "Das ist richtig! Hier sind 20 Bonbons fГјr dich. VervollstГ¤ndige nun diese Aneinandereihung von Buchstaben und du wirst eine neue Belohnung erhalten : S, E, I, D, N, A, ?");
Database.addText("de.mapATreeThirdQuestion", "Candies! Hier hast du 100 Bonbons. NГ¤chste Frage : Wie viele Bonbons besitzt die grГ¶Гџte Naschkatze auf der ganzen Welt?");
Database.addText("de.mapATreeFourthQuestion", "Hier sind 500 Bonbons! Die nГ¤chste Belohnung dГјrfte sogar noch interessanter sein... Hier ist das RГ¤tsel : In einem uralten Wald wГ¤chst ein sehr alter Baum, auf dem die intelligentesten Tier dieser Welt leben. Es heiГџt, dieser Baum habe 60 Wurzeln, 360 Г„ste und 2160 BlГ¤tter. Wie viele Markierungen kannst du auf seinem Stamm finden?");
Database.addText("de.mapATreeFifthQuestion", "Gratulation! Ich sprach in der Tat von meinem Baum. Hier sind 3 Lutscher fГјr dich. NГјtze sie wohlГјberlegt! Das nГ¤chste RГ¤tsel, hГ¶r gut zu : Im Vollmond werfe ich einen gelben Hut ins rote Meer. Was geschieht mit diesem gelben Hut?");
Database.addText("de.mapATreeTicTacToeIntro", "Gute Antwort! Das war nicht allzu schwer. Hier sind 3 Schokoriegel fГјr dich. FГјr die nГ¤chste Belohnung mГјssen wir die Regeln ein klein wenig Г¤ndern. Du wirst ein Spiel mit mir spielen mГјssen! Bist du bereit?");
Database.addText("de.mapATreeTicTacToeIntroButton", "Na klar!");
Database.addText("de.mapATreeTicTacToeLetsPlay", "Dieses Spiel heiГџt Tic Tac Toe. Wir spielen auf einem 3Г—3-Spielbrett. Du wirst das X-Zeichen und ich das O-Zeichen benutzen. Jeder von uns wird seine eigenen Zeichen setzen und das Ziel ist es, 3 gleiche Zeichen in einer Reihe zu haben. Ich werde dich beginnen lassen!");
Database.addText("de.mapATreeTicTacToeNobodyWins", "Das Spielbrett ist komplett gefГјllt und wir haben beide nicht drei in einer Reihe : keiner gewinnt! Willst du es erneut versuchen?");
Database.addText("de.mapATreeTicTacToeYouLose", "Ich habe drei in einer Reihe! Ich habe gewonnen. Willst du es erneut versuchen?");
Database.addText("de.mapATreeTicTacToeTryAgainButton", "NatГјrlich will ich das!");
Database.addText("de.mapATreeTicTacToeYouWin", "Wow, das war ein unerwarteter Zug. Aber du hast drei in einer Reihe, das kann ich nicht bestreiten. Du hast gewonnen! Nimm diesen SchlГјssel! Er Г¶ffnet eines der HГ¤user im Dorf unter dem Wald.");
Database.addText("de.mapATreeTicTacToeAnymoreSweet", "Danke, EichhГ¶rnchen! Noch mehr Herausforderungen?");
Database.addText("de.mapATreeNoMoreChallenge", "Leider nicht, ich habe keine weiteren Herausforderungen fГјr dich... Mit dir zu Spielen war spaГџig, danke dafГјr!");
Database.addText("de.buttonExitQuestKeeping", "Verlasse die Quest (und behalte deine Beute)");
Database.addText("de.buttonExitQuestNoKeeping", "Verlasse die Quest (und verliere deine Beute)");
Database.addText("de.buttonExitQuestNoKeepingBecauseLose", "Verlasse die Quest (und verliere deine Beute, weil du gescheitert bist)");
Database.addText("de.mapVillageLockedHouseComment", "Ein abgeschlossenes Haus");
Database.addText("de.mapVillageForgeIntroductionSpeech", "Hi! Ich bin ein Schmied. Ich kann dir verschiedene Waffen und AusrГјstungsteile verkaufen.");
Database.addText("de.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hi! Ich bin ein Schmied. Leider kann ich gerade nichts zum Verkauf anbieten. MГ¶chtest du vielleicht spГ¤ter wiederkommen?");
Database.addText("de.mapVillageFifthHouseNoWeaponSpeech", "Hallo. Mein Keller ist voller Ratten, die ich loswerden muss... wenn mir nur jemand mit einer Waffe helfen kГ¶nnte...");
Database.addText("de.mapVillageFifthHouseWeaponSpeech", "He, du! Ich sehe, dass du eine Waffe trГ¤gst. Wenn du die Ratten, die mich in meinem Keller belГ¤stigen, tГ¶test, werde ich dich belohnen!");
Database.addText("de.mapVillageFifthHouseAgree", "Dann nichts wie los!");
Database.addText("de.mapVillageFifthHouseCellarDone", "Vielen Dank, dass du sie losgeworden bist. Hier ist etwas sehr Wertvolles als Belohnung : eine Weltkarte. Ich denke, dass du mehr damit anfangen kannst als ich.");
Database.addText("de.mapVillageTheShopComment", "Der Laden");
Database.addText("de.mapBridgeComment", "Die BrГјcke");
Database.addText("de.mapFarmComment", "Die Lutscherfarm");
Database.addText("de.mapCaveEntranceComment", "Der HГ¶hleneingang");
Database.addText("de.mapLighthouseComment", "Der Leuchtturm");
Database.addText("de.mapPierComment", "Der Pier");
Database.addText("de.mapTheHoleComment", "Der Graben");
Database.addText("de.candyBoxRequestStatusBarUnlocked", "Den Entwickler um eine neue Funktion bitten (30 SГјГџigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedCfg", "Um eine weitere bitten (5 SГјГџigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedSave", "Noch einmal bitten (5 SГјГџigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedHealthBar", "Um etwas Aufregenderes bitten (5 SГјГџigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedMap", "Der letzte Wunsch! Er muss einfach die Bonbons wert sein. (10 SГјГџigkeiten)");
Database.addText("de.candyBoxRequestStatusBarUnlockedComment", "Du hast eine Statusleiste freigeschaltet! (siehe oben)");
Database.addText("de.candyBoxRequestStatusBarUnlockedCfgComment1", "Du hast jetzt Zugriff auf den Konfigurations-Tab.");
Database.addText("de.candyBoxRequestStatusBarUnlockedCfgComment2", "Du kannst die Sprache Г¤ndern, wenn du das mГ¶chtest.");
Database.addText("de.candyBoxRequestStatusBarUnlockedSaveComment", "Ein wildes Speichern-Tab erscheint!");
Database.addText("de.candyBoxRequestStatusBarUnlockedHealthBarComment", "Hier sind 100 Lebenspunkte fГјr dich. Sie werden nГјtzlich sein.");
Database.addText("de.cfgChooseLanguage", "WГ¤hle eine Sprache :");
Database.addText("de.cfgInvertColors", "Farben invertieren?");
Database.addText("de.gridItemMainMapName", "Die Karte");
Database.addText("de.gridItemMainMapDescription", "Karte der Welt");
Database.addText("de.gridItemPogoStickName", "Springstock");
Database.addText("de.gridItemPogoStickDescription", "Dieser Gegenstand erlaubt es dir, in Quests zu springen.");
Database.addText("de.gridItemTimeRingName", "Ein Zeitring");
Database.addText("de.gridItemTimeRingDescription", "Dieser Gegenstand gibt dir eine neue FГ¤higkeit in Quests : Du kannst die Zeit verlangsamen. Benutze deinen Zeitring, wenn es dir zu schnell geht!");
Database.addText("de.gridItemThirdHouseKeyName", "Der dritte HausschlГјssel");
Database.addText("de.gridItemThirdHouseKeyDescription", "Dieser SchlГјssel erlaubt es dir, das dritte Haus im Dorf zu betreten.");
Database.addText("de.gridItemFeatherName", "Eine WГјstenvogelfeder");
Database.addText("de.gridItemFeatherDescription", "Diese magische Feder erlaubt es dir, hГ¶her zu springen, wenn du deinen Springstock benutzt!");
Database.addText("de.gridItemFeatherDescriptionNoPogoStick", "Aus irgendeinem Grund hast du das GefГјhl, dass diese Feder mit einem Springstock nГјtzlich sein kГ¶nnte...");
Database.addText("de.gridItemSpongeName", "Ein magischer Schwamm");
Database.addText("de.gridItemSpongeDescription", "Dieser magische Schwamm erlaubt es dir, dich wie ein Schwamm zusammenzuziehen und dadurch zu schrumpfen.");
Database.addText("de.gridItemFortressKeyName", "Der WГјstenfestungsschlГјssel");
Database.addText("de.gridItemFortressKeyDescription", "Dieser SchlГјssel erlaubt es dir, die antike Festung oberhalb der WГјste zu betreten. Wer weiГџ schon, was man dort entdecken kГ¶nnte?");
Database.addText("de.gridItemHeartPendantName", "Ein Herzamulett");
Database.addText("de.gridItemHeartPendantDescription", "Dieses Herzamulett wird deine Lebenspunkte erhГ¶hen, solang du es um deinen Hals trГ¤gst.");
Database.addText("de.gridItemHeartPlugName", "Ein Herzstecker");
Database.addText("de.gridItemHeartPlugDescription", "Dieser Herzstecker besteht aus Eisen, Spinnenbeinen und einer speziellen \"Herzlauge\", die in der Mitte eingeschlossen ist. Er erhГ¶ht deine Lebenspunkte um 20 Prozent!");
Database.addText("de.gridItemBeginnersGrimoireName", "Magie fГјr Memmen");
Database.addText("de.gridItemBeginnersGrimoireDescription", "Dieses Buch verleiht dir drei ZaubersprГјche, die sich einfach beschwГ¶ren lassen. Es scheint in der Tat fГјr AnfГ¤nger geschrieben worden zu sein. Folgende ZaubersprГјche wirst du benutzen kГ¶nnen : Saurer Regen (eine groГџe Menge an SГ¤ure fГ¤llt auf deine Gegner), Feuerball (ein riesiger Magieball aus Feuer fliegt in Richtung deiner Gegner) und Teleport (du wirst an eine zufГ¤llige Position teleportiert).");
Database.addText("de.gridItemAdvancedGrimoireName", "Zaubern fГјr Fortgeschrittene");
Database.addText("de.gridItemAdvancedGrimoireDescription", "Dieses Buch fГјr Fortgeschrittene verleiht dir zwei ZaubersprГјche : Magie auslГ¶schen und Dornenschild. Der erste wird jegliche Magie von dir oder deinen Gegnern wГ¤hrend eines Quests verhindern. Der zweite wird um dich herum einen Schild aus fliegenden Dornen erschaffen, welcher deinen Gegnern bei Kontakt Schaden hinzufГјgt");
Database.addText("de.gridItemBlackMagicGrimoireName", "Buch der schwarzen Magie");
Database.addText("de.gridItemBlackMagicGrimoireDescription", "Du hast dieses Zauberbuch aus einer HГ¶hle geborgen, was nicht einfach war - und das hat seinen Grund. Es verleiht dir nГ¤mlich zwei mГ¤chtige dunkle ZaubersprГјche. Der erste wird vor dir einen riesigen Wall aus Obsidiansteinen erschaffen, was nГјtzlich sein kann, um Gegner zu verlangsamen. Der zweite wird einen Schwarm von DГ¤monen heraufbeschwГ¶ren, die jeden wГ¤hrend eines Quests angreifen werden, auch dich. Sei vorsichtig damit.");
Database.addText("de.gridItemUnicornHornName", "Elfenbein des Einhorns");
Database.addText("de.gridItemUnicornHornDescription", "Dieses magische Horn gehГ¶rte einst einem Einhorn. Seine mГ¤chtigen HeilkrГ¤fte werden dir eine groГџe Hilfe sein. Du hast gehГ¶rt, dass das Einhorn den Namen Charlie hatte.");
Database.addText("de.gridItemXinopherydonClawName", "Klaue eines Xinopherydons");
Database.addText("de.gridItemXinopherydonClawDescription", "Diese Klaue gehГ¶rte einem Xinopherydon, einer zweikГ¶pfigen vorzeitlichen Kreatur, die als ausgestorben galt. Sie wird den Schaden deiner ausgerГјsteten Waffe verdoppeln.");
Database.addText("de.gridItemPitchforkName", "Eine Heugabel");
Database.addText("de.gridItemPitchforkDescription", "Mit dieser besonderen Heugabel kannst du den Ackerboden auflockern, ohne ihn komplett zu ruinieren. Dadurch wird das unterirdische Г–kosystem geschГјtzt. Sie wird die Produktion deiner Lutscherfarm verdreifachen.");
Database.addText("de.gridItemShellPowderName", "Muschelpulver");
Database.addText("de.gridItemShellPowderDescription", "Muschelpulver wird hГ¤ufig von Bauern benutzt, um das Wachstum von Lutschern zu verbessern. Dieses Pulver wird die Produktion deiner Lutscherfarm verdreifachen!");
Database.addText("de.gridItemPName", "Der P-Stein");
Database.addText("de.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DВ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSВ°-J (`  /R`yM}  T$`` В°+-|U(\\OL&Y_)T|");
Database.addText("de.gridItemLName", "Der L-Stein");
Database.addText("de.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OВ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    В°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#В° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("de.gridItemAName", "Der A-Stein");
Database.addText("de.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITВ°#{  Oa$ GM T{Q \"S A-\\ F KmВ°& C #В° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("de.gridItemYName", "Der Y-Stein");
Database.addText("de.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  В°-  AX Y ` В° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_В°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EВ° I &L- /    K");
Database.addText("de.gridItemRedSharkFinName", "Eine rote magische Haiflosse");
Database.addText("de.gridItemRedSharkFinDescription", "Diese magische Flosse wird den Schaden deines Feuerballs stark erhГ¶hen. Schlussendlich wird Feuerball also doch noch nГјtzlich.");
Database.addText("de.gridItemGreenSharkFinName", "Eine grГјne magische Haiflosse");
Database.addText("de.gridItemGreenSharkFinDescription", "Diese magische Flosse verleiht deiner Lutscherfarm die Kraft der Natur! Deine Produktion wird sich verfГјnffachen.");
Database.addText("de.gridItemPurpleSharkFinName", "Eine violette magische Haiflosse");
Database.addText("de.gridItemPurpleSharkFinDescription", "Diese magische Flosse wird dir einen neuen Spruch der schwarzen Magie verleihen! Du kannst ihn hГ¶chsten einmal pro Quest verwenden. Sei vorsichtig damit!");
Database.addText("de.gridItemTalkingCandyName", "Ein sprechendes Bonbon");
Database.addText("de.gridItemTalkingCandyDescription", "Dieses sprechende Bonbon ist aufgetaucht, nachdem du die vier Steine auf die Spitze des Schlossturms gebracht hast. Es hilft dir vielleicht dabei, die Candy Box zu Г¶ffnen...");
Database.addText("de.inventorySpecialNothingEqItem", "Nichts");
Database.addText("de.eqItemWeaponWoodenSwordName", "HГ¶lzernes Schwert");
Database.addText("de.eqItemWeaponWoodenSwordDescription", "Ein einfaches Schwert aus Holz");
Database.addText("de.eqItemWeaponIronAxeName", "Eiserne Axt");
Database.addText("de.eqItemWeaponIronAxeDescription", "Eine simple Axt aus Eisen. Gut geschliffen. StГ¤rker als das hГ¶lzerne Schwert.");
Database.addText("de.eqItemWeaponPolishedSilverSwordName", "Poliertes Silberschwert");
Database.addText("de.eqItemWeaponPolishedSilverSwordDescription", "Ein mГ¤chtiges Schwert, mit NГ¤geln besetzt.");
Database.addText("de.eqItemWeaponTrollBludgeonName", "Keule des Trolls");
Database.addText("de.eqItemWeaponTrollBludgeonDescription", "Du hast diese Keule von dem Troll genommen, der die BrГјcke bewacht hat. Sie ist zwar langsam, aber man kann damit wirkungsvoll Gegner verprГјgeln.");
Database.addText("de.eqItemWeaponTribalSpearName", "Stammesspeer");
Database.addText("de.eqItemWeaponTribalSpearDescription", "Du hast diesen Speer neben der Leiche eines Stammeskriegers gefunden, der sich in einem groГџen Graben verirrt hat. Es ist schwierig, sich darauf einzulassen, aber sobald du dich daran gewГ¶hnt hast, ist er sicherlich eine gute Waffe.");
Database.addText("de.eqItemWeaponSummoningTribalSpearName", "BeschwГ¶rer-Stammesspeer");
Database.addText("de.eqItemWeaponSummoningTribalSpearDescription", "Dieser magische Stammesspeer ist stГ¤rker als ein gewГ¶hnlicher Speer und wird wГ¤hrend Quests immer wieder Stammeskrieger beschwГ¶ren, die dir helfen werden.");
Database.addText("de.eqItemWeaponMonkeyWizardStaffName", "Stab des Affenmagiers");
Database.addText("de.eqItemWeaponMonkeyWizardStaffDescription", "Dieser Stab gehГ¶rte einem nackten Affenmagier, dem du in der HГ¶hle begegnet bist. Er wirft automatisch ZaubersprГјche gegen deine Gegner.");
Database.addText("de.eqItemWeaponEnchantedMonkeyWizardStaffName", "Stab des Affenmagiers (verzaubert)");
Database.addText("de.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Dieser Stab ist schneller als die nicht-verzauberte Variante, er wird also viel mehr SprГјche zaubern.");
Database.addText("de.eqItemWeaponGiantSpoonName", "Ein riesiger LГ¶ffel");
Database.addText("de.eqItemWeaponGiantSpoonDescription", "Dieser riesige LГ¶ffel war in einer riesigen Teekanne in der WГјstenfestung. Du kannst nicht sagen, ob er jemals verwendet wurde, aber wenn, dann muss es jemand sehr GroГџes gewesen sein. Treffen mГ¶chtest du ihn eher nicht.");
Database.addText("de.eqItemWeaponGiantSpoonOfDoomName", "Riesiger LГ¶ffel des Untergangs");
Database.addText("de.eqItemWeaponGiantSpoonOfDoomDescription", "Dieser riesige LГ¶ffel ist sogar noch stГ¤rker als ein gewГ¶hnlicher riesiger LГ¶ffel, den man beispielsweise in einer riesigen Teekanne finden kГ¶nnte. Leider ist er ziemlich langsam.");
Database.addText("de.eqItemWeaponScytheName", "Die Sense");
Database.addText("de.eqItemWeaponScytheDescription", "Es wird erzГ¤hlt, dass diese Sense dem Tod selbst gehГ¶rt hГ¤tte. Sie ist extrem schnell.");
Database.addText("de.eqItemHatMerchantHatName", "Hut des HГ¤ndlers");
Database.addText("de.eqItemHatMerchantHatDescription", "Dieser Hut wurde dir vom Bonbon-VerkГ¤ufer verkauft. Der Bonbon-VerkГ¤ufer liebt Bonbons. Dieser Hut wird die Zahl deiner in Quests gefundenen Bonbons versiebenfachen!");
Database.addText("de.eqItemHatSorceressHatName", "Der Hexenhut");
Database.addText("de.eqItemHatSorceressHatDescription", "Dieser Hut wurde dir von der Hexe verkauft. Er wird deine ZaubersprГјche und -trГ¤nke verstГ¤rken.");
Database.addText("de.eqItemHatOctopusKingCrownName", "Krone des OktopuskГ¶nigs");
Database.addText("de.eqItemHatOctopusKingCrownDescription", "Du fГјhlst dich selbstbewusster, wenn du diese Krone trГ¤gst. Sie gibt dir keinerlei Vorteile in Quests, aber Selbstbewusstsein ist wichtig!");
Database.addText("de.eqItemHatOctopusKingCrownWithJaspersName", "Mit Jaspis besetzte Krone des OktopuskГ¶nigs");
Database.addText("de.eqItemHatOctopusKingCrownWithJaspersDescription", "Diese verzauberte Krone wurde aus Gold gefertigt und mit Jaspisperlen besetzt. In Quests wirst du mit ihr mГ¤chtige FeuerbГ¤lle werfen kГ¶nnen. AuГџerdem funkelt sie so schГ¶n!");
Database.addText("de.eqItemHatOctopusKingCrownWithObsidianName", "Mit Obsidian besetzte Krone des OktopuskГ¶nigs");
Database.addText("de.eqItemHatOctopusKingCrownWithObsidianDescription", "Diese verzauberte Krone ist aus Gold und Obsidian gefertigt. Sie ist wunderschГ¶n. In Quests wird sie den OktopuskГ¶nig beschwГ¶ren, der fГјr kurze Zeit an deiner Seite kГ¤mpfen wird. Welch ein tentakulГ¶ser VerbГјndeter!");
Database.addText("de.eqItemGlovesLeatherGlovesName", "Lederhandschuhe");
Database.addText("de.eqItemGlovesLeatherGlovesDescription", "Diese Handschuhe bringen eigentlich gar nichts. Aber sie sind immerhin weich und bequem!");
Database.addText("de.eqItemGlovesRedEnchantedGlovesName", "Rote verzauberte Handschuhe");
Database.addText("de.eqItemGlovesRedEnchantedGlovesDescription", "Diese verzauberten Handschuhe strahlen ein rГ¶tliches Licht aus, wenn du dich im Dunklen befindest. In Quests werden sie hin und wieder kleinere FeuerbГ¤lle gegen deine Gegner werfen, was definitiv hilfreich sein kann.");
Database.addText("de.eqItemGlovesPinkEnchantedGlovesName", "Pinkfarbene verzauberte Handschuhe");
Database.addText("de.eqItemGlovesPinkEnchantedGlovesDescription", "Diese verzauberten Handschuhe hinterlassen eine pinkfarbene Markierung auf allem, was du berГјhrst. In Quests heilen sie dich durchgehend.");
Database.addText("de.eqItemBootsRocketBootsName", "Raketenstiefel");
Database.addText("de.eqItemBootsRocketBootsDescription", "Diese fantastischen Raketenstiefel erlauben es dir, in der Luft zu springen, sodass du im Prinzip fliegst.");
Database.addText("de.eqItemBootsLeatherBootsName", "Lederstiefel");
Database.addText("de.eqItemBootsLeatherBootsDescription", "Einfache Lederstiefel. Nichts besonderes.");
Database.addText("de.eqItemBootsBootsOfIntrospectionName", "Stiefel der SelbstprГјfung");
Database.addText("de.eqItemBootsBootsOfIntrospectionDescription", "Nimm dir Zeit, atme durch und beruhige dich. Wenn du diese Stiefel trГ¤gst, wirst du dich nicht bewegen, wГ¤hrend du den Boden berГјhrst.");
Database.addText("de.eqItemBodyArmoursLightweightBodyArmourName", "Leichter Brustharnisch");
Database.addText("de.eqItemBodyArmoursLightweightBodyArmourDescription", "Dieser Brustharnisch wird dir ein wenig Schutz bieten. Du wirst den Attacken deiner Feinde etwas einfacher standhalten kГ¶nnen.");
Database.addText("de.eqItemBodyArmoursKnightBodyArmourName", "Brustpanzer des Ritters");
Database.addText("de.eqItemBodyArmoursKnightBodyArmourDescription", "Dieser starke Brustpanzer wird dich beschГјtzen. Die Angriffe deiner Feinde werden dir weniger anhaben kГ¶nnen.");
Database.addText("de.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Verzauberter Brustpanzer des Ritters");
Database.addText("de.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Diese RГјstung ist etwas ganz Besonderes. Du wirst kaum noch Schaden nehmen, aber die StГ¤rke deiner aktiven Waffe wird um die HГ¤lfte reduziert.");
Database.addText("de.mapVillageForgeBuyWoodenSwordButton", "Ein hГ¶lzernes Schwert kaufen (150 Bonbons)");
Database.addText("de.mapVillageForgeBuyWoodenSwordSpeech", "Danke fГјr deinen Kauf! Dieses hГ¶lzerne Schwert ist relativ schwach, aber fГјr den Anfang reicht es.");
Database.addText("de.mapVillageForgeBuyIronAxeButton", "Eine eiserne Axt kaufen (400 Bonbons)");
Database.addText("de.mapVillageForgeBuyIronAxeSpeech", "Ich hoffe, dass dir diese eiseren Axt gefallen wird. Ich habe sie extra fГјr dich geschliffen!");
Database.addText("de.mapVillageForgeBuyPolishedSilverSwordButton", "Ein poliertes Silberschwert kaufen (2 000 Bonbons)");
Database.addText("de.mapVillageForgeBuyPolishedSilverSwordSpeech", "Es hat mich viel Zeit gekostet, dieses Schwert herzustellen. Ich kann dir versichern, dass es sein Geld wert ist.");
Database.addText("de.mapVillageForgeBuyLightweightBodyArmourButton", "Einen leichten Brustharnisch kaufen (15 000 Bonbons)");
Database.addText("de.mapVillageForgeBuyLightweightBodyArmourSpeech", "Dieser Brustharnisch wird dir Schutz gegen deine Feinde bieten.");
Database.addText("de.mapVillageForgeBuyScytheButton", "Eine Sense kaufen (5 000 000 Bonbons)");
Database.addText("de.mapVillageForgeBuyScytheSpeech", "Es hat mich mehrere Monate gekostet, um diese Sense herzustellen. Sie ist ein wahres Kunstwerk. Sie ist wahrscheinlich die schnellste Waffe, die du jemals benutzen wirst. Viel GlГјck!");
Database.addText("de.wishingWellThrowFirstCandyButton", "Wirf ein Bonbon in den Brunnen");
Database.addText("de.wishingWellCandyIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen SГјГџes gewГ¤hre ich dir WГјnsche! Wenn du Bonbons in mich wirfst, werde ich deine Wunden heilen.");
Database.addText("de.wishingWellThrewCandiesSpeech", "Deine Wunden sind nun geheilt!");
Database.addText("de.wishingWellNoWoundSpeech", "Du hast keine Wunden, die geheilt werden mГјssen!");
Database.addText("de.wishingWellThrowFirstLollipopButton", "Wirf einen Lutscher in den Brunnen");
Database.addText("de.wishingWellLollipopIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen SГјГџes gewГ¤hre ich dir WГјnsche! Wenn du Lutscher in mich wirfst, werde ich sie dir in Bonbons umwandeln.");
Database.addText("de.wishingWellThrewLollipopsSpeech", "Deine Lutscher wurden in Bonbons verwandelt! Zwei Lutscher fГјr ein Bonbon.");
Database.addText("de.wishingWellThrowChocolateBarButton", "Wirf einen Schokoriegel in den Brunnen");
Database.addText("de.wishingWellChocolateBarIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen SГјГџes gewГ¤hre ich dir WГјnsche! Ich liebe Schokoriegel. Das tue ich wirklich. FГјr jeden Schokoriegel, den du in mich wirfst, inklusive diesem, wirst du mit einer magischen Verzauberung entlohnt werden.");
Database.addText("de.wishingWellThrewChocolateBarSpeech", "Welchen Gegenstand mГ¶chtest du verzaubern?");
Database.addText("de.wishingWellThrowPainAuChocolatButton", "Wirf ein Schokocrossaint in den Brunnen");
Database.addText("de.wishingWellPainAuChocolatIntroductionSpeech", "Hallo, Fremder! Ich bin der Wunschbrunnen. Im Tausch gegen SГјГџes gewГ¤hre ich dir WГјnsche! Wenn du ein Schokocrossaint in mich wirfst, erhГ¤lst du ein ganz besonderes Geschenk. WГ¤hle mit Bedacht.");
Database.addText("de.wishingWellThrewPainAuChocolatSpeech", "Danke fГјr das Schokocrossaint! Du darfst nun dein Geschenk auswГ¤hlen.");
Database.addText("de.wishingWellChooseGift", "WГ¤hle dein Geschenk!");
Database.addText("de.wishingWellChooseGiftButton", "AuswГ¤hlen");
Database.addText("de.wishingWellGiftDoneSpeech", "Fertig! Du hast jetzt ein neues Geschenk. Es wird auf dem Statusmonitor deines Inventars erscheinen.");
Database.addText("de.wishingWellNoPossibleEnchantment", "Keine Verzauberung mГ¶glich");
Database.addText("de.wishingWellChooseEnchantment", "WГ¤hle eine Verzauberung");
Database.addText("de.wishingWellEnchantButton", "Verzaubern");
Database.addText("de.wishingWellEnchantmentDoneSpeech", "Na bitte! Dein Gegenstand wurde verzaubert.");
Database.addText("de.pierLighthouseButton", "Mit dem Boot zum Leuchtturm fahren");
Database.addText("de.pierTheSeaButton", "Ins Meer springen");
Database.addText("de.lonelyHouseOpenBox", "Die Kiste Г¶ffnen");
Database.addText("de.lonelyHouseShakeBox", "Die Kiste schГјttern");
Database.addText("de.lonelyHouseBreakLock", "Das Schloss zerbrechen");
Database.addText("de.lonelyHouseKickBox", "Die Kiste treten");
Database.addText("de.lonelyHouseAskTheBoxToOpenItself", "Die Kiste bitten, sich selbst zu Г¶ffnen");
Database.addText("de.lonelyHouseLureTheBoxWithACandy", "Die Kiste mit SГјГџigkeiten anlocken");
Database.addText("de.lonelyHouseTakeTheBox", "Nimm die Kiste mit, du wirst vermutlich ohnehin einen SchlГјssel brauchen, um sie zu Г¶ffnen.");
Database.addText("de.lonelyHouseOpenBoxResult", "Die Kiste ist verschlossen");
Database.addText("de.lonelyHouseShakeBoxResult", "Nichts passiert");
Database.addText("de.lonelyHouseBreakLockResult", "Das Schloss hГ¤lt stand");
Database.addText("de.lonelyHouseKickBoxResult", "Ihr FuГџ schmerzt ein wenig, aber nichts passiert");
Database.addText("de.lonelyHouseAskTheBoxToOpenItselfResult", "...bist du dir darГјber im Klaren, dass du mit einer Kiste redest?");
Database.addText("de.lonelyHouseLureTheBoxWithACandyResult", "Es scheint die Kiste nicht zu interessieren");
Database.addText("de.lonelyHouseTakeTheBoxResult", "In dieser Candy Box ist wahrscheinlich etwas Interessantes.");
Database.addText("de.lollipopFarmConstructMill", "Eine MГјhle bauen (10 000 Lutscher)");
Database.addText("de.lollipopFarmFeedMill", "Die MГјhle auffГјllen");
Database.addText("de.lollipopFarmCurrentCandiesProduction", "Aktuelle Bonbon-Produktion :");
Database.addText("de.lollipopFarmDigPond", "Einen TГјmpel graben (100 000 Lutscher)");
Database.addText("de.lollipopFarmBuyLolligator", "Einen Lolligator kaufen (1 200 Bonbons)");
Database.addText("de.lollipopFarmLolligatorsConversionText", "Umwandlung Bonbons -> Lutscher aktiviert");
Database.addText("de.lighthouseAskButton", "Fragen");
Database.addText("de.lighthouseQuestionWho", "Wer bist du?");
Database.addText("de.lighthouseQuestionWhoSpeech", "Ich bin ein sehr alter Zyklop.");
Database.addText("de.lighthouseQuestionWhat", "Was tust du hier?");
Database.addText("de.lighthouseQuestionWhatSpeech", "Ich verbringe hier den ganzen Tag und warte darauf, dass ein Boot kommt. Es ist lange her, dass ich zum letzten Mal ein Boot gesehen habe. Aber ich muss hier bleiben und in das Meer blicken, weil ein Boot kommen kГ¶nnte.");
Database.addText("de.lighthouseQuestionWhyEatCandies", "Weshalb wГјrde ich Bonbons essen wollen?");
Database.addText("de.lighthouseQuestionWhyEatCandiesSpeech", "Weil sie gut fГјr deine Gesundheit sind!");
Database.addText("de.lighthouseQuestionCandyBox", "Was ist eine Candy Box?");
Database.addText("de.lighthouseQuestionCandyBoxSpeech", "Das ist eine sehr alte Kiste, von der behauptet wird, sie enthielte alle SГјГџigkeiten dieser Welt. Der Legende nach solle derjenige, der sie Г¶ffnen kГ¶nnte, alle Bonbons bekommen, die er sich vorstellen kГ¶nne.");
Database.addText("de.lighthouseQuestionDragon", "Der Drache hat mir gesagt, ich solle hier herkommen, wenn ich Bonbons will.");
Database.addText("de.lighthouseQuestionDragonSpeech", "Oh, ich verstehe... Na ja, ich kann dir die Bonbons nicht direkt anbieten, aber ich kann dir etwas geben, mit dem du letztendlich eine MENGE an Bonbons haben wirst. Ich muss dich zuvor lediglich einem Test unterziehen, weil ich nicht jedem das geben kann, was ich besitze. LГ¶se dieses Puzzle und es wird dein sein.");
Database.addText("de.lighthouseFoundStone", "Herzlichen GlГјckwunsch! Du hast den Test bestanden und einen Stein gefunden. Er ist sehr wertvoll, aber du benГ¶tigst drei weitere, um etwas damit anfangen zu kГ¶nnen. Viel GlГјck bei der Suche!");
Database.addText("de.lighthouseFoundStoneAgain", "Gut gemacht, du hast das Puzzle erneut gelГ¶st. Es scheint dir zu gefallen.");
Database.addText("de.saveLocalSaveTitle", "Browser-SpielstГ¤nde");
Database.addText("de.saveLocalSaveWhy", "WГ¤hle einen lokalen Spielstand, wenn du mit deinem jetzigen GerГ¤t oder Browser weiterspielen mГ¶chten.");
Database.addText("de.saveLocalSaveWarning0", "Dein Browser scheint HTML5 nicht zu unterstГјtzen.");
Database.addText("de.saveLocalSaveWarning1", "Du solltest deinen Browser updaten, um UnterstГјtzung fГјr lokale SpielstГ¤nde zu erhalten.");
Database.addText("de.saveLocalSaveChooseSlot", "WГ¤hle einen Spielstand aus :");
Database.addText("de.saveLocalSaveAutosaveEnabled", "Automatisches Speichern aktiviert");
Database.addText("de.saveLocalSaveChooseWhatToDo", "WГ¤hle aus, was du tun mГ¶chtest :");
Database.addText("de.saveLocalSaveSaveButton", "Speichern");
Database.addText("de.saveLocalSaveAutosaveButton", "Alle 10 Minuten speichern");
Database.addText("de.saveLocalSaveDisableAutosaveButton", "Automatisches Speichern deaktivieren");
Database.addText("de.saveFileSaveTitle", "Text-SpielstГ¤nde");
Database.addText("de.saveFileSaveWhy0", "Benutze diese Funktion, wenn :");
Database.addText("de.saveFileSaveWhy1", "Du auf einem anderen GerГ¤t oder Browser weiterspielen mГ¶chten");
Database.addText("de.saveFileSaveWhy2", "Du deinen Spielstand mit jemand anderem teilen mГ¶chten");
Database.addText("de.saveFileSaveWhy3", "Du aus irgendeinem Grund deinen Browser-Cache leeren mГ¶chten");
Database.addText("de.saveFileSaveWhy4", "(was deine lokalen SpielstГ¤nde lГ¶schen wird)");
Database.addText("de.saveFileSaveButton", "Aktuellen Spielstand als Text generieren");
Database.addText("de.saveFileSaveWarning", "Kopiere diesen Text nun irgendwohin! (beispielsweise in eine Datei)");
Database.addText("de.saveLocalLoadTitle", "Browser-SpielstГ¤nde laden");
Database.addText("de.saveLocalLoadYouCan", "Mithilfe der folgenden Links kannst du einen lokalen Spielstand laden :");
Database.addText("de.saveLocalLoadThanksTo", "Dank HTML5-Magie ist es mГ¶glich, diese Links auch offline zu benutzen.");
Database.addText("de.saveFileLoadTitle", "Text-SpielstГ¤nde laden");
Database.addText("de.saveFileLoadPaste", "Kopiere deinen Text-Spielstand in das untere Feld und klicke dann auf den \"Laden\"-Button");
Database.addText("de.saveFileLoadButton", "Laden");
Database.addText("de.mountainsText0", "Du hast etwas in den Bergen erblickt!");
Database.addText("de.mountainsText1", "Das sieht interessant aus. Vielleicht kГ¶nnte es hilfreich sein.");
Database.addText("de.mountainsTextButton", "Die Berge besteigen, um den Gegenstand zu erlangen");
Database.addText("de.mountainsTextAfter", "Du hast einen Springstock gefunden! Er wurde deinem Inventar hinzugefГјgt.");
Database.addText("de.secondHouseIntroSpeech", "Hallo, ich bin der Bonbon-VerkГ¤ufer. FГјr Bonbons wГјrde ich alles tun. Was brauchst du?");
Database.addText("de.secondHouseLollipop1Speech", "Dies ist ein Lutscher mit Zitronengeschmack. Mein Lieblingslutscher! Er kostet 60 Bonbons, aber er ist es wert.");
Database.addText("de.secondHouseLollipop2Speech", "Dies ist ein Lutscher mit Erdbeergeschmack. Er schmeckt gut. Ich mag seine rote Farbe. Nur 60 Bonbons!");
Database.addText("de.secondHouseLollipop3Speech", "Dies ist ein Lutscher mit KГјrbisgeschmack. Ich wette, einen solchen hast du noch nie probiert! 60 Bonbons und es ist deiner.");
Database.addText("de.secondHouseLollipopButtonText", "Diesen Lutscher kaufen (60 Bonbons)");
Database.addText("de.secondHouseMerchantHatSpeech", "Ich kГ¶nnte dir meinen Hut verkaufen, aber es ist sehr wertvoll, weiГџt du... Du wirst mir eine Menge Bonbons dafГјr geben mГјssen. Sagen wir 1 Million Bonbons. Das erscheint fair, nicht wahr?");
Database.addText("de.secondHouseMerchantHatButtonText", "Hut des HГ¤ndlers kaufen (1 000 000 Bonbons)");
Database.addText("de.secondHouseTimeRingSpeech", "Dies ist ein Zeitring. Er ist irgendwie magisch. Er erlaubt es dir, die Zeit zu verlangsamen, wenn du dich in Gefahr befindest.");
Database.addText("de.secondHouseTimeRingButtonText", "Zeitring kaufen (500 Bonbons)");
Database.addText("de.secondHouseLeatherGlovesSpeech", "Diese Handschuhe wurden aus Kamelleder gefertigt, sie haben eine hohe QualitГ¤t. Ich habe viele von ihnen auf Lager, deshalb sind sie so gГјnstig : nur 300 Bonbons!");
Database.addText("de.secondHouseLeatherBootsButtonText", "Lederstiefel kaufen (300 Bonbons)");
Database.addText("de.secondHouseLeatherBootsSpeech", "Diese hochwertigen Stiefel wurden aus Kamelleder gefertigt und werden deine FГјГџe warmhalten.");
Database.addText("de.secondHouseLeatherGlovesButtonText", "Lederhandschuhe kaufen (300 Bonbons)");
Database.addText("de.secondHouseChocolateBarSpeech", "Dies ist ein Schokoriegel. Ich weiГџ nicht, wofГјr er benutzt wird, aber er scheint relativ selten zu sein, was auch den Preis erklГ¤rt. 800 Bonbons und er ist deiner.");
Database.addText("de.secondHouseChocolateBarButtonText", "Schokoriegel kaufen (800 candies)");
Database.addText("de.outsideTheHoleButton", "Jump in this big hole in the ground");
Database.addText("de.theCaveExitText0", "Du hast endlich den Ausgang der HГ¶hle erreicht.");
Database.addText("de.theCaveExitText1", "DrauГџen kannst du einen dichten Wald erkennen.");
Database.addText("de.theCaveExitButtonText", "HГ¶hle verlassen");
Database.addText("de.theCaveFirstSentenceWentStraight", "Du bist geradeaus gegangen.");
Database.addText("de.theCaveFirstSentenceWentLeft", "Du hast den linken Weg genommen.");
Database.addText("de.theCaveFirstSentenceWentRight", "Du hast den rechten Weg genommen.");
Database.addText("de.theCaveFirstSentenceYouAre", "Du bist in einer HГ¶hle. Vor dir erstrecken sich drei Wege.");
Database.addText("de.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Du hast einen merkwГјrdigen Gegenstand vor dir auf dem Boden erspГ¤ht.");
Database.addText("de.theCavePattern_ChocolateBarNowSeeChocolateBar", "Du hast einen Schokoriegel vor dir entdeckt.");
Database.addText("de.theCavePattern_TreasureMapSentence", "Du siehst kleine Steine, die auf dem Boden ungewГ¶hnlich platziert wurden.");
Database.addText("de.theCavePattern_MonkeyWizardSentence", "Du stГ¶Гџt zufГ¤llig auf einen nackten Affenmagier.");
Database.addText("de.theCavePattern_MonkeyWizardButton", "Fordere ihn heraus");
Database.addText("de.theCavePattern_OctopusKingSentence", "Du stГ¶Гџt zufГ¤llig auf den OktopuskГ¶nig. Er wirkt ekelerregend.");
Database.addText("de.theCavePattern_OctopusKingButton", "Fordere ihn heraus");
Database.addText("de.fortressInsideText0", "Du bist in der WГјstenfestung");
Database.addText("de.fortressInsideText1", "Du kannst zwischen drei TГјren wГ¤hlen.");
Database.addText("de.fortressInsideText2", "Jede von ihnen fГјhrt in einen groГџen Raum mit einem Schatz am Ende.");
Database.addText("de.fortressInsideEnterRoom1", "Ersten Raum betreten");
Database.addText("de.fortressInsideEnterRoom2", "Zweiten Raum betreten");
Database.addText("de.fortressInsideEnterRoom3", "Dritten Raum betreten");
Database.addText("de.treasureButtonDig", "Graben");
Database.addText("de.treasureButtonYouFound", "Du hast drei Schokoriegel gefunden!");
Database.addText("de.sorceressHutHello", "Hallo, ich bin die Hexe. Ich kГ¶nnte dir ein oder zwei Dinge Гјber die Magie verraten. AuГџerdem kann ich dir interessante GegenstГ¤nde geben oder ZaubersprГјche fГјr dich sprechen. Aber alles hat seinen Preis! Und dieser Preis werden Lutscher sein. Viele von ihnen.");
Database.addText("de.sorceressHutClickedGrimoire", "Dieses Zauberbuch ist fГјr blutige AnfГ¤nger. Wenn du es in Quests aktiv hast, wirst du eine Reihe einfacher, aber nГјtzlicher SprГјche benutzen kГ¶nnen. Du wirst es brauchen! Nur 5 000 Lutscher.");
Database.addText("de.sorceressHutBuyGrimoireButton", "Magie fГјr Memmen kaufen (5 000 Lutscher)");
Database.addText("de.sorceressHutBuyGrimoireSpeech", "Danke fГјr den Kauf! Du wirst drei SprГјche mit diesem Zauberbuch sprechen kГ¶nnen. Viel GlГјck!");
Database.addText("de.sorceressHutClickedGrimoire2", "Dieses Zauberbuch richtet sich an Fortgeschrittene. Wenn du es in Quests aktiv hast, wirst du zwei SprГјche benutzen kГ¶nnen. Ich selbst habe es geschrieben, was nicht einfach war. 20 000 Lutscher sind ein fairer Preis.");
Database.addText("de.sorceressHutBuyGrimoire2Button", "Zaubern fГјr Fortgeschrittene kaufen (20 000 Lutscher)");
Database.addText("de.sorceressHutBuyGrimoire2Speech", "Danke fГјr den Kauf! Du wirst zwei SprГјche mit diesem Zauberbuch sprechen kГ¶nnen. WГ¤hle sie mit Bedacht!");
Database.addText("de.sorceressHutClickedCauldron", "Dies ist mein Kessel. Er erlaubt es mir, magische ZaubertrГ¤nke zu brauen. Ich kГ¶nnte ihn dir verkaufen, aber er ist sehr wertvoll... er wird dich 100 000 Lutscher kosten.");
Database.addText("de.sorceressHutBuyCauldronButton", "Kessel kaufen (100 000 Lutscher)");
Database.addText("de.sorceressHutBuyCauldronSpeech", "Danke vielmals! 100 000 Lutscher fГјr mich! Ich habe dir auГџerdem eine Anleitung beigelegt. Sie wird nГјtzlich sein.");
Database.addText("de.sorceressHutClickedHat", "Ich habe in der Tat einen schГ¶nen Hut. Aber ich kann ihn dir nicht verkaufen, dafГјr ist er vieeeel zu wertvoll. Wirklich, ich kann nicht. Leg es nicht darauf an. Nein. Nein nein nein, ich sollte das nicht tun. Ach na schГ¶n, ich werde ihn dir verkaufen, aber fГјr 1 000 000 000 Lutscher. Das wirst du vermutlich ohnehin nicht bezahlen kГ¶nnen.");
Database.addText("de.sorceressHutBuyHatButton", "Hut kaufen (1 000 000 000 Lutscher)");
Database.addText("de.sorceressHutBuyHatSpeech", "Eine Milliarde Lutscher fГјr miiiich! Ich habe den Hut zwar nicht mehr, aber dafГјr eine Milliarde Lutscher, wow! ... Das war es wert.");
Database.addText("de.cauldronPreviousPageButton", "Vorherige Seite");
Database.addText("de.cauldronNextPageButton", "NГ¤chste Seite");
Database.addText("de.cauldronWhatYouWantToPut", "In den Kessel geben :");
Database.addText("de.cauldronWhatIsIn", "Inhalt des Kessels :");
Database.addText("de.cauldronWhatYouCanDo", "Aktionen :");
Database.addText("de.castleBigRoomComment", "Ein groГџer Raum");
Database.addText("de.castleARoomComment", "Ein Raum");
Database.addText("de.castleADarkRoomComment", "Ein dunkler Raum");
Database.addText("de.castleCastleEntranceComment", "Der Schlosseingang");
Database.addText("de.castleTowerEntranceComment", "Der Turmeingang");
Database.addText("de.castleNougatMonsterComment", "Das riesige Nougat-Monster angreifen");
Database.addText("de.castleGuardsComment", "Die WГ¤chter angreifen");
Database.addText("de.castleStairsComment", "Treppen");
Database.addText("de.buttonBackToTheCastle", "ZurГјck ins Schloss");
Database.addText("de.castleBigRoomHovenSpeechSad", "Hallo! Ich bin ein sehr alter Brotofen! FГјr gewГ¶hnlich habe ich Tonnen leckerer Teigwaren gebacken, aber es benutzt mich keiner mehr. Vielleicht... vielleicht kГ¶nntest du mir helfen? Gib mir einfach einige deiner SГјГџigkeiten. Keine Sorge, du wirst es nicht bereuen. Du kannst mir vertrauen.");
Database.addText("de.castleBigRoomHovenNotEnough", "Oh... du hast nicht genГјgend Bonbons, ich kann nichts fГјr dich tun. Ich bin einfach nutzlos. Den nutzlosen Brotofen, so solltest du mich nennen.");
Database.addText("de.castleBigRoomHovenSpeechMadePainAuChocolat", "Juhu! Danke vielmals! Ich habe 100 Bonbons und einen Schokoriegel benutzt, um fГјr dich... ein Schokocroissant gebacken! Das ist mein LieblingsgebГ¤ck. Ich hoffe, dass auch du es magst.");
Database.addText("de.castleBigRoomHovenSpeechHappy", "Hey! Wenn ich dir weiteres GebГ¤ck backen soll, sag einfach Bescheid. Ich wГјrde dir gerne helfen.");
Database.addText("de.castleBigRoomHovenSpeechHappyNotEnough", "Oh, leider hast du nicht genГјgend SГјГџigkeiten. Du brauchst 100 Bonbons und einen Schokoriegel. Komm wieder, wenn du das hast.");
Database.addText("de.castleBigRoomHovenLetHovenTakeButton", "Gib dem Ofen alle SГјГџigkeiten, die er verlangt");
Database.addText("de.castleBigRoomHovenThanks", "Danke, Ofen!");
Database.addText("de.dragonStopTickling", "Hey, du! HГ¶r bitte auf mich zu kitzeln.");
Database.addText("de.dragonStopTicklingButton", "Г„h, Г¶hm, Entschuldigung. Ich dachte, ich solle dich angreifen.");
Database.addText("de.dragonTalking", "Ich bin der Drache und dies ist mein Schloss. Du musstest sehr tapfer sein, um es Гјberhaupt zu betreten. Jemandem wie dir wГјrde ich gerne helfen. Nach was suchst du?");
Database.addText("de.dragonTalkingChallengeButton", "Herausforderung");
Database.addText("de.dragonTalkingFameButton", "Ruhm");
Database.addText("de.dragonTalkingCandiesButton", "Bonbons");
Database.addText("de.dragonTalkingChallengeSpeech", "Oh, du willst also eine Herausforderung? Dann solltest du die HГ¶lle besuchen, es ist nГ¤mlich bekannt, dass der Teufel ein harter Gegner ist. Spring auf meinen RГјcken und ich werde dich dorthin bringen!");
Database.addText("de.dragonTalkingFameSpeech", "Der einfachste Weg, um berГјhmt zu werden, ist es, dem Entwickler selbst entgegenzutreten. Aber gib Acht, das wird nicht einfach sein.");
Database.addText("de.dragonTalkingCandiesSpeech", "Letztendlich sind SГјГџigkeiten das, was wir alle wollen, nicht wahr? Ich denke, ein Freund von mir kГ¶nnte dir damit helfen. Du wirst ihn leicht erkennen, er hat nГ¤mlich nur ein Auge. Sag ihm einfach, dass du mich kennst.");
Database.addText("de.dragonTalkingChallengeAnswer", "Auf geht's!");
Database.addText("de.dragonTalkingFameAnswer", "Ich bin bereit.");
Database.addText("de.dragonTalkingCandiesAnswer", "Okay, danke!");
Database.addText("de.buttonBackToCastle", "ZurГјck ins Schloss");
Database.addText("de.talkingCandySpeechNoBox", "Hallo, ich bin das sprechende Bonbon. Du hast das Spiel fast gewonnen. Du musst nur noch die Candy Box finden. Sie befindet sich in einem Haus auГџerhalb des Dorfes. Dies ist der letzte Schritt!");
Database.addText("de.talkingCandySpeech1", "Hallo! Ich bin das sprechende Bonbon. Herzlichen GlГјckwunsch, du hast das Spiel gewonnen! Ich werde die Candy Box fГјr dich Г¶ffnen, dies ist deine Belohnung. Soll ich fortfahren?");
Database.addText("de.talkingCandySpeech2", "Fertig! Du steht nun fГјr dich offen. Ich hoffe, dass dir das Spiel gefallen hat :)");
Database.addText("de.talkingCandyButton", "Ja!!");
Database.addText("de.lighthousePuzzleResetButton", "ZurГјcksetzen");
Database.addText("se.mapVillageComment", "The Village");
Database.addText("se.mapFortressComment", "Den Г¶kenfortet");
Database.addText("se.mapATreeComment", "Ett trГ¤d");
Database.addText("se.mapTheDesertComment", "Г¶knen");
Database.addText("se.mapWishingWellComment", "The Wishing Well");
Database.addText("se.mapLonelyHouseComment", "Ett ensamt hus");
Database.addText("se.mapForestComment", "skogen");
Database.addText("se.mapCastleEntranceComment", "Slottet ingГҐng");
Database.addText("se.mapCastleComment", "slottet");
Database.addText("se.mapDragonComment", "draken");
Database.addText("se.candyBoxEatCandiesButton", "Г„t alla godis");
Database.addText("se.candyBoxThrowCandiesButton", "Kasta 10 godisar pГҐ marken");
Database.addText("se.mapVillageAHouseComment", "Ett hus");
Database.addText("se.mapVillageForgeComment", "smedjan");
Database.addText("se.buttonBackToTheMap", "Tillbaka till kartan");
Database.addText("se.mapSorceressHutComment", "Sorceress ' hut");
Database.addText("se.buttonBackToTheVillage", "Tillbaka till byn");
Database.addText("se.mapATreeIntroductionSpeech", "Hej , jag Г¤r ekorren . Jag kan ge dig godis , och massor av saker . Jag vet hur mycket du Г¤lskar godis . Men jag kГ¤nner mig ensam i denna skog .");
Database.addText("se.mapATreeIntroductionButton", "Hur kan jag hjГ¤lpa dig ?");
Database.addText("se.mapATreeFirstQuestion", "Jag kommer att stГ¤lla frГҐgor . Om du svarar rГ¤tt , kommer de sГ¶taste godis bli din ! FГ¶rst en : tror du verkligen Г¤lskar godis ? ( svar pГҐ engelska)");
Database.addText("se.mapATreeSecondQuestion", "Det stГ¤mmer ! HГ¤r Г¤r 20 godis fГ¶r dig . Nu slutfГ¶ra denna sekvens av bokstГ¤ver och du fГҐr en ny belГ¶ning : S , E , I , D , N , A , ?");
Database.addText("se.mapATreeThirdQuestion", "Godis ! HГ¤r finns 100 godis fГ¶r dig . NГ¤sta frГҐga : Hur mГҐnga karameller tГ¤nker candiest personen i vГ¤rlden besitter ?");
Database.addText("se.mapATreeFourthQuestion", "HГ¤r finns 500 godis fГ¶r dig ! NГ¤sta belГ¶ning bГ¶r vara Г¤nnu mer intressant ... HГ¤r Г¤r gГҐtan : I en gammal skog vГ¤xer ett mycket gammalt trГ¤d , dГ¤r bor de mest intelligenta djur i denna vГ¤rld . Det Г¤r sagt att detta trГ¤d har 60 rotar , 360 filialer och 2160 blad . Hur mГҐnga mГ¤rken kan du hitta pГҐ stammen ?");
Database.addText("se.mapATreeFifthQuestion", "Grattis ! Jag pratade om mitt trГ¤d , faktiskt. HГ¤r finns 3 klubbor fГ¶r dig . Dra nytta av dem ! NГ¤sta gГҐta , lyssna noga : Under en fullmГҐne , jag kastar en gul hatt i rГ¶da havet . Vad hГ¤nder med den gula hatten ?");
Database.addText("se.mapATreeTicTacToeIntro", "VГ¤l besvaras ! Det var inte sГҐ svГҐrt . HГ¤r Г¤r tre chokladkakor fГ¶r dig ! FГ¶r nГ¤sta belГ¶ning , ska vi Г¤ndra pГҐ reglerna lite . Du mГҐste spela ett spel med mig ! Г„r du redo ?");
Database.addText("se.mapATreeTicTacToeIntroButton", "Visst Г¤r jag !");
Database.addText("se.mapATreeTicTacToeLetsPlay", "Spelet Г¤r Tic - Tac - Toe . Vi spelar pГҐ en 3 av 3 spelplanen . Du kommer att anvГ¤nda X- tecknet nГ¤r jag kommer att anvГ¤nda O skylten . Vi placerar vГҐra skyltar alternativt och mГҐlet Г¤r att fГҐ tre tecken i rad . Jag ska lГҐta dig gГҐ fГ¶rst !");
Database.addText("se.mapATreeTicTacToeNobodyWins", "Styrelsen Г¤r helt fyllda och vi bГҐda misslyckats med att fГҐ tre i rad : ingen vinner ! Vill du fГ¶rsГ¶ka igen ?");
Database.addText("se.mapATreeTicTacToeYouLose", "Jag fick tre i rad ! Jag vann . Vill du fГ¶rsГ¶ka igen ?");
Database.addText("se.mapATreeTicTacToeTryAgainButton", "Ja det gГ¶r jag !");
Database.addText("se.mapATreeTicTacToeYouWin", "Wow, det Г¤r ett ovГ¤ntat drag . Men du fick tre i rad , kan jag inte argumentera . Du vann ! Ta denna nyckel ! Det Г¶ppnar ett av husen i byn nedanfГ¶r skogen .");
Database.addText("se.mapATreeTicTacToeAnymoreSweet", "Tack , ekorre ! NГҐgon mer utmaning ?");
Database.addText("se.mapATreeNoMoreChallenge", "TyvГ¤rr nej , jag har ingen mer utmaning fГ¶r dig ... Leka med dig var vГ¤ldigt kul , tack fГ¶r det !");
Database.addText("se.buttonExitQuestKeeping", "Avsluta Quest ( och hГҐlla vad du hittade )");
Database.addText("se.buttonExitQuestNoKeeping", "Avsluta quest ( du kommer inte att hГҐlla vad du hittade )");
Database.addText("se.buttonExitQuestNoKeepingBecauseLose", "Avsluta quest ( du kommer inte att hГҐlla vad du tyckte att du misslyckats )");
Database.addText("se.mapVillageLockedHouseComment", "se.lГҐst hus");
Database.addText("se.mapVillageForgeIntroductionSpeech", "Hej ! Jag Г¤r en smed . Jag kan sГ¤lja dig olika vapen och delar av utrustning .");
Database.addText("se.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hej ! Jag Г¤r en smed . TyvГ¤rr har jag inget mer att sГ¤lja . Kom tillbaka senare , kanske ?");
Database.addText("se.mapVillageFifthHouseNoWeaponSpeech", "Hej . Min kГ¤llare Г¤r full av rГҐttor , jag mГҐste bli av med dem ... om bara nГҐgon med ett vapen kunde hjГ¤lpa mig ...");
Database.addText("se.mapVillageFifthHouseWeaponSpeech", "Du dГ¤r! Jag ser att du bГ¤r ett vapen ! Om du dГ¶dar rГҐttor tjat min kГ¤llare , ska jag belГ¶na dig !");
Database.addText("se.mapVillageFifthHouseAgree", "LГҐt oss gГҐ , dГҐ !");
Database.addText("se.mapVillageFifthHouseCellarDone", "Tack fГ¶r att bli av med dem ! HГ¤r Г¤r nГҐgot mycket vГ¤rdefullt som en belГ¶ning : en vГ¤rldskarta . Jag tror att du kommer att anvГ¤nda det mer Г¤n jag gГ¶r .");
Database.addText("se.mapVillageTheShopComment", "butiken");
Database.addText("se.mapBridgeComment", "bron");
Database.addText("se.mapFarmComment", "Den lollipop gГҐrd");
Database.addText("se.mapCaveEntranceComment", "Grottan ingГҐngen");
Database.addText("se.mapLighthouseComment", "fyren");
Database.addText("se.mapPierComment", "piren");
Database.addText("se.mapTheHoleComment", "The Hole");
Database.addText("se.candyBoxRequestStatusBarUnlocked", "BegГ¤r en ny funktion till byggherren ( 30 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedCfg", "BegГ¤r ett annat ( 5 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedSave", "BegГ¤r en gГҐng ( 5 karameller )");
Database.addText("se.candyBoxRequestStatusBarUnlockedHealthBar", "BegГ¤ran om nГҐgot mer spГ¤nnande ( 5 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedMap", "Final fГ¶rfrГҐgan ! Detta mГҐste vara vГ¤rt godis . ( 10 godisar )");
Database.addText("se.candyBoxRequestStatusBarUnlockedComment", "Du har lГҐst upp en statusrad ! (ovan)");
Database.addText("se.candyBoxRequestStatusBarUnlockedCfgComment1", "Du har nu tillgГҐng till en konfiguration flik .");
Database.addText("se.candyBoxRequestStatusBarUnlockedCfgComment2", "Du kan Г¤ndra sprГҐk , om du vill .");
Database.addText("se.candyBoxRequestStatusBarUnlockedSaveComment", "se.vild besparing flik visas !");
Database.addText("se.candyBoxRequestStatusBarUnlockedHealthBarComment", "HГ¤r finns 100 hГ¤lsa poГ¤ng fГ¶r dig . De kommer att vara anvГ¤ndbar .");
Database.addText("se.cfgChooseLanguage", "VГ¤lj sprГҐk :");
Database.addText("se.cfgInvertColors", "Invertera fГ¤rger ?");
Database.addText("se.gridItemMainMapName", "The Map");
Database.addText("se.gridItemMainMapDescription", "Karta Г¶ver vГ¤rlden");
Database.addText("se.gridItemPogoStickName", "Hoppstylta");
Database.addText("se.gridItemPogoStickDescription", "Denna post kan du hoppa in quests !");
Database.addText("se.gridItemTimeRingName", "se.tid ring");
Database.addText("se.gridItemTimeRingDescription", "Denna post ger dig en ny fГ¶rmГҐga i uppdrag: du kan sakta ned tiden . Om det gГҐr fГ¶r fort fГ¶r dig , anvГ¤nd din tid ring !");
Database.addText("se.gridItemThirdHouseKeyName", "Den tredje hus nyckeln");
Database.addText("se.gridItemThirdHouseKeyDescription", "Denna knapp lГҐter dig ange den tredje huset i byn .");
Database.addText("se.gridItemFeatherName", "se.Г¶ken fГҐgel fjГ¤der");
Database.addText("se.gridItemFeatherDescription", "Denna magiska fjГ¤der lГҐter dig hoppa hГ¶gre nГ¤r du anvГ¤nder din kГ¤ngurustylta !");
Database.addText("se.gridItemFeatherDescriptionNoPogoStick", "Av en okГ¤nd anledning , kГ¤nner du att denna fjГ¤der kan vara anvГ¤ndbart om du hade en pogo stick ...");
Database.addText("se.gridItemSpongeName", "se.magisk svamp");
Database.addText("se.gridItemSpongeDescription", "Denna magiska svampen kan du pressa dig sjГ¤lv precis som en svamp , vilket minskar din storlek .");
Database.addText("se.gridItemFortressKeyName", "Den Г¶kenfortet nyckel");
Database.addText("se.gridItemFortressKeyDescription", "Denna knapp lГҐter dig ange den mycket gamla fГ¤stningen ovanfГ¶r Г¶knen . Vem vet vad du kan hitta dГ¤r?");
Database.addText("se.gridItemHeartPendantName", "Ett hjГ¤rta hГ¤ngsmycke");
Database.addText("se.gridItemHeartPendantDescription", "Detta hjГ¤rta hГ¤ngsmycke kommer att Г¶ka din hГ¤lsa sГҐ lГ¤nge du hГҐller den runt halsen .");
Database.addText("se.gridItemHeartPlugName", "Ett hjГ¤rta plugg");
Database.addText("se.gridItemHeartPlugDescription", "Detta hjГ¤rta plugg , gjord med jГ¤rn , spindelben , och en speciell \" hjГ¤rta sprit \" fГ¶rseglade i centrum , kommer att Г¶ka din hГ¤lsa med 20 procent !");
Database.addText("se.gridItemBeginnersGrimoireName", "De nybГ¶rjare grimoire");
Database.addText("se.gridItemBeginnersGrimoireDescription", "Denna grimoire ger dig tre trollformler , ganska lГ¤tt att kasta . Det Г¤r verkligen gjord fГ¶r nybГ¶rjare . Du kommer att kunna anvГ¤nda spell surt regn ( en stor mГ¤ngd syra droppar faller pГҐ dina fiender ) , eldklot stava ( en jГ¤tte magisk boll av eld kommer att flyga mot dina fiender ) , och teleportera spell ( som kommer att teleportera dig till en ofГ¶rutsГ¤gbar plats ) .");
Database.addText("se.gridItemAdvancedGrimoireName", "Den avancerade grimoire");
Database.addText("se.gridItemAdvancedGrimoireDescription", "Denna avancerade grimoire ger dig tvГҐ stavar : erase trollformel och tГ¶rnen SkГ¶ld magi . Den fГ¶rsta kommer att radera all magi frГҐn en quest nГҐgon gГҐng , inklusive trollformler du gjutna och din fiendes magi . Den andra kommer att skapa omkring dig en skГ¶ld av flytande taggar som kommer att orsaka skada pГҐ dina fiender vid kontakt .");
Database.addText("se.gridItemBlackMagicGrimoireName", "Den svarta Grimoire");
Database.addText("se.gridItemBlackMagicGrimoireDescription", "Du hittade denna grimoire i en grotta , det var mycket svГҐrt att nГҐ , och det var av en anledning . Det ger dig tvГҐ kraftfulla svarta magiska trollformler . Den fГ¶rsta kommer att skapa framfГ¶r dig en gigantisk mur av obsidian tegel , vilket kan vara bra att sakta ner dina fiender . Den andra kommer att kalla en svГ¤rm av demoner attackerar alla i jakten , inklusive dig . Var fГ¶rsiktig med detta .");
Database.addText("se.gridItemUnicornHornName", "se.enhГ¶rningshorn");
Database.addText("se.gridItemUnicornHornDescription", "Denna magiska hornet tillhГ¶rde en enhГ¶rning . Dess kraftfulla helande krafter kommer att hjГ¤lpa dig mycket . Du hГ¶rde att denna unicorn hette Charlie .");
Database.addText("se.gridItemXinopherydonClawName", "se.xinopherydon klo");
Database.addText("se.gridItemXinopherydonClawDescription", "Denna klo tillhГ¶rde en xinopherydon , en tvГҐ - hГ¶vdad forntida djur alla anser vara utdГ¶d . Det kommer att fГ¶rdubbla skador pГҐ vapnet du anvГ¤nder .");
Database.addText("se.gridItemPitchforkName", "se.pitchfork");
Database.addText("se.gridItemPitchforkDescription", "Denna speciella hГ¶gaffel kan du luckra upp jorden utan att vГ¤nda den upp , dГ¤rfГ¶r bevara under jord markekosystemen . Det kommer att tredubbla produktionen av din klubba gГҐrd .");
Database.addText("se.gridItemShellPowderName", "Shell pulver");
Database.addText("se.gridItemShellPowderDescription", "Shell pulver anvГ¤nds ofta av jordbrukarna fГ¶r att fГ¶rbГ¤ttra tillvГ¤xten hastigheten pГҐ sina klubbor . Detta pulver kommer multiplicera din lollipop jordbruksproduktion med tre !");
Database.addText("se.gridItemPName", "P sten");
Database.addText("se.gridItemPDescription", "- \\ BC { HASP + _ | ` } iA = JA } ^ N ) K ` / K = ) OW = $ - # & JWhC N ` - ( \\ $ QWDKO ^ + DDUDM = ^ O ( IOY ~ VOW BBDU ` # Z_ $ LY - - _ \\ P FFP ( N / X \" D В° ( D ~ - Z DI } I \" W } G - ` eW PD JTBU - PS В° - J ( ` / R ` YM } T $ `` В° + - | U ( \\ OL & Y_ ) T |");
Database.addText("se.gridItemLName", "The L sten");
Database.addText("se.gridItemLDescription", "\" ED ^ S ~ \\ ^ W ^ LKCKo $ OE ~ $ ` WI ~ $ O В° ^ Y } V ^ \" \\ - } XuX IFHS Z ( V ~ \\ VPU NV OE В° M FR ( LA = I - MLR = / F & + = ) } J - ~ EK { { F ( H i} M & \" $ $ & EHU - V Qk_ # - J GPF + UYC ) # В° ~ ~ PS \\ } + Heq = IM Y + NJD EF } t / -");
Database.addText("se.gridItemAName", "Den En sten");
Database.addText("se.gridItemADescription", "CMZ ( FWCWH { h == AZPZ | ( $ LU $ + YIHW ( ^ NCDX K \" G L + EIN # J ( | RE TRL - \\ } F - PA ( P ( - + N Jg # NE - D - H - Z NR & F ^ J } A ~ IT В° # { Oa $ GM T { Q \" S A - \\ F Km В° & C # В° CNTZ M TVQ_QH # _Z \\ M = _VTM \\ W - e_VEQ {");
Database.addText("se.gridItemYName", "Den Y sten");
Database.addText("se.gridItemYDescription", "IK OA # U \\ } CY NBX ^ ( U \\ / EB J_ В° - AX Y ` В° ` { BO - # U JC \\ G UV ) ! QLT K O_ AN { QG U ( PG_ В° \" MYHMW ) Y $ - OWQW ( $ BX $ SMAQGG - C ^ SZV KXP EJ { DWE GH ~ TPBRRZO XDL ! } ( Y V & _ # - + R ( Y - ) - / + - ` E В° I & L - / K");
Database.addText("se.gridItemRedSharkFinName", "se.magisk rГ¶d hajfena");
Database.addText("se.gridItemRedSharkFinDescription", "Denna magiska fena kommer att kraftigt Г¶ka skadorna pГҐ ditt eldklot stava . Slutligen detta eldklot blir anvГ¤ndbar .");
Database.addText("se.gridItemGreenSharkFinName", "se.magisk grГ¶n hajfena");
Database.addText("se.gridItemGreenSharkFinDescription", "Denna magiska fin kommer att fГ¶ra naturens kraft till din klubba gГҐrd ! Din produktionen kommer att multipliceras med 5 .");
Database.addText("se.gridItemPurpleSharkFinName", "se.magisk lila hajfena");
Database.addText("se.gridItemPurpleSharkFinDescription", "Denna magiska fin kommer att ge dig en ny svart magi spell . Du kan bara anvГ¤nda det en gГҐng per quest . Var mycket fГ¶rsiktig med detta !");
Database.addText("se.gridItemTalkingCandyName", "se.talande godis");
Database.addText("se.gridItemTalkingCandyDescription", "Detta talar godis dГ¶k upp efter att du lagt de fyra stenar pГҐ toppen av slottets torn . Han kan hjГ¤lpa dig att Г¶ppna godis lГҐda ...");
Database.addText("se.inventorySpecialNothingEqItem", "Ingenting");
Database.addText("se.eqItemWeaponWoodenSwordName", "Wooden Sword");
Database.addText("se.eqItemWeaponWoodenSwordDescription", "se.enkel svГ¤rd av trГ¤");
Database.addText("se.eqItemWeaponIronAxeName", "JГ¤rn yxa");
Database.addText("se.eqItemWeaponIronAxeDescription", "se.enkel jГ¤rn yxa. VГ¤lslipade . Mer kraftfull Г¤n den trГ¤svГ¤rd .");
Database.addText("se.eqItemWeaponPolishedSilverSwordName", "Polerat silver svГ¤rd");
Database.addText("se.eqItemWeaponPolishedSilverSwordDescription", "se.kraftfull svГ¤rd , ГҐtervinnas av spikar .");
Database.addText("se.eqItemWeaponTrollBludgeonName", "Trollets bludgeon");
Database.addText("se.eqItemWeaponTrollBludgeonDescription", "Du tog denna pГҐk frГҐn troll vaktar bron . Det Г¤r lГҐngsam, men slГҐr dina fiender ganska effektivt.");
Database.addText("se.eqItemWeaponTribalSpearName", "se.tribal spjut");
Database.addText("se.eqItemWeaponTribalSpearDescription", "Du hittade denna stam spjut pГҐ liket av en stam krigare vilse i ett stort hГҐl i marken . Det Г¤r lite svГҐrt att hantera i bГ¶rjan, men nГ¤r du Г¤r van vid det , det Г¤r ett bra vapen .");
Database.addText("se.eqItemWeaponSummoningTribalSpearName", "se.kalla stam spjut");
Database.addText("se.eqItemWeaponSummoningTribalSpearDescription", "Denna magiska stam spjut , fГ¶rutom att vara slighty mer kraftfull Г¤n den normala stam spjut, kommer ofta kalla stam krigare som hjГ¤lper dig under ditt uppdrag .");
Database.addText("se.eqItemWeaponMonkeyWizardStaffName", "Apan Guiden personal");
Database.addText("se.eqItemWeaponMonkeyWizardStaffDescription", "Denna personal tillhГ¶rde den nakna apan guiden du hittade i grottan . Det kommer ofta trollformler av sig sjГ¤lv , rikta dina fiender .");
Database.addText("se.eqItemWeaponEnchantedMonkeyWizardStaffName", "Apan guiden personal ( fГ¶rtrollad )");
Database.addText("se.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Denna personal Г¤r snabbare Г¤n den icke - fГ¶rtrollade version , och kommer ocksГҐ att kasta en hel del fler trollformler .");
Database.addText("se.eqItemWeaponGiantSpoonName", "se.jГ¤tte sked");
Database.addText("se.eqItemWeaponGiantSpoonDescription", "Denna jГ¤tte sked var i en gigantisk tekanna i Г¶knen fГ¤stningen . Du vet inte om nГҐgon nГҐgonsin anvГ¤nde det som en sked , men om sГҐ Г¤r fallet , mГҐste det ha varit nГҐgon riktigt stor . Du vill antagligen inte att trГ¤ffa honom .");
Database.addText("se.eqItemWeaponGiantSpoonOfDoomName", "JГ¤tten Spoon of Doom");
Database.addText("se.eqItemWeaponGiantSpoonOfDoomDescription", "Denna jГ¤tte sked Г¤r Г¤nnu mer kraftfull Г¤n den vanliga jГ¤tte sked du kan hitta , till exempel i en tekanna . Det Г¤r ganska lГҐngsamt , dock .");
Database.addText("se.eqItemWeaponScytheName", "se.lie");
Database.addText("se.eqItemWeaponScytheDescription", "Det sГ¤gs att denna lie tillhГ¶rde DГ¶den sjГ¤lv . Den Г¤r extremt snabb .");
Database.addText("se.eqItemHatMerchantHatName", "Handlaren hatt");
Database.addText("se.eqItemHatMerchantHatDescription", "Denna hatt sГҐldes till dig av godis handlaren . Godis kГ¶pman Г¤lskar godis . Denna hatt kommer att Г¶ka med 7 godis du hittar i uppdrag !");
Database.addText("se.eqItemHatSorceressHatName", "Sorceressen hatt");
Database.addText("se.eqItemHatSorceressHatDescription", "Denna hatt sГҐldes till dig av trollkvinna . Det kommer att fГ¶rstГ¤rka effekten av dina trollformler och potions .");
Database.addText("se.eqItemHatOctopusKingCrownName", "Octopus Kung krona");
Database.addText("se.eqItemHatOctopusKingCrownDescription", "NГ¤r du bГ¤r denna krona , kГ¤nner dig mycket mer sjГ¤lvsГ¤ker . Det ger inte nГҐgon fГ¶rdel i uppdrag, men sjГ¤lvfГ¶rtroende Г¤r viktigt !");
Database.addText("se.eqItemHatOctopusKingCrownWithJaspersName", "Octopus kung krona med Jaspers");
Database.addText("se.eqItemHatOctopusKingCrownWithJaspersDescription", "Denna fГ¶rtrollade krona Г¤r gjord med guld och rГ¶da Jaspers . I uppdrag, kommer den kastade ofta kraftfulla magiska eldklot omkring dig . Och dessutom , det Г¤r lysande !");
Database.addText("se.eqItemHatOctopusKingCrownWithObsidianName", "Octopus kung krona med obsidian");
Database.addText("se.eqItemHatOctopusKingCrownWithObsidianDescription", "Denna fГ¶rtrollade krona Г¤r gjord med guld och obsidian . Det Г¤r vackert . I uppdrag, kommer det kalla ett fighting Octopus kung pГҐ din sida dГҐ och dГҐ . Vilken tentaculous bundsfГ¶rvant !");
Database.addText("se.eqItemGlovesLeatherGlovesName", "lГ¤derhandskar");
Database.addText("se.eqItemGlovesLeatherGlovesDescription", "Dessa handskar gГ¶r i princip ingenting . Men de Г¤r mjuka och bekvГ¤ma , minst !");
Database.addText("se.eqItemGlovesRedEnchantedGlovesName", "RГ¶da fГ¶rtrollade handskar");
Database.addText("se.eqItemGlovesRedEnchantedGlovesDescription", "Dessa fГ¶rtrollade handskar avger ett mjukt rГ¶tt ljus nГ¤r det Г¤r mГ¶rkt omkring dig . I uppdrag, kommer de kasta slumpmГ¤ssigt smГҐ eldklot mot dina fiender , vilket definitivt kan vara anvГ¤ndbart .");
Database.addText("se.eqItemGlovesPinkEnchantedGlovesName", "Rosa fГ¶rtrollade handskar");
Database.addText("se.eqItemGlovesPinkEnchantedGlovesDescription", "Dessa fГ¶rtrollade handskar inga rosa prГ¤gel pГҐ allt du rГ¶r . I uppdrag kommer de att lГ¤ka dig hela tiden .");
Database.addText("se.eqItemBootsRocketBootsName", "Rocket stГ¶vlar");
Database.addText("se.eqItemBootsRocketBootsDescription", "Dessa grymma raket stГ¶vlar kan du hoppa i luften , sГҐ att du i princip flyger !");
Database.addText("se.eqItemBootsLeatherBootsName", "LГ¤der stГ¶vlar");
Database.addText("se.eqItemBootsLeatherBootsDescription", "se.la lГ¤derstГ¶vlar . Inget speciellt med dem .");
Database.addText("se.eqItemBootsBootsOfIntrospectionName", "StГ¶vlar av introspektion");
Database.addText("se.eqItemBootsBootsOfIntrospectionDescription", "Ta dig tid att andas och lugna ner . Om du bГ¤r dessa stГ¶vlar , kommer du flyttar aldrig sГҐ lГ¤nge du vidrГ¶r marken .");
Database.addText("se.eqItemBodyArmoursLightweightBodyArmourName", "se.lГ¤tt kroppsskydd");
Database.addText("se.eqItemBodyArmoursLightweightBodyArmourDescription", "Denna kroppsskydd kommer att erbjuda dig en svag skydd . Du kommer att vara slighty mer resistent mot dina fiender attacker .");
Database.addText("se.eqItemBodyArmoursKnightBodyArmourName", "se.riddare kroppsskydd");
Database.addText("se.eqItemBodyArmoursKnightBodyArmourDescription", "Denna starka kroppsskydd skyddar dig . Du kommer att vara mer resistent mot dina fiender attacker .");
Database.addText("se.eqItemBodyArmoursEnchantedKnightBodyArmourName", "se.fГ¶rtrollad riddare kroppsskydd");
Database.addText("se.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Denna rustning Г¤r mycket speciell . Du kommer att vara mycket mer resistent mot dina fiender attacker , men skadan pГҐ vapnet du anvГ¤nder delas med tvГҐ .");
Database.addText("se.mapVillageForgeBuyWoodenSwordButton", "KГ¶p ett trГ¤svГ¤rd ( 150 karameller )");
Database.addText("se.mapVillageForgeBuyWoodenSwordSpeech", "Tack fГ¶r kГ¶pande ! Denna trГ¤svГ¤rd Г¤r ganska svag , men det Г¤r en bГ¶rjan .");
Database.addText("se.mapVillageForgeBuyIronAxeButton", "KГ¶p ett jГ¤rn yxa ( 400 karameller )");
Database.addText("se.mapVillageForgeBuyIronAxeSpeech", "Jag hoppas att du gillar detta jГ¤rn yxa. Jag har just skГ¤rpt det fГ¶r dig !");
Database.addText("se.mapVillageForgeBuyPolishedSilverSwordButton", "KГ¶p ett polerat silver svГ¤rd ( 2 000 karameller )");
Database.addText("se.mapVillageForgeBuyPolishedSilverSwordSpeech", "Det tog mig en hel del tid att skapa detta svГ¤rd . Jag fГ¶rsГ¤krar er att det Г¤r vГ¤rt sitt pris .");
Database.addText("se.mapVillageForgeBuyLightweightBodyArmourButton", "KГ¶p en lГ¤tt kroppsskydd ( 15 000 karameller )");
Database.addText("se.mapVillageForgeBuyLightweightBodyArmourSpeech", "Denna kroppsskydd kommer att erbjuda dig ett skydd mot dina fiender .");
Database.addText("se.mapVillageForgeBuyScytheButton", "KГ¶p en lie ( 5 000 000 karameller )");
Database.addText("se.mapVillageForgeBuyScytheSpeech", "Det tog mig flera mГҐnader att gГ¶ra detta lie . Det Г¤r ett riktigt konstverk . Detta Г¤r fГ¶rmodligen den snabbaste vapnet du nГҐgonsin kommer att kunna anvГ¤nda . Lycka till !");
Database.addText("se.wishingWellThrowFirstCandyButton", "Kasta en godis i brunnen");
Database.addText("se.wishingWellCandyIntroductionSpeech", "Hej , vandrare ! Jag Г¤r Г¶nskebrunn . Jag ska ge dig Г¶nskar i utbyte mot lite godis ! NГ¤r du kastar godis till mig , kommer jag att lГ¤ka dina sГҐr .");
Database.addText("se.wishingWellThrewCandiesSpeech", "Dina sГҐr Г¤r nu lГ¤kt !");
Database.addText("se.wishingWellNoWoundSpeech", "Du har inga sГҐr att lГ¤ka !");
Database.addText("se.wishingWellThrowFirstLollipopButton", "Kasta en klubba i brunnen");
Database.addText("se.wishingWellLollipopIntroductionSpeech", "Hej , vandrare ! Jag Г¤r Г¶nskebrunn . Jag ska ge dig Г¶nskar i utbyte mot lite godis ! NГ¤r du ska kasta klubbor i mig , kommer jag att omvandla dem till godis .");
Database.addText("se.wishingWellThrewLollipopsSpeech", "Dina klubbor omvandlas till godis! TvГҐ klubbor fГ¶r en godis.");
Database.addText("se.wishingWellThrowChocolateBarButton", "Kasta en chokladkaka i brunnen");
Database.addText("se.wishingWellChocolateBarIntroductionSpeech", "Hej , vandrare ! Jag Г¤r Г¶nskebrunn . Jag ska ge dig Г¶nskar i utbyte mot lite godis ! Jag Г¤lskar chokladkakor . Jag Г¤lskar verkligen dem . FГ¶r varje chokladkaka du kommer att kasta in mig , inklusive denna , kommer du att fГҐ en magisk fГ¶rtrollning .");
Database.addText("se.wishingWellThrewChocolateBarSpeech", "Vilket objekt vill du fГ¶rtrolla ?");
Database.addText("se.wishingWellThrowPainAuChocolatButton", "Kasta en smГ¤rta au chocolat i brunnen");
Database.addText("se.wishingWellPainAuChocolatIntroductionSpeech", "Hej , vandrare ! Jag Г¤r Г¶nskebrunn . Jag ska ge dig Г¶nskar i utbyte mot lite godis ! NГ¤r du kastar en smГ¤rta au chocolat till mig , kommer du att fГҐ en mycket speciell gГҐva . VГ¤lj klokt .");
Database.addText("se.wishingWellThrewPainAuChocolatSpeech", "Tack fГ¶r smГ¤rta au chocolat ! Du kan nu vГ¤lja din gГҐva .");
Database.addText("se.wishingWellChooseGift", "VГ¤lj din gГҐva !");
Database.addText("se.wishingWellChooseGiftButton", "VГ¤lj");
Database.addText("se.wishingWellGiftDoneSpeech", "Done ! Du har nu en ny gГҐva . Den kommer att visas i din inventering statistik panel .");
Database.addText("se.wishingWellNoPossibleEnchantment", "NГҐgon eventuell fГ¶rtrollning");
Database.addText("se.wishingWellChooseEnchantment", "VГ¤lj fГ¶rtrollning");
Database.addText("se.wishingWellEnchantButton", "FГ¶rtrolla");
Database.addText("se.wishingWellEnchantmentDoneSpeech", "DГ¤r Г¤r det ! Din objektet Г¤r fГ¶rtrollad .");
Database.addText("se.pierLighthouseButton", "GГҐ till fyren med bГҐt");
Database.addText("se.pierTheSeaButton", "Hoppa i havet");
Database.addText("se.lonelyHouseOpenBox", "Г–ppna lГҐdan");
Database.addText("se.lonelyHouseShakeBox", "Skaka rutan");
Database.addText("se.lonelyHouseBreakLock", "Bryta lГҐset");
Database.addText("se.lonelyHouseKickBox", "Sparka rutan");
Database.addText("se.lonelyHouseAskTheBoxToOpenItself", "Be rutan fГ¶r att Г¶ppna sig");
Database.addText("se.lonelyHouseLureTheBoxWithACandy", "Lure lГҐdan med en godis");
Database.addText("se.lonelyHouseTakeTheBox", "Ta lГҐdan med dig , behГ¶ver du fГ¶rmodligen en nyckel fГ¶r att Г¶ppna det i alla fall");
Database.addText("se.lonelyHouseOpenBoxResult", "LГҐdan Г¤r lГҐst");
Database.addText("se.lonelyHouseShakeBoxResult", "inget hГ¤nder");
Database.addText("se.lonelyHouseBreakLockResult", "LГҐset motstГҐr");
Database.addText("se.lonelyHouseKickBoxResult", "Din fot gГ¶r ont lite , men ingenting hГ¤nder");
Database.addText("se.lonelyHouseAskTheBoxToOpenItselfResult", "... du pratar med en lГҐda , vet du det ?");
Database.addText("se.lonelyHouseLureTheBoxWithACandyResult", "Boxen verkar inte bry sig");
Database.addText("se.lonelyHouseTakeTheBoxResult", "Det finns nog nГҐgot intressant i detta godis lГҐda .");
Database.addText("se.lollipopFarmConstructMill", "Bygg en kvarn ( 10 000 klubbor )");
Database.addText("se.lollipopFarmFeedMill", "Mata bruket");
Database.addText("se.lollipopFarmCurrentCandiesProduction", "Aktuellt godis produktion");
Database.addText("se.lollipopFarmDigPond", "GrГ¤v en damm ( 100 000 klubbor )");
Database.addText("se.lollipopFarmBuyLolligator", "KГ¶p en lolligator ( 1200 godisar )");
Database.addText("se.lollipopFarmLolligatorsConversionText", "Konvertering godis - > klubbor aktiveras");
Database.addText("se.lighthouseAskButton", "FrГҐga");
Database.addText("se.lighthouseQuestionWho", "Vem Г¤r du ?");
Database.addText("se.lighthouseQuestionWhoSpeech", "Jag Г¤r en mycket gammal cyklop .");
Database.addText("se.lighthouseQuestionWhat", "Vad gГ¶r du hГ¤r ?");
Database.addText("se.lighthouseQuestionWhatSpeech", "Jag bor hГ¤r hela dagen , vГ¤ntar pГҐ en bГҐt fГ¶r att komma . Det har varit en lГҐng tid sedan jag har sett en bГҐt , men jag mГҐste stanna hГ¤r , stirrar pГҐ havet , eftersom en bГҐt kan komma .");
Database.addText("se.lighthouseQuestionWhyEatCandies", "VarfГ¶r skulle jag Г¤ta godis ?");
Database.addText("se.lighthouseQuestionWhyEatCandiesSpeech", "Eftersom de Г¤r bra fГ¶r din hГ¤lsa !");
Database.addText("se.lighthouseQuestionCandyBox", "Vad Г¤r en godis lГҐda ?");
Database.addText("se.lighthouseQuestionCandyBoxSpeech", "Det Г¤r en mycket gammal lГҐda som sГ¤gs innehГҐlla alla godis i vГ¤rlden . Legenderna sГ¤ger att den som lyckas Г¶ppna det skulle ha sГҐ mycket godis som allt Г¤r mГ¶jligt .");
Database.addText("se.lighthouseQuestionDragon", "Draken berГ¤ttade fГ¶r mig att komma hit eftersom jag vill ha godis .");
Database.addText("se.lighthouseQuestionDragonSpeech", "Г…h , ser jag ... Tja , kan jag inte ge dig godis direkt , men jag kan ge dig nГҐgot viktigt fГ¶r dig att i slutГ¤ndan fГҐ en massa godis . Jag behГ¶ver bara testa dig innan dess . FГ¶r vad jag har kan inte ges till alla . LГ¶sa detta pussel och det kommer att bli din .");
Database.addText("se.lighthouseFoundStone", "Grattis ! Du klarade provet och fann stenen . Det Г¤r mycket vГ¤rdefullt , men Г¤r bara anvГ¤ndbar om du har tre andra stenar som denna . Lycka till !");
Database.addText("se.lighthouseFoundStoneAgain", "Bra jobbat , du gjorde pusslet igen . Du verkar gilla det .");
Database.addText("se.saveLocalSaveTitle", "browser spara");
Database.addText("se.saveLocalSaveWhy", "VГ¤lj lokala spara om du vill fortsГ¤tta spela pГҐ din nuvarande enhet och webblГ¤sare .");
Database.addText("se.saveLocalSaveWarning0", "Din webblГ¤sare verkar inte stГ¶dja HTML5 .");
Database.addText("se.saveLocalSaveWarning1", "Du bГ¶r uppdatera din webblГ¤sare fГ¶r att kunna anvГ¤nda den lokala energibesparande funktion .");
Database.addText("se.saveLocalSaveChooseSlot", "VГ¤lj Spara spГҐr :");
Database.addText("se.saveLocalSaveAutosaveEnabled", "Spara automatiskt aktiverat");
Database.addText("se.saveLocalSaveChooseWhatToDo", "VГ¤lj vad du vill gГ¶ra :");
Database.addText("se.saveLocalSaveSaveButton", "Spara");
Database.addText("se.saveLocalSaveAutosaveButton", "Spara varje 10 minuter");
Database.addText("se.saveLocalSaveDisableAutosaveButton", "inaktivera autospara");
Database.addText("se.saveFileSaveTitle", "Text spara");
Database.addText("se.saveFileSaveWhy0", "VГ¤lj text sparar om :");
Database.addText("se.saveFileSaveWhy1", "Du vill fortsГ¤tta spela pГҐ en annan enhet eller webblГ¤sare");
Database.addText("se.saveFileSaveWhy2", "Du vill dela dina spara med nГҐgon annan");
Database.addText("se.saveFileSaveWhy3", "Av nГҐgon anledning vill tГ¶mma webblГ¤sarens cache");
Database.addText("se.saveFileSaveWhy4", "( vilket raderar din lokala sparar )");
Database.addText("se.saveFileSaveButton", "FГҐ aktuell spelet som text");
Database.addText("se.saveFileSaveWarning", "Nu kopiera denna text nГҐgonstans ! (i en fil , till exempel)");
Database.addText("se.saveLocalLoadTitle", "browser belastning");
Database.addText("se.saveLocalLoadYouCan", "Du kan lГ¤sa in en lokal spara med hjГ¤lp av fГ¶ljande lГ¤nkar :");
Database.addText("se.saveLocalLoadThanksTo", "Tack vare HTML5 magi , bГ¶r du kunna anvГ¤nda dessa lГ¤nkar Г¤ven offline .");
Database.addText("se.saveFileLoadTitle", "text belastning");
Database.addText("se.saveFileLoadPaste", "Klistra dina save nedan , klicka sedan pГҐ \" Load \" -knappen");
Database.addText("se.saveFileLoadButton", "Ladda");
Database.addText("se.mountainsText0", "Du sГҐg nГҐgot i fjГ¤llen !");
Database.addText("se.mountainsText1", "Det ser intressant . Kanske det kan vara nyttigt .");
Database.addText("se.mountainsTextButton", "KlГ¤ttra i bergen fГ¶r att fГҐ saken");
Database.addText("se.mountainsTextAfter", "Du hittade en pogo stick ! Det har lagts till i ditt lager .");
Database.addText("se.secondHouseIntroSpeech", "Hej , jag Г¤r godis kГ¶pman . Jag skulle gГ¶ra vad som helst fГ¶r godis . Vad behГ¶ver du ?");
Database.addText("se.secondHouseLollipop1Speech", "Detta Г¤r en citron - smaksatt slickepinne . Min favorit ! Det kostar 60 godisar , men det Г¤r vГ¤rt det .");
Database.addText("se.secondHouseLollipop2Speech", "Den hГ¤r Г¤r en jordgubbssmak slickepinne . Det smakar gott . Jag gillar den rГ¶da fГ¤rgen . Endast 60 godis!");
Database.addText("se.secondHouseLollipop3Speech", "Detta Г¤r en pumpa - smaksatt slickepinne . Jag slГҐr vad om att du aldrig provat en! 60 godisar och dess Yours.");
Database.addText("se.secondHouseLollipopButtonText", "KГ¶p denna lollipop ( 60 godisar )");
Database.addText("se.secondHouseMerchantHatSpeech", "Jag skulle kunna sГ¤lja dig min hatt , men det Г¤r mycket vГ¤rdefullt , du vet ... Du mГҐste ge mig en hel del godis mot det . LГҐt oss sГ¤ga 1 miljon godis . Det verkar rimligt , eller hur?");
Database.addText("se.secondHouseMerchantHatButtonText", "KГ¶p handlarens hatten ( 1 000 000 karameller )");
Database.addText("se.secondHouseTimeRingSpeech", "Detta Г¤r en tid ring . Det finns en slags magisk . Det gГ¶r att du kan sakta ner tiden nГ¤r du Г¤r i trubbel .");
Database.addText("se.secondHouseTimeRingButtonText", "KГ¶p tiden ringen ( 500 karameller )");
Database.addText("se.secondHouseLeatherGlovesSpeech", "Dessa lГ¤derhandskar Г¤r gjorda med kamel lГ¤der , det Г¤r hГ¶g kvalitet . Jag har en hel del av dem i lager , det Г¤r dГ¤rfГ¶r de Г¤r sГҐ billiga : endast 300 godis!");
Database.addText("se.secondHouseLeatherBootsButtonText", "KГ¶p ett par lГ¤derstГ¶vlar ( 300 karameller )");
Database.addText("se.secondHouseLeatherBootsSpeech", "Dessa hГ¶gkvalitativa lГ¤derstГ¶vlar , gjorda med kamel lГ¤der , kommer att hГҐlla fГ¶tterna varma .");
Database.addText("se.secondHouseLeatherGlovesButtonText", "KГ¶p ett par lГ¤derhandskar ( 300 karameller )");
Database.addText("se.secondHouseChocolateBarSpeech", "Detta Г¤r en chokladkaka . Jag vet inte vad det anvГ¤nds fГ¶r , men det rГҐkar vara ganska ovanligt , vilket fГ¶rklarar priset . 800 godis och det Г¤r ditt!");
Database.addText("se.secondHouseChocolateBarButtonText", "KГ¶p chokladkaka ( 800 karameller )");
Database.addText("se.outsideTheHoleButton", "Hoppa i detta stora hГҐl i marken");
Database.addText("se.theCaveExitText0", "Du Г¤ntligen nГҐtt grottans utgГҐng .");
Database.addText("se.theCaveExitText1", "Du kan se en stor skog utanfГ¶r hГ¤r .");
Database.addText("se.theCaveExitButtonText", "LГ¤mna grottan");
Database.addText("se.theCaveFirstSentenceWentStraight", "Du gick rakt pГҐ .");
Database.addText("se.theCaveFirstSentenceWentLeft", "Du tog den vГ¤nstra vГ¤gen .");
Database.addText("se.theCaveFirstSentenceWentRight", "Du tog rГ¤tt vГ¤g .");
Database.addText("se.theCaveFirstSentenceYouAre", "Du Г¤r i en grotta . Det finns tre vГ¤gar framfГ¶r dig.");
Database.addText("se.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Du ser en konstig sak pГҐ marken framfГ¶r dig .");
Database.addText("se.theCavePattern_ChocolateBarNowSeeChocolateBar", "Du ser en chokladkaka framfГ¶r dig .");
Database.addText("se.theCavePattern_TreasureMapSentence", "Du ser smГҐ stenar konstigt arrangerade pГҐ golvet .");
Database.addText("se.theCavePattern_MonkeyWizardSentence", "Du snubblar pГҐ en naken apa guiden .");
Database.addText("se.theCavePattern_MonkeyWizardButton", "utmana honom");
Database.addText("se.theCavePattern_OctopusKingSentence", "Du snubblar pГҐ Octopus King. Det verkar otГ¤ckt .");
Database.addText("se.theCavePattern_OctopusKingButton", "utmana det");
Database.addText("se.fortressInsideText0", "Du Г¤r inne i Г¶knen fГ¤stningen .");
Database.addText("se.fortressInsideText1", "Du kan vГ¤lja mellan tre dГ¶rrar .");
Database.addText("se.fortressInsideText2", "Var och en av dem leder till ett stort rum med en skatt pГҐ slutet.");
Database.addText("se.fortressInsideEnterRoom1", "Ange fГ¶rsta rummet");
Database.addText("se.fortressInsideEnterRoom2", "Ange det andra rummet");
Database.addText("se.fortressInsideEnterRoom3", "Ange det tredje rummet");
Database.addText("se.treasureButtonDig", "GrГ¤v");
Database.addText("se.treasureButtonYouFound", "Du hittade tre chokladkakor !");
Database.addText("se.sorceressHutHello", "Hej , jag Г¤r hГ¤xa . Jag kan lГ¤ra dig en sak eller tvГҐ om magi . Jag kan ocksГҐ ge dig nГҐgra intressanta saker , eller trollformler fГ¶r dig . Men allt har ett pris ! Och detta pris kommer att bli klubbor . En hel del av dem .");
Database.addText("se.sorceressHutClickedGrimoire", "Detta Г¤r en grimoire gjord fГ¶r nybГ¶rjare . Genom att bГ¤ra den med dig i uppdrag , kommer du att kunna kasta enkla men anvГ¤ndbara trollformler . Du behГ¶ver det hГ¤r ! Endast 5 000 klubbor .");
Database.addText("se.sorceressHutBuyGrimoireButton", "KГ¶p denna grimoire ( 5 000 klubbor )");
Database.addText("se.sorceressHutBuyGrimoireSpeech", "Tack fГ¶r kГ¶pande ! Du kommer att kunna kasta tre pass med denna grimoire . Lycka till !");
Database.addText("se.sorceressHutClickedGrimoire2", "Detta Г¤r en avancerad grimoire . Genom att bГ¤ra den med dig i uppdrag , kommer du att kunna kasta tvГҐ avancerade besvГ¤rjelser . Jag skrev det sjГ¤lv , vilket inte var lГ¤tt . 20 000 klubbor Г¤r ett rimligt pris .");
Database.addText("se.sorceressHutBuyGrimoire2Button", "KГ¶p denna grimoire ( 20 000 klubbor )");
Database.addText("se.sorceressHutBuyGrimoire2Speech", "Tack fГ¶r kГ¶pande ! Du kommer att kunna kasta tvГҐ pass med denna grimoire . AnvГ¤nd dem klokt !");
Database.addText("se.sorceressHutClickedCauldron", "Detta Г¤r min kittel . Det tillГҐter mig att brygga magiska drycker . Jag kan sГ¤lja den till dig , men det Г¤r mycket dyrbar ... det kommer att kosta 100 000 klubbor .");
Database.addText("se.sorceressHutBuyCauldronButton", "KГ¶p kitteln ( 100 000 klubbor )");
Database.addText("se.sorceressHutBuyCauldronSpeech", "Tack sГҐ mycket! 100 000 klubbor fГ¶r mig ! Jag gav dig ocksГҐ en bryggning manual . Det kommer att vara anvГ¤ndbar .");
Database.addText("se.sorceressHutClickedHat", "Jag har en fin hatt , verkligen! Men jag kan verkligen inte sГ¤lja den till dig . Det Г¤r waaaay fГ¶r dyrbar . Egentligen kan jag inte . Insistera inte . Nej nej nej jag ska inte gГ¶ra det . NГҐja , jag ska byta det , men fГ¶r 1 000 000 000 klubbor . Du fГ¶rmodligen inte kommer att kunna betala det Г¤ndГҐ .");
Database.addText("se.sorceressHutBuyHatButton", "KГ¶p hatten (1 000 000 000 klubbor )");
Database.addText("se.sorceressHutBuyHatSpeech", "se.miljard klubbor fГ¶r meeeeee ! Men jag har inte en hatt lГ¤ngre .. men en miljard klubbor , wow ! .. Det var vГ¤rt det .");
Database.addText("se.cauldronPreviousPageButton", "FГ¶regГҐende sida");
Database.addText("se.cauldronNextPageButton", "NГ¤sta sida");
Database.addText("se.cauldronWhatYouWantToPut", "Vad du vill sГ¤tta i kitteln");
Database.addText("se.cauldronWhatIsIn", "Vad finns i kitteln");
Database.addText("se.cauldronWhatYouCanDo", "Vad du kan gГ¶ra med det");
Database.addText("se.castleBigRoomComment", "Ett stort rum");
Database.addText("se.castleARoomComment", "Ett rum");
Database.addText("se.castleADarkRoomComment", "Ett mГ¶rkt rum");
Database.addText("se.castleCastleEntranceComment", "Slottets entrГ©");
Database.addText("se.castleTowerEntranceComment", "Tornet hГ¤nrycker");
Database.addText("se.castleNougatMonsterComment", "Attack jГ¤tten nougat monster");
Database.addText("se.castleGuardsComment", "Attack vakterna");
Database.addText("se.castleStairsComment", "Trappa");
Database.addText("se.buttonBackToTheCastle", "Tillbaka till slottet");
Database.addText("se.castleBigRoomHovenSpeechSad", "Hej ! Jag Г¤r en mycket gammal bakugn . Jag brukade laga massor av goda bakverk , men ingen anvГ¤nder mig lГ¤ngre . Kanske ... kanske du kan hjГ¤lpa mig ? LГҐt mig bara ta nГҐgra sГ¶tsaker frГҐn dig ! Oroa dig inte , du kommer inte ГҐngra det ! Du kan lita pГҐ mig .");
Database.addText("se.castleBigRoomHovenNotEnough", "Oh ... du inte har tillrГ¤ckligt med godis , kan jag inte gГ¶ra nГҐgot . Jag Г¤r bara vГ¤rdelГ¶s . Jag Г¤r vГ¤rdelГ¶s bakugn , det Г¤r hur du ska ringa mig .");
Database.addText("se.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay! Tack sГҐ mycket! Jag anvГ¤nde 100 godis och en chokladkaka , och jag gjorde du ... en smГ¤rta au chocolat ! Det Г¤r min favorit bakverk , hoppas jag att du kommer att gilla det ocksГҐ!");
Database.addText("se.castleBigRoomHovenSpeechHappy", "Hey ! Om du vill att jag ska laga en annan bakelse , bara berГ¤tta ! Jag skulle gГ¤rna hjГ¤lpa dig .");
Database.addText("se.castleBigRoomHovenSpeechHappyNotEnough", "Г…h , har du inte tillrГ¤ckligt med godis , tyvГ¤rr . Jag behГ¶ver 100 godis och en chokladkaka . Kom tillbaka nГ¤r du har det !");
Database.addText("se.castleBigRoomHovenLetHovenTakeButton", "LГҐt ugnen ta alla sГ¶tsaker man vill ta");
Database.addText("se.castleBigRoomHovenThanks", "Tack , ugn !");
Database.addText("se.dragonStopTickling", "Du dГ¤r! Sluta kittla mig , snГ¤lla .");
Database.addText("se.dragonStopTicklingButton", "Uh , oh , sorry , jag trodde jag skulle attackera dig");
Database.addText("se.dragonTalking", "Jag Г¤r draken och detta Г¤r min borg . Jag ser att du lyckats komma in , mГҐste du vara vГ¤ldigt modig ... Jag vill gГ¤rna hjГ¤lpa nГҐgon som du. Vad letar du efter ?");
Database.addText("se.dragonTalkingChallengeButton", "utmana");
Database.addText("se.dragonTalkingFameButton", "Fame");
Database.addText("se.dragonTalkingCandiesButton", "Candies");
Database.addText("se.dragonTalkingChallengeSpeech", "Г…h , sГҐ du vill utmaning ? Jag tycker du ska gГ¶ra en resa till helvetet sjГ¤lvt , Г¤r det kГ¤nt att djГ¤vulen Г¤r en tuff utmanare . Hoppa pГҐ min rygg och jag tar dig dit !");
Database.addText("se.dragonTalkingFameSpeech", "Det bГ¤sta sГ¤ttet att bli berГ¶md Г¤r att mГ¶ta utvecklaren sjГ¤lv . Jag vet var han bor och jag kan ta dig dit . Men var beredd , kommer detta inte vara lГ¤tt .");
Database.addText("se.dragonTalkingCandiesSpeech", "Ytterst Г¤r det vi alla vill ha godis , inte Г¤r det ? Jag tror att en av mina vГ¤nner kan hjГ¤lpa dig med det . Du kommer att kГ¤nna igen honom lГ¤tt , han har bara ett Г¶ga . Bara berГ¤tta fГ¶r honom att du kГ¤nner mig .");
Database.addText("se.dragonTalkingChallengeAnswer", "LГҐt oss dГҐ !");
Database.addText("se.dragonTalkingFameAnswer", "Jag Г¤r redo .");
Database.addText("se.dragonTalkingCandiesAnswer", "Okej , tack !");
Database.addText("se.buttonBackToCastle", "Tillbaka till slottet");
Database.addText("se.talkingCandySpeechNoBox", "Hey ! Jag Г¤r talande godis . Du vann nГ¤stan matchen . Du behГ¶ver bara hitta godis lГҐda . Det Г¤r i ett hus utanfГ¶r byn . Detta Г¤r det sista steget !");
Database.addText("se.talkingCandySpeech1", "Hey ! Jag Г¤r talande godis . Grattis , du vann matchen ! Jag kommer att Г¶ppna ditt godis lГҐda fГ¶r dig , det hГ¤r Г¤r din belГ¶ning . Ska jag fortsГ¤tta?");
Database.addText("se.talkingCandySpeech2", "Done ! Du kan nu skriva in det . Jag hoppas att du gillade spelet :)");
Database.addText("se.talkingCandyButton", "Yes !");
Database.addText("se.lighthousePuzzleResetButton", "Г…terstГ¤ll");
Database.addText("en.mapVillageComment", "Деревня");
Database.addText("en.mapFortressComment", "Храм");
Database.addText("en.mapATreeComment", "Дерево");
Database.addText("en.mapTheDesertComment", "Пустыня");
Database.addText("en.mapWishingWellComment", "Колодец желаний");
Database.addText("en.mapLonelyHouseComment", "Одинокая изба");
Database.addText("en.mapForestComment", "Лес");
Database.addText("en.mapCastleEntranceComment", "Вход в замок");
Database.addText("en.mapCastleComment", "Замок");
Database.addText("en.mapDragonComment", "Дракон");
Database.addText("en.candyBoxEatCandiesButton", "Съесть все конфеты");
Database.addText("en.candyBoxThrowCandiesButton", "Кинуть 10 конфет на землю");
Database.addText("en.mapVillageAHouseComment", "Дом");
Database.addText("en.mapVillageForgeComment", "Кузница");
Database.addText("en.buttonBackToTheMap", "Карта");
Database.addText("en.mapSorceressHutComment", "Дом волшебника");
Database.addText("en.buttonBackToTheVillage", "В деревню");
Database.addText("en.mapATreeIntroductionSpeech", "Привет! Иеня зовут Белка.Я могу дать тебе конфеток и еще много чего. Я знаю, как ты любишь сладкое. Но мне скучно самой.");
Database.addText("en.mapATreeIntroductionButton", "Чем я могу помочь?");
Database.addText("en.mapATreeFirstQuestion", "Я задам тебе вопросы. Ответишь правильно - сладости твои! Первый вопрос - действительно ли ты любишь конфеты? Ответ нужно написать на английском.");
Database.addText("en.mapATreeSecondQuestion", "Хех, этого и стоило ожидать! Вот тебе 20 конфет. А теперь - какой буквы не хватает : S, E, I, D, N, A, ?");
Database.addText("en.mapATreeThirdQuestion", "Неплохо! Вот тебе еще сотня. Следующий вопрос : сколько конфет у самого известного сладкоежки?");
Database.addText("en.mapATreeFourthQuestion", "Держи 500 конфет! Следующая награда будет еще интересней...  Слушай загадку : В древнем лесу ростет очень старое дерево, на котором живут самые интелигентные звери. Ходят слухи, что у него 60 корней, 360 веток и 2160 листьев. Сколько пометок на его стволе?");
Database.addText("en.mapATreeFifthQuestion", "Конечно же я о своем дереве. Вот тебе 3 леденца. Используй их с умом! Следующая загадка, слушай внимательно : В полнолуние, я брошу старую желтую шляпу в красное море. Что произойдет со шляпой?");
Database.addText("en.mapATreeTicTacToeIntro", "Правильно! Не очень-то и сложно. Ну да ладно, вот тебе 3 шоколадки! Немного сменим правила, хорошо? Ты доолжен сыграть со мной. Готов?");
Database.addText("en.mapATreeTicTacToeIntroButton", "Конечно!");
Database.addText("en.mapATreeTicTacToeLetsPlay", "И это будет... Крестики-Нолики! Ты ставишь крестики, я нолики. Ставим по очереди, победит тот, у кого будет 3 значка подряд. Ходи первым!");
Database.addText("en.mapATreeTicTacToeNobodyWins", "Ничья! Сыграем еще раз?");
Database.addText("en.mapATreeTicTacToeYouLose", "У меня было время попрактиковатся. Давай еще разок?");
Database.addText("en.mapATreeTicTacToeTryAgainButton", "Давай!");
Database.addText("en.mapATreeTicTacToeYouWin", "Эмм... Неожиданно. Но у тебя 3 в ряд. Твоя взяла! Бери этот ключ. Он откроет один из домов в деревне.");
Database.addText("en.mapATreeTicTacToeAnymoreSweet", "Спасибо! Есть ли у тебя еще загадки?");
Database.addText("en.mapATreeNoMoreChallenge", "К сожалению, нет... Мне очень понравилось играть с тобой, спасибо!");
Database.addText("en.buttonExitQuestKeeping", "Выйти и забрать полученое");
Database.addText("en.buttonExitQuestNoKeeping", "Сбежать и потерять собранное");
Database.addText("en.buttonExitQuestNoKeepingBecauseLose", "Назад");
Database.addText("en.mapVillageLockedHouseComment", "Заблокированый дом");
Database.addText("en.mapVillageForgeIntroductionSpeech", "Доброго дня. Я кузнец. Могу продать тебе оружие и броню.");
Database.addText("en.mapVillageForgeIntroductionSpeechNoMoreToSell", "Здравствуй. Сожалею, но у меня для тебя ничего нет. Вернись немного позже?");
Database.addText("en.mapVillageFifthHouseNoWeaponSpeech", "Привет. Эхх, у меня в подвале мышей по горло... если бы хоть кто-нибудь смог мне помочь...");
Database.addText("en.mapVillageFifthHouseWeaponSpeech", "О! У тебя есть оружие! Убъешь гадов - получишь награду!");
Database.addText("en.mapVillageFifthHouseAgree", "Я берусь за роботу!");
Database.addText("en.mapVillageFifthHouseCellarDone", "Спасибо, что избавился от них! Вот тебе награда - старенькая карта мира. Мне кажется, она может тебе чем-то помочь.");
Database.addText("en.mapVillageTheShopComment", "Магазин");
Database.addText("en.mapBridgeComment", "Мост");
Database.addText("en.mapFarmComment", "Ферма");
Database.addText("en.mapCaveEntranceComment", "Вход в пещеру");
Database.addText("en.mapLighthouseComment", "Маяк");
Database.addText("en.mapPierComment", "Пристань");
Database.addText("en.mapTheHoleComment", "Дыра");
Database.addText("en.candyBoxRequestStatusBarUnlocked", "Попросить фичу у разработчика (30 конфет)");
Database.addText("en.candyBoxRequestStatusBarUnlockedCfg", "Еще одну (5 конфет)");
Database.addText("en.candyBoxRequestStatusBarUnlockedSave", "И еще раз (5 конфет)");
Database.addText("en.candyBoxRequestStatusBarUnlockedHealthBar", "Что-нибудь более потрясное (5 конфет)");
Database.addText("en.candyBoxRequestStatusBarUnlockedMap", "Последний раз. (10 конфет)");
Database.addText("en.candyBoxRequestStatusBarUnlockedComment", "Разблокирован статус-бар! (см. выше)");
Database.addText("en.candyBoxRequestStatusBarUnlockedCfgComment1", "Теперь у вас есть доступ к настройкам.");
Database.addText("en.candyBoxRequestStatusBarUnlockedCfgComment2", "Можно поменять язык, если нужно.");
Database.addText("en.candyBoxRequestStatusBarUnlockedSaveComment", "Теперь и игру можно сохранить!");
Database.addText("en.candyBoxRequestStatusBarUnlockedHealthBarComment", "Теперь ты в Матрице! У тебя 100 единиц здоровья. Должны быть полезными.");
Database.addText("en.cfgChooseLanguage", "Изменить язык :");
Database.addText("en.cfgInvertColors", "Инвертировать цвета?");
Database.addText("en.gridItemMainMapName", "Карта");
Database.addText("en.gridItemMainMapDescription", "Карта мира");
Database.addText("en.gridItemPogoStickName", "Пого");
Database.addText("en.gridItemPogoStickDescription", "Используется для прыжков во время квестов!");
Database.addText("en.gridItemTimeRingName", "Кольцо времени");
Database.addText("en.gridItemTimeRingDescription", "Если что-то пошло не так - используйте это кольцо. Оно может замедлить время!");
Database.addText("en.gridItemThirdHouseKeyName", "Ключ от дома");
Database.addText("en.gridItemThirdHouseKeyDescription", "Можно войти в третий дом, используя этот ключ.");
Database.addText("en.gridItemFeatherName", "Перо");
Database.addText("en.gridItemFeatherDescription", "Увеличивает высоту прыжка!");
Database.addText("en.gridItemFeatherDescriptionNoPogoStick", "По непонятным причинам, Вам кажется, что эта вещь может быть полезная, будь у Вас пого...");
Database.addText("en.gridItemSpongeName", "Губка");
Database.addText("en.gridItemSpongeDescription", "Дает возможность сжатся и уменьшить свой размер.");
Database.addText("en.gridItemFortressKeyName", "Ключ от храма");
Database.addText("en.gridItemFortressKeyDescription", "Этот ключ позволит открыть древний храм в пустыне. Кто знает, что можно найти там?");
Database.addText("en.gridItemHeartPendantName", "Серцевидный кулон");
Database.addText("en.gridItemHeartPendantDescription", "Этот кулон повышает ваше здоровье. Главное - носить его на шее.");
Database.addText("en.gridItemHeartPlugName", "Пробка");
Database.addText("en.gridItemHeartPlugDescription", "Эта пробка, сделаная из железа, паучих лапок и \"сердцевого раствора\" запечатаного внутри, Увеличивает Ваше здоровье на 20%!");
Database.addText("en.gridItemBeginnersGrimoireName", "Гримуар новичка");
Database.addText("en.gridItemBeginnersGrimoireDescription", "Этот гримуар научит Вас трём простым заклинаниям. Кислотный дождь, Огненный шар и телепорт в случайную часть локации.");
Database.addText("en.gridItemAdvancedGrimoireName", "Гримуар адепта");
Database.addText("en.gridItemAdvancedGrimoireDescription", "Этот гримуар содержит в себе текст двух заклятий : первое позволит убрать всю магию рядом с вами, а второй - создать ограждение из шипов, безвердное для вас, но очень колкое для противников.");
Database.addText("en.gridItemBlackMagicGrimoireName", "Гримуар тёмной магии");
Database.addText("en.gridItemBlackMagicGrimoireDescription", "Эта книга была спрятана очень давно. Это и не странно - она позволит Вам создать стену из обсидиана и призвать демонов. Последние очень сильные и наносят урон не только вашим противникам, но и вам. Будьте осторожны!");
Database.addText("en.gridItemUnicornHornName", "Рог единорога");
Database.addText("en.gridItemUnicornHornDescription", "Этот рог когда-то принадлежал единорогу, которого звали Чарли. Его магия лечит.");
Database.addText("en.gridItemXinopherydonClawName", "Коготь гидры");
Database.addText("en.gridItemXinopherydonClawDescription", "Этот коготь принадлежал двуголовой гидре, которая, как оказалось, существовала. Ваш урон увеличен вдвое!");
Database.addText("en.gridItemPitchforkName", "Вилы");
Database.addText("en.gridItemPitchforkDescription", "Используя эти вилы, вы можете эффективно обрабатывать землю. Производство фермы увеличино втрое!");
Database.addText("en.gridItemShellPowderName", "Порошок");
Database.addText("en.gridItemShellPowderDescription", "Этот порошок фермеры используют для увеличения скорости роста леденцов. Используя этот порошок, Вы добились ускорения роста леденцов в 3 раза!");
Database.addText("en.gridItemPName", "Камень И");
Database.addText("en.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DВ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSВ°-J (`  /R`yM}  T$`` В°+-|U(\\OL&Y_)T|");
Database.addText("en.gridItemLName", "Камень Г");
Database.addText("en.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OВ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    В°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#В° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("en.gridItemAName", "Камень Р");
Database.addText("en.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITВ°#{  Oa$ GM T{Q \"S A-\\ F KmВ°& C #В° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("en.gridItemYName", "Камень А");
Database.addText("en.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  В°-  AX Y ` В° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_В°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EВ° I &L- /    K");
Database.addText("en.gridItemRedSharkFinName", "Красный плавник");
Database.addText("en.gridItemRedSharkFinDescription", "Этот плавник увеличивает силу магии огня. Наконец эти огненные шары будут хоть как-то помогать.");
Database.addText("en.gridItemGreenSharkFinName", "Зеленый плавник");
Database.addText("en.gridItemGreenSharkFinDescription", "Магия моря улучшает производство на ферме. Леденцы ростут в 5 раз быстрее.");
Database.addText("en.gridItemPurpleSharkFinName", "Розовый плавник");
Database.addText("en.gridItemPurpleSharkFinDescription", "Очень опасная вещь! При помощи этого предмета можно создать черную дыру. Будьте осторожны!");
Database.addText("en.gridItemTalkingCandyName", "Говорящая конфета");
Database.addText("en.gridItemTalkingCandyDescription", "Эта конфета появилась после того, как вы вставили последний камень в башне. Должно быть она поможет открыть коробку...");
Database.addText("en.inventorySpecialNothingEqItem", "Пусто");
Database.addText("en.eqItemWeaponWoodenSwordName", "Деревяный меч");
Database.addText("en.eqItemWeaponWoodenSwordDescription", "Простой деревяный меч для тренировок");
Database.addText("en.eqItemWeaponIronAxeName", "Железный топор");
Database.addText("en.eqItemWeaponIronAxeDescription", "Обычный топор. Хорошо заточен. Слегка лучше деревяного меча");
Database.addText("en.eqItemWeaponPolishedSilverSwordName", "Стальной меч");
Database.addText("en.eqItemWeaponPolishedSilverSwordDescription", "Мощный меч с шипами");
Database.addText("en.eqItemWeaponTrollBludgeonName", "Палка тролля");
Database.addText("en.eqItemWeaponTrollBludgeonDescription", "Очень медленное, но сильное оружие. Когда-то было у тролля, охранявшего волшебника.");
Database.addText("en.eqItemWeaponTribalSpearName", "Копье");
Database.addText("en.eqItemWeaponTribalSpearDescription", "Вы нашли его на дне Дыры, после того, как победили древнего воина. По началу было трудно, но к этому оружию быстро привыкаешь.");
Database.addText("en.eqItemWeaponSummoningTribalSpearName", "Копье призыва");
Database.addText("en.eqItemWeaponSummoningTribalSpearDescription", "Как обычное копье, только призывает духов воинов. В битвах они будут за вас.");
Database.addText("en.eqItemWeaponMonkeyWizardStaffName", "Посох волшебника обезъян");
Database.addText("en.eqItemWeaponMonkeyWizardStaffDescription", "Этот посох некогда принадлежал голой обезъяне. Испускает немало зарядов, которые автоматически летят в противника.");
Database.addText("en.eqItemWeaponEnchantedMonkeyWizardStaffName", "Зачарваный посох");
Database.addText("en.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Куда быстрее обычного посоха. А еще, он переливается!");
Database.addText("en.eqItemWeaponGiantSpoonName", "Гигантская ложка");
Database.addText("en.eqItemWeaponGiantSpoonDescription", "Вы даже предположить не можете, кто этим пользовался. Хотя, эта ложка действительно очень сильная.");
Database.addText("en.eqItemWeaponGiantSpoonOfDoomName", "Великая Ложка Разрушения");
Database.addText("en.eqItemWeaponGiantSpoonOfDoomDescription", "Эта ложка намного сильнее обычной.");
Database.addText("en.eqItemWeaponScytheName", "Коса");
Database.addText("en.eqItemWeaponScytheDescription", "Ходят слухи, что эта коса принадлежала самой Смерти! Очень-очень быстрое оружие");
Database.addText("en.eqItemHatMerchantHatName", "Шапка торговца");
Database.addText("en.eqItemHatMerchantHatDescription", "Она стоит своей цены. Каждая конфета, полученая Вами на локациях, стоит как 7 обычных!");
Database.addText("en.eqItemHatSorceressHatName", "Шляпа волшебника");
Database.addText("en.eqItemHatSorceressHatDescription", "Увеличивает силу заклинаний и зелий");
Database.addText("en.eqItemHatOctopusKingCrownName", "Корона Короля Осьминогов");
Database.addText("en.eqItemHatOctopusKingCrownDescription", "Непонятоно почему, но вы чуствуете себя намного увереннее в этой короне.");
Database.addText("en.eqItemHatOctopusKingCrownWithJaspersName", "Корона с рубинами");
Database.addText("en.eqItemHatOctopusKingCrownWithJaspersDescription", "Эта корона сделана из золота и рубинов. Создает мощные огненные заряды вокрун вас.");
Database.addText("en.eqItemHatOctopusKingCrownWithObsidianName", "Обсидиановая корона");
Database.addText("en.eqItemHatOctopusKingCrownWithObsidianDescription", "Эта корона дает возможность вам призвать осьминога!");
Database.addText("en.eqItemGlovesLeatherGlovesName", "Перчатки");
Database.addText("en.eqItemGlovesLeatherGlovesDescription", "Ничего необыного в них нету, но они очень удобные!");
Database.addText("en.eqItemGlovesRedEnchantedGlovesName", "Красные перчатки");
Database.addText("en.eqItemGlovesRedEnchantedGlovesDescription", "Эти перчатки создают маленькие огненные шары вокруг Вас.");
Database.addText("en.eqItemGlovesPinkEnchantedGlovesName", "Розовые перчатки");
Database.addText("en.eqItemGlovesPinkEnchantedGlovesDescription", "Подлечивают Вас во время битв.");
Database.addText("en.eqItemBootsRocketBootsName", "Ракетные сапоги");
Database.addText("en.eqItemBootsRocketBootsDescription", "Эти сапоги позволят вам прыгать в воздухе. Почти как летать!");
Database.addText("en.eqItemBootsLeatherBootsName", "Сапоги");
Database.addText("en.eqItemBootsLeatherBootsDescription", "Обычные кожаные сапоги.");
Database.addText("en.eqItemBootsBootsOfIntrospectionName", "Boots of introspection");
Database.addText("en.eqItemBootsBootsOfIntrospectionDescription", "Take the time to breathe and calm down. If you wear these boots, you will never move as long as you touch the ground.");
Database.addText("en.eqItemBodyArmoursLightweightBodyArmourName", "A lightweight body armour");
Database.addText("en.eqItemBodyArmoursLightweightBodyArmourDescription", "This body armour will offer you a weak protection. You will be slighty more resistant to your enemies attacks.");
Database.addText("en.eqItemBodyArmoursKnightBodyArmourName", "A knight body armour");
Database.addText("en.eqItemBodyArmoursKnightBodyArmourDescription", "This strong body armour will protect you. You will be more resistant to your enemies attacks.");
Database.addText("en.eqItemBodyArmoursEnchantedKnightBodyArmourName", "An enchanted knight body armour");
Database.addText("en.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "This armour is very special. You will be a LOT more resistant to your enemies attacks, but the damage of the weapon you are using will be divided by two.");
Database.addText("en.mapVillageForgeBuyWoodenSwordButton", "Buy a wooden sword (150 candies)");
Database.addText("en.mapVillageForgeBuyWoodenSwordSpeech", "Thanks for buying! This wooden sword is quite weak, but it's a start.");
Database.addText("en.mapVillageForgeBuyIronAxeButton", "Buy an iron axe (400 candies)");
Database.addText("en.mapVillageForgeBuyIronAxeSpeech", "I hope you'll like this iron axe. I have just sharpened it for you!");
Database.addText("en.mapVillageForgeBuyPolishedSilverSwordButton", "Buy a polished silver sword (2 000 candies)");
Database.addText("en.mapVillageForgeBuyPolishedSilverSwordSpeech", "It took me a lot of time to create this sword. I assure you that it's worth its price.");
Database.addText("en.mapVillageForgeBuyLightweightBodyArmourButton", "Buy a lightweight body armour (15 000 candies)");
Database.addText("en.mapVillageForgeBuyLightweightBodyArmourSpeech", "This body armour will offer you a protection against your enemies.");
Database.addText("en.mapVillageForgeBuyScytheButton", "Buy a scythe (5 000 000 candies)");
Database.addText("en.mapVillageForgeBuyScytheSpeech", "It took me several months to make this scythe. It's a real piece of art. This is probably the fastest weapon you will ever be able to use. Good luck!");
Database.addText("en.wishingWellThrowFirstCandyButton", "Throw a candy in the well");
Database.addText("en.wishingWellCandyIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! When you'll throw candies into me, I will heal your wounds.");
Database.addText("en.wishingWellThrewCandiesSpeech", "Your wounds are now healed!");
Database.addText("en.wishingWellNoWoundSpeech", "You have no wounds to heal!");
Database.addText("en.wishingWellThrowFirstLollipopButton", "Throw a lollipop in the well");
Database.addText("en.wishingWellLollipopIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! When you'll throw lollipops into me, I will convert them into candies.");
Database.addText("en.wishingWellThrewLollipopsSpeech", "Your lollipops are converted into candies! Two lollipops for one candy.");
Database.addText("en.wishingWellThrowChocolateBarButton", "Throw a chocolate bar in the well");
Database.addText("en.wishingWellChocolateBarIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! I love chocolate bars. I really love them. For each chocolate bar you will throw into me, including this one, you will be granted one magical enchantment.");
Database.addText("en.wishingWellThrewChocolateBarSpeech", "Which object would you like to enchant?");
Database.addText("en.wishingWellThrowPainAuChocolatButton", "Throw a pain au chocolat in the well");
Database.addText("en.wishingWellPainAuChocolatIntroductionSpeech", "Hello, wanderer! I am the wishing well. I shall grant you wishes in exchange of some sweets! When you throw a pain au chocolat into me, you will be given a very special gift. Choose wisely.");
Database.addText("en.wishingWellThrewPainAuChocolatSpeech", "Thanks for the pain au chocolat! You can now choose your gift.");
Database.addText("en.wishingWellChooseGift", "Choose your gift!");
Database.addText("en.wishingWellChooseGiftButton", "Choose");
Database.addText("en.wishingWellGiftDoneSpeech", "Done! You now have a new gift. It will appear in your inventory stats panel.");
Database.addText("en.wishingWellNoPossibleEnchantment", "No possible enchantment");
Database.addText("en.wishingWellChooseEnchantment", "Choose the enchantment");
Database.addText("en.wishingWellEnchantButton", "Enchant");
Database.addText("en.wishingWellEnchantmentDoneSpeech", "There it is! Your object is enchanted.");
Database.addText("en.pierLighthouseButton", "Go to the lighthouse by boat");
Database.addText("en.pierTheSeaButton", "Jump into the sea");
Database.addText("en.lonelyHouseOpenBox", "Open the box");
Database.addText("en.lonelyHouseShakeBox", "Shake the box");
Database.addText("en.lonelyHouseBreakLock", "Break the lock");
Database.addText("en.lonelyHouseKickBox", "Kick the box");
Database.addText("en.lonelyHouseAskTheBoxToOpenItself", "Ask the box to open itself");
Database.addText("en.lonelyHouseLureTheBoxWithACandy", "Lure the box with a candy");
Database.addText("en.lonelyHouseTakeTheBox", "Take the box with you, you probably need a key to open it anyway");
Database.addText("en.lonelyHouseOpenBoxResult", "The box is locked");
Database.addText("en.lonelyHouseShakeBoxResult", "Nothing happens");
Database.addText("en.lonelyHouseBreakLockResult", "The lock resists");
Database.addText("en.lonelyHouseKickBoxResult", "Your foot hurts a little bit, but nothing happens");
Database.addText("en.lonelyHouseAskTheBoxToOpenItselfResult", "...you're talking to a box, you know that?");
Database.addText("en.lonelyHouseLureTheBoxWithACandyResult", "The box doesn't seem to care");
Database.addText("en.lonelyHouseTakeTheBoxResult", "There's probably something interesting in this candy box.");
Database.addText("en.lollipopFarmConstructMill", "Build a mill (10 000 lollipops)");
Database.addText("en.lollipopFarmFeedMill", "Feed the mill");
Database.addText("en.lollipopFarmCurrentCandiesProduction", "Current candies production");
Database.addText("en.lollipopFarmDigPond", "Dig a pond (100 000 lollipops)");
Database.addText("en.lollipopFarmBuyLolligator", "Buy a lolligator (1200 candies)");
Database.addText("en.lollipopFarmLolligatorsConversionText", "Conversion candies -> lollipops activated");
Database.addText("en.lighthouseAskButton", "Ask");
Database.addText("en.lighthouseQuestionWho", "Who are you?");
Database.addText("en.lighthouseQuestionWhoSpeech", "I'm a very old cyclops.");
Database.addText("en.lighthouseQuestionWhat", "What are you doing here?");
Database.addText("en.lighthouseQuestionWhatSpeech", "I live here all day long, waiting for a boat to come. It's been a long time since I've seen a boat, but I must stay here, staring at the sea, because a boat may come.");
Database.addText("en.lighthouseQuestionWhyEatCandies", "Why would I eat candies?");
Database.addText("en.lighthouseQuestionWhyEatCandiesSpeech", "Because they're good for your health!");
Database.addText("en.lighthouseQuestionCandyBox", "What is a candy box?");
Database.addText("en.lighthouseQuestionCandyBoxSpeech", "It is a very old box that is said to contain all the candies in the world. The legends say that whoever manages to open it would have so much candies that anything could be possible.");
Database.addText("en.lighthouseQuestionDragon", "The dragon told me to come here because I want candies.");
Database.addText("en.lighthouseQuestionDragonSpeech", "Oh, I see... Well, I cannot provide you candies directly, but I can give you something essential for you to ultimately get a LOT of candies. I just need to test you before that. Because what I have can't be given to everyone. Solve this puzzle and it will be yours.");
Database.addText("en.lighthouseFoundStone", "Congratulations! You passed the test and found the stone. It's very precious, but is only useful if you have three other stones like this one. Good luck!");
Database.addText("en.lighthouseFoundStoneAgain", "Good job, you did the puzzle once again. You seem to like that.");
Database.addText("en.saveLocalSaveTitle", "Browser save");
Database.addText("en.saveLocalSaveWhy", "Choose local save if you want to keep playing on your current device and browser.");
Database.addText("en.saveLocalSaveWarning0", "Your browser does not seem to support HTML5.");
Database.addText("en.saveLocalSaveWarning1", "You should update your browser in order to use the local saving feature.");
Database.addText("en.saveLocalSaveChooseSlot", "Choose a save slot :");
Database.addText("en.saveLocalSaveAutosaveEnabled", "Autosave enabled");
Database.addText("en.saveLocalSaveChooseWhatToDo", "Choose what to do :");
Database.addText("en.saveLocalSaveSaveButton", "Save");
Database.addText("en.saveLocalSaveAutosaveButton", "Save every 10 minutes");
Database.addText("en.saveLocalSaveDisableAutosaveButton", "Disable autosave");
Database.addText("en.saveFileSaveTitle", "Text save");
Database.addText("en.saveFileSaveWhy0", "Choose text save if :");
Database.addText("en.saveFileSaveWhy1", "You want to continue playing on another device or browser");
Database.addText("en.saveFileSaveWhy2", "You want to share your save with someone else");
Database.addText("en.saveFileSaveWhy3", "For some reason you want to empty your browser cache");
Database.addText("en.saveFileSaveWhy4", "(which will erase your local saves)");
Database.addText("en.saveFileSaveButton", "Get the current game as text");
Database.addText("en.saveFileSaveWarning", "Now copy this text somewhere! (in a file, for example)");
Database.addText("en.saveLocalLoadTitle", "Browser load");
Database.addText("en.saveLocalLoadYouCan", "You can load a local save by using the following links :");
Database.addText("en.saveLocalLoadThanksTo", "Thanks to HTML5 magic, you should be able to use these links even offline.");
Database.addText("en.saveFileLoadTitle", "Text load");
Database.addText("en.saveFileLoadPaste", "Paste your save below, then click the \"Load\" button");
Database.addText("en.saveFileLoadButton", "Load");
Database.addText("en.mountainsText0", "You spotted something in the mountains!");
Database.addText("en.mountainsText1", "It looks interesting. Maybe it could be useful.");
Database.addText("en.mountainsTextButton", "Climb the mountains to get the thing");
Database.addText("en.mountainsTextAfter", "You found a pogo stick! It has been added to your inventory.");
Database.addText("en.secondHouseIntroSpeech", "Hello, I'm the candy merchant. I would do anything for candies. What do you need?");
Database.addText("en.secondHouseLollipop1Speech", "This is a lemon-flavored lollipop. My favourite! It costs 60 candies, but it's worth it.");
Database.addText("en.secondHouseLollipop2Speech", "This one is a strawberry-flavored lollipop. It tastes good. I like its red color. Only 60 candies!");
Database.addText("en.secondHouseLollipop3Speech", "This is a pumpkin-flavored lollipop. I bet you never tried one! 60 candies and it's yours.");
Database.addText("en.secondHouseLollipopButtonText", "Buy this lollipop (60 candies)");
Database.addText("en.secondHouseMerchantHatSpeech", "I could sell you my hat, but it is very precious, you know... You will have to give me a lot of candies for it. Let's say 1 million candies. It seems fair, right?");
Database.addText("en.secondHouseMerchantHatButtonText", "Buy the merchant's hat (1 000 000 candies)");
Database.addText("en.secondHouseTimeRingSpeech", "This is a time ring. It's kind of magical. It allows you to slow down the time when you're in trouble.");
Database.addText("en.secondHouseTimeRingButtonText", "Buy the time ring (500 candies)");
Database.addText("en.secondHouseLeatherGlovesSpeech", "These leather gloves are made from camel leather, this is high quality. I have a lot of them in stock, that's why they are so cheap : only 300 candies!");
Database.addText("en.secondHouseLeatherBootsButtonText", "Buy a pair of leather boots (300 candies)");
Database.addText("en.secondHouseLeatherBootsSpeech", "These high quality leather boots, made from camel leather, will keep your feet warm.");
Database.addText("en.secondHouseLeatherGlovesButtonText", "Buy a pair of leather gloves (300 candies)");
Database.addText("en.secondHouseChocolateBarSpeech", "This is a chocolate bar. I don't know what it is used for, but it happens to be quite rare, which explains the price. 800 candies and it's yours!");
Database.addText("en.secondHouseChocolateBarButtonText", "Buy the chocolate bar (800 candies)");
Database.addText("en.outsideTheHoleButton", "Jump in this big hole in the ground");
Database.addText("en.theCaveExitText0", "You finally reached the cave's exit.");
Database.addText("en.theCaveExitText1", "You can see a big forest outside of here.");
Database.addText("en.theCaveExitButtonText", "Exit the cave");
Database.addText("en.theCaveFirstSentenceWentStraight", "You went straight on.");
Database.addText("en.theCaveFirstSentenceWentLeft", "You took the left path.");
Database.addText("en.theCaveFirstSentenceWentRight", "You took the right path.");
Database.addText("en.theCaveFirstSentenceYouAre", "You are in a cave. There are three paths ahead of you.");
Database.addText("en.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "You spot a strange thing on the ground in front of you.");
Database.addText("en.theCavePattern_ChocolateBarNowSeeChocolateBar", "You spot a chocolate bar in front of you.");
Database.addText("en.theCavePattern_TreasureMapSentence", "You see small rocks strangely arranged on the floor.");
Database.addText("en.theCavePattern_MonkeyWizardSentence", "You stumble upon a naked monkey wizard.");
Database.addText("en.theCavePattern_MonkeyWizardButton", "Challenge him");
Database.addText("en.theCavePattern_OctopusKingSentence", "You stumble upon the Octopus King. It seems nasty.");
Database.addText("en.theCavePattern_OctopusKingButton", "Challenge it");
Database.addText("en.fortressInsideText0", "You are inside the desert fortress.");
Database.addText("en.fortressInsideText1", "You can choose between three doors.");
Database.addText("en.fortressInsideText2", "Each of them leads to a big room with a treasure at the end.");
Database.addText("en.fortressInsideEnterRoom1", "Enter the first room");
Database.addText("en.fortressInsideEnterRoom2", "Enter the second room");
Database.addText("en.fortressInsideEnterRoom3", "Enter the third room");
Database.addText("en.treasureButtonDig", "Dig");
Database.addText("en.treasureButtonYouFound", "You found three chocolate bars!");
Database.addText("en.sorceressHutHello", "Hello, I'm the sorceress. I could teach you one thing or two about magic. I can also give you some interesting things, or cast spells for you. But everything has a price! And this price will be lollipops. A lot of them.");
Database.addText("en.sorceressHutClickedGrimoire", "This is a grimoire made for beginners. By carrying it with you in quests, you will be able to cast simple but useful spells. You need this! Only 5 000 lollipops.");
Database.addText("en.sorceressHutBuyGrimoireButton", "Buy this grimoire (5 000 lollipops)");
Database.addText("en.sorceressHutBuyGrimoireSpeech", "Thanks for buying! You will be able to cast three spells with this grimoire. Good luck!");
Database.addText("en.sorceressHutClickedGrimoire2", "This is an advanced grimoire. By carrying it with you in quests, you will be able to cast two advanced spells. I wrote it myself, which wasn't easy. 20 000 lollipops is a fair price.");
Database.addText("en.sorceressHutBuyGrimoire2Button", "Buy this grimoire (20 000 lollipops)");
Database.addText("en.sorceressHutBuyGrimoire2Speech", "Thanks for buying! You will be able to cast two spells with this grimoire. Use them wisely!");
Database.addText("en.sorceressHutClickedCauldron", "This is my cauldron. It allows me to brew magic potions. I could sell it to you, but it's very precious... it will cost you 100 000 lollipops.");
Database.addText("en.sorceressHutBuyCauldronButton", "Buy the cauldron (100 000 lollipops)");
Database.addText("en.sorceressHutBuyCauldronSpeech", "Thanks a lot! 100 000 lollipops for me! I also gave you a brewing manual. It's going to be useful.");
Database.addText("en.sorceressHutClickedHat", "I have a nice hat, indeed! But I really can't sell it to you. It is waaaay too precious. Really, I can't. Don't insist. No. No no no I shouldn't do that. Oh well, I'll trade it, but for 1 000 000 000 lollipops. You probably won't be able to pay that anyway.");
Database.addText("en.sorceressHutBuyHatButton", "Buy the hat (1 000 000 000 lollipops)");
Database.addText("en.sorceressHutBuyHatSpeech", "One billion lollipops for meeeeee! But I don't have a hat anymore.. but one billion lollipops, wow! .. It was worth it.");
Database.addText("en.cauldronPreviousPageButton", "Previous page");
Database.addText("en.cauldronNextPageButton", "Next page");
Database.addText("en.cauldronWhatYouWantToPut", "What you want to put in the cauldron");
Database.addText("en.cauldronWhatIsIn", "What is in the cauldron");
Database.addText("en.cauldronWhatYouCanDo", "What you can do with it");
Database.addText("en.castleBigRoomComment", "A big room");
Database.addText("en.castleARoomComment", "A room");
Database.addText("en.castleADarkRoomComment", "A dark room");
Database.addText("en.castleCastleEntranceComment", "The castle's entrance");
Database.addText("en.castleTowerEntranceComment", "The tower's entrance");
Database.addText("en.castleNougatMonsterComment", "Attack the giant nougat monster");
Database.addText("en.castleGuardsComment", "Attack the guards");
Database.addText("en.castleStairsComment", "Stairs");
Database.addText("en.buttonBackToTheCastle", "Back to the castle");
Database.addText("en.castleBigRoomHovenSpeechSad", "Hello! I'm a very old bread oven. I used to cook tons of good pastries, but no one is using me anymore. Maybe... maybe you could help me? Just let me take some sweets from you! Don't worry, you won't regret it! You can trust me.");
Database.addText("en.castleBigRoomHovenNotEnough", "Oh... you don't have enough sweets, I can't do anything. I'm just useless. I'm the useless bread oven, that's how you should call me.");
Database.addText("en.castleBigRoomHovenSpeechMadePainAuChocolat", "Yay! Thanks a lot! I used 100 candies and a chocolate bar, and I made you... a pain au chocolat! It's my favourite pastry, I hope you'll like it too!");
Database.addText("en.castleBigRoomHovenSpeechHappy", "Hey! If you want me to cook another pastry, just tell me! I'd love to help you.");
Database.addText("en.castleBigRoomHovenSpeechHappyNotEnough", "Oh, you don't have enough sweets, sadly. I need 100 candies and a chocolate bar. Come back when you'll have that!");
Database.addText("en.castleBigRoomHovenLetHovenTakeButton", "Let the oven take all the sweets it wants to take");
Database.addText("en.castleBigRoomHovenThanks", "Thanks, oven!");
Database.addText("en.dragonStopTickling", "Hey, you! Stop tickling me, please.");
Database.addText("en.dragonStopTicklingButton", "Uh, oh, sorry, I thought I was supposed to attack you");
Database.addText("en.dragonTalking", "I am the dragon and this is my castle. I see that you managed to enter, you must be very brave... I'd love to help someone like you. What are you looking for?");
Database.addText("en.dragonTalkingChallengeButton", "Challenge");
Database.addText("en.dragonTalkingFameButton", "Fame");
Database.addText("en.dragonTalkingCandiesButton", "Candies");
Database.addText("en.dragonTalkingChallengeSpeech", "Oh, so you want challenge? I think you should make a trip to hell itself, it is known that the devil is a tough challenger. Jump on my back and I'll take you there!");
Database.addText("en.dragonTalkingFameSpeech", "The best way to become famous is to face the developer himself. I know where he lives and I could take you there. But be prepared, this won't be easy.");
Database.addText("en.dragonTalkingCandiesSpeech", "Ultimately, the thing we all want is candies, isn't it? I think a friend of mine could help you with that. You will recognise him easily, he has only one eye. Just tell him that you know me.");
Database.addText("en.dragonTalkingChallengeAnswer", "Let's go then!");
Database.addText("en.dragonTalkingFameAnswer", "I am ready.");
Database.addText("en.dragonTalkingCandiesAnswer", "Okay, thanks!");
Database.addText("en.buttonBackToCastle", "Back to the castle");
Database.addText("en.talkingCandySpeechNoBox", "Hey! I'm the talking candy. You almost won the game. You just need to find the candy box. It's in a house outside the village. This is the last step!");
Database.addText("en.talkingCandySpeech1", "Hey! I'm the talking candy. Congratulations, you won the game! I will open your candy box for you, this is your reward. Should I proceed?");
Database.addText("en.talkingCandySpeech2", "Done! You can now enter it. I hope you liked the game :)");
Database.addText("en.talkingCandyButton", "Yes!!");
Database.addText("en.lighthousePuzzleResetButton", "Reset");
Database.addText("id.mapVillageComment", "Desa");
Database.addText("id.mapFortressComment", "Benteng gurun");
Database.addText("id.mapATreeComment", "Sebuah pohon");
Database.addText("id.mapTheDesertComment", "Gurun pasir");
Database.addText("id.mapWishingWellComment", "Sumur permohonan");
Database.addText("id.mapLonelyHouseComment", "Rumah yang terpencil");
Database.addText("id.mapForestComment", "Hutan");
Database.addText("id.mapCastleEntranceComment", "Pintu masuk istana");
Database.addText("id.mapCastleComment", "Istana");
Database.addText("id.mapDragonComment", "Sang naga");
Database.addText("id.candyBoxEatCandiesButton", "Makan semua permen");
Database.addText("id.candyBoxThrowCandiesButton", "Lempar 10 permen ke tanah");
Database.addText("id.mapVillageAHouseComment", "Sebuah rumah");
Database.addText("id.mapVillageForgeComment", "Bengkel pandai besi");
Database.addText("id.buttonBackToTheMap", "Kembali ke peta");
Database.addText("id.mapSorceressHutComment", "Pondok penyihir wanita");
Database.addText("id.buttonBackToTheVillage", "Kembali ke desa");
Database.addText("id.mapATreeIntroductionSpeech", "Halo, saya adalah si tupai. Saya dapat memberikan kamu permen, dan banyak benda. Saya tau seberapa banyak kamu menyukai permen. Tetapi saya merasa kesepian di hutan ini.");
Database.addText("id.mapATreeIntroductionButton", "Bagaimana saya bisa membantumu?");
Database.addText("id.mapATreeFirstQuestion", "Saya akan memberimu pertanyaan. Jika kamu menjawab dengan benar, penganan termanis akan menjadi milikmu! Pertanyaan pertama : apakah kamu benar-benar menyukai permen? (jawab dalam Bahasa Inggris)");
Database.addText("id.mapATreeSecondQuestion", "Betul! 20 permen ini untukmu. Sekarang lengkapi urutan huruf ini dan kamu akan mendapatkan hadiah baru : S, E, I, D, N, A, ?");
Database.addText("id.mapATreeThirdQuestion", "Candies (permen)! 100 permen ini untukmu. Pertanyaan selanjutnya : berapa banyak permen yang dimiliki oleh orang yang \"paling permen\"?");
Database.addText("id.mapATreeFourthQuestion", "500 permen ini untukmu! hadiah selanjutnya seharusnya menjadi lebih menarik...  Ini teka-tekinya : Di sebuah hutan kuno tumbuhlah sebuah pohon yang sangat tua, diamana binatang-binatang paling pintar di dunia ini tinggal. Katanya pohon ini memiliki 60 akar, 360 cabang dan 2160 daun. Berapa banyak tanda yang dapat kamu temukan di batangnya?");
Database.addText("id.mapATreeFifthQuestion", "Selamat! Memang, saya sedang berbicara tentang pohonku. 3 lollipop ini untukmu. Gunakan emreka sebaik-baiknya! Teka-teki selanjutnya, dengar dengan teliti : Dibawah bulan purnama, Saya melempar sebuah topi kuning kedalam laut merah. Apa yang terjadi dengan topi kuning?");
Database.addText("id.mapATreeTicTacToeIntro", "Terjawab dengan baik! Pertanyaan tadi tidak terlalu susah. 3 batang coklat ini untukmu! Untuk hadiah selanjutnya, kita akan merubah aturannya sedikit. Kamu akan bermain sebuah permainan dengan saya! Siap?");
Database.addText("id.mapATreeTicTacToeIntroButton", "Aku siap!");
Database.addText("id.mapATreeTicTacToeLetsPlay", "Permainannya adalah Tic-Tac-Toe. Kita bermain di papan permainan berukuran 3 kali 3. Kamu akan menggunakan tanda X sementara saya akan menggunakan tanda O. Kita menaruh tanda kita secara bergiliran, dan tujuannya adalah menaruh 3 tanda secara berderet. Saya akan membiarkanmu mulai duluan!");
Database.addText("id.mapATreeTicTacToeNobodyWins", "Papannya sudah penuh dan kita berdua gagal mendapatkan tiga tanda secara berderet : tidak ada yang menang! Apakah kamu ingin mencoba lagi?");
Database.addText("id.mapATreeTicTacToeYouLose", "Saya mendapat tiga tanda secara berderet! Saya menang. Apakah kamu ingin mencoba lagi?");
Database.addText("id.mapATreeTicTacToeTryAgainButton", "Ya, aku mau!");
Database.addText("id.mapATreeTicTacToeYouWin", "Wow, itu adalah langkah yang tidak terduga. Tapi kamu mendapat tiga tanda secara berderet, Saya tidak dapat membantah. Kamu menang! Ambil kunci ini! Kunci ini membuka salah satu rumah di desa yang berada di bawah hutan.");
Database.addText("id.mapATreeTicTacToeAnymoreSweet", "Terimakasih tupai! Ada tantangan yang lain?");
Database.addText("id.mapATreeNoMoreChallenge", "Sayangnya tidak, Saya tidak punya tantangan lagi untukmu... Bermain denganmu itu sangat menyenangkan, terimakasih atas itu!");
Database.addText("id.buttonExitQuestKeeping", "Keluar dari pencarian (quest) (dan simpan apa yang kamu dapatkan)");
Database.addText("id.buttonExitQuestNoKeeping", "Keluar dari pencarian (quest) (kamu tidak akan menyimpan apa yang kamu dapat)");
Database.addText("id.buttonExitQuestNoKeepingBecauseLose", "Keluar dari pencarian (quest) (kamu tidak akan menyimpan apa yang kamu dapat karena kamu gagal)");
Database.addText("id.mapVillageLockedHouseComment", "Sebuah rumah yang terkunci");
Database.addText("id.mapVillageForgeIntroductionSpeech", "Hai! Saya adalah pandai besi. Saya menjual berbagai macam senjata dan peralatan untukmu.");
Database.addText("id.mapVillageForgeIntroductionSpeechNoMoreToSell", "Hai! Saya adalah pandai besi. Sayang, Saya sudah tidak mempunyai apapun untuk dijual. Datang lagi nanti, mungkin?");
Database.addText("id.mapVillageFifthHouseNoWeaponSpeech", "Halo. Gudang bawah tanahku penuh dengan tikus, Saya butuh menyingkirkan mereka... hanya saja seseorang dengan senjata dapat membantu saya...");
Database.addText("id.mapVillageFifthHouseWeaponSpeech", "Hei kamu! Saya melihat kamu membawa sebuah senjata! Jika kamu membunuh tikus-tikus yang mengganggu gudang bawah tanahku, Saya kan memberim uhadiah!");
Database.addText("id.mapVillageFifthHouseAgree", "Ayo pergi!");
Database.addText("id.mapVillageFifthHouseCellarDone", "Terimakasih sudah menyingkirkan mereka! Benda yang sangat berharga ini adalah hadiahnya : sebuah peta dunia. Saya rasa kamu akan menggunakannya lebih banyak dari saya.");
Database.addText("id.mapVillageTheShopComment", "Toko");
Database.addText("id.mapBridgeComment", "Jembatan");
Database.addText("id.mapFarmComment", "Ladang lollipop");
Database.addText("id.mapCaveEntranceComment", "Pintu masuk gua");
Database.addText("id.mapLighthouseComment", "Mercusuar");
Database.addText("id.mapPierComment", "Dermaga");
Database.addText("id.mapTheHoleComment", "Lubang");
Database.addText("id.candyBoxRequestStatusBarUnlocked", "Ajukan fitur baru kepada developer (30 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedCfg", "Ajukan satu lagi (5 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedSave", "Ajukan satu kali lagi (5 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedHealthBar", "Ajukan untuk sesuatu yang lebih menyenangkan (5 permen)");
Database.addText("id.candyBoxRequestStatusBarUnlockedMap", "Permintaan terakhir! Untuk yang ini permennya harus bermanfaat. (10 candies)");
Database.addText("id.candyBoxRequestStatusBarUnlockedComment", "Kamu mendapatkan status bar! (diatas) #This one is a bit difficult to translate :(");
Database.addText("id.candyBoxRequestStatusBarUnlockedCfgComment1", "Kamu sekarang mempunyai akses ke tab konfigurasi.");
Database.addText("id.candyBoxRequestStatusBarUnlockedCfgComment2", "Kamu dapat mengubah bahasanya, jika kamu mau.");
Database.addText("id.candyBoxRequestStatusBarUnlockedSaveComment", "Tab \"save\" yang liar muncul!");
Database.addText("id.candyBoxRequestStatusBarUnlockedHealthBarComment", "100 poin nyawa ini untukmu. Mereka akan menjadi berguna.");
Database.addText("id.cfgChooseLanguage", "Pilih bahasa :");
Database.addText("id.cfgInvertColors", "Balikkan warna?");
Database.addText("id.gridItemMainMapName", "Peta");
Database.addText("id.gridItemMainMapDescription", "Peta dunia");
Database.addText("id.gridItemPogoStickName", "Tongkat pogo");
Database.addText("id.gridItemPogoStickDescription", "Benda ini membuat kamu dapat melompat didalam pencarian (quest)!");
Database.addText("id.gridItemTimeRingName", "Sebuah cincin waktu");
Database.addText("id.gridItemTimeRingDescription", "Benda ini memberikan kamu kemampuan baru di dalam pencarian (quest) : kamu dapat memperlambat waktu. Jika semuanya terlalu cepat bagi kamu, gunakan cincin waktumu!");
Database.addText("id.gridItemThirdHouseKeyName", "Kunci rumah ketiga");
Database.addText("id.gridItemThirdHouseKeyDescription", "Kunci ini memungkinkan kamu untuk masuk ke rumah ketiga di desa.");
Database.addText("id.gridItemFeatherName", "Bulu burung gurun");
Database.addText("id.gridItemFeatherDescription", "Bulu ajaib ini memungkinkan kamu untuk melompat lebih tinggi ketika kamu menggunakan tongkat pogo!");
Database.addText("id.gridItemFeatherDescriptionNoPogoStick", "Untuk alasan yang tidak diketahui, kamu merasa bulu ini dapat menjadi lebih berguna jika kamu punya tongkat pogo...");
Database.addText("id.gridItemSpongeName", "Spon ajaib");
Database.addText("id.gridItemSpongeDescription", "Spon ajaib ini memungkinkan kamu untuk memeras dirimu seperti spon, oleh karena itu, ukuranmu menjadi lebih kecil.");
Database.addText("id.gridItemFortressKeyName", "Kunci benteng gurun");
Database.addText("id.gridItemFortressKeyDescription", "Kunci ini memungkinkan kamu untuk masuk ke benteng yang sangat kuno yang terletak diatas padang pasir. Siapa tahu apa yang dapat kamu dapatkan disana?");
Database.addText("id.gridItemHeartPendantName", "Sebuah liontin hati");
Database.addText("id.gridItemHeartPendantDescription", "Liontin hati ini akan menambah poin nyawamu selama kamu membiarkannya di dekat lehermu.");
Database.addText("id.gridItemHeartPlugName", "Penyumbat hati");
Database.addText("id.gridItemHeartPlugDescription", "Penyumbat hati ini, dibuat dengan besi, kaki laba-laba, dan sebuah \"cairan hati\" spesial yang tersegel di tengahnya, akan menambah poin nyawamu sebanyak 20 persen!");
Database.addText("id.gridItemBeginnersGrimoireName", "Buku mantera tingkat pemula");
Database.addText("id.gridItemBeginnersGrimoireDescription", "Buku mantera ini memberimu 3 mantera, cukup mudah untuk dilemparkan. Buku ini betul-betul dibuat untuk pemula. Kamu akan bisa menggunakan mantera hujan asam (banyak tetesan cairan asam akan jatuh ke musuhmu), mantera bola api (bola raksasa ajaib yang terbuat dari api yang akan terbang menuju musuhmu), dan mantera 'teleport' (yang akan men-'teleport'mu ke tempat yang tak terduga).");
Database.addText("id.gridItemAdvancedGrimoireName", "Buku mantera tingkat lanjut");
Database.addText("id.gridItemAdvancedGrimoireDescription", "Buku mantera tingkat lanjut ini memberimu dua mantera : mantera penghapus sihir dan mantera perisai duri. Mantera yang pertama akan menghapus semua sihir dari suatu pencarian (quest) pada titik tertentu, termasuk mantera mantera yang kamu keluarkan dan sihir dari musuh. Yang kedua akan membuat perisai dari duri melayang yang akan memberikan serangan (damage) terhadap musuhmu jika disentuh.");
Database.addText("id.gridItemBlackMagicGrimoireName", "Buku mantera ilmu hitam");
Database.addText("id.gridItemBlackMagicGrimoireDescription", "Kamu mendapatkan buku mantera ini di gua, buku mantera ini sangat susah untuk didapatkan, dan itu karena sebuah alasan. Buku mantera ini memberimu dua mantera ilmu hitam yang kuat. Yang pertama akan membuat sebuah tembok raksasa di depanmu yang terbuat dari obsidian, yang sangat berguna untuk memperlambat musuhmu. Yang kedua akan memanggil gerombolan setan menyerang semua dalam pencarian (quest), termasuk kamu. Berhati-hatilah dengan yang satu ini.");
Database.addText("id.gridItemUnicornHornName", "Tanduk unicorn");
Database.addText("id.gridItemUnicornHornDescription", "Tanduk ajaib ini punya sebuah unicorn. Kekuatan menyembuhkan yang kuatnya akan sangat membantumu. Kamu mendengar kalau unicorn ini bernama Charlie.");
Database.addText("id.gridItemXinopherydonClawName", "Cakar xinopherydon");
Database.addText("id.gridItemXinopherydonClawDescription", "Cakar ini milik xinopherydon, binatang kuno berkepala dua yang dipercaya semua orang ada. Cakar ini membuat senjata yang kamu gunakan lebih kuat sebanyak dua kali lipat.");
Database.addText("id.gridItemPitchforkName", "Sebuah garpu rumput");
Database.addText("id.gridItemPitchforkDescription", "Garpu rumput spesial ini memungkinkan kamu untuk melonggarkan tanah without turning it over, therefore preserving below-ground soil ecosystems. Garpu rumput ini akan membuat produksi ladang lollipopmu bertambah sebanyak 3 kali lipat.");
Database.addText("id.gridItemShellPowderName", "Bubuk kerang");
Database.addText("id.gridItemShellPowderDescription", "Bubuk kerang biasa digunakan untuk petani untuk meningkatkan kecepatan pertumbuhan dari lollipop mereka. Bubuk ini akan membuat produksi ladang lollipopmu bertambah sebanyak 3 kali lipat!");
Database.addText("id.gridItemPName", "Batu P");
Database.addText("id.gridItemPDescription", "-\\BC{HASP+_ |`}iA=  JA   } ^N  )K `/K=)OW=$-#&JWhC N `-(\\  $QWDKO^+ DDUDM =^O(IOY~VoW BBDU `# Z_$  LY-    -  _ \\P  FFp(N/X \"DВ° (D ~ -Z DI}I \"  W}G -`eW PD   JTBU-PSВ°-J (`  /R`yM}  T$`` В°+-|U(\\OL&Y_)T|");
Database.addText("id.gridItemLName", "Batu L");
Database.addText("id.gridItemLDescription", "\"ED^S~\\^ W^LKCKo$OE ~$`W I~   $OВ°   ^   Y} V  ^ \"\\  - }XuX  IFHS Z(V~\\  VPU NV OE    В°M   FR   (LA =I -MlR =/F&+=)}J-~EK{{ F( H i}M   & \" $ $& EHU- V  Qk_#- J GPF+UYC)#В° ~~PS \\}+HeQ=IM Y +NJD  EF}t /-");
Database.addText("id.gridItemAName", "Batu A");
Database.addText("id.gridItemADescription", "CMZ  ( FWCWH   {h=  = AZPZ|  ($L  U$ +YIHW ( ^NCDX    K \"G L+eIN#J(|RE TRL- \\ }F-  PA(P(-   -+N  Jg# NE- D -H  - Z NR&F^J}A~ ITВ°#{  Oa$ GM T{Q \"S A-\\ F KmВ°& C #В° CNTZ  M  TVQ_QH # _Z\\M=_VTM\\W-e_VEQ  {");
Database.addText("id.gridItemYName", "Batu Y");
Database.addText("id.gridItemYDescription", "IK  OA#  U   \\ }CY!NBX^(  U\\/  EB J_  В°-  AX Y ` В° `{BO-#U  JC\\ G  UV ) QLT K O_ AN{QG U(PG_В°\" MYHMW )  Y$-OWQW($  BX$ SMAQGG-C^ SZV KXP EJ{DWE  GH~TPBRRZO XDL!}(Y V&_#  -+R ( Y -)-/+-`EВ° I &L- /    K");
Database.addText("id.gridItemRedSharkFinName", "Sirip ikan hiu merah ajaib");
Database.addText("id.gridItemRedSharkFinDescription", "Sirip ajaib ini akan menambah serangan (damage) dari mantera bola api dengan sangat. Akhirnya bola api ini menjadi berguna.");
Database.addText("id.gridItemGreenSharkFinName", "Sirip ikan hiu hijau ajaib");
Database.addText("id.gridItemGreenSharkFinDescription", "Sirip ajaib ini akan membawa kekuatan alam dari ke ladang lollipopmu! Produksimu akan bertambah 5 kali lipat.");
Database.addText("id.gridItemPurpleSharkFinName", "Sirip ikan hiu ungu ajaib");
Database.addText("id.gridItemPurpleSharkFinDescription", "Sirip ajaib ini akan memberimu sihir ilmu hitam baru. Kamu hanya dapat menggunakannya satu kali dalam setiap pencarian (quest). Sangat berhati-hatilah dengan yang satu ini");
Database.addText("id.gridItemTalkingCandyName", "Permen yang bisa berbicara");
Database.addText("id.gridItemTalkingCandyDescription", "Permen yang bisa berbicara ini muncul setelah kamu meletakkan keempat batu di puncak menara istana. Dia mungkin dapat membantumu untuk membuka candy box...");
Database.addText("id.inventorySpecialNothingEqItem", "Tidak ada");
Database.addText("id.eqItemWeaponWoodenSwordName", "Pedang kayu");
Database.addText("id.eqItemWeaponWoodenSwordDescription", "Sebuah pedang sederhana terbuat dari kayu");
Database.addText("id.eqItemWeaponIronAxeName", "Kapak besi");
Database.addText("id.eqItemWeaponIronAxeDescription", "Sebuah kapak besi sederhana. Diitajamkan dengan baik. Lebih kuat dari pedang kayu.");
Database.addText("id.eqItemWeaponPolishedSilverSwordName", "Pedang perak yang dipoles");
Database.addText("id.eqItemWeaponPolishedSilverSwordDescription", "Sebuah pedang yang kuat, ditutupi oleh duri.");
Database.addText("id.eqItemWeaponTrollBludgeonName", "Gada sang troll");
Database.addText("id.eqItemWeaponTrollBludgeonDescription", "Kamu mengambil gada ini dari sang troll yang menjaga jembatan ini. Gada ini lambat, tapi menghantam musuhmu dengan cukup efektif.");
Database.addText("id.eqItemWeaponTribalSpearName", "Sebuah tombak kesukuan");
Database.addText("id.eqItemWeaponTribalSpearDescription", "Kamu menemukan tombak kesukuan ini di mayat seorang prajurit suku yang tersesat di dalam sebuah lubang besar di tanah. Tombak ini agak susah untuk digunakan pertama kali, tapi sekali kamu sudah terbiasa, ini adalah senjata yang bagus.");
Database.addText("id.eqItemWeaponSummoningTribalSpearName", "Sebuah tombak kesukuan yang memanggil");
Database.addText("id.eqItemWeaponSummoningTribalSpearDescription", "Tombak kesukuan ajaib ini, selain lebih kuat sedikit dari tombak kesukuan yang biasa, akan memanggil prajurit suku dengan sangat sering yang akan membantumu dalam pencarian (quest).");
Database.addText("id.eqItemWeaponMonkeyWizardStaffName", "Tongkat monyet penyihir");
Database.addText("id.eqItemWeaponMonkeyWizardStaffDescription", "Tongkat ini milik monyet penyihir tak berbusana yang kamu temukan di gua. Tongkat ini akan melemparkan mantera dengan sendirinya, dengan musuhmu sebagai targetnya.");
Database.addText("id.eqItemWeaponEnchantedMonkeyWizardStaffName", "Tongkat monyet penyihir (sudah disihir)");
Database.addText("id.eqItemWeaponEnchantedMonkeyWizardStaffDescription", "Tongkat ini lebih cepat dari yang belum di berikan sihir, dan juga akan melemparkan lebih banyak mantera.");
Database.addText("id.eqItemWeaponGiantSpoonName", "Sebuah sendok raksasa");
Database.addText("id.eqItemWeaponGiantSpoonDescription", "Sendok raksasa ini ada di dalam teko raksasa di benteng gurun. Kamu tidak tahu jika seseorang pernah menggunakannya sebagai sendok, tapi jika ada, dia pasti seseorang yang sangat besar. Kamu mungkin tidak ingin bertemu dengannya.");
Database.addText("id.eqItemWeaponGiantSpoonOfDoomName", "Sendok raksasa malapetaka");
Database.addText("id.eqItemWeaponGiantSpoonOfDoomDescription", "Sendok raksasa ini lebih kuat dari sendok raksasa biasa yang dapat kamu temukan, misalnya, didalam teko. Namun, sendok ini cukup lama.");
Database.addText("id.eqItemWeaponScytheName", "Sebuah sabit");
Database.addText("id.eqItemWeaponScytheDescription", "Katanya sabit ini dimiliki oleh kematian itu sendiri. Sabit ini sangat cepat");
Database.addText("id.eqItemHatMerchantHatName", "Topi si pedagang");
Database.addText("id.eqItemHatMerchantHatDescription", "Topi ini dijual kepadamu oleh pedagang permen. Si pedagang permen ini menyukai permen. Topi ini akan menambah 7 kali lipat permen yang kamu dapat di dalam pencarian (quest)!");
Database.addText("id.eqItemHatSorceressHatName", "Topi sang penyihir wanita");
Database.addText("id.eqItemHatSorceressHatDescription", "Topi ini dijual kepadamu oleh sang penyihir wanita. Topi ini akan menambah efek dari mantera dan obat (potion) mu.");
Database.addText("id.eqItemHatOctopusKingCrownName", "Mahkota sang raja gurita");
Database.addText("id.eqItemHatOctopusKingCrownDescription", "ketika kamu menggunakan mahkota ini, kamu merasa lebih percaya diri. Mahkota ini tidak memberikan keuntungan apapun dalam pencarian (quest), tapi percaya diri itu penting!");
Database.addText("id.eqItemHatOctopusKingCrownWithJaspersName", "Mahkota sang raja gurita dengan yasper");
Database.addText("id.eqItemHatOctopusKingCrownWithJaspersDescription", "Mahkota yang disihir ini terbuat dari emas dan yasper merah. Dalam pencarian (quest), mahkota ini akan melemparkan bola api ajaib yang kuat disekitarmu dengan sering. Dan juga, mahkota ini berkilau!");
Database.addText("id.eqItemHatOctopusKingCrownWithObsidianName", "Mahkota sang raja gurita dengan obsidian");
Database.addText("id.eqItemHatOctopusKingCrownWithObsidianDescription", "Mahkota yang disihir ini terbuat dari emas dan obsidian. Mahktoa ini indah. Dalam pencarian (quest), mahkota ini akan memanggil sang raja gurita menggantikanmu bertarung selama beberapa saat. Sekutu yang \"tentaculous\"!");
Database.addText("id.eqItemGlovesLeatherGlovesName", "Sarung tangan kulit");
Database.addText("id.eqItemGlovesLeatherGlovesDescription", "Saruang tangan ini pada dasarnya tidak melakukan apapun. Tapi setidaknya mereka halus dan nyaman!");
Database.addText("id.eqItemGlovesRedEnchantedGlovesName", "Sarung tangan yang disihir merah");
Database.addText("id.eqItemGlovesRedEnchantedGlovesDescription", "Sarung tangan yang sudah disihir ini mengeluarkan cahaya merah lembut ketika disekitarmu gelap. Dalam pencarian (quest), mereka akan melemparkan bola api kecil secara acak kepada musuhmu, yang akan menjadi berguna.");
Database.addText("id.eqItemGlovesPinkEnchantedGlovesName", "Sarung tangan yang disihir merah muda");
Database.addText("id.eqItemGlovesPinkEnchantedGlovesDescription", "Sarung tangan yang sudah disihir ini meninggalkan bekas merah muda pada setiap benda yang kamu sentuh. Dalam pencarian (quest), mereka akan menyembuhkan kamu secara terus menerus.");
Database.addText("id.eqItemBootsRocketBootsName", "Sepatu bot roket");
Database.addText("id.eqItemBootsRocketBootsDescription", "Sepatu bot roket yang mengagumkan ini memungkinkan kamu untuk melompat di tengah udara, jadi pada dasarnya kamu melayang!");
Database.addText("id.eqItemBootsLeatherBootsName", "Sepatu bot kulit");
Database.addText("id.eqItemBootsLeatherBootsDescription", "Sepatu bot kulit sederhana. Tidak ada yang spesial dari mereka.");
Database.addText("id.eqItemBootsBootsOfIntrospectionName", "Sepatu bot introspeksi");
Database.addText("id.eqItemBootsBootsOfIntrospectionDescription", "Ambil waktu untuk bernafas dan tenangkan diri. Jika kamu memakai sepatu bot ini, kamu tidak akan pernah bergerak selama kamu menyentuh tanah.");
Database.addText("id.eqItemBodyArmoursLightweightBodyArmourName", "Sebuah baju baja ringan");
Database.addText("id.eqItemBodyArmoursLightweightBodyArmourDescription", "Baju baja ini akan memberikan kamu perlindungan yang lemah. Kamu akan sedikit lebih tahan dari serangan musuhmu.");
Database.addText("id.eqItemBodyArmoursKnightBodyArmourName", "Sebuah baju baja ksatria");
Database.addText("id.eqItemBodyArmoursKnightBodyArmourDescription", "Baju baja yang kuat ini akan melindungimu. Kamu akan lebih tahan terhadap serangan musuhmu.");
Database.addText("id.eqItemBodyArmoursEnchantedKnightBodyArmourName", "Sebuah baju baja ksatria yang sudah disihir");
Database.addText("id.eqItemBodyArmoursEnchantedKnightBodyArmourDescription", "Baju baja ini sangat spesial. Kamu akan JAUH lebih tahan dari serangan musuhmu, tapi serangan (damage) dari senjata yang kamu gunakan akan dibagi dua.");
Database.addText("id.mapVillageForgeBuyWoodenSwordButton", "Beli sebuah pedang kayu (150 permen)");
Database.addText("id.mapVillageForgeBuyWoodenSwordSpeech", "Terimakasih sudah membeli! Pedang kayu ini cukup lemah, tapi ini adalah awal.");
Database.addText("id.mapVillageForgeBuyIronAxeButton", "Beli sebuah kapak besi (400 permen)");
Database.addText("id.mapVillageForgeBuyIronAxeSpeech", "Saya harap kamu menyukai kapak besi ini. Saya telah menajamkannya untukmu!");
Database.addText("id.mapVillageForgeBuyPolishedSilverSwordButton", "Beli sebuah pedang perak yang dipoles (2 000 permen)");
Database.addText("id.mapVillageForgeBuyPolishedSilverSwordSpeech", "Saya membutuhkan banyak waktu untuk membuat pedang ini. Tapi saya dapat memastikan kalau harganya seimbang.");
Database.addText("id.mapVillageForgeBuyLightweightBodyArmourButton", "Beli sebuah baju baja ringan (15 000 permen)");
Database.addText("id.mapVillageForgeBuyLightweightBodyArmourSpeech", "Baju baja ini akan memberimu pertahanan terhadap musuhmu.");
Database.addText("id.mapVillageForgeBuyScytheButton", "Beli sebuah sabit(5 000 000 candies)");
Database.addText("id.mapVillageForgeBuyScytheSpeech", "Saya membutuhkan beberapa bulan untuk membuat sabit ini. Sabit ini adalah bagian nyata dari seni. Sabit ini mungkin senjata tercepat yang dapat kamu gunakan. Semoga sukses!");
Database.addText("id.wishingWellThrowFirstCandyButton", "Buang sebuah permen kedalam sumur");
Database.addText("id.wishingWellCandyIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Ketika kamu melempar permen ke saya, saya akan mengobati lukamu.");
Database.addText("id.wishingWellThrewCandiesSpeech", "Lukamu sudah disembuhkan!");
Database.addText("id.wishingWellNoWoundSpeech", "Kamu tidak punya luka untuk disembuhkan!");
Database.addText("id.wishingWellThrowFirstLollipopButton", "Buang sebuah lollipop ke sumur");
Database.addText("id.wishingWellLollipopIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Ketika kamu melempar lollipop kepadaku, Saya akan mengubahnya menjadi permen.");
Database.addText("id.wishingWellThrewLollipopsSpeech", "Lollipopmu sudah dibuah menjadi permen! Dua lollipop untuk satu permen.");
Database.addText("id.wishingWellThrowChocolateBarButton", "Buang sebatang coklat ke sumur permohonan");
Database.addText("id.wishingWellChocolateBarIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Saya suka batang coklat. Saya sangat menyukai mereka. Setiap batang coklat yang kamu lempar kepadaku, termasuk yang ini, kamu akan diberikan satu sihir ajaib.");
Database.addText("id.wishingWellThrewChocolateBarSpeech", "Benda apa yang ingin kamu sihir?");
Database.addText("id.wishingWellThrowPainAuChocolatButton", "Buang sebuah pain au chocolat kedalam sumur");
Database.addText("id.wishingWellPainAuChocolatIntroductionSpeech", "Halo, pengembara! Saya adalah sumur permohonan. Saya akan memberikan permohonan sebagai ganti dari beberapa penganan! Ketika kamu melemparkan pain au chocolat kepadaku, kamu akan diberikan hadiah yang sangat spesial. Pilih dengan bijak.");
Database.addText("id.wishingWellThrewPainAuChocolatSpeech", "Terimakasih atas pain au chocolatnya! Kamu sekarang dapat memilih hadiahmu.");
Database.addText("id.wishingWellChooseGift", "Pilih hadiahmu!");
Database.addText("id.wishingWellChooseGiftButton", "Pilih");
Database.addText("id.wishingWellGiftDoneSpeech", "Selesai! Kamu sekarang mempunyai hadiah baru. Hadiahnya akan muncul di panel stats di inventorymu!.");
Database.addText("id.wishingWellNoPossibleEnchantment", "Tidak ada benda yang bisa disihir");
Database.addText("id.wishingWellChooseEnchantment", "Pilih benda yang akan disihir");
Database.addText("id.wishingWellEnchantButton", "Sihir");
Database.addText("id.wishingWellEnchantmentDoneSpeech", "Ini dia! Bendamu sudah disihir.");
Database.addText("id.pierLighthouseButton", "Pergi ke mercusuar menggunakan perahu");
Database.addText("id.pierTheSeaButton", "Lompat ke laut");
Database.addText("id.lonelyHouseOpenBox", "Buka kotaknya");
Database.addText("id.lonelyHouseShakeBox", "Goncang kotaknya");
Database.addText("id.lonelyHouseBreakLock", "Hancurkan gemboknya");
Database.addText("id.lonelyHouseKickBox", "Tendang kotaknya");
Database.addText("id.lonelyHouseAskTheBoxToOpenItself", "Suruh kotaknya untuk membuka dirinya sendiri");
Database.addText("id.lonelyHouseLureTheBoxWithACandy", "Goda kotaknya dengan sebuah permen");
Database.addText("id.lonelyHouseTakeTheBox", "Ambil kotaknya, bagaimanapun juga kamu mungkin membutuhkan kunci untuk membukanya");
Database.addText("id.lonelyHouseOpenBoxResult", "Kotaknya terkunci");
Database.addText("id.lonelyHouseShakeBoxResult", "Tidak ada yang terjadi");
Database.addText("id.lonelyHouseBreakLockResult", "Gemboknya menolak untuk terbuka");
Database.addText("id.lonelyHouseKickBoxResult", "Kakimu sedikit kesakitan, tapi tidak ada yang terjadi");
Database.addText("id.lonelyHouseAskTheBoxToOpenItselfResult", "...kamu berbicara kepada sebuah kotak, kamu tahu itu?");
Database.addText("id.lonelyHouseLureTheBoxWithACandyResult", "Tampaknya kotaknya tidak peduli");
Database.addText("id.lonelyHouseTakeTheBoxResult", "Mungkin ada sesuatu yang menarik di dalam candy box ini.");
Database.addText("id.lollipopFarmConstructMill", "Banguan sebuah kincir angin (10 000 lollipop)");
Database.addText("id.lollipopFarmFeedMill", "Sediakan makanan untuk kincir angin");
Database.addText("id.lollipopFarmCurrentCandiesProduction", "Produksi permen saat ini");
Database.addText("id.lollipopFarmDigPond", "Gali sebiah kolam (100 000 lollipop)");
Database.addText("id.lollipopFarmBuyLolligator", "Beli sebuah lolligator (1200 permen)");
Database.addText("id.lollipopFarmLolligatorsConversionText", "Pengubahan permen -> lollipop diaktifkan");
Database.addText("id.lighthouseAskButton", "Tanya");
Database.addText("id.lighthouseQuestionWho", "Siapakah kamu?");
Database.addText("id.lighthouseQuestionWhoSpeech", "Saya adalah cyclops yang sangat tua.");
Database.addText("id.lighthouseQuestionWhat", "Apa yang kamu lakukan disini?");
Database.addText("id.lighthouseQuestionWhatSpeech", "Saya tinggal disini sepanjang hari, menunggu sebuah perahu untuk datang. Sudah waktu yang lama sejak saya melihat sebuah perahu, tapi saya harus tinggal disini, melihat ke laut, karena sebuah perahu mungkin datang.");
Database.addText("id.lighthouseQuestionWhyEatCandies", "Mengapa saya makan permen?");
Database.addText("id.lighthouseQuestionWhyEatCandiesSpeech", "Karena mereka bagus untuk kesehatanmu!");
Database.addText("id.lighthouseQuestionCandyBox", "Apa itu candy box?");
Database.addText("id.lighthouseQuestionCandyBoxSpeech", "Itu adalah sebuah kotak yang sangat tua yang katanya mengandung semua permen di dunia. Menurut legenda, siapa yang membuka kotak itu akan mempunyai sangat banyak permen sehingga tidak ada yang tidak mungkin.");
Database.addText("id.lighthouseQuestionDragon", "Sang naga memberitahu aku untuk datang kesini karena saya mau permen.");
Database.addText("id.lighthouseQuestionDragonSpeech", "Oh, begitu.. Baiklah, Saya tidak dapat memberimu permen secara langsung, tapi saya dapat memberimu sesuatu yang penting untukmu untuk akhirnya mendapat BANYAK permen. Saya hanya ingin mengetesmu sebelum itu. Karena apa yang saya punya tidak dapat diberikan kepada semua orang. Selesaikan teka-teki ini dan benda itu akan menjadi milikmu.");
Database.addText("id.lighthouseFoundStone", "Selamat! Kamu lulus tes dan menemukan batu ini. Batu ini sangat berharga, tapi batu ini hanya berguna jika kamu menemukan tiga batu lain yang seperti batu ini. Semoga sukses!");
Database.addText("id.lighthouseFoundStoneAgain", "Pekerjaan yang baik, kamu menyelesaikan teka-tekinya satu kali lagi. Sepertinya kamu menyukainya.");
Database.addText("id.saveLocalSaveTitle", "Penyimpanan Browser");
Database.addText("id.saveLocalSaveWhy", "Pilih penyimapanan lokal jika kamu ingin tetap bermain menggunakan alat (device) dan browser ini.");
Database.addText("id.saveLocalSaveWarning0", "Browsermu tampaknya tidak mendukung HTML5.");
Database.addText("id.saveLocalSaveWarning1", "Kamu harus mengupdate browsermu untuk menggunakan fitur penyimpanan lokal.");
Database.addText("id.saveLocalSaveChooseSlot", "Pilih sebuah slot penyimpanan :");
Database.addText("id.saveLocalSaveAutosaveEnabled", "Penyimpanan otomatis diaktifkan");
Database.addText("id.saveLocalSaveChooseWhatToDo", "Pilih apa yang ingin dilakukan :");
Database.addText("id.saveLocalSaveSaveButton", "Simpan");
Database.addText("id.saveLocalSaveAutosaveButton", "Simpan setiap 10 menit");
Database.addText("id.saveLocalSaveDisableAutosaveButton", "Nonaktifkan penyimpanan otomatis");
Database.addText("id.saveFileSaveTitle", "Penyimpanan teks");
Database.addText("id.saveFileSaveWhy0", "Pilih penyimpanan teks jika :");
Database.addText("id.saveFileSaveWhy1", "Kamu ingin melanjutkan bermain di alat (device) atau browser lain");
Database.addText("id.saveFileSaveWhy2", "Kamu ingin membagikan simpananmu ke seseorang");
Database.addText("id.saveFileSaveWhy3", "Untuk beberapa alasan kamu ingin mengosongkan \"browser cache\"");
Database.addText("id.saveFileSaveWhy4", "(yang akan menghapus penyimpanan lokal)");
Database.addText("id.saveFileSaveButton", "Dapatkan permainan sekarang sebagai teks");
Database.addText("id.saveFileSaveWarning", "Sekarang \"copy\" teks ini di suatu tempat! (di dalam sebuah file, contohnya)");
Database.addText("id.saveLocalLoadTitle", "Memuat menggunakan browser");
Database.addText("id.saveLocalLoadYouCan", "Kamu dapat memuat penyimpanan lokal dengan menggunakan link-link berikut :");
Database.addText("id.saveLocalLoadThanksTo", "Terimakasih kepada keajaiban HTML5, kamu seharusnya dapat membuka link ini bahkan ketika anda tidak terhubung ke internet.");
Database.addText("id.saveFileLoadTitle", "Memuat menggunakan teks");
Database.addText("id.saveFileLoadPaste", "\"Paste\" teks penyimpananmu dibawah, kemudian tekan tombol \"Muat\"");
Database.addText("id.saveFileLoadButton", "Muat");
Database.addText("id.mountainsText0", "Kamu melihat sesuatu di pegunungan!");
Database.addText("id.mountainsText1", "Benda itu tampaknya menarik. Mungkin benda itu berguna.");
Database.addText("id.mountainsTextButton", "Manjat pegunungannya untuk mendapatkan benda itu");
Database.addText("id.mountainsTextAfter", "Kamu menemukan tongkat pogo! Tongkat itu sudah ditambahkan ke inventorymu.");
Database.addText("id.secondHouseIntroSpeech", "Halo, saya adalah si pedagang. Saya akan melakukan semuanya untuk permen. Apa yang kamu butuhkan?");
Database.addText("id.secondHouseLollipop1Speech", "Ini adalah lollipop rasa lemon. Rasa favoritku! Harganya 60 permen, tapi harganya sebanding.");
Database.addText("id.secondHouseLollipop2Speech", "Yang ini adalah lollipop rasa stroberi. Rasanya enak. Saya suka warna merahnya. Hanya 60 permen!");
Database.addText("id.secondHouseLollipop3Speech", "Yang ini adalah lollipop rasa labu. Pasti kamu belum pernah mencoba satu! 60 permen dan lollipop ini milikmu.");
Database.addText("id.secondHouseLollipopButtonText", "Beli lollipop ini (60 permen)");
Database.addText("id.secondHouseMerchantHatSpeech", "Saya dapat menjual topiku kepadamu, tapi topi ini sangat berharga, kamu tahu... Kamu harus memberikan saya banyak permen. Katakan 1 juta permen. Tampaknya adil, kan?");
Database.addText("id.secondHouseMerchantHatButtonText", "Beli topi si pedagang (1 000 000 permen)");
Database.addText("id.secondHouseTimeRingSpeech", "Ini adalah cincin waktu. Cincinnya ajaib. Cincin ini memungkinkan kamu untuk memperlambat waktu ketika kamu berada dalam masalah.");
Database.addText("id.secondHouseTimeRingButtonText", "Beli cincin waktu (500 permen)");
Database.addText("id.secondHouseLeatherGlovesSpeech", "Sarung tangan kulit ini terbuat dari kulit unta, sarung tangan ini tinggi kualitasnya. Saya mempunyai banyak sarung tangan ini, itulah kenapa harganya sangat murah : hanya 300 permen!");
Database.addText("id.secondHouseLeatherBootsButtonText", "Beli sepasang sepatu bot kulit (300 permen)");
Database.addText("id.secondHouseLeatherBootsSpeech", "Sepatu bot kulit berkualitas tinggi ini, dibuat dengan kulit unta, akan membuat kakimu tetap hangat.");
Database.addText("id.secondHouseLeatherGlovesButtonText", "Beli sepasang sarung tangan kulit (300 permen)");
Database.addText("id.secondHouseChocolateBarSpeech", "Ini adalah sebuah batang coklat. Saya tidak tahu apa gunanya, tapi tampaknya benda ini cukup langka, yang menjelaskan harganya. 800 permen dan batang coklat ini menjadi milikmu!");
Database.addText("id.secondHouseChocolateBarButtonText", "Beli sebuah batang coklat (800 permen)");
Database.addText("id.outsideTheHoleButton", "Lompat kedalam lubang besar yang ada di tanah");
Database.addText("id.theCaveExitText0", "Akhirnya kamu mencapai pintu keluar gua.");
Database.addText("id.theCaveExitText1", "Kamu melihat hutan besar diluar sini.");
Database.addText("id.theCaveExitButtonText", "Keluar dari gua");
Database.addText("id.theCaveFirstSentenceWentStraight", "Kamu maju dengan lurus.");
Database.addText("id.theCaveFirstSentenceWentLeft", "Kamu mengambil jalur kiri.");
Database.addText("id.theCaveFirstSentenceWentRight", "Kamu mengambil jalur kanan.");
Database.addText("id.theCaveFirstSentenceYouAre", "Kamu berada di dalam gua. Ada 3 jalur dihadapanmu.");
Database.addText("id.theCavePattern_ArrowsToHeartPlugSeeStrangePlug", "Kamu melihat sesuatu yang aneh di tanah di depanmu.");
Database.addText("id.theCavePattern_ChocolateBarNowSeeChocolateBar", "Kamu melihat sebuah batang coklat di depanmu.");
Database.addText("id.theCavePattern_TreasureMapSentence", "Kamu melihat batu-batu kecil yang tersusun dengan aneh di lantai.");
Database.addText("id.theCavePattern_MonkeyWizardSentence", "Kamu bertemu seekor monyet penyihir tak berbusana.");
Database.addText("id.theCavePattern_MonkeyWizardButton", "Tantangi dia");
Database.addText("id.theCavePattern_OctopusKingSentence", "Kamu bertemu sang raja gurita. Tampaknya dia menjijikkan.");
Database.addText("id.theCavePattern_OctopusKingButton", "Tantangi dia");
Database.addText("id.fortressInsideText0", "Kamu berada di dalam benteng gurun.");
Database.addText("id.fortressInsideText1", "Kamu dapat memilih diantara tiga pintu.");
Database.addText("id.fortressInsideText2", "Masing-masing dari mereka menuju sebuah ruangan besar dengan sebuah harta di akhirnya.");
Database.addText("id.fortressInsideEnterRoom1", "Masuk ke ruangan pertama");
Database.addText("id.fortressInsideEnterRoom2", "Masuk ke ruangan kedua");
Database.addText("id.fortressInsideEnterRoom3", "Masuk ke ruangan ketiga");
Database.addText("id.treasureButtonDig", "Gali");
Database.addText("id.treasureButtonYouFound", "Kamu menemukan tiga batang coklat!");
Database.addText("id.sorceressHutHello", "Halo, saya adalah sang penyihir wanita. Saya dapat mengajarimu satu atau dua hal tentang sulap. Saya juga dapat memberimu beberapa benda yang menarik, atau melempar mantera untukmu. Tapi semuanya mempunyai harga! Dan harganya akan berupa lollipop. Banyak lollipop.");
Database.addText("id.sorceressHutClickedGrimoire", "Ini adalah buku mantera yang dibuat untuk pemula. Dengan membawanya denganmu di pencarian (quest), kamu dapat melemparkan mantera yang sederhana tapi berguna. Kamu membutuhkan ini! Hanya 5 000 lollipop.");
Database.addText("id.sorceressHutBuyGrimoireButton", "Beli grimore ini (5 000 lollipop)");
Database.addText("id.sorceressHutBuyGrimoireSpeech", "Terimakasih sudah membeli! Kamu dapat melemparkan tiga mantera dengan grimore ini. Semoga sukses!");
Database.addText("id.sorceressHutClickedGrimoire2", "Ini adalah buku mantera tingkat lanjut. Dengan membawanya denganmu dalam pencarian (quest), kamu akan dapat melemparkan dua mantera tingkat lanjut. Saya menulisnya sendiri, yang pastinya tidak mudah. 20 000 lollipop adalah harga yang adil.");
Database.addText("id.sorceressHutBuyGrimoire2Button", "Beli buku mantera ini (20 000 lollipop)");
Database.addText("id.sorceressHutBuyGrimoire2Speech", "Terimakasih sudah membeli! Kamu dapat melemparkan dua mantera dengan grimore ini. Gunakan mereka dengan bijak!");
Database.addText("id.sorceressHutClickedCauldron", "Ini adalha kualiku. Kuali ini memungkinkan saya untuk membuat obat (potion) ajaib. Saya dapat menjualnya kepadamu, tapi kuali ini sangat berharga... harganya 100 000 lollipop.");
Database.addText("id.sorceressHutBuyCauldronButton", "Beli kualinya (100 000 lollipop)");
Database.addText("id.sorceressHutBuyCauldronSpeech", "Terimakasih banyak! 100 000 lollipop untuk saya! Saya juga memberimu buku petunjuknya. Buku petunjuknya akan berguna.");
Database.addText("id.sorceressHutClickedHat", "Memang, saya mempunyai topi yang bagus. Tapi saya benar-benar tidak bisa menjualnya kepadamu. Topinya sangaaaaat berharga. Sungguh, Saya tidak bisa. Jangan memaksa. Tidak. Tidak tidak tidak saya seharusnya tidak melakukannya. Baiklah, Saya akan menukarnya, tapi dengan 1 000 000 000 lollipop. Toh kamu mungkin tidak dapat membayarnya.");
Database.addText("id.sorceressHutBuyHatButton", "Beli topinya (1 000 000 000 lollipop)");
Database.addText("id.sorceressHutBuyHatSpeech", "Satu milyar lollipop untuk kuuuuuuu! Tapi saya sudah tidak mempunyai topi lagi.. tapi satu milyar lollipop, wow! .. Sangat sebanding.");
Database.addText("id.cauldronPreviousPageButton", "Halaman sebelumnya");
Database.addText("id.cauldronNextPageButton", "Halaman selanjutnya");
Database.addText("id.cauldronWhatYouWantToPut", "Apa yang ingin kamu masukkan ke dalam kuali");
Database.addText("id.cauldronWhatIsIn", "Apa yang ada di dalam kuali");
Database.addText("id.cauldronWhatYouCanDo", "Apa yang kamu dapat lakukan dengannya");
Database.addText("id.castleBigRoomComment", "Sebuah ruangan besar");
Database.addText("id.castleARoomComment", "Sebuah ruangan");
Database.addText("id.castleADarkRoomComment", "Sebuah ruangan yang gelap");
Database.addText("id.castleCastleEntranceComment", "Pintu masuk istana");
Database.addText("id.castleTowerEntranceComment", "Pintu masuk menara");
Database.addText("id.castleNougatMonsterComment", "Serang sang monster nougat raksasa");
Database.addText("id.castleGuardsComment", "Serang penjaga-penjaganya");
Database.addText("id.castleStairsComment", "Tangga");
Database.addText("id.buttonBackToTheCastle", "Kembali ke istana");
Database.addText("id.castleBigRoomHovenSpeechSad", "Halo! Saya adalah oven roti yang sangat tua. Dulu saya selalu memasak banyak kue-kue (pastry) yang bagus, tapi sekarang tidak ada yang menggunakan saya. Mungkin... mungkin kamu dapat membantu saya? Biarkan saya mengambil beberapa penganan darimu! Jangan khawatir, kamu tidak akan menyesal! Kamu dapat mempercayaiku.");
Database.addText("id.castleBigRoomHovenNotEnough", "Oh... kamu tidak memiliki penganan yang cukup, Saya tidak dapat melakukan apapun. Saya tidak berguna. Saya oven roti yang tidak berguna, begitu seharusnya kamu memanggilku.");
Database.addText("id.castleBigRoomHovenSpeechMadePainAuChocolat", "Yey! Terimakasih banyak! Saya menggunakan 100 permen dan sebatang coklat, dan saya membuat... sebuah pain au chocolat untukmu! Itu adalah kue (pastry) favoritku, Saya harap kamu menyukainya juga!");
Database.addText("id.castleBigRoomHovenSpeechHappy", "Hei! Jika kamu ingin aku memasak lebih banyak kue-kue (pastry), silahkan beritahu aku! Saya akan senang untuk membantumu.");
Database.addText("id.castleBigRoomHovenSpeechHappyNotEnough", "Oh, kamu tidak mempunyai penganan yang cukup, sayangnya. Saya membutuhan 100 permen dan sebatang coklat. Datang kembali jika kamu mempunyainya!");
Database.addText("id.castleBigRoomHovenLetHovenTakeButton", "Biarkan sang oven mengambil semua penganan yang ingin dia ambil");
Database.addText("id.castleBigRoomHovenThanks", "Terimakasih, oven!");
Database.addText("id.dragonStopTickling", "Hei, kau! Tolong berhenti menggelitik aku.");
Database.addText("id.dragonStopTicklingButton", "Uh, oh, maaf, Saya kira saya seharusnya menyerangmu");
Database.addText("id.dragonTalking", "Saya adalah sang naga dan ini adalah istanaku. Saya melihat kamu bisa masuk, kamu pasti sangat berani... Saya suka membantu seseorang sepertimu. Apa yang kamu cari?");
Database.addText("id.dragonTalkingChallengeButton", "Tantangan");
Database.addText("id.dragonTalkingFameButton", "Terkenal");
Database.addText("id.dragonTalkingCandiesButton", "Permen");
Database.addText("id.dragonTalkingChallengeSpeech", "Oh, jadi kamu ingin tantangan? Saya rasa kamu harus pergi ke neraka, Sudah diketahui kalau sang setan adalah penantang yang kuat. Lompat di punggungku dan saya akan membawamu ke sana!");
Database.addText("id.dragonTalkingFameSpeech", "Cara terbaik untuk menjadi terkenal adalah dengan menghadapi sang developer. Saya tahu dimana dia tinggal dan saya dapat membawamu ke sana. Tapi bersiap-siaplah, ini tidak akan mudah.");
Database.addText("id.dragonTalkingCandiesSpeech", "Benda yang kita semua ingin pasti permen, betul kan? Saya rasa temanku dapat membantumu dengan itu. Kamu akan mengenali dia dengan mudah, dia hanya mempunyai satu mata. Beritahu saja dia kalau kamu mengenalku.");
Database.addText("id.dragonTalkingChallengeAnswer", "Ayo pergi!");
Database.addText("id.dragonTalkingFameAnswer", "Aku siap.");
Database.addText("id.dragonTalkingCandiesAnswer", "Oke, terimakasih!");
Database.addText("id.buttonBackToCastle", "Kembali ke istana");
Database.addText("id.talkingCandySpeechNoBox", "Hei! Saya adalah permen yang bisa bicara. Kamu hampir memenangkan permainan ini. Kamu hanya perlu mencari \"candy box\". Candy boxnya adalah di dalam rumah yang ada diluar desa. Ini adalah langkah terakhir!");
Database.addText("id.talkingCandySpeech1", "Hei! Saya adalah permen yang bisa bicara. Selamat, kamu memenagnkan permainannya! Saya akan membukan candy boxmu untukmu, ini adalah hadiah mu. Haruskah saya meneruskan?");
Database.addText("id.talkingCandySpeech2", "Sudah! Sekarang kamu dapat memasukinya. Saya harap kamu menyukai permainannya :)");
Database.addText("id.talkingCandyButton", "Iya!!");
Database.addText("id.lighthousePuzzleResetButton", "Atur ulang");
Database.addText("cz.cauldron.page0", "NГЎvod na vaЕ™enГ­");
Database.addText("cz.cauldron.page1", "PЕ™ehled / Strana 2: LГ©ДЌivГЅ lektvar / Strana 3: ЕЅelvГ­ lektvar / Strana 4-5: Lektvar lГ©tГЎnГ­ / Strana 6-7: Lektvar zbД›silosti / Strana 8-9: Lektvar P / Strana 10-11: Lektvar X");
Database.addText("cz.cauldron.page2", "LГ©ДЌivГЅ lektvar / Tento lektvar je ze vЕЎech asi nejjednoduЕЎЕЎГ­ na uvaЕ™enГ­. Jsou k nД›mu zapotЕ™ebГ­ pouze bonbГіny. Na vГЅpravГЎch ti jednorГЎzovД› vylГ©ДЌГ­ 100 bodЕЇ zdravГ­. / Instrukce: - Dej do kotlГ­ku 100 bonbГіnЕЇ - ChvГ­li mГ­chej - VГЅslednou smД›s opatrnД› nalij do lahviДЌek / stejnД› jako u kaЕѕdГ©ho lektvaru, i tady mЕЇЕѕeЕЎ znГЎsobit mnoЕѕstvГ­. Pokud napЕ™Г­klad pouЕѕijeЕЎ 300 bonbГіnЕЇ, vГЅsledkem budou tЕ™i lГ©ДЌivГ© lektvary.");
Database.addText("cz.cauldron.page3", "ЕЅelvГ­ lektvar / ЕЅelvГ­ lektvar uЕѕ je o trochu sloЕѕitД›jЕЎГ­, neЕѕ lГ©ДЌivГЅ lektvar. BudeЕЎ potЕ™ebovat bonbГіny a lГ­zГЎtka. / Pokud tento lektvar vypijeЕЎ bД›hem vГЅpravy, promД›nГ­ЕЎ se na Еѕelvu. BudeЕЎ se hГЅbat pomaleji, zato ale budeЕЎ odolnД›jЕЎГ­ proti nepЕ™ГЎtelskГЅm ГєtokЕЇm. / Instrukce: - Dej do kotlГ­ku 50 bonbГіnЕЇ - PЕ™idej 500 lГ­zГЎtek - MГ­chej zhruba 10 vteЕ™in - PЕ™estaЕ€ mГ­chat - PЕ™idej 50 bonbГіnЕЇ - PromГ­chej - Nalij smД›s do lahviДЌek / POZOR! V ЕѕelvГ­m stavu se nepЕ™evracej na krunГЅЕ™, nebudeЕЎ se moci zvednout!");
Database.addText("cz.cauldron.page4", "Lektvar lГ©tГЎnГ­ / Tento lektvar, vynalezenГЅ slavnГЅm ДЌarodД›jem Isaacem, ti umoЕѕnГ­ na nД›kolik vteЕ™in odolГЎvat zemskГ© pЕ™itaЕѕlivosti. / NejvД›tЕЎГ­ efekt mГЎ hned po skoku (pokud neumГ­ЕЎ skГЎkat, mД›l by sis sehnat nД›jakou skГЎkacГ­ tyДЌ). / NenГ­ jednoduchГЅ na uvaЕ™enГ­, budeЕЎ muset peДЌlivД› kontrolovat teplotu kotlГ­ku. / Instrukce: - Do kotlГ­ku nasyp 1000 bonbГіnЕЇ - ZahЕ™ej vodu, aЕҐ je vlaЕѕnГЎ - PЕ™estaЕ€ zahЕ™Г­vat - PЕ™idej dalЕЎГ­ch 1000 bonbГіnЕЇ - ZahЕ™Г­vej kotlГ­k aЕѕ do chvГ­le, kdy voda zaДЌne vЕ™Г­t - nalij do skleniДЌek");
Database.addText("cz.cauldron.page5", "PЕ™Г­klad uЕѕitГ­ lektvaru lГ©tГЎnГ­ / \"PЕ™eletГ­ pЕ™es dГ­ru\" / *napije se lektvaru*");
Database.addText("cz.cauldron.page6", "Lektvar zbД›silosti / Lektvar zbД›silosti tД› zmД›nГ­ na zuЕ™ivГ©ho berserka. / NevГЅhodou je, Еѕe snГ­ЕѕГ­ tvГ© zdravГ­ na polovinu. / VГЅhodou je, Еѕe na nД›kolik vteЕ™in budeЕЎ zpЕЇsobovat dvojnГЎsobnГ© zranД›nГ­! / Recept je jednoduchГЅ, ale budeЕЎ potЕ™ebovat hodnД› lГ­zГЎtek. / Tady jsou instrukce: Nasyp do kotlГ­ku 20 000 lГ­zГЎtek - MГ­chej je, dokud tД› nezaДЌnou bolet ruce - Nalij smД›s do skleniДЌek");
Database.addText("cz.cauldron.page7", "DЕЇleЕѕitГ© upozornД›nГ­ / NepЕ™idГЎvej do kotlГ­ku ЕѕГЎdnГ© bonbГіny. / MyslГ­m to vГЎЕѕnД›, ani jeden. / Opravdu ne. / NГЎsledky by byly nepЕ™edvГ­datelnГ©.");
Database.addText("cz.cauldron.page8", "Lektvar P / Lektvar P je pomД›rnД› zvlГЎЕЎtnГ­. NedГЎ se pЕ™edem odhadnout, co udД›lГЎ. MЕЇЕѕe tД› vylГ©ДЌit nebo zranit, mЕЇЕѕe tД› posГ­lit nebo oslabit, dokonce tД› mЕЇЕѕe zmД›nit v nД›koho (nebo nД›co) jinГ©ho. / A navГ­c je velmi sloЕѕitГЅ na uvaЕ™enГ­! / Instrukce: Do kotlГ­ku nasyp 500 bonbГіnЕЇ - ChvГ­li mГ­chej - PЕ™estaЕ€ mГ­chat - PЕ™idej mnoЕѕstvГ­ bonbГіnЕЇ odpovГ­dajГ­cГ­ poДЌtu vteЕ™in, po kterГ© jsi mГ­chal, krГЎt 100. Pokud jsi napЕ™Г­klad mГ­chal 4 vteЕ™iny, budeЕЎ muset pЕ™idat 400 bonbГіnЕЇ. Toto mnoЕѕstvГ­ zЕЇstane stejnГ©, i pokud vaЕ™Г­ЕЎ nД›kolik lektvarЕЇ narГЎz. - ZahЕ™Г­vej kotlГ­k, dokud voda nebude vlaЕѕnГЎ - PЕ™estaЕ€ ohЕ™Г­vat - PЕ™idej pГЎr lГ­zГЎtek ZamГ­chej - Nalij do skleniДЌek!");
Database.addText("cz.cauldron.page9", "UЕѕГ­vej lektvar P dobЕ™e. / Existuje nД›kolik pravidel, kterГЅmi by ses mД›l Е™Г­dit, abys dosГЎhl co nejlepЕЎГ­ch ГєДЌinkЕЇ. Tyto zГЎkonitosti byly vypozorovГЎny empiricky, ale fungujГ­ celkem spolehlivД›. / - ДЊГ­m vГ­ce pouЕѕГ­vГЎЕЎ lektvar P, tГ­m podivnД›jЕЎГ­ ГєДЌinky mГЎ. / - Pokud jsi hodnД› zranД›nГЅ, lektvar P bude pravdД›podobnД› mГ­t pozitivnГ­ ГєДЌinek. / - ZvГ­Е™ata tento lektvar snГЎЕЎejГ­ velmi ЕЎpatnД›.");
Database.addText("cz.cauldron.page10", "Lektvar X / Lektvar X je legenda. ЕГ­kГЎ se, Еѕe kdokoliv ho dokГЎЕѕe uvaЕ™it a vypГ­t, se ocitne v zemi neznГЎmГ©, kam pЕ™edtГ­m jeЕЎtД› nikdo nezavГ­tal. / NevГ­m, jestli je tento lektvar pouze legenda nebo ne, ale napГ­ЕЎu sem vЕЎechno, co o nД›m vГ­m. / Lektvar X je zmГ­nД›nГЅ ve mnoha starГЅch legendГЎch a alchymistickГЅch knihГЎch. Zde je souhrn informacГ­, kterГ© by ti mohly pomoct uvaЕ™it lektvar X. HodnД› ЕЎtД›stГ­! / - ЕГ­kГЎ se, Еѕe k uvaЕ™enГ­ lektvaru X je potЕ™eba 5 krokЕЇ. / - Na vЕЎechny kroky kromД› jednoho jsou prГЅ potЕ™eba lГ­zГЎtka. / - Jedna z povД›stГ­ se zmiЕ€uje o tom, Еѕe nelze uvaЕ™it vГ­ce lektvarЕЇ X narГЎz.");
Database.addText("cz.cauldron.page11", "- A nakonec Е™Г­kanka, kterГЎ se ДЌasto uvГЎdГ­, kdyЕѕ dojde na lektvar X: / PrvnГ­ den byl dГЎn Еѕivot prvnГ­ Sladkosti. Ale venku bylo chladno. / DruhГЅ den byl Sladkosti dГЎn Otec. Ale venku bylo chladno. / TЕ™etГ­ den byla Sladkosti dГЎn bratr. Ale venku bylo chladno. / ДЊtvrtГЅ den byl Sladkosti dГЎn kamarГЎd. Ale venku bylo chladno. / PГЎtГЅ den byl Sladkosti dГЎn milenec. A byЕҐ to znГ­ naivnД› nebo hloupД›, Sladkost teДЏ byla ЕЎЕҐastnГЎ, a venku bylo horko.");
Database.addText("pl.cauldron.page0", "Instrukcja warzenia mikstur");
Database.addText("pl.cauldron.page1", "Spis treЕ›ci / Strona 2 : Mikstura zdrowia / Strona 3 : Mikstura ЕјГіЕ‚wia / Strony 4-5 : Mikstura anty-grawitacyjna / Strony 6-7 : Mikstura szaЕ‚u / Strony 8-9 : Mikstura P / Strony 10-11 : Mikstura X");
Database.addText("pl.cauldron.page2", "Mikstura zdrowia / Mikstura zdrowia jest to najЕ‚atwiejsza mikstura do zrobienia. Do jej zrobienia potrzebujesz tylko cukierkГіw. UЕјyta w zadaniach, uleczy ciД™, przywracajД…c ci 100 punktГіw zdrowia. / Instrukcje : - WrzuД‡ 100 cukierkГіw do kotЕ‚a - Mieszaj przez parД™ sekund - Wlej do butelek / Tak jak w przypadku kaЕјdej mikstury, moЕјesz pomnoЕјyД‡ iloЕ›Д‡ skЕ‚adnikГіw. Na przykЕ‚ad, jeЕ›li wrzucisz 300 cukierkГіw zamiast 100, uzyskasz 3 mikstury zdrowia.");
Database.addText("pl.cauldron.page3", "Mikstura ЕјГіЕ‚wia / Mikstura ЕјГіЕ‚wia jest trochД™ trudniejsza do przygotowania niЕј mikstura zdrowia. Tym razem bД™dziesz potrzebowaЕ‚ i cukierkГіw i lizakГіw. / JeЕ›li wypijesz tД™ miksturД™ w trakcie zadania, zamieni ciД™ ona w ЕјГіЕ‚wia. BД™dziesz poruszaЕ‚ siД™ wolniej ale bД™dziesz takЕјe o wiele bardziej odporny na ataki nieprzyjaciГіЕ‚. / Instrukcje : -  WrzuД‡ 50 cukierkГіw do kotЕ‚a - Dodaj 500 lizakГіw - mieszaj przez okoЕ‚o 10 sekund - PrzestaЕ„ mieszaД‡ - Dodaj 50 cukierkГіw - Pomieszaj jeszcze przez parД™ sekund - Wlej do butelek / I teraz najwaЕјniejsza rzecz o ktГіrej nie moЕјesz zapomnieД‡ : gdy juЕј zamienisz siД™ w ЕјГіЕ‚wia, NIE obracaj siД™ na plecy. Nie bД™dziesz w stanie siД™ podnieЕ›Д‡.");
Database.addText("pl.cauldron.page4", "Mikstura anty-grawitacyjna / Ta mikstura, wynaleziona przez dobrze znanego czarodzieja Isaaca, pozwala ci oprzeД‡ siД™ przyciД…ganiu grawitacyjnemu Ziemi przez parД™ sekund / Jest  szczegГіlnie uЕјyteczny po skoku ( jeЕ›li nie moЕјesz skakaД‡, powinieneЕ› zastanowiД‡ siД™ nad zdobyciem sprД™Ејynowego urzД…dzenia do podskakiwania) / Nie jest Е‚atwo go uwarzyД‡, bД™dziesz musiaЕ‚ podgrzaД‡ swГіj kocioЕ‚ i dokЕ‚adnie obserwowaД‡ jego temperaturД™ / Instrukcje : - WrzuД‡ 1000 cukierkГіw do kotЕ‚a - Podgrzewaj dopГіki woda nie stanie siД™ letnia (lukewarm) - PrzestaЕ„ podgrzewaД‡ - Dodaj 1000 cukierkГіw - Podgrzewaj aЕј woda bД™dzie wrzeД‡ (BOILING) - Wlej do butelek");
Database.addText("pl.cauldron.page5", "Mikstura Anty-grawitacyjna : przykЕ‚ad uЕјycia / \"PrzeleД‡ nad dziurД…\" / *wypija miksturД™*");
Database.addText("pl.cauldron.page6", "Mikstura szaЕ‚u / Mikstura szaЕ‚u zamieni ciД™ w berserkera. / WadД… jest to, Ејe zabierze to poЕ‚owД™ twoich punktГіw zdrowia. / ZaletД… jest to Ејe podwoi ona zadawane przez ciebie obraЕјenia na parД™ sekund! / ugotowanie tej mikstury jest bardzo proste, ale bД™dziesz potrzebowaЕ‚ duЕјej iloЕ›ci lizakГіw. / Oto instrukcje : - WrzuД‡ 20 000 lizakГіw do kotЕ‚a - Mieszaj dopГіki nie rozbolД… ciД™ rД™ce - Wlej do butelek");
Database.addText("pl.cauldron.page7", "WaЕјna informacja dotyczД…ca mikstury berserkera / NIE dodawaj Е»ADNYCH cukierkГіw w trakcie warzenia tej mikstury! / Nawet jednego. / NaprawdД™. / Rezultaty mogЕ‚y by byД‡ nieoczekiwane.");
Database.addText("pl.cauldron.page8", "Mikstura P / Mikstura P jest dziwna. Nie jesteЕ› w stanie przewidzieД‡ co zrobi. MoЕјe ciД™ uleczy, moЕјe cie skrzywdzi, moЕјe sprawi Ејe bД™dziesz silniejszy, albo sЕ‚abszy. MoЕјe ciД™ nawet zamieniД‡ w kogoЕ› (coЕ›?) innego. / CiД™Ејko jД… stworzyД‡! / Instrukcje : - WrzuД‡ 500 cukierkГіw do kotЕ‚a - Mieszaj przez parД™ sekund - PrzestaЕ„ mieszaД‡ - Dodaj 100 razy wiД™cej cukierkГіw niЕј iloЕ›Д‡ sekund przez ktГіrД… mieszaЕ‚eЕ›. Na przykЕ‚ad, jeЕ›li mieszaЕ‚eЕ› przez 4 sekundy, dodaj 400 cukierkГіw. Nie zwiД™kszaj tej iloЕ›ci jeЕ›li chcesz stworzyД‡ wiД™cej niЕј jednД… miksturД™. - Podgrzewaj dopГіki woda nie stanie siД™ letnia (lukewarm) - PrzestaЕ„ podgrzewaД‡ - Dodaj trochД™ lizakГіw - Pomieszaj - Wlej do butelek!");
Database.addText("pl.cauldron.page9", "ZrГіb dobry uЕјytek z mikstury P / Jest parД™ zasad ktГіrych moЕјesz przestrzegaД‡ aby uzyskaД‡ lepsze rezultaty kiedy pijesz tД™ miksturД™. Pomimo tego Ејe te zasady byЕ‚y okreЕ›lone doЕ›wiadczalnie, wydajД… siД™ dziaЕ‚aД‡ caЕ‚kiem dobrze. / - Im czД™Е›ciej bД™dziesz uЕјywaД‡ mikstur P, tym czД™Е›ciej bД™dzie ona miaЕ‚a dziwne efekty. / - JeЕ›li masz bardzo maЕ‚o punktГіw Ејycia, to wypicie mikstury P jest prawdopodobnie dobrym pomysЕ‚em. / - ZwierzД™ta ktГіre wypijД… miksturД™ P zdajД… siД™ reagowaД‡ w bardzo zЕ‚y sposГіb.");
Database.addText("pl.cauldron.page10", "Mikstura X /  Mikstura X to legenda. MГіwi siД™, Ејe komukolwiek uda siД™ jД… stworzyД‡ i wypiД‡, ten przeniesie siД™ do miejsca gdzie jeszcze nikt nie byЕ‚ / Nie wiem czy ta mikstura to tylko legenda czy nie, ale napiszД™ w tej ksiД…Ејce wszystko co o niej wiem. / Mikstura X jest wspominana w wielu starych legendach i ksiД™gach alchemicznych. Oto podsumowanie informacji ktГіre mogД… ci pomГіc jД… stworzyД‡. Powodzenia! / - MГіwi siД™ Ејe trzeba jД… stworzyД‡ w piД™ciu krokach. / - MГіwi siД™ Ејe nie potrzebne sД… Ејadne lizaki z wyjД…tkiem jednego z krokГіw. / - MГіwi siД™ Ејe moЕјna stworzyД‡ tylko jednД… miksturД™ X na raz.");
Database.addText("pl.cauldron.page11", "- Ten wiersz jest czД™sto cytowany jeЕ›li chodzi o miksturД™ X : / Pierwszego dnia, urodziЕ‚ siД™ pierwszy Cukierek. Ale na dworze byЕ‚o zimno. / Drugiego dnia, Cukierek dostaЕ‚ ojca. Ale na dworze byЕ‚o zimno. / Trzeciego dnia, Cukierek dostaЕ‚ brata. Ale na dworze byЕ‚o zimno. / Czwartego dnia, Cukierek dostaЕ‚ przyjaciela. Ale na dworze byЕ‚o zimno. / PiД…tego dnia, Cukierek dostaЕ‚ kochanka, i moЕјe brzmi to prymitywnie lub gЕ‚upawo, ale Cukierek wreszcie byЕ‚ szczД™Е›liwy, a na dworze byЕ‚o gorД…co.");
Database.addText("br.cauldron.page0", "Receita de poГ§Гµes");
Database.addText("br.cauldron.page1", "ГЌndice / PГЎg. 2 : PoГ§ГЈo de cura / PГЎg. 3 : PoГ§ГЈo Tartaruga / PГЎg. 4-5 : PoГ§ГЈo Antigravidade / PГЎg. 6-7 : PoГ§ГЈo Berserk / PГЎg. 8-9 : PoГ§ГЈo P / PГЎg. 10-11 : PoГ§ГЈo X");
Database.addText("br.cauldron.page2", "PoГ§ГЈo de cura / A poГ§ГЈo de cura Г© uma das mais fГЎceis de ser preparada. SГі precisa de doces. Quando usada em missГµes, ela recuperarГЎ 100 pontos de vida. / InstruГ§Гµes : - Coloque 100 doces no caldeirГЈo - Misture por alguns segundos - Coloque em garrafas / Assim como toda poГ§ГЈo, vocГЄ pode preparar vГЎrias de uma sГі vez. Exemplo: se vocГЄ usar 300 doces em vez de 100, 3 poГ§Гµes de cura serГЈo preparadas.");
Database.addText("br.cauldron.page3", "PoГ§ГЈo Tartaruga / A poГ§ГЈo Tartaruga Г© um pouco mais difГ­cil do que a de vida. VocГЄ precisarГЎ de doces e pirulitos. / VocГЄ serГЎ transformado em uma tartaruga se bebГЄ-la em uma missГЈo. VocГЄ ficarГЎ mais lento, mas tambГ©m muito mais resistente a ataques. / InstruГ§Гµes : - Coloque 50 doces no caldeirГЈo - Adicione 500 pirulitos - Misture por cerca de 10 segundos - Pare de mexer - Adicione 50 doces - Misture novamente por alguns segundos - Coloque em garrafas / E agora, a coisa mais importante que vocГЄ nГЈo pode esquecer: NUNCA vire de costas! Ou vocГЄ nunca mais vai conseguir ficar de pГ©.");
Database.addText("br.cauldron.page4", "PoГ§ГЈo Antigravidade / Essa poГ§ГЈo, inventada pelo ilustre feiticeiro Isaac, permite que vocГЄ resista Г  forГ§a gravitacional da Terra por alguns segundos. / Ela Г© extremamente Гєtil depois de um pulo (se vocГЄ nГЈo sabe pular, devia pensar em obter um pula-pula). / NГЈo Г© muito fГЎcil de ser preparada. VocГЄ terГЎ que controlar cuidadosamente a temperatura do caldeirГЈo. / InstruГ§Гµes : - Coloque 1000 doces no caldeirГЈo - AqueГ§a a ГЎgua atГ© ficar morna - Pare de aquecer - Adicione 1000 doces - AqueГ§a a ГЎgua atГ© ferver - Coloque em garrafas");
Database.addText("br.cauldron.page5", "PoГ§ГЈo Antigravidade : exemplo de uso / \"Voar por um buraco\" / *beba a poГ§ГЈo*");
Database.addText("br.cauldron.page6", "PoГ§ГЈo Berserker / A poГ§ГЈo Berserker transforma vocГЄ em um berserker. / O problema Г© que metade da sua saГєde Г© consumida. / O bom Г© que ela dobra o dano causado por alguns segundos! / Г‰ muito fГЎcil preparar essa poГ§ГЈo, mas sГЈo precisos muitos pirulitos. / InstruГ§Гµes : - Coloque 20.000 pirulitos no caldeirГЈo - Misture atГ© que seus braГ§os comecem a doer - Coloque em garrafas");
Database.addText("br.cauldron.page7", "Aviso importante sobre a poГ§ГЈo Berserker / NГѓO use doces durante o preparo dessa poГ§ГЈo. / Г‰ sГ©rio, nem um sequer. / Г‰ sГ©rio. / Os resultados sГЈo imprevisГ­veis.");
Database.addText("br.cauldron.page8", "PoГ§ГЈo P / A poГ§ГЈo P Г© bem estranha. NГЈo dГЎ para saber qual serГЎ o efeito. Ela pode curar ou causar dano a vocГЄ, aumentar ou reduzir sua forГ§a, e atГ© mesmo transformГЎ-lo em outra pessoa (ou coisa). / E Г© muito difГ­cil de ser preparada! / InstruГ§Гµes : - Coloque 500 doces no caldeirГЈo - Misture por alguns segundos - Pare de mexer - Adicione 100 vezes mais doces que o nГєmero de segundos que vocГЄ mexeu. Exemplo: se mexeu por 4 segundos, adicione 400 doces. NГЈo multiplique essa quantidade, mesmo se quiser preparar mais de uma poГ§ГЈo. - AqueГ§a a ГЎgua atГ© ficar morna - Pare de aquecer - Adicione alguns pirulitos - Misture- Coloque em garrafas!");
Database.addText("br.cauldron.page9", "Saiba como usar a poГ§ГЈo P / Existem algumas regras a serem seguidas para se obter os melhores resultados com a poГ§ГЈo P. Embora elas tenham sido definidas empiricamente, parecem funcionar muito bem. / - Quanto mais vocГЄ usar poГ§Гµes P, mais efeitos estranhos elas terГЈo. / - Se a sua saГєde estiver baixa, recomenda-se beber uma poГ§ГЈo P. / - A poГ§ГЈo P costuma ter reaГ§Гµes bem estranhas quando ingeridas por animais.");
Database.addText("br.cauldron.page10", "PoГ§ГЈo X / A poГ§ГЈo X nГЈo passa de uma lenda. Dizem que quem preparГЎ-la e bebГЄ-la, serГЎ levado a um lugar onde ninguГ©m jamais esteve. / Seja uma lenda ou nГЈo, escreverei nesse livro tudo que sei sobre ela. / A poГ§ГЈo X Г© citada em diversas histГіrias e livros de alquimia. Eis um apanhado de todas as informaГ§Гµes sobre como preparГЎ-la. Boa sorte! / - Dizem que sГЈo precisos 5 passos para preparar a poГ§ГЈo X. / - Dizem que nГЈo sГЈo precisos pirulitos, exceto em um dos passos. / - Dizem que, diferente das outras poГ§Гµes, nГЈo Г© possГ­vel preparar mais de uma poГ§ГЈo X de uma sГі vez.");
Database.addText("br.cauldron.page11", "- Por fim, hГЎ poema que dizem ter relaГ§ГЈo com a poГ§ГЈo X : / No primeiro dia, ele deu vida ao primeiro dos doces. Mas estava frio lГЎ fora. / No segundo dia, ele deu um pai ao doce. Mas estava frio lГЎ fora. / No terceiro dia, ele deu um irmГЈo ao doce. Mas estava frio lГЎ fora. / No quarto dia, ele deu um amigo ao doce. Mas estava frio lГЎ fora. / No quinto dia, ele deu uma amante ao doce. Isso pode parecer bobo, mas o doce estava feliz agora. E estava quente lГЎ fora.");
Database.addText("п»їnl.cauldron.page0", "Handleiding voor brouwen");
Database.addText("nl.cauldron.page1", "Overzicht / Pagina 2 : Levensdrankje / Pagina 3 : Schildpaddrankje / Pagina's 4-5 : Anti-zwaartekracht drankje/ Pagina's 6-7 : Dolzinnig drankje / Pagina's 8-9 : Het P drankje / Pagina's 10-11 : Het X drankje");
Database.addText("nl.cauldron.page2", "Levensdrankje / Het levensdrankje is Г©Г©n van de makkelijkste te brouwen, echt. Het vereist alleen snoepjes. Bij gebruik in zoektochten herstelt het 100 levenspunten. / Instructies : - Plaats 100 snoepjes in je ketel - Mix voor een paar seconden - Stop het in flesjes / Net zoals voor elk ander drankje, kan je natuurlijk de aantallen vermenigvuldigen. Als je bijvoorbeeld 300 snoepjes in plaats van 100 gebruikt, krijg je 3 levensdrankjes.");
Database.addText("nl.cauldron.page3", "Schildpaddrankje / Het schildpaddrankje is iets moeilijker te brouwen dan het levensdrankje. Je hebt snoepjes en lollies nodig. / Als je dit drankje drinkt tijdens een zoektocht, veranderd het je in een schildpad. Je loopt langzamer, maar je bent ook beter bestand tegen aanvallen van je vijanden. / Instructies : - Plaats 50 snoepjes in je ketel - Voeg 500 lollies toe - Mix voor ongeveer 10 seconden - Stop met mixen - Voeg 50 snoepjes toe - Mix weer voor een paar seconden - Stop in flesjes / En nu het meest belangrijke dat je niet moet vergeten : Draai niet op je rug wanneer je een schildpad bent. Je kunt dan niet meer overeind komen.");
Database.addText("nl.cauldron.page4", "Anti-zwaartekracht drankje / Dit drankje, dat uitgevonden is door de beroemde tovenaar Isaac, maakt het mogelijk om de zwaartekracht van de aarde te negeren voor een paar seconden. / Het is vooral nuttig na het springen (als je niet kan springen moet je echt overwegen om een pogostick te halen). / Het is niet heel makkelijk om te brouwen, je moet je ketel opwarmen en goed de temperatuur in de gaten houden. / Instructies : - Stop 1000 snoepjes in je ketel - Warm op tot het water lauw is - Stop met opwarmen - Voeg 1000 snoepjes toe - Warm het water op tot het kookt - Stop het in flesjes");
Database.addText("nl.cauldron.page5", "Anti-zwaartekracht drankje : Gebruikersvoorbeeld / \"Vlieg boven een gat\" / *Drinkt het drankje*");
Database.addText("nl.cauldron.page6", "Dolzinnig drankje / Het dolzinnig drankje transformeert je in een berserker. / Het nadeel is dat het de helft van je levens punten opneemt. / Het voordeel is dat het je kracht verdubbelt voor een paar seconden! / Het brouwen van dit drankje is heel makkelijk, maar je hebt veel lollies nodig. / Hier zijn de instructies : - Stop 20 0000 lollies in je ketel - Mix ze tot je armen er pijn van doen -  Stop het in flesjes");
Database.addText("nl.cauldron.page7", "Belangrijke notitie omtrent het dolzinnig drankje / Voeg GEEN snoepjes toe tijdens het brouwen van dit drankje / Ik bedoel, geen enkele. / Serieus / De resultaten zullen onverwacht zijn. en.cauldron.page8");
Database.addText("nl.cauldron.page8", "Het P drankje / Het P drankje is een vreemd drankje. Je kan niet voorspellen wat het doet. Het kan je levenspunten geven of juist afnemen, het kan je sterker of zwakker maken, of het kan je veranderen in iemand (iets?) anders. / En het is ook nog eens moeilijk te brouwen! / Instructies : - Stop 500 snoepjes in je ketel - Mix voor een paar seconden - Stop met mixen - Voeg 100 keer zoveel snoepjes toe als het aantal seconden dat je hebt gemixt. Als je bijvoorbeeld 4 seconden hebt gemixt, moet je 400 snoepjes toevoegen. Verdubbel dit aantal niet, ook niet als je meer dan Г©Г©n drankje wil maken - Warm het water op tot het lauw is - Stop met opwarmen - Voeg wat lollies toe - Mix - Stop het in flesjes!");
Database.addText("nl.cauldron.page9", "Maak goed gebruik van het P drankje / Er zijn een paar regels die je kunt volgen om betere resultaten te krijgen wanneer je het P drankje drinkt. Hoewel deze regels empirisch werden gedefinieerd, lijken ze vrij goed te werken. / - Hoe meer je het P drankje gebruikt, hoe meer het lijkt alsof ze vreemde effecten hebben. / - Als je levenspunten heel laag zijn, zou je waarschijnlijk een P drankje moeten drinken. / - Dieren die het P drankje drinken lijken er zeer slecht op te reageren.");
Database.addText("nl.cauldron.page10", "Het X drankje / Het X drankje is een legende. Er wordt gezegd dat degene die dit drankje brouwt en drinkt zal reizen naar een plek waar nog nooit iemand is geweest. / Ik weet niet of dit drankje gewoon een legende is of niet, maar ik zal in dit boek alles schrijven wat ik er van weet. / Het X drankje wordt genoemd in veel oude legendes en alchemieboeken. Hier is een overzicht van die informatie die je misschien kan helpen bij het brouwen. Succes! / - Er wordt gezegd dat er 5 stappen nodig zijn voor het brouwen van het X drankje. / - Er wordt gezegd dat er geen lollies nodig zijn, behalve bij Г©Г©n van de stappen. / - Er wordt gezegd dat, in tegenstelling tot andere drankjes, je niet meerdere X drankjes tegelijk kan maken.");
Database.addText("nl.cauldron.page11", "- Tenslotte wordt het volgende gedicht vaak geciteerd als het over het X drankje gaat : / Op de eerste dag, gaf het geboorte aan het eerste Zoet. Maar het was koud buiten. / Op de tweede dag, gaf het het Zoet een vader. Maar het was koud buiten. / Op de derde dag, gaf het het Zoet een broer. Maar het was koud buiten. / Op de vierde dag, gaf het het Zoet een vriend. Maar het was koud buiten. / Op de vijfde dag, gaf het het Zoet een geliefde, en het klinkt misschien simpel en dom, maar nu was het Zoet gelukkig, en was het warm buiten.");
Database.addText("hu.cauldron.page0", "FЕ‘zГ©si ГєtmutatГі");
Database.addText("hu.cauldron.page1", "Г–sszefoglalГі / 2. oldal : GyГіgyГ­tГі ital / 3. oldal : TeknЕ‘s ital / 4.-5. oldal : Anti-gravitГЎciГіs ital / 6.-7. oldal : ЕђrjГ­tЕ‘ ital / 8.-9. oldal : A P ital / 10.-11. oldal : Az X ital");
Database.addText("hu.cauldron.page2", "GyГіgyГ­tГі ital / A gyГіgyГ­tГі italt a legkГ¶nnyebb kifЕ‘zni, de tГ©nyleg. Csak cukorka kell hozzГЎ. A kГјldetГ©sek kГ¶zben felgyГіgyГ­t tГ©ged 100 Г©leterЕ‘ ponttal. / ElkГ©szГ­tГ©s : - Rakj 100 cukorkГЎt az Гјstbe - Keverd pГЎr mГЎsodpercig - Rakd bele Гјvegekbe / AkГЎrcsak a tГ¶bbi italnГЎl, ennek mennyisГ©gГ©t is tГ¶bbszГ¶rГ¶zheted. PГ©ldГЎul ha 300 cukorkГЎt hasznГЎlsz 100 helyett, akkor 3 Г©leterЕ‘ italt fogsz kapni.");
Database.addText("hu.cauldron.page3", "TeknЕ‘s ital / A teknЕ‘s italt egy kicsit nehezebb elkГ©szГ­teni, mint a gyГіgyГ­tГі italt. Ehhez cukorkГЎkra Г©s nyalГіkГЎkra is szГјksГ©ged lesz. / Ha ezt megiszod egy kГјldetГ©s kГ¶zben, akkor teknЕ‘ssГ© vГЎltozol. Lassabban fogsz mozogni, de ugyanakkor jobban ellenГЎllsz majd az ellensГ©g tГЎmadГЎsainak. / ElkГ©szГ­tГ©s : - Rakj 50 cukorkГЎt az Гјstbe - Adj hozzГЎ 500 nyalГіkГЎt - Keverd meg tГ¶bb vagy kevesebb mint 10 mГЎsodpercig - Hagyd abba a keverГ©st - Adj hozzГЎ 50 cukorkГЎt - Keverd meg Гєjra egy pГЎr pillanatig - Rakd bele Гјvegekbe / Г‰s most jГ¶n a legfontosabb, amit nem feledhetsz el : Ha teknЕ‘sbГ©ka lettГ©l, NEHOGY felfordulj. Nem fogsz tudni felkelni.");
Database.addText("hu.cauldron.page4", "Anti-gravitГЎciГіs ital / Ez az ital, amit a hГ­res Isaac varГЎzslГі talГЎlt fel, ellenГЎllГіvГЎ tesz tГ©ged pГЎr mГЎsodpercre a FГ¶ld gravitГЎciГіs erejГ©nek. / Nagyon hasznos lehet egy ugrГЎs utГЎn (ha nem tudsz ugrani, akkor jobban teszed, ha sГјrgЕ‘sen beszerzel egy pogo rudat). / Nem kГ¶nnyЕ± elkГ©szГ­teni, mivel fel kell hevГ­teni az ГјstГ¶t, Г©s figyelemmel kell kГ­sГ©rni a hЕ‘mГ©rsГ©kletГ©t. / ElkГ©szГ­tГ©s : - Rakj 1000 cukorkГЎt az Гјstbe - HevГ­tsd fel, amГ­g langyos nem lesz - Hagyd abba a melegГ­tГ©sГ©t - Adj hozzГЎ 1000 cukorkГЎt - HevГ­tsd addig az ГјstГ¶t, amГ­g el nem kezd forrni benne a vГ­z - Rakd bele Гјvegekbe");
Database.addText("hu.cauldron.page5", "Anti-gravitГЎciГіs ital : pГ©lda a hasznГЎlatra / \"ГЃtrepГјl a szakadГ©k felett\" / *megissza az italt*");
Database.addText("hu.cauldron.page6", "ЕђrjГ­tЕ‘ ital / Az Е‘rjГ­tЕ‘ ital egy Е‘rГјlt harcossГЎ vГЎltoztat tГ©ged. / A hГЎtrГЎnya az, hogy elhasznГЎlja a fГ©l Г©leterЕ‘det. / Az elЕ‘nye viszont, hogy kГ©tszer tГ¶bbet fogsz sebezni pГЎr mГЎsodpercig! / A kifЕ‘zГ©se nagyon egyszerЕ±, de rengeteg nyalГіkГЎba kerГјl. / Itt az elkГ©szГ­tГ©se : - Rakj 20 000 nyalГіkГЎt az Гјstbe - Addig keverd Е‘ket, amГ­g bele nem fГЎjdul a karod - Rakd bele Гјvegekbe");
Database.addText("hu.cauldron.page7", "Fontos tudnivalГі az Е‘rjГ­tЕ‘ itallal kapcsolatban / NE adj hozzГЎ cukorkГЎt az ital kifЕ‘zГ©se kГ¶zben. / Komolyan, egyet se. / De tГ©nyleg. / Az eredmГ©ny vГЎratlan lehet.");
Database.addText("hu.cauldron.page8", "A P ital / A P ital elГ©ggГ© fura. Sose tudhatod, hogy mit fog csinГЎlni. FelgyГіgyГ­that, vagy sebezhet is tГ©ged, erЕ‘sebbГ© vagy gyengГ©bbГ© vГЎlhatsz, vagy akГЎr valakivГ© (valamivГ©?) vГЎltoztathat. / Г‰s nehГ©z kifЕ‘zni! / ElkГ©szГ­tГ©s : - Rakj 500 cukorkГЎt az Гјstbe - Keverd pГЎr mГЎsodpercig - Hagyd abba a keverГ©st - Rakj szГЎzszor annyi cukorkГЎt az Гјstbe, mint amennyi ideig keverted. TehГЎt ha 4 mГЎsodpercen ГЎt keverted, akkor 400 cukorkГЎra lesz szГјksГ©ged. Ezt a mennyisГ©get ne szorozd be, mГ©g akkor sem, ha tГ¶bb mint egy italt szeretnГ©l kifЕ‘zni. - HevГ­tsd fel a vizet, amГ­g langyos nem lesz - Hagyd abba a melegГ­tГ©sГ©t - Adj hozzГЎ pГЎr nyalГіkГЎt - Keverd meg - Rakd bele Гјvegekbe!");
Database.addText("hu.cauldron.page9", "Hogy kihasznГЎld a P italt / Sok szabГЎly van, amit kГ¶vethetsz, hogy jobb eredmГ©nyt kapj a P ital elfogyasztГЎsakor. HabГЎr ezen szabГЎlyokat empirikusan kell Г©rtelmezni, Гєgy tЕ±nik egГ©sz jГіl mЕ±kГ¶dnek. / - MinГ©l tГ¶bhet fogyasztasz el a P italbГіl, annГЎl furГЎbb hatГЎsokat kaphatsz. / - Ha kevГ©s az Г©leterЕ‘d, akkor talГЎn meg kellene innod egy P italt. / - Azon ГЎllatok amik P italt fogyasztanak ГЎltalГЎban nagyon rosszul reagГЎlnak rГЎ.");
Database.addText("hu.cauldron.page10", "Az X ital / Az X ital egy legenda. ГЃllГ­tГіlag bГЎrkinek is sikerГјl kifЕ‘znie Г©s meginnia ezt, az eljutna egy olyan helyre ahol mГ©g senki se jГЎrt azelЕ‘tt. / Nem tudom, hogy ez most tГ©nyleg legenda vagy sem, de leГ­rok rГіla mindent ebbe a kГ¶nyvbe, amit csak tudok rГіla. / Az X italt rengeteg rГ©gi legendГЎban Г©s alkГ­miai kГ¶nyvben megemlГ­tik. Itt egy Г¶sszegzГ©s az informГЎciГіkrГіl, amik segГ­tsГ©gГ©vel talГЎn te magad is kifЕ‘zheted. Sok szerencsГ©t! / - ГЃllГ­tГіlag 5 lГ©pГ©s kell az X ital elkГ©szГ­tГ©sГ©hez. / - ГЃllГ­tГіlag nem kell nyalГіkГЎt hasznГЎlni, kivГ©ve az egyik lГ©pГ©shez. / - ГЃllГ­tГіlag a tГ¶bbi itallal ellentГ©tben az X italbГіl nem lehet egyszerre tГ¶bbet kГ©szГ­teni.");
Database.addText("hu.cauldron.page11", "- VГ©gezetГјl ezt a mondГіkГЎt szoktГЎk felhozni az X itallal kapcsolatban : / Az elsЕ‘ napon egy nagyon Г‰des dolognak adott Г©letet. De odakint hideg volt. / A mГЎsodik napon az Г‰deset odaadta egy apГЎnak. De odakint hideg volt. / A harmadik napon az Г‰deset odaadta egy testvГ©rnek. De odakint hideg volt. / A negyedik napon az Г‰deset odaadta egy barГЎtnak. De odakint hideg volt. / Az Г¶tГ¶dik napon az Г‰deset odaadta egy szeretЕ‘nek, Г©s egyszerЕ±nek, vagy butГЎnak tЕ±nhet, de az Г‰des most boldog volt, Г©s odakint forrГіsГЎg volt.");
Database.addText("fr.cauldron.page0", "Manuel de prГ©paration de potions");
Database.addText("fr.cauldron.page1", "Sommaire / Page 2 : potion de vie / Page 3 : potion de tortue / Pages 4-5 : potion anti-gravitГ© / Pages 6-7 : potion de berserker / Pages 8-9 : la potion P / Pages 10-11 : la potion X");
Database.addText("fr.cauldron.page2", "Potion de vie / La potion de vie est l'une des plus faciles Г  prГ©parer, vraiment. Il faut seulement des bonbons. UtilisГ©e pendant les quГЄtes, elle vous soignera en vous redonnant 100 points de vie. / Instructions : - Mettez 100 bonbons dans votre chaudron - MГ©langez pendant quelques secondes - Mettez en bouteilles / Comme pour n'importe quelle potion, vous pouvez bien sГ»r multiplier les quantitГ©s. Par exemple, si vous utilisez 300 bonbons au lieu de 100, vous obtiendrez 3 potions de vie.");
Database.addText("fr.cauldron.page3", "Potion de tortue / La potion de tortue est un peu plus difficile Г  prГ©parer que la potion de vie. Vous aurez besoin de bonbons et de sucettes. / Si vous buvez cette potion pendant une quГЄte, elle vous transofrmera en tortue. Vous vous dГ©placerez plus lentement, mais vous serez aussi plus rГ©sistant aux attaques de vos ennemis. / Instructions : - Mettez 50 bonbons dans votre chaudron. - Ajoutez 500 sucettes dans votre chaudron - MГ©langez pendant plus ou moins 10 secondes - ArrГЄtez de mГ©langer - Ajoutez 50 bonbons - MГ©langez encore pendant quelques secondes - Mettez en bouteilles / Et maintenant, la chose la plus importante que vous ne devriez jamais oublier : quand vous serez une tortue, SURTOUT ne vous retournez pas. Vous ne seriez pas capable de vous relever.");
Database.addText("fr.cauldron.page4", "Potion anti-gravitГ© / Cette potion, qui a Г©tГ© inventГ©e par le renommГ© sorcier Isaac, vous permet de rГ©sister Г  la force gravitationnelle de la terre pour quelques secondes. / Elle est particuliГЁrement utile aprГЁs avoir sautГ© (si vous ne pouvez pas sauter, vous devriez sГ©rieusement penser Г  obtenir un bГўton sauteur). / Elle n'est pas trГЁs facile Г  prГ©parer, vous aurez besoin de faire chauffer votre chaudron et de surveiller la tempГ©rature avec attention. / Instructions : - Mettez 1000 bonbons dans votre chaudron - Chauffez jusqu'Г  ce que l'eau soit tiГЁde - ArrГЄtez de chauffer - Ajoutez 1000 bonbons - Chauffez jusqu'Г  ce que l'eau bout - Mettez en bouteilles");
Database.addText("fr.cauldron.page5", "Potion anti-gravitГ© : cas d'utilisation / \"Voler au-dessus d'un prГ©cipice\" / *boit la potion*");
Database.addText("fr.cauldron.page6", "Potion de berserker / La potion de berserker vous transforme en un berserker. / L'inconvГ©nient est que cela consomme la moitiГ© de votre vie. / L'avantage est que cela double vos dГ©gГўts pendant quelques secondes ! / PrГ©parer cette potion est trГЁs simple, mais vous aurez besoin de beaucoup de sucettes. / Voici les instructions : - Mettez 20 000 sucettes dans votre chaudron - MГ©langez les jusqu'Г  ce que vos bras vous fassent mal - Mettez en bouteilles");
Database.addText("fr.cauldron.page7", "Avertissement important concernant la potion de berserker / Ne PAS ajouter de bonbon pendant la prГ©paration de cette potion. / Je veux dire, pas un seul. / Vraiment. / Le rГ©sultat serait innatendu.");
Database.addText("fr.cauldron.page8", "La potion P / La potion P est une potion bizarre. Vous ne pouvez pas prГ©dire ce qu'elle va faire. Elle pourrait vous soigner ou vous infliger des dommages, vous rendre plus fort ou plus faible, ou mГЄme vous transofmer en quelqu'un (quelque chose ?) d'autre. / Et en plus elle est dure Г  prГ©parer ! / Instructions : - Mettez 500 bonbons dans votre chaudron - MГ©langez pendant quelques secondes - ArrГЄtez de mГ©langer - Ajoutez 100 fois plus de bonbons que le nombre de secondes pendant lesquelles vous avez mГ©langГ©. Par exemple si vous avez mГ©langГ© pendant 4 secondes, vous devrez ajouter 400 bonbons. Ne multipliez pas cette quantitГ©, mГЄme si vous voulez faire plus d'une potion. - Faites chauffer jusqu'Г  ce que l'eau soit tiГЁde - ArrГЄtez de faire chauffer - Ajoutez des sucettes - MГ©langez - Mettez en bouteilles !");
Database.addText("fr.cauldron.page9", "Faire bon usage de la potion P / Il y a certaines rГЁgles que vous pouvez suivre pour obtenir de meilleurs rГ©sultats en buvant la potion P. Bien que ces rГЁgles aient Г©tГ© Г©tablies de maniГЁre empirique, elles semblent assez bien fonctionner. / - Plus vous utilisez de potions P, plus elles semblent avoir des effets Г©tranges. / - Si votre vie est trГЁs basse, vous devriez probablement utiliser une potion P. / - Les animaux qui boivent une potion P semblent trГЁs mal rГ©agir.");
Database.addText("fr.cauldron.page10", "La potion X / La potion X est une lГ©gende. Il est dit que quiconque parviendrait Г  la prГ©parer et Г  la boire voyagerait jusqu'Г  un endroit oГ№ personne n'est encore jamais allГ©. / Je ne sais pas si cette potion est juste une lГ©gende ou pas, mais je vais lister dans ce livre tout ce que je sais Г  propos d'elle. / La potion X est mentionnГ©e dans de nombreuses vieilles lГ©gendes et livres d'alchimie. Voici un rГ©sumГ© des informations qui pourraient vous aider Г  la prГ©parer. Bonne chance ! / - Il est dit que 5 Г©tapes sont nГ©cessaires Г  la prГ©paration de la potion X. / - Il est dit qu'aucune sucette n'est nГ©cessaire, mis Г  part pour l'une des Г©tapes. / - Il est dit que, contrairement aux autres potions, vous ne pouvez pas prГ©parer plusieurs potions X Г  la fois.");
Database.addText("fr.cauldron.page11", "- Enfin, le poГЁme suivant est souvent citГ© quand on parle de la potion X : / Le premier jour, il donna naissance Г  la toute premiГЁre Sucrerie. Mais il faisait froid dehors. / Le deuxiГЁme jour, il donna Г  la Sucrerie un pГЁre. Mais il faisait froid dehors. / Le troisiГЁme jour, il donna Г  la Sucrerie un frГЁre. Mais il faisait froid dehors. / Le quatriГЁme jour, il donna Г  la Sucrerie un ami. Mais il faisait froid dehors. / Le cinquiГЁme jour, il donna Г  la Sucrerie un amour, et cela peut paraГ®tre simple ou niais, mais maintenant la Sucrerie Г©tait heureuse, et il faisait chaud dehors.");
Database.addText("zh.cauldron.page0", "з‚јиЌЇж‰‹е†Њ");
Database.addText("zh.cauldron.page1", "з›®еЅ• / з¬¬2йЎµпјљз”џе‘ЅиЌЇе‰‚ / з¬¬3йЎµпјљд№ЊйѕџиЌЇе‰‚ / з¬¬4-5йЎµпјљеЏЌй‡ЌеЉ›иЌЇе‰‚ / з¬¬6-7йЎµпјљз‹‚жљґиЌЇе‰‚ / з¬¬8-9йЎµпјљPиЌЇе‰‚ / з¬¬10-11йЎµпјљXиЌЇе‰‚");
Database.addText("zh.cauldron.page2", "з”џе‘ЅиЌЇе‰‚ / з”џе‘ЅиЌЇе‰‚жЇжњЂе®№ж“з‚је€¶зљ„иЌЇе‰‚д№‹дёЂгЂ‚е®ѓж‰ЂйњЂи¦Ѓзљ„зґ жќђеЏЄжњ‰зі–жћњгЂ‚ењЁжЋўзґўдё­дЅїз”Ёз”џе‘ЅиЌЇе‰‚еЏЇдёєдЅ жЃўе¤Ќ100з‚№з”џе‘ЅеЂјгЂ‚ / з‚јиЌЇжЊ‡еЌ—пјљ - е°†100йў—зі–жћњж”ѕе…Ґз‚јиЌЇй‡њ к†ј жђ…ж‹Њж•°з§’ к†ј е°†иЌЇе‰‚иЈ…е…Ґз“¶дё­ / дёЋе…¶д»–иЌЇе‰‚з›ёеђЊпјЊдЅ еЏЇд»ҐењЁдёЂж¬Ўз‚је€¶иї‡зЁ‹дё­дє§е‡єе¤љз“¶иЌЇе‰‚гЂ‚дёѕдѕ‹жќҐиЇґпјЊе¦‚жћњдЅ ж”ѕе…Ґз‚јиЌЇй‡њдё­зљ„жЇ300йў—зі–жћњиЂЊдёЌжЇ100йў—пјЊдЅ е°±иѓЅе¤џеѕ—е€°3з“¶з”џе‘ЅиЌЇе‰‚гЂ‚");
Database.addText("zh.cauldron.page3", "д№ЊйѕџиЌЇе‰‚ / дёЋз”џе‘ЅиЌЇе‰‚з›ёжЇ”пјЊд№ЊйѕџиЌЇе‰‚зљ„з‚је€¶йљѕеє¦и¦ЃзЁЌеѕ®й«дёЂдє›гЂ‚дЅ йњЂи¦Ѓе‡†е¤‡еҐЅзі–жћње’ЊжЈ’жЈ’зі–гЂ‚ / ењЁжЋўзґўдё­е–ќдё‹иї™з§ЌиЌЇе‰‚еЏЇд»ҐжЉЉдЅ еЏж€ђдёЂеЏЄд№ЊйѕџгЂ‚дЅ зљ„з§»еЉЁйЂџеє¦дјљж›ґеЉ зј“ж…ўпјЊдЅ†еЇ№дєЋж•Њдєєж”»е‡»зљ„жЉµжЉ—еЉ›дјљеѕ—е€°жЏђеЌ‡гЂ‚ / з‚јиЌЇжЊ‡еЌ—пјљ - е°†50йў—зі–жћњж”ѕе…Ґз‚јиЌЇй‡њ к†ј е°†500ж №жЈ’жЈ’зі–ж”ѕе…Ґз‚јиЌЇй‡њ к†ј жђ…ж‹Њ10з§’е·¦еЏі к†ј еЃњж­ўжђ…ж‹Њ к†ј еђ‘й‡њдё­еЉ е…Ґ50йў—зі–жћњ к†ј жђ…ж‹Њж•°з§’ к†је°†иЌЇе‰‚иЈ…е…Ґз“¶дё­ / жњЂеђЋпјЊеЌѓдё‡е€«еїдє†жњЂй‡Ќи¦Ѓзљ„дє‹пјљеЅ“дЅ еЏж€ђдёЂеЏЄд№Њйѕџд№‹еђЋпјЊиЇ·дёЌи¦ЃиЅ¬иє«гЂ‚дЅ дјљеє•жњќе¤©з€¬дёЌиµ·жќҐзљ„гЂ‚");
Database.addText("zh.cauldron.page4", "еЏЌй‡ЌеЉ›иЌЇе‰‚ / иї™з§ЌиЌЇе‰‚жЇз”±и‘—еђЌзљ„е·«её€и‰ѕиђЁе…‹ж‰ЂеЏ‘жЋзљ„пјЊе®ѓиѓЅе¤џи®©дЅїз”ЁиЂ…ењЁж•°з§’е†…жЉ—ж‹’ењ°еїѓеј•еЉ›гЂ‚ / ењЁи·іи·ѓеђЋйҐ®з”Ёзљ„ж•€жћњж‹”зѕ¤пј€е¦‚жћњдЅ иїдёЌиѓЅи·іи·ѓзљ„иЇќпјЊдЅ еє”иЇҐи®¤зњџиЂѓи™‘еЋ»жђћдёЂж №еј№и·іжЈ’дє†пј‰гЂ‚ / иї™з§ЌиЌЇе‰‚зљ„з‚је€¶ж–№жі•е№¶дёЌз®ЂеЌ•пјЊдЅ йњЂи¦ЃеЉ зѓ­з‚јиЌЇй‡ње№¶з»†еїѓжЉЉжЏЎжё©еє¦гЂ‚ / з‚јиЌЇжЊ‡еЌ—пјљ - е°†1000йў—зі–жћњж”ѕе…Ґз‚јиЌЇй‡њ к†ј еЉ зѓ­пјЊз›ґе€°ж°ґеѕ®жё© к†ј еЃњж­ўеЉ зѓ­ к†ј еђ‘й‡њдё­еЉ е…Ґ1000йў—зі–жћњ к†ј еЉ зѓ­пјЊз›ґе€°ж°ґжІёи…ѕ к†је°†иЌЇе‰‚иЈ…е…Ґз“¶дё­");
Database.addText("zh.cauldron.page5", "еЏЌй‡ЌеЉ›иЌЇе‰‚пјљдЅїз”Ёе®ћдѕ‹ / вЂњйЈћи·ѓж·±жёЉвЂќ / *е–ќдё‹иЌЇе‰‚*");
Database.addText("zh.cauldron.page6", "з‹‚жљґиЌЇе‰‚ / з‹‚жљґиЌЇе‰‚еЏЇд»Ґе°†дЅїз”ЁиЂ…еЏж€ђдёЂдЅЌз‹‚ж€еЈ«гЂ‚ / е…¶е‰ЇдЅњз”ЁжЇиЂ—жЋ‰дЅ зљ„дёЂеЌЉз”џе‘ЅеЂјгЂ‚ / иЂЊеўћз›Љж•€жћњжЇењЁж•°з§’е†…д»¤дЅ зљ„дј¤е®іеЉ еЂЌпјЃ / з‚је€¶иї™дёЂиЌЇе‰‚зљ„ж–№жі•йќћеёёз®ЂеЌ•пјЊдЅ†дјљж¶€иЂ—жЋ‰е¤§й‡Џзљ„жЈ’жЈ’зі–гЂ‚ / иї™й‡ЊжЇз‚јиЌЇжЊ‡еЌ—пјљ - е°†20 000ж №жЈ’жЈ’зі–ж”ѕе…Ґз‚јиЌЇй‡њ к†ј жђ…ж‹ЊпјЊз›ґе€°дЅ зљ„иѓіи†Љй…ёз—› к†ј е°†иЌЇе‰‚иЈ…е…Ґз“¶дё­");
Database.addText("zh.cauldron.page7", "е…ідєЋз‹‚жљґиЌЇе‰‚зљ„й‡Ќи¦ЃжіЁй‡Љ / дёЌи¦ЃењЁз‚је€¶иЇҐиЌЇе‰‚зљ„иї‡зЁ‹дё­еђ‘й‡њдё­еЉ е…Ґд»»дЅ•зі–жћњгЂ‚ / ж€‘жЇи®¤зњџзљ„пјЊиїћдёЂйў—зі–жћњйѓЅдёЌи¦Ѓж”ѕ / ж€‘е»єи®®еЏ‘и‡Єзњџеїѓ / ж”ѕдє†зљ„иЇќпјЊдјљеЏ‘з”џе‡єдєєж„Џж–™зљ„дє‹");
Database.addText("zh.cauldron.page8", "PиЌЇе‰‚ / PиЌЇе‰‚жЇз›ёеЅ“еҐ‡жЂЄзљ„иЌЇе‰‚гЂ‚жІЎдєєиѓЅйў„жµ‹е®ѓиѓЅиµ·е€°д»Ђд№€дЅњз”ЁгЂ‚е®ѓд№џи®ёдјљжІ»ж„€дЅ пјЊд№џи®ёдјљеЇ№дЅ йЂ ж€ђдј¤е®іпјЊе®ѓеЏЇиѓЅдјљи®©дЅ еЏејєпјЊд№џеЏЇиѓЅдјљи®©дЅ еЏеј±пјЊз”љи‡іиїжњ‰е‡ зЋ‡е°†дЅ еЏж€ђе…¶д»–дєєпј€ж€–е…¶д»–дёњиҐїпјџпј‰ / иЂЊдё”е®ѓзљ„з‚је€¶ж–№жі•д№џз›ёеЅ“е¤Ќжќ‚пјЃ / з‚јиЌЇжЊ‡еЌ—: - е°†500йў—зі–жћњж”ѕе…Ґз‚јиЌЇй‡њ к†ј жђ…ж‹Њж•°з§’ к†ј еЃњж­ўжђ…ж‹Њ к†јеђ‘й‡њдё­еЉ е…Ґ100еЂЌдєЋдЅ жђ…ж‹Њз§’ж•°зљ„зі–жћњгЂ‚дёѕдѕ‹жќҐиЇґпјЊе¦‚жћњдЅ жђ…ж‹Њдє†4з§’й’џпјЊе°±йњЂи¦ЃеЉ е…Ґ400йў—зі–жћњгЂ‚е¦‚жћњдЅ и¦ЃдёЂж¬Ўз‚је€¶е¤љз“¶иЌЇе‰‚пјЊдёЌи¦Ѓе†ЌеЂЌеўћиї™дёЂж•°е­—гЂ‚ - еЉ зѓ­пјЊз›ґе€°ж°ґеѕ®жё© к†ј еЃњж­ўеЉ зѓ­ к†ј еЉ е…ҐдёЂдє›жЈ’жЈ’зі– к†ј жђ…ж‹Њ к†ј е°†иЌЇе‰‚иЈ…е…Ґз“¶дё­пјЃ");
Database.addText("zh.cauldron.page9", "е¦Ґе–„е€©з”ЁPиЌЇе‰‚ / е¦‚жћњдЅ жѓіи®©е–ќдё‹зљ„PиЌЇе‰‚еЏ‘жЊҐж›ґеҐЅзљ„ж•€жћњпјЊеє”еЅ“йЃµе®€д»Ґдё‹и§„е€™гЂ‚е°Ѕз®Ўиї™дє›и§„е€™йѓЅжЇж №жЌ®з»ЏйЄЊжЂ»з»“е‡єжќҐзљ„пјЊдЅ†е®ѓд»¬дјјд№Ћз›ёеЅ“жњ‰ж•€гЂ‚ / -дЅ е–ќиї‡зљ„PиЌЇе‰‚и¶Ље¤љпјЊPиЌЇе‰‚зљ„еҐ‡жЂЄеЉџж•€е°±и¶Ље¤љгЂ‚ / -еЅ“дЅ жЂ§е‘Ѕећ‚еЌ±ж—¶пјЊе–ќдё‹PиЌЇе‰‚дјјд№ЋжЇжЋж™єзљ„йЂ‰ж‹©гЂ‚ / - е–ќдё‹PиЌЇе‰‚зљ„еЉЁз‰©дјјд№Ћдјљжњ‰йќћеёёдёЌи‰Їзљ„еЏЌеє”гЂ‚");
Database.addText("zh.cauldron.page10", "XиЌЇе‰‚ / XиЌЇе‰‚жЇдёЂдёЄдј иЇґгЂ‚жЌ®иЇґи®ѕжі•з‚је€¶е№¶йҐ®з”Ёиї‡иЇҐиЌЇе‰‚зљ„дєєйѓЅдјљиў«йЂЃеѕЂдёЂе¤„дєєиї№жњЄи‡ід№‹ењ°гЂ‚ / ж€‘дёЌзџҐйЃ“иї™з§ЌиЌЇе‰‚жЇеђ¦д»…д»…жЇдёЂдёЄдј иЇґпјЊдЅ†ж€‘дјљењЁиї™жњ¬д№¦дё­е†™дё‹ж€‘ж‰Ђдє†и§Је€°зљ„е…ідєЋе®ѓзљ„дёЂе€‡гЂ‚ / иЇёе¤љеЏ¤иЂЃзљ„дј иЇґе’Њз‚јй‡‘д№¦зљ†ж›ѕжЏђеЏЉXиЌЇе‰‚гЂ‚ж€‘д»Ћдё­жЂ»з»“дє†дёЂдє›еЏЇиѓЅжњ‰еЉ©дєЋдЅ з‚је€¶иЇҐиЌЇе‰‚зљ„дїЎжЃЇгЂ‚зҐќдЅ еҐЅиїђпјЃ / - жЌ®иЇґз‚је€¶XиЌЇе‰‚е…±йњЂ5дёЄж­ҐйЄ¤гЂ‚ / - жЌ®иЇґй™¤е…¶дё­дёЂдёЄж­ҐйЄ¤д№‹е¤–пјЊе…¶д»–ж­ҐйЄ¤е№¶дёЌйњЂи¦Ѓз”Ёе€°жЈ’жЈ’зі–гЂ‚ / - жЌ®иЇґдёЋе…¶д»–иЌЇе‰‚дёЌеђЊпјЊдЅ дёЌиѓЅењЁдёЂж¬Ўз‚је€¶иї‡зЁ‹дё­дє§е‡єе¤љз“¶XиЌЇе‰‚гЂ‚");
Database.addText("zh.cauldron.page11", "- еЅ“жЏђе€°XиЌЇе‰‚ж—¶пјЊдєєд»¬з»Џеёёдјљеј•иї°дё‹йќўиї™й¦–иЇ—пјљ/ ењЁе¤ґдёЂж—ҐпјЊе°±жњ‰дє†з¬¬дёЂйў—зі–жћњгЂ‚дЅ†е¤–йќўжЇе†·зљ„гЂ‚ / ењЁз¬¬дєЊж—ҐпјЊзі–жћњжњ‰дє†з€¶дєІгЂ‚дЅ†е¤–йќўжЇе†·зљ„гЂ‚ / ењЁз¬¬дё‰ж—ҐпјЊзі–жћњжњ‰дє†е…„ејџпјЊдЅ†е¤–йќўжЇе†·зљ„гЂ‚ / ењЁз¬¬е››ж—ҐпјЊзі–жћњжњ‰дє†жњ‹еЏ‹пјЊдЅ†е¤–йќўжЇе†·зљ„гЂ‚ / ењЁз¬¬дє”ж—ҐпјЊзі–жћњжњ‰дє†з€±дєєпјЊж€–и®ёе‡єдєЋеЌ•зєЇпјЊж€–и®ёе‡єдєЋе№јзЁљпјЊдЅ†зі–жћњйќћеёёејЂеїѓпјЊиЂЊе¤–йќўз»€дєЋзѓ­иµ·жќҐдє†гЂ‚");
Database.addText("de.cauldron.page0", "Brauhandbuch");
Database.addText("de.cauldron.page1", "Inhaltsverzeichnis / Seite 2 : Heiltrank / Seite 3 : SchildkrГ¶ten-Trank / Seiten 4-5 : Schwebetrank / Seiten 6-7 : Berserker-Trank / Seiten 8-9 : Der P-Trank / Seiten 10-11 : Der X-Trank");
Database.addText("de.cauldron.page2", "Heiltrank / Der Heiltrank gehГ¶rt zu denen, die sich am einfachsten brauen lassen. In Quests wird er dich mit 100 Lebenspunkten heilen. / Zubereitung : - 100 Bonbons in den Kessel geben - FГјr einige Sekunden umrГјhren - In Flaschen abfГјllen / Wie bei jedem Trank kannst du die Mengen anheben. FГјr 300 Bonbons bekommst du beispielsweise 3 HeiltrГ¤nke.");
Database.addText("de.cauldron.page3", "SchildkrГ¶ten-Trank / Der SchildkrГ¶ten-Trank ist ein wenig komplizierter zu brauen als der Heiltrank. Du wirst Bonbons und Lutscher benГ¶tigen. / In einem Quest verwandelt er dich in eine SchildkrГ¶te. Du wirst dich langsamer bewegen, aber dafГјr widerstandsfГ¤higer sein. / Zubereitung : - 50 Bonbons in den Kessel geben - 500 Lutscher in den Kessel geben - Etwa 10 Sekunden umrГјhren - AufhГ¶ren, umzurГјhren - 50 Bonbons hinzugeben - FГјr einige Sekunden umrГјhren - In Flaschen abfГјllen / Was du nie vergessen solltest : Drehe dich als SchildkrГ¶te NIE auf den RГјcken. Du wГјrdest nicht wieder aufstehen kГ¶nnen.");
Database.addText("de.cauldron.page4", "Schwebetrank / Dieser Trank, erfunden vom bekannten Hexenmeister Isaac, erlaubt es dir, die Gravitationsgesetze fГјr einige Sekunden auГџer Kraft zu setzen. / Er ist besonders nach dem Springen hilfreich (und falls du nicht springen kannst, solltest du erwГ¤gen, dir einen Springstock anzuschaffen). / Er ist nicht einfach zu brauen, du wirst die Temperatur deines Kessels ganz genau Гјberwachen mГјssen. / Zubereitung : - 1000 Bonbons in den Kessel geben - Wasser erhitzen, bis es lauwarm ist - AufhГ¶ren, zu erhitzen - 1000 Bonbons hinzugeben - Wasser erhitzen, bis es lauwarm ist - In Flaschen abfГјllen");
Database.addText("de.cauldron.page5", "Schwebetrank : Fallbeispiel / \"Гњber die Schlucht fliegen\" / *trinkt den Trank*");
Database.addText("de.cauldron.page6", "Berserker-Trank / Der Berserker-Trank verwandelt dich in einen Berserker. / Der Nachteil ist, dass du die HГ¤lfte deiner Lebenspunkte verlierst. / Der Vorteil ist, dass du fГјr einige Sekunden doppelten Schaden austeilst! / Diesen Trank zu brauen ist sehr einfach, aber du wirst eine Menge Lutscher benГ¶tigen. / Zubereitung : - 20 000 Lutscher in den Kessel geben - UmrГјhren, bis die Arme schmerzen - In Flaschen abfГјllen");
Database.addText("de.cauldron.page7", "Wichtiger Hinweis bezГјglich des Berserker-Tranks / Gib wГ¤hrend des Brauvorgangs KEINE Bonbons hinzu. / Kein einziges. / Wirklich. / Die Folgen wГ¤ren von ungeahntem AusmaГџ.");
Database.addText("de.cauldron.page8", "Der P-Trank / Der P-Trank ist seltsam. Du kannst nicht voraussagen, was er auslГ¶sen wird. Er kГ¶nnte dich heilen, oder die Schaden zufГјgen, dich stГ¤rker oder schwГ¤cher machen, oder dich sogar in etwas anderes verwandeln. / AuГџerdem ist es schwierig, ihn zu brauen! / Zubereitung : - 500 Bonbons in den Kessel geben - FГјr einige Sekunden umrГјhren - AufhГ¶ren, umzurГјhren - 100 Bonbons fГјr jede Sekunde, in der du umgerГјhrt hast, hinzugeben. Bei 4 Sekunden umrГјhren wГ¤ren das 400 Bonbons. Die Mengen hier nicht abГ¤ndern. - Wasser erhitzen, bis es lauwarm ist - AufhГ¶ren, zu erhitzen - Einige Lutscher hinzugeben - UmrГјhren - In Flaschen abfГјllen!");
Database.addText("de.cauldron.page9", "Nutze den P-Trank weise / Es gibt einige Regeln, denen du folgen kannst, um alles aus P-TrГ¤nken herauszuholen. Diese Regeln scheinen gut zu funktionieren, obgleich sie nur auf Erfahrungswerten beruhen. / - Je mehr P-TrГ¤nke du trinkst, desto merkwГјrdigere Auswirkungen scheinen sie zu haben. / - Wenn deine Gesundheit sehr niedrig ist, solltest du am besten einen P-Trank trinken. / - Tiere scheinen auf P-TrГ¤nke sehr negativ zu reagieren.");
Database.addText("de.cauldron.page10", "Der X-Trank / Um den X-Trank rankt sich eine Legende. Es wird gesagt, dass ein jeder, der imstande ist, ihn zu brauen, an einen Ort reisen wГјrde, den noch keiner zuvor gesehen hГ¤tte. / Ich weiГџ nicht, ob dieser Trank wirklich nur eine Legende ist oder nicht, aber ich werde in dieses Buch alles schreiben, was ich Гјber ihn weiГџ. / Der X-Trank wird vielen alten Legenden und AlchemiebГјchern erwГ¤hnt. Es folgt eine Zusammenfassung Гјber den Brauvorgang. Viel GlГјck! / - FГјr das Brauen des X-Tranks scheinen 5 Schritte notwendig zu sein. / - Bis auf einen Schritt sollen keine Lutscher verwendet werden. / - Angeblich ist es unmГ¶glich, mehrere X-TrГ¤nke gleichzeitig zu brauen.");
Database.addText("de.cauldron.page11", "- Das folgende Gedicht wird hГ¤ufig zitiert, wenn es um den X-Trank geht: / Am ersten Tag wurde das allererste Bonbon geboren. Aber drauГџen war es kalt. / Am zweiten Tag bekam das Bonbon einen Vater. Aber drauГџen war es kalt. / Am dritten Tag bekam das Bonbon einen Bruder. Aber drauГџen war es kalt. / Am vierten Tag bekam das Bonbon einen Freund. Aber drauГџen war es kalt. / Am fГјnften Tag bekam das Bonbon einen Liebhaber, und das mag schlicht oder naiv klingen, aber jetzt war das Bonbon glГјcklich. Und drauГџen war es warm.");
Database.addText("se.cauldron.page0", "Г–lbryggning manual");
Database.addText("se.cauldron.page1", "Sammanfattning / sida 2 : HГ¤lsa dryck / sida 3 : SkГ¶ldpadda dryck / Sida 4-5 : Anti-gravitation dryck / Sida 6-7 : Galen dryck / Pages 8-9 : Den P dryck / Pages 10-11 : Den X dryck");
Database.addText("se.cauldron.page2", "HГ¤lsa dryck / Det hГ¤lsa dryck Г¤r nГҐgon av det enkel till brygga, verkligen. Den endast behov konfekt. AnvГ¤nds i mГҐl, den skall bota du av givande du tillbaka 100 hГ¤lsa poГ¤ng. / Instruktioner : - SГ¤tta 100 konfekt i er kittel - Blanda fГ¶r en fГҐ sekunder - SГ¤tta inГҐt flaskor / Strax som fГ¶r nГҐgra dryck, du kan naturligtvis fГ¶rГ¶ka det kvantiteter. Till exempel, om du utnyttja 300 konfekt istГ¤llet fГ¶r 100, kommer du fГҐ 3 hГ¤lsa dryck.");
Database.addText("se.cauldron.page3", "Turtle potion / Det skГ¶ldpadda dryck Г¤r en skГ¤rva hГҐrdare till brygd Г¤n det hГ¤lsa dryck. Du skall behГ¶ver bГҐde konfekt samt sГ¶tsaker. / Om du dricka detta dryck i en mГҐl, den skall fГ¶rГ¤ndring du in i en skГ¶ldpadda. Du skall gГҐ trГ¶g, men du skall ocksГҐ mГҐ vidare motstГҐndskraftig till du fiender attacker. / Instruktioner : - SГ¤tta 50 konfekt i din kittel - Foga 500 sГ¶tsaker i din kittel - Blanda under mer eller mindre 10 sekunder - Sluta blanda - Foga 50 konfekt - Blanda igen fГ¶r nГҐgra sekunder - SГ¤tta till flaskor / Och nu den mest viktig sak du skall aldrig glГ¶mma : nГ¤r du skall bli en skГ¶ldpadda, INTE vГ¤nda. Du skulle inte kunna stiga upp.");
Database.addText("se.cauldron.page4", "Anti-gravitation dryck / Detta dryck, vilket var uppfann av vГ¤lkГ¤nt trollkarl Isaac, tillГҐter du till motstГҐ till jordens gravitation kraft fГ¶r en nГҐgra sekunder. / Det Г¤r sГ¤rskilt anvГ¤ndbart efter att hoppa ( om du inte kan hoppa , bГ¶r du allvarligt Г¶vervГ¤ga att skaffa en pogo stick ) . / Det Г¤r inte lГ¤tt att brygga , mГҐste du vГ¤rma upp din kittel och titta pГҐ temperaturen noggrant . / Instruktioner : - Put 1000 godisar i din kittel - Hetta upp tills vattnet Г¤r ljummet - Sluta uppvГ¤rmning - LГ¤gg 1000 godisar - VГ¤rm upp tills vattnet kokar - tappas pГҐ flaskor");
Database.addText("se.cauldron.page5", "Anti - gravitation drycken : anvГ¤ndningsfall / \" flyga Г¶ver ett gap \" / * dricker drycken *");
Database.addText("se.cauldron.page6", "Berserk potion / The bГ¤rsГ¤rkagГҐng trolldryck fГ¶rvandlar dig till en berserker . / Nackdelen Г¤r att den fГ¶rbrukar hГ¤lften av ditt liv . / FГ¶rdelen Г¤r att det fГ¶rdubblar dina skador under nГҐgra sekunder ! / Brygga detta trolldrycker Г¤r mycket enkelt , men du kommer att behГ¶va en hel del klubbor . / HГ¤r Г¤r instruktionerna : - Put 20 000 klubbor i din kittel - blanda dem tills armarna Г¤r ont - tappas pГҐ flaskor");
Database.addText("se.cauldron.page7", "Viktigt meddelande angГҐende bГ¤rsГ¤rkagГҐng potion / INTE lГ¤gga nГҐgot godis vid bryggning denna dryck . / Jag menar , inte en enda. / Verkligen . / Resultat vore ovГ¤ntat .");
Database.addText("se.cauldron.page8", "P potion / P potion Г¤r en konstig en . Du kan inte fГ¶rutsГ¤ga vad det kommer att gГ¶ra . Det kan bota dig eller skada dig , gГ¶r dig starkare eller svagare , eller ens vГ¤nda dig till nГҐgon ( nГҐgot ? ) Annat . / Och det Г¤r ocksГҐ svГҐrt att brygga ! / Instruktioner : - Put 500 godisar i din kittel - Mix i nГҐgra sekunder - Stoppa mixning - LГ¤gg 100 gГҐnger mer godis Г¤n det antal sekunder som du blandat . Till exempel om du blandat under 4 sekunder , mГҐste du lГ¤gga 400 godisar . Inte multiplicera inte denna mГ¤ngd , Г¤ven om du vill gГ¶ra mer Г¤n en dryck . - VГ¤rm upp tills vattnet Г¤r ljummet - Sluta uppvГ¤rmning - LГ¤gg nГҐgra klubbor - Mix - tappas pГҐ flaskor !");
Database.addText("se.cauldron.page9", "GГ¶r en bra anvГ¤ndning av P potion / Det finns vissa regler som du kan fГ¶lja fГ¶r att fГҐ bГ¤ttre resultat nГ¤r man dricker P drycken . Г„ven om dessa regler definierades empiriskt , de verkar fungera ganska bra . / - Ju mer du anvГ¤nder P potions , ju mer de verkar ha konstiga effekter . / - Om din hГ¤lsa Г¤r mycket lГҐg , bГ¶r du dricka antagligen en P dryck . / - Djur som dricker P potions verkar reagera pГҐ ett mycket dГҐligt sГ¤tt .");
Database.addText("se.cauldron.page10", "X potion / X potion Г¤r en legend . Det sГ¤gs att den som lyckas brygga det och dricka det skulle resa till en plats dГ¤r ingen har varit fГ¶rut . / Jag vet inte om denna dryck Г¤r bara en legend eller inte , men jag kommer att skriva i denna bok allt jag vet om det . / X potion nГ¤mns i mГҐnga gamla legender och bГ¶cker alkemi . HГ¤r Г¤r en sammanfattning av information som kan hjГ¤lpa dig att brygga det . Lycka till ! / - Det Г¤r sagt att 5 steg Г¤r nГ¶dvГ¤ndigt fГ¶r att brygga X drycken . / - Det sГ¤gs att inga klubbor krГ¤vs , utom fГ¶r ett av stegen . / - Det Г¤r sagt att , till skillnad fГ¶r andra drycker , kan du inte brygga flera X potions pГҐ en gГҐng .");
Database.addText("se.cauldron.page11", "- Slutligen Г¤r fГ¶ljande dikt ofta citeras nГ¤r det kommer till X potion : / PГҐ den fГ¶rsta dagen , gav det upphov till den allra fГ¶rsta Sweet. Men det var kallt utanfГ¶r . / Den andra dagen , gav det sГ¶ta en far . Men det var kallt utanfГ¶r . / PГҐ den tredje dagen , gav det sГ¶ta en bror . Men det var kallt utanfГ¶r . / PГҐ den fjГ¤rde dagen , gav det sГ¶ta en vГ¤n . Men det var kallt utanfГ¶r . / PГҐ den femte dagen , gav det sГ¶ta en Г¤lskare , och det kan lГҐta enkelt och dumt , men nu Sweet var glad , och det var varmt utanfГ¶r .");
Database.addText("id.cauldron.page0", "Buku petunjuk membuat obat (potion)");
Database.addText("id.cauldron.page1", "Rangkuman / Halaman 2 : Obat kesehatan / Halaman 3 : Obat kura-kura / Halaman 4-5 : Obat anti-gravitasi / Halaman 6-7 : Obat pengamuk / Halaman 8-9 : Obat P / Halaman 10-11 : Obat X");
Database.addText("id.cauldron.page2", "Obat kesehatan / Obat kesehatan ini adalah salah satu obat yang mudah untuk dibuat, sungguh. Obat ini hanya memerlukan permen. Digunakan di pencarian (quest), obat ini akan menyembuhkanmu dengan memberimu kembali 100 poin nyawa. / Petunjuk : - Taruh 100 permen di kualimu - Aduk selama beebrapa detik - Taruh di botol / Seperti oabt lainnya, kamu dapat melipatgandakan jumlahnya. Contohnya, jika kamu tidak menggunakan 100 permen, melainkan 300 permen, kamu akan mendapatkan 3 obat kesehatan.");
Database.addText("id.cauldron.page3", "Obat kura-kura / Obat kura-kura sedikit lebih sulit untuk dibuat dibandingkan obat kesehatan. Kamu akan membutuhkan permen dan lollipop. / Jika kamu meminum obat ini dalam pencarian (quest), obat ini akan membuatmu menjadi kura-kura. Kamu akan bergerak lebih lambat, tapi kamu juga dapat lebih bertahan terhadap serangan musuhmu. / Petunjuk : - Taruh 50 permen dalam kuali - Tambahkan 500 lollipop kedalam kualimu - Aduk selama kurang lebih 10 detik - Berhenti mengaduk - Tambahkan 50 permen - Aduk lagi selama beberapa detik - Taruh ke botol / Dan sekarang hal paling penting yang seharusnya kamu tidak lupa : sekali kamu menjadi kura-kura, JANGAN membalik. Kamu tidak akan dapat bangun.");
Database.addText("id.cauldron.page4", "Obat anti-gravitasi / Obat ini, yang ditemukan oleh tukang sihir terkenal Isaac, memungkinkan kamu bertahan dari tarikan gravitasi bumi selama beberapa detik. / Obat ini berguna khususnya setelah melompat (jika kamu tidak dapat melompat, kamu harus mempertimbangkan mendapatkan sebuah tongkat pogo). / Obat ini tidak mudah untuk dibuat, kamu butuh memanaskan kualimu dan memperhatikan suhunya dengan hati-hati. / Petunjuk : - Taruh 1000 permen di kualimu - Panaskan sampai airnya hangat-hangat kuku - Berhenti memanaskan - Tambahkan 1000 permen - Panaskan tinggal airnya mendidih - Taruh ke botol");
Database.addText("id.cauldron.page5", "Obat anti-gravitasi : contoh penggunaan / \"Melayang diatas sebuah celah\" / *meminum obatnya*");
Database.addText("id.cauldron.page6", "Obat pemberontak / Obat pemberontak ini mengubah kamu menjadi pemberontak. / Kekurangannya adalah obat ini menghabiskan setengah dari nyawamu. / Keuntungannya adalah obat ini melipatgandakan seranganmu selama beberapa detik! / Membuat obat ini sangat sederhana, tapi kamu akan membutuhkan banyak lollipop. / Ini adalah petunjuknya : - Taruh 20 000 lollipop di kualimu - Aduk sampai lenganmu kesakitan - Taruh ke botol");
Database.addText("id.cauldron.page7", "Pemberitahuan penting seputar obat pemberontak / JANGAN menambahkan permen ketika membuat obat ini. / Maksud saya, sebuah pun. / Sungguh. / Hasilnya akan tidak terduga.");
Database.addText("id.cauldron.page8", "Obat P / Obat P adalah obat yang aneh. Kamu tidak dapat memprediksikan apa yang akan dilakukan obat ini. Obat ini dapat menyembuhkan atau menyerangmu, membuatmu lebih kuat atau lebih lemah, atau bahkan mengubahmu menjadi seseorang (sesuatu?) yang lain. / Dan obat ini juga sulit untuk dibuat! / Petunjuk : - Taruh 500 permen di kualimu - Aduk selama beberapa detik - Berhenti mengaduk - Tambahkan 100 kali lebih banyak permen dari waktu kamu mengaduk. Contohnya jika kamu mengaduk selama 4 detik, kamu harus menambahkan 400 permen. Jangan melipatgandakan jumlah ini, bahkan jika kamu ingin membuat lebih dari satu obat. - Panaskan sampai airnya hangat-hangat kuku - Berhenti memanaskan - Tambahkan beberapa lollipop - Aduk - Taruh ke botol!");
Database.addText("id.cauldron.page9", "Gunakan obat P sebaik-baiknya / Ada beberapa aturan yang dapat kamu ikuti untuk mendapatkan hasil yang lebih baik ketika meminum obat P. Walaupun aturan-aturan ini dijelaskan empirically, tampaknya mereka bekerja cukup baik. / - Semakin banyak kamu menggunakan obat P, mereka tampaknya mempunyai efek yang aneh. / - Jika nyawamu sangat rendah, mungkin kamu harus minum obat P. / - Binatang yang meminum obat P tampaknya bereaksi dengan cara yang sangat buruk.");
Database.addText("id.cauldron.page10", "Obat X / Obat X adalah obat yang legendaris. Katanya siapapun yang dapat membuat dan meminum obat ini akan pergi ke suatu tempat yang belum pernah dikunjungi siapapun. / Saya tidak tahu kalau obat ini legendaris atau tidak, tapi saya akan menulis semua yang saya ketahui di buku ini. / Obat X sering disebut di banyak buku legenda tua dan buku alkimia. Ini adalah ringkasan dari informasi yang dapat membantumu membuatmu. Semoga sukses! / - Katanya ada 5 langkah yang perlu dilakukan untuk membuat obat X. / - Katanya tidak ada lollipop yang dibutuhkan, kecuali dalam salah satu lengkahnya. / - Katanya, tidak seperti obat-obat lain, kamu tidak dapat membuat lebih dari satu obat X dalam satu kali.");
Database.addText("id.cauldron.page11", "- Akhirnya, puisi ini sering dikutip di bagian obat X : / Pada hari pertama, dia melahirkan Penganan yang paling pertama. Tapi diluar dingin. / Pada hari kedua, dia memberikan Penganan tersebut ayah. Tapi diluar dingin. / Pada hari ketiga, dia memberikan Penganan tersebut saudara. Tapi diluar dingin. / Pada hari keempat, dia memberikan Penganan tersebut teman. Tapi diluar dingin. / Pada hari kelima, dia memberikan Penganan tersebut pasangan, dan kedengarannya sederhana atau bodoh, tapi sekarang Penganan tersebut senang, dan diluar panas.");
///<reference path="./../../main/Quest.ts"/>
// -------------------------------
// We register on the Arena module
// -------------------------------
function HardcorePlatformer_getNewQuest(game) {
    return new HardcorePlatformer_Quest(game);
}

TheArenaModule.addQuest(new TheArenaModuleQuest("hardcorePlatformer", HardcorePlatformer_getNewQuest.bind(this)));

// -------------------------------------------------------------------------------
// We create our HardcorePlatformer_Quest class, which herits from the Quest class
// -------------------------------------------------------------------------------
var HardcorePlatformer_Quest = (function (_super) {
    __extends(HardcorePlatformer_Quest, _super);
    // Constructor
    function HardcorePlatformer_Quest(game) {
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(240, 13);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);

        // Add the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 8));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add the ground
        this.addGround();

        // Add the spikes
        this.addAllSpikes(this.getGame().getPlayer().getMaxHp() * 100);

        // Add the message
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("This is going to be HARDCORE."));
    }
    // Public methods
    HardcorePlatformer_Quest.prototype.castPlayerAntiGravityPotion = function () {
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("Damn. These potions don't seem to work here :("));
    };

    HardcorePlatformer_Quest.prototype.castPlayerTeleport = function () {
        _super.prototype.castPlayerTeleport.call(this, new Pos(0, 8), new Pos(1, 1));
    };

    HardcorePlatformer_Quest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(true);
    };

    HardcorePlatformer_Quest.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("Yay, you made it!! You can now tell all your friends."));
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You failed. Try again :)"));
        }

        // We call the endQuest method of our mother class
        _super.prototype.endQuest.call(this, win);
    };

    HardcorePlatformer_Quest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            // Update entities
            this.updateEntities();
        }

        // Draw
        this.preDraw();
        this.getRenderArea().drawArray(Database.getAscii("arena/hardcorePlatformer/background"), this.getRealQuestPosition().x, this.getRealQuestPosition().y);
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, false), this.getGame().goToMainMap.bind(this.getGame()), this.getGame().getStatusBar().selectTabByType.bind(this.getGame().getStatusBar(), StatusBarTabType.THE_ARENA), this.getGame().goToTheArena.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // Private methods
    HardcorePlatformer_Quest.prototype.addAllSpikes = function (damage) {
        // Add long spikes on the roof (to avoid the usage of rocket boots)
        this.addSpikes(new Spikes(this, new Pos(0, 0), 300, damage, true));

        // Add the first group of spikes
        this.addSpikes(new Spikes(this, new Pos(25, 8), 4, damage));
        this.addSpikes(new Spikes(this, new Pos(37, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(49, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(60, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(71, 8), 6, damage));

        // Add the second group
        this.addSpikes(new Spikes(this, new Pos(112, 8), 6, damage));
        this.addSpikes(new Spikes(this, new Pos(121, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(127, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(133, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(139, 8), 2, damage));

        // Add the third group
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(196, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(198, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(200, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(202, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(204, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(206, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(208, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(210, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(212, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(214, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(216, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(218, 8), 2, damage));
        this.addSpikes(new HardcorePlatformer_Spikes(this, new Pos(220, 8), 2, damage));
        this.addSpikes(new Spikes(this, new Pos(222, 8), 2, damage));
    };

    HardcorePlatformer_Quest.prototype.addGround = function () {
        var wall = new Wall(this, new Pos(0, 0));
        wall.addBox(new Pos(0, 9), new Pos(240, 3));
        this.addEntity(wall);
    };

    HardcorePlatformer_Quest.prototype.addSpikes = function (spikes) {
        this.addEntity(spikes);
    };

    HardcorePlatformer_Quest.prototype.thePlayerWon = function () {
        if (this.getGame().getPlayer().getGlobalPosition().x >= 240)
            return true;

        // Else we return false
        return false;
    };
    return HardcorePlatformer_Quest;
})(Quest);
///<reference path="./../../main/Spikes.ts"/>
var HardcorePlatformer_Spikes = (function (_super) {
    __extends(HardcorePlatformer_Spikes, _super);
    function HardcorePlatformer_Spikes() {
        _super.apply(this, arguments);
    }
    // Public methods
    HardcorePlatformer_Spikes.prototype.update = function () {
        if (this.getQuest().getGame().getPlayer().getGlobalPosition().x > this.getGlobalPosition().x - 5)
            this.setDead(true);

        // Call the mother class update method
        _super.prototype.update.call(this);
    };
    return HardcorePlatformer_Spikes;
})(Spikes);
///<reference path="./../../main/Quest.ts"/>
// -------------------------------
// We register on the Arena module
// -------------------------------
function PeacefulForest_getNewQuest(game) {
    return new PeacefulForest_Quest(game);
}

TheArenaModule.addQuest(new TheArenaModuleQuest("peacefulForest", PeacefulForest_getNewQuest.bind(this)));

// ---------------------------------------------------------------------------
// We create our PeacefulForest_Quest class, which herits from the Quest class
// ---------------------------------------------------------------------------
var PeacefulForest_Quest = (function (_super) {
    __extends(PeacefulForest_Quest, _super);
    // -----------
    // Constructor
    // -----------
    function PeacefulForest_Quest(game) {
        // Call the constructor of our mother class, the Quest class (don't change that)
        _super.call(this, game);

        // Resize the quest
        this.resizeQuest(100, 10);

        // Add collision boxes around
        this.addPlayerCollisionBoxes(true, false, true, true);

        // Handle the player
        this.getGame().getPlayer().loadCandyBoxCharacter(this);
        this.getGame().getPlayer().setGlobalPosition(new Pos(0, 9));
        this.configPlayerOrClone(this.getGame().getPlayer());
        this.addEntity(this.getGame().getPlayer());

        // Add some treeeeees (it uses a private method below)
        this.addATree(12);
        this.addATree(25);
        this.addATree(28);
        this.addATree(35);
        this.addATree(39);
        this.addATree(42);
        this.addATree(48);
        this.addATree(56);
        this.addATree(59);
        this.addATree(65);
        this.addATree(79);
        this.addATree(87);
        this.addATree(91);

        // Add a ground because we don't want our trees to fall down (it uses a private method below)
        this.addGround();

        // Add the first message in the quest log
        this.getGame().getQuestLog().addMessage(new QuestLogMessage("You enter the peaceful forest. Trees all around you. It's a great place to calm down."));
    }
    // --------------
    // Public methods
    // --------------
    // Method used to configure the player (called in the constructor)
    PeacefulForest_Quest.prototype.configPlayerOrClone = function (entity) {
        entity.setQuestEntityMovement(new QuestEntityMovement(new Pos(1, 0)));
        entity.getQuestEntityMovement().setGravity(true);
        entity.getQuestEntityMovement().setWormsLike(false);
    };

    // Method called by the update method when the quest is over
    PeacefulForest_Quest.prototype.endQuest = function (win) {
        if (win) {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You reached the end of the peaceful forest. It really wasn't too hard."));
        } else {
            this.getGame().getQuestLog().addMessage(new QuestLogMessage("You died in the peaceful forest. How did you even manage to do that?"));
        }

        // Call the endQuest method of our mother class, the Quest class
        _super.prototype.endQuest.call(this, win);
    };

    // Method called automatically ten times per second. It updates everything in the quest
    PeacefulForest_Quest.prototype.update = function () {
        if (this.getQuestEnded() == false) {
            if (this.thePlayerWon()) {
                this.endQuest(true);
                return;
            }

            if (this.getGame().getPlayer().shouldDie()) {
                this.endQuest(false);
                return;
            }

            // Update entities (it makes everything move, it handles collisions, gravity, damage...)
            this.updateEntities();
        }

        // Draw everything
        this.preDraw();
        this.drawEntities();
        this.drawAroundQuest();
        this.addExitQuestButton(new CallbackCollection(this.endQuest.bind(this, false), this.getGame().goToMainMap.bind(this.getGame()), this.getGame().getStatusBar().selectTabByType.bind(this.getGame().getStatusBar(), StatusBarTabType.THE_ARENA), this.getGame().goToTheArena.bind(this.getGame())), "buttonExitQuestKeeping");
        this.postDraw();
    };

    // --------------
    // Public methods
    // --------------
    // Method called in the constructor. It is used to add a tree at a given x position.
    PeacefulForest_Quest.prototype.addATree = function (x) {
        // Create the tree
        var tree = new PeacefulForest_Tree(this, new Pos(x, 9));

        // Set the tree's health bar
        tree.setHealthBar(new QuestEntityHealthBar(tree, new Pos(3, 1)));

        // Finally add the tree to the quest
        this.addEntity(tree);
    };

    // Method called in the constructor. It is used to add a ground to the quest, therefore preventing the trees to fall down.
    PeacefulForest_Quest.prototype.addGround = function () {
        // Create the ground entity
        var ground = new Wall(this, new Pos(0, 10));

        // Add the ground box (100 characters width, 1 character height)
        ground.addBox(new Pos(0, 0), new Pos(100, 1));

        // Add the ground entity
        this.addEntity(ground);
    };

    // Method called by the update method above to know if the player won the quest
    PeacefulForest_Quest.prototype.thePlayerWon = function () {
        if (this.getGame().getPlayer().getGlobalPosition().x >= 100)
            return true;

        // Else we return false
        return false;
    };
    return PeacefulForest_Quest;
})(Quest);
///<reference path="../../main/QuestEntity.ts"/>
var PeacefulForest_Tree = (function (_super) {
    __extends(PeacefulForest_Tree, _super);
    // Constructor
    function PeacefulForest_Tree(quest, pos) {
        _super.call(this, quest, pos, new Naming("A tree", "a tree"), new RenderArea(3, 1), new Pos(0, 0), new CollisionBoxCollection(new CollisionBox(this, new Pos(0, 0), new Pos(3, 1))), new QuestEntityMovement());

        // Set gravity : the tree can fall (even if it probably won't because it lays on the ground)
        this.getQuestEntityMovement().setGravity(true);

        // Set destructible
        this.setDestructible(true);
        this.setMaxHp(50);
        this.setHp(50);

        // Set the ascii art
        this.getRenderArea().drawString("|||", 0, 0);

        // Add the tree's weapon. It will be attacking with its leaves.
        this.addQuestEntityWeapon(new QuestEntityWeapon(this.getQuest(), this, new Naming("Its leaves", "its leaves"), new CollisionBoxCollection(new CollisionBox(this, new Pos(-1, -1), new Pos(5, 2))), 1));

        // Set the weapon's delay
        this.getLastQuestEntityWeapon().getCloseCombatDelay().setFixedDelay(5);
    }
    return PeacefulForest_Tree;
})(QuestEntity);
